# -----------------------------------------------------------------------------
# Core Inform makescript - to be turned into a makefile by inweb
# -----------------------------------------------------------------------------
# Inform is a suite of software with many components and a full makefile for
# it would be highly repetitive, and hard to maintain. Instead we use this
# script for making that makefile; it's human-readable and editable.
# To perform the translation, run this as a shell command:
#
#    $ ../inweb/Tangled/inweb -prototype scripts/makescript.txt -makefile makefile
#
# In the syntax of this file, only curly braces {thus} represent special
# features: everything else is raw makefile syntax, copied directly across.
# -----------------------------------------------------------------------------
# The following ensures that basic tools such as CC and LINK have suitable
# definitions.

{platform-settings}

INTEST = ../intest/Tangled/intest
INTESTX = ../intest/Tangled/intest
INTESTWEB = ../intest
INWEB = ../inweb/Tangled/inweb
INWEBX = ../inweb/Tangled/inweb
INTERX = inter/Tangled/inter
INBUILDX = inbuild/Tangled/inbuild

# The "-" at the front here tells make to load this file if it exists, and
# continue otherwise. If it does exist, it will define the symbol INTEGRATION.
# That signals that the user wants to integrate the intools into the UI app;
# if it's not defined, the user is just playing with the intools in isolation.
# (Different versions of this file are needed on different operating systems.)

-include ../make-integration-settings.mk

# -----------------------------------------------------------------------------
# Most components of Inform are C programs written as literate-programming
# webs, making use of shared libraries of code called modules. We list them.

# Each module in turn is defined by a symbol name such as NAME, a tool name
# (usually the same but in lower case), and lastly a location relative to the
# root of the core Inform distribution.
# In the eventual makefile, the symbol NAMEWEB is defined as its location.

{module} FOUNDATION foundation ../inweb/foundation-module
{module} WORDS words inbuild/words-module
{module} INFLECTIONS inflections inform7/inflections-module
{module} SYNTAX syntax inbuild/syntax-module
{module} LINGUISTICS linguistics inform7/linguistics-module
{module} KINDS kinds inform7/kinds-module
{module} PROBLEMS problems inform7/problems-module
{module} CORE core inform7/core-module
{module} IF if inform7/if-module
{module} INDEX index inform7/index-module
{module} MULTIMEDIA multimedia inform7/multimedia-module
{module} INTER inter inter/inter-module
{module} BUILDING building inter/building-module
{module} CODEGEN codegen inter/codegen-module
{module} HTML html inbuild/html-module
{module} ARCH arch inbuild/arch-module
{module} INBUILD inbuild inbuild/inbuild-module

# First, the tools we need to make, using the same declaration notation.
# In the eventual makefile, the symbol NAMEWEB is the location of NAME;
# the symbol NAMEMAKER is the individual make file for the tool; and
# the symbol NAMEX is the actual executable which the tool compiles into.
# After its declaration, we list all modules needed to compile the tool.

{tool} INBLORB inblorb inblorb

{tool} INDOC indoc indoc

{tool} INFORM7 inform7 inform7

{tool} INPOLICY inpolicy inpolicy

{tool} INRTPS inrtps inrtps

{tool} INBUILDTOOL inbuild inbuild

{tool} INTERTOOL inter inter

# Inform 6 is not a web, so we have to give it special treatment:

INFORM6X = inform6/Tangled/inform6

# While these are also executables, they only provide unit tests for modules:

{tool} INFLECTIONSTEST inflections-test inform7/inflections-test

{tool} LINGUISTICSTEST linguistics-test inform7/linguistics-test

{tool} PROBLEMSTEST problems-test inform7/problems-test

{tool} SYNTAXTEST syntax-test inbuild/syntax-test

{tool} WORDSTEST words-test inbuild/words-test

{tool} BUILDINGTEST building-test inter/building-test

{tool} ARCHTEST arch-test inbuild/arch-test

# -----------------------------------------------------------------------------
# Targets "all" and "force"
# -----------------------------------------------------------------------------
# "make all", the default target, incrementally makes the tools; "make force"
# makes everything, disregarding all timestamps on files.

.PHONY: all

all: tools kits srules localintegration

.PHONY: force

force: forcetools forcekits forcesrules localintegration

.PHONY: localintegration
localintegration: inform7/Internal/Languages/English/Syntax.preform

inform7/Internal/Languages/English/Syntax.preform: inform7/Tangled/Syntax.preform
	cp -f 'inform7/Tangled/Syntax.preform' "inform7/Internal/Languages/English/Syntax.preform"

# (Of course those other four phony targets are yet to be defined.)

# -----------------------------------------------------------------------------
# Target "makers"
# -----------------------------------------------------------------------------
# Each individual tool has its own makefile, stored inside its individual web. 
# "make makers" runs through each tool in turn and creates this makefile.
# Note the repeat-tools-block feature: the line in the block is repeated once for each
# defined tool. Inside the block, an asterisk expands to the tool's symbol
# name: so for example, for inblorb, *WEB would become INBLORBWEB.

.PHONY: makers
makers:
	{repeat-tools-block}
	$(INWEBX) $(*WEB) -makefile $(*MAKER)
	{end-block}
	$(INWEBX) -prototype inform6/makescript.txt -makefile inform6/inform6.mk
	$(INWEBX) -prototype retrospective/makescript.txt -makefile retrospective/makefile

# -----------------------------------------------------------------------------
# Target "gitignores"
# -----------------------------------------------------------------------------
# Each individual web needs its own .gitignore file, and this makes them.

.PHONY: gitignores
gitignores:
	$(INWEBX) -prototype scripts/gitignorescript.txt -gitignore .gitignore
	{repeat-tools-block}
	$(INWEBX) $(*WEB) -gitignore $(*WEB)/.gitignore
	{end-block}
	$(INWEBX) -prototype inform6/gitignorescript.txt -gitignore inform6/.gitignore

# -----------------------------------------------------------------------------
# Target "versions"
# -----------------------------------------------------------------------------
# Asks the tools their current version numbers.

.PHONY: versions
versions:
	{repeat-tools-block}
	$(*X) -version
	{end-block}
	$(INFORM6X) -V

# -----------------------------------------------------------------------------
# Targets "srules" and "forcesrules"
# -----------------------------------------------------------------------------
# The Standard Rules extension is generated from a web (though it is not a
# C program), and needs its own individual handling. "make srules" updates
# this if need be; "make forcesrules" updates it regardless.

SRULES = inform7/Internal/Extensions/Graham\ Nelson/Standard\ Rules.i7x
BINFORM = inform7/Internal/Extensions/Graham\ Nelson/Basic\ Inform.i7x

.PHONY: srules
srules: $(SRULES)

$(SRULES): inform7/extensions/standard_rules/Contents.w inform7/extensions/standard_rules/Sections/*.w inform7/extensions/basic_inform/Contents.w inform7/extensions/basic_inform/Sections/*.w
	$(INWEBX) inform7/extensions/standard_rules -tangle-to $(SRULES)
	$(INWEBX) inform7/extensions/basic_inform -tangle-to $(BINFORM)

.PHONY: forcesrules
forcesrules:
	$(INWEBX) inform7/extensions/standard_rules -tangle-to $(SRULES)
	$(INWEBX) inform7/extensions/basic_inform -tangle-to $(BINFORM)

# -----------------------------------------------------------------------------
# Targets "kits" and "forcekits"
# -----------------------------------------------------------------------------
# These are easy because Inbuild performs a make-like service on them; that
# saves a great deal of messy make code here.

.PHONY: kits
kits:
	$(INBUILDX) -build -contents-of inform7/Internal/Inter

.PHONY: forcekits
forcekits:
	$(INBUILDX) -rebuild -contents-of inform7/Internal/Inter

# -----------------------------------------------------------------------------
# Target "tools"
# -----------------------------------------------------------------------------
# "make tools" builds all of the tools incrementally, i.e., only as necessary.
# Note the use of repeat to make a list: $(INBLORBX) $(INDOCX) ..., etc.

.PHONY: tools
tools: {repeat-tools-span}$(*X){end-span} $(INFORM6X)

{repeat-tools-block}
$(*X): {dependent-files-for-tool}*
	$(MAKE) -f $(*MAKER)

{end-block}

# As ever, Inform 6 needs special handling:

$(INFORM6X): inform6/Inform6/*.c
	$(MAKE) -f inform6/inform6.mk

# -----------------------------------------------------------------------------
# Target "retrospective"
# -----------------------------------------------------------------------------
# "make retrospective" builds the back catalogue of old releases of ni and
# cBlorb, in the retrospective/BBBB directories (where BBBB is the release
# build code)

.PHONY: retrospective
retrospective:
	$(MAKE) -f retrospective/makefile

# -----------------------------------------------------------------------------
# Target "forcetools"
# -----------------------------------------------------------------------------
# Similarly, but with a single target, since nothing is incremental here.

.PHONY: forcetools
forcetools:
	{repeat-tools-block}
	$(MAKE) -f $(*MAKER) force
	$(MAKE) -f inform6/inform6.mk force
	{end-block}

# -----------------------------------------------------------------------------
# Target "check"
# -----------------------------------------------------------------------------
# "make check" invites the make file for every tool to run its own tests.
# I6 must come first, because that guarantees the Z and Glulx interpreters
# are safely built before we need them.
# -----------------------------------------------------------------------------

.PHONY: check
check:
	$(MAKE) -f inform6/inform6.mk test
	$(INPOLICYX) -silence -check-problems
	{repeat-tools-block}
	$(MAKE) -f $(*MAKER) test
	{end-block}

# -----------------------------------------------------------------------------
# Target "tangle"
# -----------------------------------------------------------------------------
# "make tangle", probably not very useful, tangles each web in turn.
# -----------------------------------------------------------------------------

.PHONY: tangle
tangle:
	$(call tangle-webs)

define tangle-webs
	{repeat-tools-block}
	$(INWEBX) $(*WEB) -tangle
	{end-block}
endef

# -----------------------------------------------------------------------------
# Target "weave"
# -----------------------------------------------------------------------------
# "make weave" weaves each web in turn.
# -----------------------------------------------------------------------------

WEAVEOPTS = -weave sections

.PHONY: weave
weave:
	$(call weave-webs)

define weave-webs
	{repeat-tools-block}
	$(INWEBX) $(*WEB) $(WEAVEOPTS)
	{end-block}
endef

# -----------------------------------------------------------------------------
# Target "commit"
# -----------------------------------------------------------------------------
# "make commit" should be used only by the Benevolent Overlord of Inform.
# It updates the build code and commits to the repository.
# -----------------------------------------------------------------------------

.PHONY: commit
commit:
	$(INWEBX) -advance-build-file build.txt
	$(INWEBX) -prototype scripts/READMEscript.txt -write-me README.md
	git commit -a

# -----------------------------------------------------------------------------
# Target "pages"
# -----------------------------------------------------------------------------
# "make pages" refreshes the GitHub Pages content in the docs folder.
# -----------------------------------------------------------------------------

.PHONY: pages
pages:
	$(INWEBX) -prototype scripts/READMEscript.txt -write-me README.md
	rm -f docs/*.html
	$(INWEBX) docs/docs-src/webs.inweb -weave-as GitHubCovers -weave-into docs -navigation docs/docs-src/nav.html
	$(INWEBX) docs/docs-src/compiler.inweb -weave-as GitHubCovers -weave-into docs -breadcrumb 'Source:webs.html' -navigation docs/docs-src/navc-o.html
	$(INWEBX) docs/docs-src/extensions.inweb -weave-as GitHubCovers -weave-into docs -breadcrumb 'Source:webs.html' -navigation docs/docs-src/navk-o.html
	$(INWEBX) docs/docs-src/other.inweb -weave-as GitHubCovers -weave-into docs -breadcrumb 'Source:webs.html' -navigation docs/docs-src/navo-o.html
	$(INWEBX) docs/docs-src/units.inweb -weave-as GitHubCovers -weave-into docs -breadcrumb 'Source:webs.html' -navigation docs/docs-src/navu-o.html
	rm -f docs/BasicInformKit/*.html
	$(INWEBX) inform7/Internal/Inter/BasicInformKit -weave-docs -weave-into docs/BasicInformKit -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Kits:../extensions.html'
	rm -f docs/WorldModelKit/*.html
	$(INWEBX) inform7/Internal/Inter/WorldModelKit -weave-docs -weave-into docs/WorldModelKit -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Kits:../extensions.html'
	rm -f docs/CommandParserKit/*.html
	$(INWEBX) inform7/Internal/Inter/CommandParserKit -weave-docs -weave-into docs/CommandParserKit -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Kits:../extensions.html'
	rm -f docs/BasicInformExtrasKit/*.html
	$(INWEBX) inform7/Internal/Inter/BasicInformExtrasKit -weave-docs -weave-into docs/BasicInformExtrasKit -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Kits:../extensions.html'
	rm -f docs/EnglishLanguageKit/*.html
	$(INWEBX) inform7/Internal/Inter/EnglishLanguageKit -weave-docs -weave-into docs/EnglishLanguageKit -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Kits:../extensions.html'
	rm -f docs/inblorb/*.html
	$(INBLORBX) -help >inblorb/Figures/help.txt
	$(INWEBX) inblorb -weave-docs -weave-into docs/inblorb -navigation docs/docs-src/navo.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Other Tools:../other.html'
	rm -f docs/inbuild/*.html
	$(INBUILDX) -help >inbuild/Figures/help.txt
	$(INWEBX) inbuild -weave-docs -weave-into docs/inbuild -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Tools:../compiler.html'
	rm -f docs/arch-module/*.html
	$(INWEBX) inbuild/arch-module -weave-docs -weave-into docs/arch-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/syntax-module/*.html
	$(INWEBX) inbuild/syntax-module -weave-docs -weave-into docs/syntax-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/syntax-test/*.html
	$(INWEBX) inbuild/syntax-test -weave-docs -weave-into docs/syntax-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/words-module/*.html
	$(INWEBX) inbuild/words-module -weave-docs -weave-into docs/words-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/words-test/*.html
	$(INWEBX) inbuild/words-test -weave-docs -weave-into docs/words-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/inbuild-module/*.html
	$(INWEBX) inbuild/inbuild-module -weave-docs -weave-into docs/inbuild-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/html-module/*.html
	$(INWEBX) inbuild/html-module -weave-docs -weave-into docs/html-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/indoc/*.html
	$(INDOCX) -help >indoc/Figures/help.txt
	$(INWEBX) indoc -weave-docs -weave-into docs/indoc -navigation docs/docs-src/navo.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Other Tools:../other.html'
	rm -f docs/inform7/*.html
	$(INFORM7X) -help >inform7/Figures/help.txt
	$(INWEBX) inform7 -weave-docs -weave-into docs/inform7 -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Tools:../compiler.html'
	rm -f docs/core-module/*.html
	$(INWEBX) inform7/core-module -weave-docs -weave-into docs/core-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/if-module/*.html
	$(INWEBX) inform7/if-module -weave-docs -weave-into docs/if-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/index-module/*.html
	$(INWEBX) inform7/index-module -weave-docs -weave-into docs/index-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/inflections-module/*.html
	$(INWEBX) inform7/inflections-module -weave-docs -weave-into docs/inflections-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/arch-test/*.html
	$(INWEBX) inbuild/arch-test -weave-docs -weave-into docs/arch-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/building-test/*.html
	$(INWEBX) inter/building-test -weave-docs -weave-into docs/building-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/inflections-test/*.html
	$(INWEBX) inform7/inflections-test -weave-docs -weave-into docs/inflections-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/kinds-module/*.html
	$(INWEBX) inform7/kinds-module -weave-docs -weave-into docs/kinds-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/linguistics-module/*.html
	$(INWEBX) inform7/linguistics-module -weave-docs -weave-into docs/linguistics-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/linguistics-test/*.html
	$(INWEBX) inform7/linguistics-test -weave-docs -weave-into docs/linguistics-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/multimedia-module/*.html
	$(INWEBX) inform7/multimedia-module -weave-docs -weave-into docs/multimedia-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/problems-module/*.html
	$(INWEBX) inform7/problems-module -weave-docs -weave-into docs/problems-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/problems-test/*.html
	$(INWEBX) inform7/problems-test -weave-docs -weave-into docs/problems-test -navigation docs/docs-src/navu.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Unit Test Tools:../units.html'
	rm -f docs/inpolicy/*.html
	$(INPOLICYX) -help >inpolicy/Figures/help.txt
	$(INWEBX) inpolicy -weave-docs -weave-into docs/inpolicy -navigation docs/docs-src/navo.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Other Tools:../other.html'
	rm -f docs/inrtps/*.html
	$(INRTPSX) -help >inrtps/Figures/help.txt
	$(INWEBX) inrtps -weave-docs -weave-into docs/inrtps -navigation docs/docs-src/navo.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Other Tools:../other.html'
	rm -f docs/inter/*.html
	$(INTERX) -help >inter/Figures/help.txt
	$(INWEBX) inter -weave-docs -weave-into docs/inter -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Tools:../compiler.html'
	rm -f docs/inter-module/*.html
	$(INWEBX) inter/inter-module -weave-docs -weave-into docs/inter-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/codegen-module/*.html
	$(INWEBX) inter/codegen-module -weave-docs -weave-into docs/codegen-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/building-module/*.html
	$(INWEBX) inter/building-module -weave-docs -weave-into docs/building-module -navigation docs/docs-src/navc.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Compiler Modules:../compiler.html'
	rm -f docs/standard_rules/*.html
	$(INWEBX) inform7/extensions/standard_rules -weave-docs -weave-into docs/standard_rules -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Extensions:../extensions.html'
	rm -f docs/basic_inform/*.html
	$(INWEBX) inform7/extensions/basic_inform -weave-docs -weave-into docs/basic_inform -navigation docs/docs-src/navk.html -breadcrumb 'Source:../webs.html' -breadcrumb 'Extensions:../extensions.html'

# -----------------------------------------------------------------------------
# Target "clean"
# -----------------------------------------------------------------------------
# "make clean" removes inessential files from the Inform source hierarchy
# -----------------------------------------------------------------------------

.PHONY: clean
clean:
	$(call clean-up)

define clean-up
	{repeat-tools-block}
	$(MAKE) -f $(*MAKER) clean
	{end-block}
	$(MAKE) -f inform6/inform6.mk clean
endef

# -----------------------------------------------------------------------------
# Target "purge"
# -----------------------------------------------------------------------------
# "make purge" cleans, but also removes binaries
# -----------------------------------------------------------------------------

.PHONY: purge
purge:
	$(call purge-up)

define purge-up
	{repeat-tools-block}
	$(MAKE) -f $(*MAKER) purge
	{end-block}
	$(MAKE) -f inform6/inform6.mk purge
endef

# -----------------------------------------------------------------------------
# Target "ebooks"
# -----------------------------------------------------------------------------
# "make ebooks" generates the two Inform ebook files in EPUB format.
# One combines the manuals Writing with Inform and The Inform Recipe Book into
# a single volume, while the other holds the collected change logs.
# -----------------------------------------------------------------------------

.PHONY: ebooks
ebooks:
	$(call clean-ebooks)
	$(INDOCX) -from resources/Documentation ebook
	$(call clean-ebooks)
	$(INDOCX) -from resources/Changes ebook
	$(call clean-ebooks)

define clean-ebooks
	rm -f resources/Documentation/Output/OEBPS/images/*
	rm -f resources/Documentation/Output/OEBPS/*.*
	rm -f resources/Documentation/Output/META-INF/container.xml
	rm -f resources/Documentation/Output/mimetype
	rm -f resources/Documentation/Output/*.*
	rm -f resources/Changes/Output/OEBPS/images/*
	rm -f resources/Changes/Output/OEBPS/*.*
	rm -f resources/Changes/Output/META-INF/container.xml
	rm -f resources/Changes/Output/mimetype
	rm -f resources/Changes/Output/*.*
endef

# -----------------------------------------------------------------------------
# Targets "integration" and "forceintegration"
# -----------------------------------------------------------------------------
# This copies material into the user interface application.
# -----------------------------------------------------------------------------
ifdef BUILTINCOMPS

INTOOLSBUILTIN = \
	$(BUILTINCOMPS)/$(INBLORBNAME) \
	$(BUILTINCOMPS)/$(INFORM6NAME) \
	$(BUILTINCOMPS)/$(INFORM7NAME) \
	$(BUILTINCOMPS)/$(INTESTNAME)

SRULESINPLACE = $(INTERNAL)/Extensions/Graham\ Nelson/Standard\ Rules.i7x
BINFORMINPLACE = $(INTERNAL)/Extensions/Graham\ Nelson/Basic\ Inform.i7x
INTERNALEXEMPLUM = $(INTERNAL)/Miscellany/Cover.jpg
INTERNALEXEMPLUMFROM = inform7/Internal/Miscellany/Cover.jpg
IMAGESEXEMPLUM = $(BUILTINHTML)/doc_images/help.png
IMAGESEXEMPLUMFROM = resources/Imagery/doc_images/help.png
DOCEXEMPLUM = $(BUILTINHTMLINNER)/index.html
RTPEXEMPLUM = $(BUILTINHTMLINNER)/RTP_P1.html

.PHONY: integration
integration: \
		$(INTOOLSBUILTIN) \
		$(INTERNAL)/Languages/English/Syntax.preform \
		$(INTERNAL)/Languages/English/Standard.indext \
		$(INTERNAL)/Languages/English/Basic.indext \
		$(SRULESINPLACE) \
		$(BINFORMINPLACE) \
		kitsintegration \
		$(DOCEXEMPLUM) \
		$(INTERNALEXEMPLUM) \
		$(IMAGESEXEMPLUM) \
		$(RTPEXEMPLUM)

.PHONY: kitsintegration
kitsintegration:
	$(call transfer-kits)

.PHONY: forceintegration
forceintegration:
	$(call transfer-intools)
	$(call transfer-preform)
	$(call transfer-standard-rules)
	$(call transfer-kits)
	$(call transfer-internal-tree)
	$(call transfer-images)
	$(call make-inapp-documentation)
	$(call make-inapp-outcome-pages)

# (a) Copying necessary intools into the app

# Only the following intools are present in the UI app at run-time: inblorb,
# inform6, inform7, intest. All can have different names there.

$(BUILTINCOMPS)/$(INBLORBNAME): $(INBLORBX)
	mkdir -p $(BUILTINCOMPS)
	cp -f $(INBLORBX) $(BUILTINCOMPS)/$(INBLORBNAME)

$(BUILTINCOMPS)/$(INFORM6NAME): inform6/Tangled/inform6
	$(MAKE) -f inform6/inform6.mk
	mkdir -p $(BUILTINCOMPS)
	cp -f $(INFORM6X) $(BUILTINCOMPS)/$(INFORM6NAME)

$(BUILTINCOMPS)/$(INFORM7NAME): $(INFORM7WEB)/Tangled/inform7
	$(MAKE) -f $(INFORM7MAKER)
	mkdir -p $(BUILTINCOMPS)
	cp -f $(INFORM7X) $(BUILTINCOMPS)/$(INFORM7NAME)

$(BUILTINCOMPS)/intest: $(INTESTWEB)/Tangled/intest
	cd ..; $(MAKE) -f intest/intest.mk; cd inform
	mkdir -p $(BUILTINCOMPS)
	cp -f $(INTESTWEB)/Tangled/intest $(BUILTINCOMPS)/intest

define transfer-intools
	mkdir -p $(BUILTINCOMPS)
	cp -f $(INBLORBX) $(BUILTINCOMPS)/$(INBLORBNAME)
	cp -f $(INFORM6X) $(BUILTINCOMPS)/$(INFORM6NAME)
	cp -f $(INFORM7X) $(BUILTINCOMPS)/$(INFORM7NAME)
	cp -f $(INTESTX) $(BUILTINCOMPS)/intest
endef

# (b) Copying Preform definition and index things into the app

$(INTERNAL)/Languages/English/Syntax.preform: $(INFORM7WEB)/Tangled/Syntax.preform
	$(call transfer-preform)
	
$(INFORM7WEB)/Tangled/Syntax.preform:
	$(MAKE) -f $(INFORM7MAKER)

$(INTERNAL)/Languages/English/Standard.indext: inform7/Internal/Languages/English/Standard.indext
	$(call transfer-preform)

$(INTERNAL)/Languages/English/Basic.indext: inform7/Internal/Languages/English/Basic.indext
	$(call transfer-preform)

define transfer-preform
	cp -f 'inform7/Tangled/Syntax.preform' "$(INTERNAL)/Languages/English/Syntax.preform"
	cp -f 'inform7/Tangled/Syntax.preform' "inform7/Internal/Languages/English/Syntax.preform"
	cp -f 'inform7/Internal/Languages/English/Standard.indext' "$(INTERNAL)/Languages/English/Standard.indext"
	cp -f 'inform7/Internal/Languages/English/Basic.indext' "$(INTERNAL)/Languages/English/Basic.indext"
endef

# (c) Copying the Standard Rules into the app

$(SRULESINPLACE): $(SRULES)
	$(call transfer-standard-rules)

define transfer-standard-rules
	mkdir -p "$(INTERNAL)/Extensions/Graham Nelson"
	cp $(SRULES) $(SRULESINPLACE)
	$(call transfer-xefs)
endef

$(BINFORMINPLACE): $(BINFORM)
	$(call transfer-basic-inform)

define transfer-basic-inform
	mkdir -p "$(INTERNAL)/Extensions/Graham Nelson"
	cp $(BINFORM) $(BINFORMINPLACE)
	$(call transfer-xefs)
endef

define transfer-xefs
	mkdir -p "$(INTERNAL)/HTML"
	cp -f inform7/Internal/HTML/xrefs.txt "$(INTERNAL)/HTML"
endef

# (d) Copying kits and pipelines into the app

define transfer-kits
	$(INBUILDX) -sync-to $(INTERNAL) -contents-of inform7/Internal/Inter
	$(INBUILDX) -sync-to $(INTERNAL) -contents-of inform7/Internal/Pipelines
endef

# (e) Copying internal resources into the app

# The Internal tree also holds built-in extensions, web interpreters and so on.
# In effect, it's a repository in the UI app of non-executable resources:

$(INTERNALEXEMPLUM): \
		inform7/Internal/Extensions/Eric\ Eve/[A-Za-z]* \
		inform7/Internal/Extensions/Emily\ Short/[A-Za-z]* \
		inform7/Internal/Extensions/Graham\ Nelson/[A-Za-z]* \
		inform7/Internal/Miscellany/[A-Za-z]*.* \
		inform7/Internal/HTML/[A-Za-z]*.* \
		inform7/Internal/Templates/Parchment/[A-Za-z]*.* \
		inform7/Internal/Templates/Quixe/[A-Za-z]*.* \
		inform7/Internal/Templates/Classic/[A-Za-z]*.* \
		inform7/Internal/Templates/Vorple/[A-Za-z]*.* \
		inform7/Internal/Templates/Standard/[A-Za-z]*.*
	$(call transfer-internal-tree)

define transfer-internal-tree
	touch $(INTERNALEXEMPLUMFROM)
	mkdir -p $(INTERNAL)
	mkdir -p "$(INTERNAL)/Extensions/Eric Eve"
	rm -f $(INTERNAL)/Extensions/Eric\ Eve/*
	mkdir -p "$(INTERNAL)/Extensions/Emily Short"
	rm -f $(INTERNAL)/Extensions/Emily\ Short/*
	mkdir -p "$(INTERNAL)/Extensions/Graham Nelson"
	rm -f $(INTERNAL)/Extensions/Graham\ Nelson/*
	cp -R -f inform7/Internal/Extensions $(INTERNAL)/Extensions/..
	mkdir -p "$(INTERNAL)/Languages"
	mkdir -p "$(INTERNAL)/Languages/English"
	mkdir -p "$(INTERNAL)/Languages/French"
	mkdir -p "$(INTERNAL)/Languages/German"
	mkdir -p "$(INTERNAL)/Languages/Italian"
	mkdir -p "$(INTERNAL)/Languages/Spanish"
	cp -R -f inform7/Internal/Languages $(INTERNAL)/Languages/..
	mkdir -p "$(INTERNAL)/Templates"
	mkdir -p "$(INTERNAL)/Templates/Standard"
	rm -f $(INTERNAL)/Templates/Standard/*
	mkdir -p "$(INTERNAL)/Templates/Classic"
	rm -f $(INTERNAL)/Templates/Classic/*
	mkdir -p "$(INTERNAL)/Templates/Parchment"
	rm -f $(INTERNAL)/Templates/Parchment/*
	mkdir -p "$(INTERNAL)/Templates/Quixe"
	rm -f $(INTERNAL)/Templates/Quixe/*
	mkdir -p "$(INTERNAL)/Templates/Vorple"
	rm -f $(INTERNAL)/Templates/Vorple/*
	cp -R -f inform7/Internal/Templates $(INTERNAL)/Templates/..
	mkdir -p "$(INTERNAL)/Miscellany"
	rm -f $(INTERNAL)/Miscellany/*
	cp -R -f inform7/Internal/Miscellany $(INTERNAL)/Miscellany/..
	mkdir -p "$(INTERNAL)/HTML"
	rm -f $(INTERNAL)/HTML/*
	cp -R -f inform7/Internal/HTML $(INTERNAL)/HTML/..
endef

# (f) Copying images into the app

$(IMAGESEXEMPLUM): \
	resources/Imagery/app_images/[A-Za-z]*.* \
	resources/Imagery/bg_images/[A-Za-z]*.* \
	resources/Imagery/doc_images/[A-Za-z]*.* \
	resources/Imagery/map_icons/[A-Za-z]*.* \
	resources/Imagery/outcome_images/[A-Za-z]*.* \
	resources/Imagery/scene_icons/[A-Za-z]*.*
	$(call transfer-images)

define transfer-images
	touch $(IMAGESEXEMPLUMFROM)
	cp -f resources/Imagery/app_images/Welcome*Background.png $(BUILTINHTML)
	mkdir -p $(BUILTINHTML)/bg_images
	rm -f $(BUILTINHTML)/bg_images/*
	cp -f resources/Imagery/bg_images/[A-Za-z]*.* $(BUILTINHTML)/bg_images
	mkdir -p $(BUILTINHTML)/doc_images
	rm -f $(BUILTINHTML)/doc_images/*
	cp -f resources/Imagery/doc_images/[A-Za-z]*.* $(BUILTINHTML)/doc_images
	mkdir -p $(BUILTINHTML)/map_icons
	rm -f $(BUILTINHTML)/map_icons/*
	cp -f resources/Imagery/map_icons/[A-Za-z]*.* $(BUILTINHTML)/map_icons
	mkdir -p $(BUILTINHTML)/outcome_images
	rm -f $(BUILTINHTML)/outcome_images/*
	cp -f resources/Imagery/outcome_images/[A-Za-z]*.* $(BUILTINHTML)/outcome_images
	mkdir -p $(BUILTINHTML)/scene_icons
	rm -f $(BUILTINHTML)/scene_icons/*
	cp -f resources/Imagery/scene_icons/[A-Za-z]*.* $(BUILTINHTML)/scene_icons
endef

# (g) Typesetting documentation to HTML inside the app

$(DOCEXEMPLUM): resources/Documentation/*.txt resources/Documentation/Examples/*.txt
	$(call make-inapp-documentation)

define make-inapp-documentation
	mkdir -p "$(INTERNAL)/Documentation"
	mkdir -p $(BUILTINHTMLINNER)
	$(INDOCX) -from resources/Documentation -xrefs 'inform7/Internal/HTML/xrefs.txt' $(INDOCOPTS)
endef

# (h) Typesetting the HTML pages used to display run-time problem messages

$(RTPEXEMPLUM): resources/Outcome*Pages/texts.txt resources/Outcome*Pages/*.html
	$(call make-inapp-outcome-pages)

define make-inapp-outcome-pages
	$(INRTPSX) resources/Outcome\ Pages $(BUILTINHTMLINNER) $(INRTPSOPTS)
	cp -f resources/Outcome\ Pages/pl404.html $(BUILTINHTMLINNER)
endef

endif

# -----------------------------------------------------------------------------
