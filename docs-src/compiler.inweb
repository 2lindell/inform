Title: Structure of the Inform 7 compiler
Author: Graham Nelson

@ The core Inform compiler, the tool called //inform7//, combines natural-language
source text, including natural-language extensions, with kits of so-called Inter
code to make the instructions for making a playable story. Further tools are
needed to turn such instructions into that story -- perhaps as

(*) a page in a web browser, where the story runs as JavaScript, using //inform6//
and then //inblorb//, other tools in the Inform toolchain;

(*) a "story file" which an app called an "interpreter" plays through, using
//inform6// alone; or

(*) an executable program which can be run on the command line, using a standard
C compiler such as |clang| or |gcc|.

@ The compiler runs in Stages, numbered 1 to 7, and each contains many sub-tasks.
But like most compilers, it can be summarised as turning its input first into
an AST or "abstract syntax tree"[1] and then into an "intermediate representation",
which in our case is called Inter. Kits have been compiled in advance by a different
flow path, directly into Inter. A weak form[2] of linker inside the Inform compiler
loads and combines those pre-compiled Inter files with the main body, and so
completes an intermediate representation for the story. This can then be optimised and
turned into various choices of output.

Inform 7 presents as three command-line tools, not one: //inbuild//, //inform7//
and //inter//. Really, though, they are three points of access to the same code
base. //inbuild// contains Stage 1 as a stand-alone tool, //inter// contains Stages
5 to 7 as a stand-alone tool, and //inform7// is the entire compiler (Stages 1 to 7)
in one. Each tool has its own CLI (or "command-line interface"): see
//inbuild: Manual//, //inform7: Manual//, //inter: Manual// and
//inbuild: Reference Card//, //inform7: Reference Card//, //inter: Reference Card//.

[1] Though in this source we usually call it an "annotated syntax tree" or simply
"syntax tree" to avoid the issue of whether it is concrete or abstract.

[2] Weak in that the //inter// tool can link any number of kits to a source text,
but not a source text to a source text.

@ The flow of data looks like so, with time running downwards on the page. Dotted
arrows are where work is done by tools other than //inform7//:
= (hyperlinked text as BoxArt)
	kit sources			 main source text    extension source texts
  (in Inform 6 code)				  \           /
		|							   \         /  INFORM7 Stage 1 or INBUILD
		| INTER							\       /
	   \|/								\|/   \|/
	precompiled  				       syntax tree
	Inter trees			 	                |
		.			                        |  INFORM7 Stages 2 to 5
		.		                            |
		. .	. . . . . precompiled          \|/ 
			          Inter trees      Inter tree
                            \              /
							 \            /  INFORM7 Stage 6 or INTER
							 \|/        \|/
						single linked Inter tree
		                    /       |       \
                           /        |        \   INFORM7 Stage 7 or INTER
		                 \|/       \|/       \|/
		         Inform 6 code   C code     index mini-website
		                  :         :
		         INFORM6  :         :  CLANG or GCC
		                 \:/       \:/
		           story file   executable
		                  :
		         INBLORB  :
    		             \:/
        		 playable website
=

@ The source code is divided up into "modules", each of which is a literate
program or web in its own right. Most modules are used mostly in particular
stages of the compilation, which are as follows:
(*) Stage 1. A build manager called //supervisor// gathers what must be compiled.
(*) Stage 2. //core// organises compilation of a single Inform project,
doing little except to co-ordinate the other modules.
(*) Stage 3. //assertions//, //values// and //knowledge// assemble a world model,
turning sentences first into logical propositions and then into inferred facts,
and also gather a set of rules and phrases to operate it. //if// and //multimedia//
provide "plugins" to this process with additional features, adapting the language
for interactive fiction.
(*) Stage 4. //imperative// and //runtime// turn the constructs from Stage 3
into an intermediate bytecode format called Inter.
(*) Stage 5. //bytecode// and //building// manage and create Inter code. This is
more of a layer than a stage, providing services to Stages 4, 6 and 7.
(*) Stage 6. //pipeline// links and optimises this Inter code.
(*) Stage 7. //final// generates final code and //index// generates human-readable
Index pages, which forn a small website about the project.

The full breakdown of the three tools //inbuild//, //inform7// and //inter//
into modules is as follows:
= (hyperlinked text as BoxArt)
        INBUILD                  INFORM7                   INTER     
    +-------------+          +-------------+          +-------------+    
    |   //inbuild//   |          |   //inform7//   |          |    //inter//    |
    |    (cli)    |          |    (cli)    |          |    (cli)    |
    +-------------+          +-------------+          +-------------+    
      .         .              .         .              .         .  
+---------------------------+  .         .              .         .         
|  //supervisor//-module        |  .         .              .         .         } Stage 1
+------------------------+  +------------------+        .         .   
      .         .        |     //core//-module     |        .         .         } Stage 2
      .         .        | ------------------- |        .         .  
      .         .        |  //assertions//-module  |        .         .         }
      .         .        |    //values//-module    |        .         .         } Stage 3
      .         .        |   //knowledge//-module  |        .         .         }
      .         .        |      //if//-module*     |        .         .         } * not used in
      .         .        |  //multimedia//-module* |        .         .         } Basic Inform
      .         .        | ------------------- |        .         .  
      .         .        |  //imperative//-module  |        .         .         } Stage 4
      .         .        |    //runtime//-module   |        .         .         } 
      .         .        +------------------+  +------------------------+
      .         .              .         .  |         //bytecode//-module   |   }
      .         .              .         .  |         //building//-module   |   } Stage 5
      .         .              .         .  | ------------------------- |
      .         .              .         .  |         //pipeline//-module   |   } Stage 6
      .         .              .         .  | ------------------------- |
      .         .              .         .  |          //final//-module     |   } Stage 7
      .         .              .         .  |          //index//-module     |   }
      .         .              .         .  +---------------------------+
      .         .              .         .              .         .  
+-----------------------------------------------------------------------+
|  SERVICES              shared //linguistics//-module                      |
|                         shared //calculus//-module                        |
|                          shared //kinds//-module                          |
|                         shared //lexicon//-module                         |
|                        shared //inflections//-module                      |
|                         shared //problems//-module                        |
|                          shared //syntax//-module                         |
|                          shared //words//-module                          |
|                           shared //arch//-module                          |
|                           shared //html//-module                          |
+-----------------------------------------------------------------------+
      .         .              .         .              .         .  
+-----------------------------------------------------------------------+
|  FOUNDATION      //foundation//-module (in inweb repository)              |
|                   (Posix or Windows-related functions)                |
|                           (standard C library)                        |
+-----------------------------------------------------------------------+
=
Note that all three tools use a //services// library, made up of a variety of modules
providing services useful for natural language-based programs, and also the
//foundation// library of utility functions provided by //inweb//.
