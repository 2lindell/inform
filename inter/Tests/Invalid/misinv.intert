packagetype _plain
packagetype _code

primitive !increment ref -> void

package main _plain
	kind K_number int32
	kind K_colour enum
	kind K_stuff struct K_number K_colour K_odour
	kind K_colour____colour function K_colour -> K_colour
	package R_101_B _code
		symbol private misc x
		symbol external misc K_colour --> /main/K_colour
		symbol external misc K_number --> /main/K_number
		symbol external misc K_stuff --> /main/K_stuff
		symbol external misc R_101 --> /main/R_101
		symbol external misc R_102 --> /main/R_102
		local x K_colour __call_parameter
		code
			val K_number 3
			.spong
			inv !increment
			inv R_102
				val K_number 12
				ref K_stuff S_stuff
			inv !increment
				val K_number 2
			inv R_101
				inv !increment
					ref K_number x
	constant R_101 K_colour____colour = R_101_B
	package R_101_A _code
		symbol private misc x
		symbol external misc R_101 --> /main/R_101
		symbol external misc K_colour --> /main/K_colour
		local x K_colour __call_parameter
		code
			inv !increment
			inv R_101
	constant R_102 K_colour____colour = R_101_A
