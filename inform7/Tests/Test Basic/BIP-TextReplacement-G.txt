To begin:
	showme whether or not "fish" exactly matches the text "FIsH";
	showme whether or not "fish" exactly matches the text "FIsH", case insensitively;
	showme whether or not "Go fish!" matches the text "fish";
	showme whether or not "I WANT MY FISH" matches the text "fish", case insensitively;
	showme the number of times "Bananagrams to Alpaca" matches the text "a";
	showme the number of times "Bananagrams to Alpaca" matches the text "a", case insensitively;
	run test A;
	run test B;
	run test C;
	run test D;
	run test E;
	run test F;        
	run test G;

To run test A:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace word number 7 in Neptune with "banana"; 
	say "The intermediate text: [Neptune][line break]";
	replace word number 22 in Neptune with "pineapple daiquiri"; 
	say "The intermediate text: [Neptune][line break]";
	replace character number 5 in Neptune with "z"; 
	say "The intermediate text: [Neptune][line break]";
	replace character number 50 in Neptune with "(abcdef)"; 
	say "The redacted text: [Neptune][line break]".

To run test B:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the text "the" in Neptune with "potato"; 
	replace the text "giants." in Neptune with "turtles?"; 
	say "The redacted text: [Neptune][line break]".

To run test C:
	let Neptune be text;
	let Neptune be "the capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the word "the" in Neptune with "potato"; 
	replace the word "system" in Neptune with "frog"; 
	say "The redacted text: [Neptune][line break]".

To run test D:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the punctuated word "system," in Neptune with "toad";
	replace the punctuated word "." in Neptune with "!"; 
	say "The redacted text: [Neptune][line break]".

To run test E:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	let cap be "capture";
	if Neptune matches the text cap:
		say "matched '[cap]' from [start index of text match] to [final index of text match]: [length of text match] characters.";
	unless cap matches the text Neptune:
		say "'[cap]' did not match long string. [start index of text match] to [final index of text match]: [length of text match] characters.";
	if cap matches the text "":
		say "'[cap]' matched empty string. [start index of text match] to [final index of text match]: [length of text match] characters.";
	unless Neptune matches the text "giants..":
		say "Neptune did not match 'giants..' [start index of text match] to [final index of text match]: [length of text match] characters.";
	if Neptune matches the text "t", case insensitively:
		say "Neptune insensitively matched 't' [start index of text match] to [final index of text match]: [length of text match] characters.";

To run test F:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	if Neptune matches the regular expression "explain\s+(<a-d>+)\s*(num<^\s>+).+e(c+)":
		repeat with i running from 0 to 3:
			 say "subexpression [i]: from [start index of subexpression i] to [final index of subexpression i], length [length of subexpression i] [text matching subexpression i].";


To decide what number is subexp (n - number) data1: (- (RE_Subexpressions-->{n}-->RE_DATA1) -).
To decide what number is subexp (n - number) data2: (- (RE_Subexpressions-->{n}-->RE_DATA2) -).

to subexpdump:
repeat with i running from 0 to 1 begin;
say "[i] [subexp i data1] [subexp i data2].";
end repeat;

to set trace: (- TEXT_TY_RE_SetTrace(1); -)

To run test G:
[set trace;]
say "testing t blank/blank.";
	if "" matches the text "", say "t blank/blank: start [start index of text match]; final [final index of text match]; length [length of text match].";
        say "testing t blank/non-blank.";
        if "" matches the text "xyzzy", say "t blank/non-blank: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "plughxyzzy" matches the text "xyzzy", say "t trailing substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzyplugh" matches the text "xyzzy", say "t leading substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "plughxyzzyplugh" matches the text "xyzzy", say "t internal substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzyxyzzy" matches the text "xyzzy", say "t multiple substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        say "testing t non-blank/blank.";
        if "xyzzy" matches the text "", say "t non-blank/blank: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzy" matches the text "xyzzy", say "t identical: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzy" matches the text "plughxyzzy", say "t reversed trailing substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzy" matches the text "xyzzyplugh", say "t reversed substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzy" matches the text "plughxyzzyplugh", say "t reversed internal substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
        if "xyzzy" matches the text "xyzzyxyzzy", say "t reversed multiple substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
	if "" matches the regular expression "", say "r blank/blank: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
        if "" matches the regular expression "xyzzy", say "r blank/non-blank: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
        if "xyzzy" matches the regular expression "", say "l non-blank/blank: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
        if "xyzzy" matches the regular expression "(xyzzy)", say "r identical: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                subexpdump;
        if "xyzzy" matches the regular expression "plugh(xyzzy)", say "r reversed trailing substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                        subexpdump;
        if "xyzzy" matches the regular expression "(xyzzy)plugh", say "r reversed substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "xyzzy" matches the regular expression "plugh(xyzzy)plugh", say "r reversed internal substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "xyzzy" matches the regular expression "xyzzy(xyzzy)", say "r reversed multiple substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "plughxyzzy" matches the regular expression "(xyzzy)", say "rr trailing substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "xyzzyplugh" matches the regular expression "(xyzzy)", say "rr leading substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "plughxyzzyplugh" matches the regular expression "(xyzzy)", say "rr internal substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
        if "xyzzyxyzzy" matches the regular expression "(xyzzy)", say "rr multiple substring: start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
                                subexpdump;
	if "xyzzy" matches the regular expression "$^", say "oops 1.";
	if "xyzzy" matches the regular expression "$.", say "oops 2.";
	if "xyzzy" matches the regular expression ".^", say "oops 3.";
	if "xyzzy" matches the regular expression "^$", say "oops 4.";
	if "" matches the regular expression "^$", say "r blank/^$ start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "" matches the regular expression ".*", say "r blank/e* start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "" matches the regular expression "(?:)", say "r blank/(?:) start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "" matches the regular expression "(d?)", say "r blank/(d?) start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "xyzzy" matches the regular expression "(?:)", say "r xyzzy/(?:) start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "xyzzy" matches the regular expression "(.*)", say "r xyzzy/(.*) start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "xyzzy" matches the regular expression "(d?)", say "r xyzzy/(d?) start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
	if "shinto" matches the text "hint", say "shinto/hint substring: start [start index of text match]; final [final index of text match]; length [length of text match].";
	if "educate" matches the regular expression "du(cat)", say "educate/ducat start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0] [start index of subexpression 1]; final [final index of subexpression 1]; length [length of subexpression 1].";
	if "Q*bert" matches the regular expression "x?", say "r Q*bert/x? start [start index of subexpression 0]; final [final index of subexpression 0]; length [length of subexpression 0].";
