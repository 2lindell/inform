To begin:
	showme whether or not "fish" exactly matches the text "FIsH";
	showme whether or not "fish" exactly matches the text "FIsH", case insensitively;
	showme whether or not "Go fish!" matches the text "fish";
	showme whether or not "I WANT MY FISH" matches the text "fish", case insensitively;
	showme the number of times "Bananagrams to Alpaca" matches the text "a";
	showme the number of times "Bananagrams to Alpaca" matches the text "a", case insensitively;
	run test A;
	run test B;
	run test C;
	run test D;
	run test E;

To run test A:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace word number 7 in Neptune with "banana"; 
	say "The intermediate text: [Neptune][line break]";
	replace word number 22 in Neptune with "pineapple daiquiri"; 
	say "The intermediate text: [Neptune][line break]";
	replace character number 5 in Neptune with "z"; 
	say "The intermediate text: [Neptune][line break]";
	replace character number 50 in Neptune with "(abcdef)"; 
	say "The redacted text: [Neptune][line break]".

To run test B:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the text "the" in Neptune with "potato"; 
	replace the text "giants." in Neptune with "turtles?"; 
	say "The redacted text: [Neptune][line break]".

To run test C:
	let Neptune be text;
	let Neptune be "the capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the word "the" in Neptune with "potato"; 
	replace the word "system" in Neptune with "frog"; 
	say "The redacted text: [Neptune][line break]".

To run test D:
	let Neptune be text;
	let Neptune be "The capture of Triton may explain a number of features of the Neptunian system, including the extremely eccentric orbit of Neptune's moon Nereid and the scarcity of moons as compared to the other gas giants.";
	say "The original text: [Neptune][line break]";
	replace the punctuated word "system," in Neptune with "toad";
	replace the punctuated word "." in Neptune with "!"; 
	say "The redacted text: [Neptune][line break]".

To run test E:
        say "text ''/'': ";
	if "" matches the text "", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text ''/xyzzy: ";
        if "" matches the text "xyzzy", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "'' correctly doesn't match xyzzy.";
        say "text trailing substring : plughxyzzy/xyzzy: ";
        if "plughxyzzy" matches the text "xyzzy", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text leading substring: xyzzyplugh/xyzzy";
        if "xyzzyplugh" matches the text "xyzzy", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text internal substring plughxyzzyplugh/xyzzy: ";
        if "plughxyzzyplugh" matches the text "xyzzy", say "t internal substring: first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text multiple substring: xyzzyxyzzy/xyzzy: ";
        if "xyzzyxyzzy" matches the text "xyzzy", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text non-blank/blank: ";
        if "xyzzy" matches the text "", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text identical: xyzzy/xyzzy: ";
        if "xyzzy" matches the text "xyzzy", say "text identical: first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "text reversed trailing substring xyzzy/plughxyzzy: ";
        if "xyzzy" matches the text "plughxyzzy", say "text reversed trailing substring: first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "correctly failed to match.";
        say "text reversed substring xyzzy/xyzzyplugh: ";
        if "xyzzy" matches the text "xyzzyplugh", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "correctly failed to match.";
        say "text reversed internal substring xyzzy/plughxyzzyplugh: ";
        if "xyzzy" matches the text "plughxyzzyplugh", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "correctly failed to match.";
        say "text reversed multiple substring xyzzy/xyzzyxyzzy: "; 
        if "xyzzy" matches the text "xyzzyxyzzy", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "correctly failed to match.";
        say "regexp ''/xyzzy: ";
        if "" matches the regular expression "xyzzy", say "regexp blank/non-blank: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0].";
        else say "correctly failed to match.";
        say "regexp xyzzy/'': ";
        if "xyzzy" matches the regular expression "", say "regexp non-blank/blank: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0].";
else say "correctly failed to match.";
say "regexp xyzzy/(xyzzy): ";
        if "xyzzy" matches the regular expression "(xyzzy)", say "regexp identical: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp reversed trailing substring: xyzzy/plugh(xyzzy): ";
        if "xyzzy" matches the regular expression "plugh(xyzzy)", say "regexp reversed trailing substring: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "correctly failed to match.";
        say "regexp reversed substring: xyzzy/(xyzzy)plugh: ";
        if "xyzzy" matches the regular expression "(xyzzy)plugh", say "regexp reversed substring: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "correctly failed to match.";
        say "regexp reversed internal substring: xyzzy/plugh(xyzzy)plugh: ";
        if "xyzzy" matches the regular expression "plugh(xyzzy)plugh", say "regexp reversed internal substring: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "correctly failed to match.";
        say "regexp reversed multiple substring: xyzzy/xyzzy(xyzzy): ";
        if "xyzzy" matches the regular expression "xyzzy(xyzzy)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "correctly failed to match.";
        say "regexp multiple substring: xyzzy/xyzzy(xyzzy)?: ";
        if "xyzzy" matches the regular expression "xyzzy(xyzzy)?", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp reversed trailing substring: plughxyzzy/(xyzzy): ";
        if "plughxyzzy" matches the regular expression "(xyzzy)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp reversed leading substring xyzzyplugh/(xyzzy): "; 
        if "xyzzyplugh" matches the regular expression "(xyzzy)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp reversed internal substring plughxyzzyplugh/(xyzzy): "; 
        if "plughxyzzyplugh" matches the regular expression "(xyzzy)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp reversed multiple substring: xyzzyxyzzy/(xyzzy): ";
        if "xyzzyxyzzy" matches the regular expression "(xyzzy)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "xyzzy/$^: ";
	if "xyzzy" matches the regular expression "$^", say "problem.";
        else say "correctly failed to match.";
        say "xyzzy/$.: ";
	if "xyzzy" matches the regular expression "$.", say "problem.";
        else say "correctly failed to match.";
        say "xyzzy/.^: ";
	if "xyzzy" matches the regular expression ".^", say "problem.";
        else say "correctly failed to match.";
        say "xyzzy/^$: ";
	if "xyzzy" matches the regular expression "^$", say "problem.";
        else say "correctly failed to match.";
        say "regexp xyzzy/(?:): ";
	if "xyzzy" matches the regular expression "(?:)", say "xyzzy/(?:) first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
	if "xyzzy" matches the regular expression "(.*)", say "xyzzy/(.*) first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
	if "xyzzy" matches the regular expression "(d?)", say "xyzzy/(d?) first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "''/^$: ";
	if "" matches the regular expression "^$", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0].";
        else say "problem.";
        say "''/.*: ";
	if "" matches the regular expression ".*", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0].";
        say "''/(?:): ";
	if "" matches the regular expression "(?:)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        say "''/(d?): ";
	if "" matches the regular expression "(d?)", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "''/$.: ";
	if "" matches the regular expression "$.", say "problem.";
        else say "correctly failed to match.";
        say "''/.^: ";
	if "" matches the regular expression ".^", say "problem.";
        else say "correctly failed to match.";
        say "shinto/hint substring: ";
	if "shinto" matches the text "hint", say "first [first index of text match]; last [last index of text match]; length [length of text match].";
        else say "problem.";
        say "educate/du(cat): ";
	if "educate" matches the regular expression "du(cat)", say "educate/ducat first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0]; sub1 [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1].";
        else say "problem.";
        say "regexp Q*bert/x? :";
        if "Q*bert" matches the regular expression "x?", say "first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0].";
        else say "problem.";
        say "regexp ham sandwich/a(.+)\b(.+): ";
        if "ham sandwich" matches the regular expression "a(.+)\b(.+)", say "sub0: first [first index of subexpression 0]; last [last index of subexpression 0]; length [length of subexpression 0] sub1: first [first index of subexpression 1]; last [last index of subexpression 1]; length [length of subexpression 1]; sub2: first [first index of subexpression 2]; last [last index of subexpression 2]; length [length of subexpression 2].";
        else say "problem.";
