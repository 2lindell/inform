-if osx		-set hash_utility		'md5'
-if gnome	-set hash_utility		'md5'
-if linux	-set hash_utility		'md5'
-set extensions_testing_area     	'inform7/core-test/Tests/Test Extensions'
-set hash_cache						'inform7/core-test/Tests/hashes.intest'

-cases			[Main] 'inform7/core-test/Tests/Test Cases'
-problems		[Main] 'inform7/core-test/Tests/Test Problems'

-recipe [Main]

	set: $I6 = inform6/Tangled/inform6
	set: $I7 = inform7/core-test/Tangled/core-test
	set: $INTERNAL = Internal
	set: $WORKSPACE = intest/Workspace
	set: $ZINT = inform6/Tests/Assistants/dumb-frotz/dumb-frotz
	set: $GINT = inform6/Tests/Assistants/dumb-glulx/glulxe/glulxe

	! First we decide whether to compile it for the Z-machine or Glulx.

	type: Z
	if matches: $CASE %c*-G
		type: G
	endif:
	if matches: $CASE %c*Metric%c*Units%c*
		type: G
	endif:

	! On the basis of which:

	if type: G
		set: $FORMAT 		= ulx
		set: $I6OPTIONS		= -E2SDwGx
		set: $INT			= $GINT
		set: $INTNAME		= dumb-glulxe
		set: $INTOPTIONS	= -u
	else:
		set: $FORMAT		= z8
		set: $I6OPTIONS		= -E2SDwv8x
		set: $INT			= $ZINT
		set: $INTNAME		= dumb-frotz
		set: $INTOPTIONS	= -w 1000
	endif:

	! Now we extract the source text from whatever file originated the test
	! case: this is a non-trivial operation when the file is an Extension or
	! an example, but is a simple copy operation otherwise.

	extract: $WORK/Example.inform/Source/story.ni

	! Test cases from map indexing problem messages require ni to get as far as
	! indexing, so the -noindex option mustn't be used in this case.

	mkdir: $WORK/Transient
	step: find $WORK/Transient -mindepth 1 -delete

	if matches: $CASE PM_Map%c*
		set: $I7OPTIONS = -format=$FORMAT -noprogress -fixtime -rng -sigils -clock -log nothing -external inform7/core-test/Tests -transient $WORK/Transient -internal $INTERNAL
	else:
		set: $I7OPTIONS = -format=$FORMAT -noprogress -fixtime -rng -sigils -clock -log nothing -external inform7/core-test/Tests -transient $WORK/Transient -noindex -internal $INTERNAL
	endif:

	! First, problem message cases, where we require ni to fail and with the
	! correct output.

	if problematic:
		set: $A = $PATH/_Results_Actual/$CASE.txt
		set: $I = $PATH/_Results_Ideal/$CASE.txt
		fail step: $I7 `$I7OPTIONS -require-problem $CASE -project $WORK/Example.inform >$A 2>&1
		or: 'failed to produce its namesake Problem message' $A
		show: $A
		exists: $I
		or: 'produced Problem(s), but no ideal transcript existed'
		match problem: $A $I
		or: 'produced the wrong Problem message(s)'
		pass: 'passed'
	endif:

	! And then the general case.

	set: $I7CONSOLE = $WORK/Example.inform/Build/i7_output.txt
	step: $I7 `$I7OPTIONS -format=$FORMAT -project $WORK/Example.inform >$I7CONSOLE 2>&1
	or: 'failed with Problem message(s)' $I7CONSOLE
	show: $I7CONSOLE

	! Don't even try this in I6 for now...
	pass: 'passed'

	set: $I6SOURCE = $WORK/Example.inform/Build/auto.inf

	hash: $I6SOURCE $WORK/Example.inform/Build/checksum.txt
	or: 'passed (matching cached I6 known to work)'

	set: $I6CONSOLE = $WORK/Example.inform/Build/i6_output.txt
	set: $STORYFILE = $WORK/Example.inform/Build/output.$FORMAT

	step: $I6 `$I6OPTIONS $I6SOURCE $STORYFILE >$I6CONSOLE 2>&1
	or: 'failed to pass through Inform 6' $I6CONSOLE
	show i6: $I6CONSOLE

	set: $A = $PATH/_Results_Actual/$CASE.txt
	set: $I = $PATH/_Results_Ideal/$CASE.txt

	step: $INT `$INTOPTIONS $STORYFILE <$SCRIPT >$A 2>&1
	or: 'unable to run $INTNAME (do you need to make interpreters?)'

	exists: $I
	or: 'translated successfully but no ideal transcript existed'
	if type: G
		match glulxe transcript: $A $I
		or: 'played incorrectly'
	else:
		match frotz transcript: $A $I
		or: 'played incorrectly'
	endif:

	pass: 'passed'

-end
