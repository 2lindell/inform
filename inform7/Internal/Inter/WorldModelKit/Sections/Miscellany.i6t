Output Template.

This is the superstructure of the file of I6 code output by Inform:
from ICL commands at the top down to the signing-off comments at the bottom.

@h ICL Commands.
The Inform Control Language is a mini-language for controlling the I6 compiler,
able to set command-line switches, memory settings and so on. I6 ordinarily
discards lines beginning with exclamation marks as comments, but at the very
top of the file, lines beginning |!%| are read as ICL commands: as soon as
any line (including a blank line) doesn't have this signature, I6 exits
ICL mode.

@h Identification.
Both of the compiler and template layer, and of the story file to be produced.

@h Constants.

=

@h Global Variables.
These are not the only global variables defined in the template layer:
those needed locally only by single sections (and not used in definitions
of phrases in the Standard Rules, or referred to by Inform directly) are defined
within those sections -- they can be regarded as unimportant implementation
details, subject to change at whim. The variables here, on the other hand,
are more important to understand.

(1) The first three variables to be defined are special in that they are
significant to very early-style Z-machine interpreters, where they are
used to produce the status line display (hence |sline1| and |sline2|).
The first variable must always equal a valid object number, which is why
we -- pretty weirdly -- set it equal to the placeholder object |InformLibrary|,
which takes no part in play, and is not a valid I7 object. This is not
typesafe in I7 terms, but that doesn't matter because initialisation
will correct it to a typesafe value before any I7 source text can execute.
(|sline1| and |sline2| are entirely unused on when we target Glulx.)
Once these variables are defined, the sequence of definition of the rest
is not significant.

(2) The |say__*| are used for the finite state machine used in printing
text, which keeps track of automatic paragraph breaking and the like. For
details see the "Printing.i6t" section.

(3) |standard_interpreter| is used only for the Z-machine VM, and is always
0 for Glulx. For Z, a non-zero value here is the version number of the
{\it Z-Machine Standards Document} which the interpreter claims to support,
in the form (upper byte).(lower). |undo_flag|, similarly, behaves slightly
differently on the two platforms according to whether they support multiple
consecutive UNDOs. UNDO basically works by taking memory snapshots of the
whole VM ("saving UNDO") to revert to at a later point ("performing UNDO"),
so it is expensive on memory, and traditional VMs can only store a single
memory snapshot -- making two UNDOs in a row, going back two steps,
impossible. Given this, |undo_flag| has three possible states: 0 means
UNDO is not available at all, 1 means it is not available now because
there is no further saved state to go back to from here, and 2 means it
is available.

(4) |deadflag| in normally 0, or false, meaning play continues; 1 means the
game ended in death; 2 for ended in victory; higher numbers represent
exotic endings. (As from May 2010, the use of 2 for victory is deprecated,
and a separate flag, |story_complete|, records whether the story is
"complete" in the sense that we don't expect the player to replay.)
|deadflag| switching state normally triggers an end to rulebook processing,
so is the single most important global variable to the running of a story
file.

(5) At present, |time_rate| is not made use of in I7: if positive, it is
the number of minutes which pass each turn; if negative, the number of
turns which pass each minute. This is quite a neat way to approximate a
wide range of time steps with an integer such that fractions are exact
and we can approximate any duration to a fair accuracy (the worst case
being $3/4$ minute, where we have to choose between 1 minute or $1/2$
minute).

(6) Note that |notify_mode| is irrelevant if the use option "Use no scoring"
is in force: it isn't looked at, and can't be changed, and shouldn't have
an effect anyway since |score| will never be altered.

(7) |player| is a variable, not a constant, since the focus of play can
change. |SACK_OBJECT| is likewise an unexpected variable: in the I6
library, there could only be one player's holdall, a single rucksack-like
possession which had to be the value of the constant |SACK_OBJECT|. Here we
define |SACK_OBJECT| as a global variable instead, the value of which is
the player's holdall currently in use. |visibility_ceiling| is the
highest object in the tree visible from the player's point of view:
usually the room, but sometimes nothing (in darkness), and sometimes a
closed non-transparent container.

(8) See "OrderOfPlay.i6t" for the meaning of action variables.

(9) This is a slate of global variables used by the parser to give some
context to the general parsing routines (GPRs) which it calls; in the I6
design, any object can provide its own GPR, in the form of a |parse_name|
property. GPRs are in effect parser plug-ins, and I7 makes extensive use
of them.

(10) Similarly, variables for the parser to give context to another sort
of plug-in routine: a scope filter. I7 uses these too.

(11) The |move_*| variables are specific to the |##Going| action.

(12) These variables hold current settings for listing objects and,
more elaborately, performing room descriptions.

(13) The current colour scheme is stored in variables in order that it can
be saved in the save game state, and changed correctly on an UNDO: if it
were a transient state inside the VM interpreter's screen model, then a
RESTORE or UNDO will upset what the original author may have intended the
appearance of text in particular scenes to be. (Cf. Adam Cadre's I6 patch
|L61007|.)

(14) These pixel dimensions are used both for the Glulx and v6 Z-machines,
but not for the more commonly used versions 5 or 8, whose screen model is
based on character cells.

=
! (1)
Global location = InformLibrary; ! does not = I7 "location": see below
Global sline1; Global sline2;

! (2)
Global undo_flag;

! (4)
Global story_complete = 0;
Global resurrect_please = false;

! (5)
Global not_yet_in_play = true; ! set false when first command received
Global turns = 1; ! = I7 "turn count"
Global the_time = NULL; ! = I7 "time of day"
Global time_rate = 1;

Constant NUMBER_SCENES_CREATED = ICOUNT_SCENE;
Constant SCENE_ARRAY_SIZE = (NUMBER_SCENES_CREATED+2);
Array scene_started --> SCENE_ARRAY_SIZE;
Array scene_ended --> SCENE_ARRAY_SIZE;
Array scene_status --> SCENE_ARRAY_SIZE;
Array scene_endings --> SCENE_ARRAY_SIZE;
Array scene_latest_ending --> SCENE_ARRAY_SIZE;

! (6)
Global score; ! = I7 "score"
Global last_score; ! = I7 "last notified score"
Global notify_mode = 1; ! score notification on or off
Global left_hand_status_line = T_SL_Location; ! = I7 "left hand status line"
Global right_hand_status_line = T_SL_Score_Moves; ! = I7 "right hand status line"

! (7)
Global player; ! = I7 "player"
Global real_location; ! = I7 "location"
Global visibility_ceiling; ! highest object in tree visible to player
Global visibility_levels; ! distance in tree to that

Global SACK_OBJECT; ! current player's holdall item in use

! (8)
Global act_requester;
Global actor; ! = I7 "person asked" = I7 "person reaching"
Global actors_location; ! like real_location, but for the actor
Global actor_location; ! = I7 "actor-location"
Global action;
Global meta; ! action is out of world
Global inp1;
Global inp2;
Array  multiple_object --> MATCH_LIST_WORDS; ! multiple-object list (I6 table array)
Global toomany_flag; ! multiple-object list overflowed
Global multiflag; ! multiple-object being processed
Global multiple_object_item; ! item currently being processed in multiple-object list
Global noun; ! = I7 "noun"
Global second; ! = I7 "second noun"
Global keep_silent; ! true if current action is being tried silently
Global etype; ! parser error number if command not recognised
Global trace_actions = 0;

Global untouchable_object;
Global untouchable_silence;
Global touch_persona;

Global special_word; ! dictionary address of first word in "[text]" token
Global consult_from; ! word number of start of "[text]" token
Global consult_words; ! number of words in "[text]" token
Global parsed_number; ! value from any token not an object
Global special_number1; ! first value, if token not an object
Global special_number2; ! second value, if token not an object

Array  parser_results --> 16; ! for parser to write its results in
Global parser_trace = 0; ! normally 0, but 1 to 5 traces parser workings
Global pronoun_word; ! records which pronoun ("it", "them", ...) caused an error
Global pronoun_obj; ! and what object it was thought to refer to

Global players_command = 100; ! = I7 "player's command"
Global matched_text; ! = I7 "matched text"
Global understand_as_mistake_number; ! which form of "Understand... as a mistake"
Global particular_possession; ! = I7 "particular possession"

! (9)
Global parser_action; ! written by the parser for the benefit of GPRs
Global parser_one;
Global parser_two;
Global parameters; ! number of I7 tokens parsed on the current line
Global action_to_be; ! (if the current line were accepted)
Global action_reversed; ! (parameters would be reversed in order)
Global wn; ! word number within "parse" buffer (from 1)
Global num_words; ! number of words in buffer
Global verb_word; ! dictionary address of command verb
Global verb_wordnum; ! word number of command verb

! (10)
Global scope_reason = PARSING_REASON; ! current reason for searching scope
Global scope_token; ! for "scope=Routine" grammar tokens
Global scope_error;
Global scope_stage; ! 1, 2 then 3
Global advance_warning; ! what a later-named thing will be
! Global reason_code = NULL; ! for the I6 veneer

Global ats_flag = 0; ! for AddToScope routines
Global ats_hls;

! (11)
Global move_pushing;
Global move_from;
Global move_to;
Global move_by;
Global move_through;

! (12)
Global lookmode = TEMPLATE_CONFIGURATION_LOOKMODE; ! 1 = BRIEF, 2 = VERBOSE, 3 = SUPERBRIEF
Global c_style; ! current list-writer style
Global c_depth; ! current recursion depth
Global c_iterator; ! current iteration function
Global lt_value = EMPTY_TEXT_VALUE; ! common value of list_together
Global listing_together; ! object number of one member of a group being listed together
Global listing_size; ! size of such a group
Global c_margin; ! current level of indentation printed by WriteListFrom()
Global inventory_stage = 1; ! 1 or 2 according to the context in which list_together uses

Global debug_scenes = 0;

@h Compass.
I6 identified compass directions as being children of the pseudo-object
|Compass|, so we define it. (Note that |Compass| is not a valid I7 object,
and is used for no other purpose.) Because of the traditional structure
of language definitions, this needs to come first.

=
Object Compass "compass" has concealed;

@h Score and Rankings Table.
The following command tells Inform to compile constant definitions for |INITIAL_MAX_SCORE|
and/or |RANKING_TABLE|, in cases where there are scores and rankings. If there's
no ranking table, |RANKING_TABLE| is left undefined, so that we can |#ifdef| this
possibility later.

=
Global MAX_SCORE = INITIAL_MAX_SCORE;

@h The Old Library.
The I6 library consisted essentially of the parser, the verb routines, and
a pile of utilities and world-modelling code, of which the biggest single
component was the list-writer. The parser lives on below; the verb routines
are gone, with the equivalent functionality having moved upstairs into
I7 source text in the Standard Rules; and the rest of the library largely
lives here:

=

@h Parser.
The largest single block of code in the traditional I6 library part of the
template layer is the parser.

The two pseudo-objects |InformParser| and |InformLibrary| are relics of the
object-oriented approach in I6, and are used only very slightly in the
template layer; they are not used at all in I7, and are not valid for the
"object" kind of value.

The parser includes arrays for typed text and some parsing information
derived from it, and if these should overrun it would cause enigmatic
bugs, as the next arrays in memory would be corrupted: as a tripwire,
the |Protect_I7_Arrays| array consists of two magic values in sequence.
If it is ever discovered to contain the wrong data, the alarm sounds.

=
Object InformParser "(Inform Parser)" has proper;

[ ParserError error_type;
	if (error_type) PrintSingleParagraph(error_type);
	rfalse;
];

Object InformLibrary "(Inform Library)" has proper;

@h Order of Play.
The |Main| routine, where execution begins, and the primitive rules in the
principal rulebooks.

=

@h Activities.
These are numbered upwards from 0 in order of creation. The following arrays
taken together provide, for each activity number: (i) the rulebook numbers
for the before, for, and after stages of the activity, and (ii) a flag
indicating whether the activity is "future action"-capable, that is, is
a parsing activity allowed to make use of the action which conjecturally
might result from the current grammar line being parsed. (This is called
the "action to be", hence "atb".)

@h Object Tree.
The I6 object tree contains |Class| definitions as well as objects, but
we precede both with a pseudo-object called |property_numberspace_forcer|.
It does nothing except to ensure that properties are declared in I6 in the
same sequence as I7 (which need not otherwise happen); it plays no part
in play, and is not a valid I7 "object" value.

@h Tables.
The initial state of the I6 arrays corresponding to each I7 table: see
"Tables.i6t" for details.

@h Equations.
Routines to evaluate from equations.

@h Actions.

@h Phrases.
The following innocent-looking commands tell Inform to compile I6 definitions
for all of the rules which are not I6-written primitives, and also for
adjective definitions, so it results in a fairly enormous cataract of code.

@h Rulebooks.
The literally hundreds of rulebooks are set up here. (In the end a rulebook
is only a (word) array of rule addresses, terminated with a |NULL|.)

@h Scenes.

@h The New Library.
The gleaming, aluminium and glass extension to the library: almost all of it
material new in I7 usage.

=

@h Parsing Tokens.
GPRs, scope and noun filters to be used in grammar lines, but no actual
grammar lines as yet.

=

@h Text generation.

@h Testing commands.

=

@h I6 Inclusions.
This paragraph contains no code, by default: it's a hook on which to hang
verbatim I6 material.

=

@h Entries in constant lists.
Well: most of them, anyway. In particular, all of those which are lists of
texts with substitution will be swept up, which is important for timing
reasons. A second round later on will catch any later ones.

@h To Phrases.
We now compile all of the remaining code in the source text: the "To..."
phrases and all of their attendant text routines, loop-over-scope routines
and so on.

We now have to be quite careful about the sequence of events. Compiling the
text routines is an irrevocable step, after which we must not compile any
new text with substitutions. On the other hand we mustn't leave it any later,
because a text substitution might contain references to the past, or involve
propositions which must be deferred into routines.

@h Chronology.
Similarly, this is where we wrap up all references to past tenses: after this
point, we cannot safely compile any I7 condition in the past tense.

=

@h Grammar.
This is the trickiest matter of timing. We had to leave the grammar lines
until now because the past-tense code above might have needed to investigate
whether the player's command matched a given pattern at some time in the
past (a case which arose naturally in one of the example games, so which
should not be dismissed as an aberration). This is therefore the earliest
point at which we can know for sure that no further grammar lines are
needed.

=
[ UnknownVerb;
	if (TEMPLATE_CONFIGURATION_BITMAP & NO_VERB_VERB_DEFINED_TCBIT) {
		verb_wordnum = 0; return 'no.verb';
	}
	rfalse;
];
[ PrintVerb v;
	if (TEMPLATE_CONFIGURATION_BITMAP & NO_VERB_VERB_DEFINED_TCBIT) {
		if (v == 'no.verb') { print "do something to"; rtrue; }
	}
	rfalse;
];

@h Deferred Propositions.
Most conditions, such as "the score is 10", and descriptions, such as
"open doors which are in lighted rooms", are translated by Inform into
propositions in a form of predicate calculus. Sometimes these can be
compiled immediately to I6 code, but other times they involve complicated
searches and have to be "deferred" into special routines which will
perform them. This is where we compile those routines.

@h Miscellaneous Loose Ends.
And we still aren't done, because we still have:

(1) Routines which switch between possible interpretations of phrases
by performing run-time type checking. (Note that these cannot involve
grammar, or the past tenses, or text substitutions, or deferred propositions.)

(2) Arrays holding constant lists, such as |{2, 3, 4}|, if any.

(3) The string constants, named in the pattern |SC_*|, in alphabetical order.
(This ensures that their packed addresses will have unsigned comparison
ordering equivalent to alphabetical order.)

(4) "Stub" I6 constants for property names where properties aren't used,
to prevent them causing errors if they are referred to in code but not
actually present in any object (as can easily happen with extensions
presenting optional features which the user chooses not to employ).

(5) Counters are used to allocate cells of storage to inline phrases which
need a permanent state associated with them: see the Standard Rules. Since
all I7 source text has been compiled by now, we know the final values of
the counters, and therefore the amount of storage we need to allocate.

(6) Similarly, each "quotation" box needs its own cell of memory.

=
Array Runtime_Quotations_Displayed --> CCOUNT_QUOTATIONS;

@h Block Values.
These are values which are pointers to more elaborate data on the memory heap,
rather than values in themselves: they point to "blocks". A section of code
handles the heap, and there is then one further section to support each of
the kinds of value in question.

=
