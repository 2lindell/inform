Programs Template.

How dialogue beat programs are stored and interpreted.

@h D-code.
Each dialogue beat contains a program which lays out the structure of its lines
and choices. This program is stored in a simple bytecode which we'll call "D-code",
for the sake of giving it a name, though it is very rudimentary and would not
even be Turing-complete except for the ability to apply conditions and state
changes by "now" and "if" side-effects.

A program consists of a sequence of 0 or more two-word instructions terminated
by the word 0. Each instruction has an opcode word followed by an operand word.
The opcode word is encoded as |100*I + D|, where |I| is an instruction code
ranging from 1 upwards, and |D| is the depth within the dialogue tree, ranging
from 0 upwards. Finding 0 in the opcode word position therefore unambiguously
marks the end, since |I| cannot be 0 even though |D| can.

Depth levels correspond to the tree structure in the original dialogue. This
is not quite the same as the number of tab stops in the source code because
Inform regroups choice nodes under decision nodes (one for each decision to
be taken), which are implicit in the source text, and therefore don't appear
in the tab indentation. This effectively pushes all choice nodes out by 1
in depth, compared to the tab indentation level, each time a nested decision
is reached.

|D| begins at 0, is never negative, and is never more than 1 greater than the
previous instruction. The Inform compiler never generates |D| values greater
than about 25 (see //if: Dialogue Nodes//), so there is no danger of |D|
reaching 100 and corrupting the |I| value.

There are only three instruction codes:

|LINE_DCODEI| means a dialogue line, and the operand then represents the
enumerated value for the dialogue line.

|CHOICE_DCODEI| similarly represents a choice. All such instructions are
immediate children of a |DECISION_DCODEI| instruction.

|DECISION_DCODEI| is a decision point, and the operand is the "decision type".
All immediate children of a |DECISION_DCODEI| instruction are |CHOICE_DCODEI|s.

=
Constant LINE_DCODEI = 1;
Constant CHOICE_DCODEI = 2;
Constant DECISION_DCODEI = 3;

@h Containment.
This enables us to implement the test for whether a given line or choice
occurs in a beat, because we need only look to see whether it occurs as
operand in the instructions for the beat's program.

|DirectorTestContainment(dl, db, DIALOGUE_LINE_TY, DIALOGUE_BEAT_TY)| tests
whether the line |dl| occurs in the beat |db|, returning |true| or |false|.

|DirectorTestContainment(dc, db, DIALOGUE_CHOICE_TY, DIALOGUE_BEAT_TY)| tests
whether the choice |dc| occurs in the beat |db|, returning |true| or |false|.

=
[ DirectorTestContainment X db tX tb program pc instruction wanted;
	if (tb ~= DIALOGUE_BEAT_TY) { print "*** Not a db ***"; rfalse; }
	if (tX ~= DIALOGUE_LINE_TY or DIALOGUE_CHOICE_TY) { print "*** Not a dl/dc ***"; rfalse; }
	if ((db < 1) || (db > NO_DIALOGUE_BEATS)) rfalse;
	if (tX == DIALOGUE_LINE_TY) {
		if ((X < 1) || (X > NO_DIALOGUE_LINES)) rfalse;
		wanted = LINE_DCODEI;
	} else {
		if ((X < 1) || (X > NO_DIALOGUE_CHOICES)) rfalse;
		wanted = CHOICE_DCODEI;
	}
	program = DirectorBeatGetProgram(db);
	pc = 0;
	instruction = (program-->pc)/100;
	while (instruction) {
		if ((instruction == wanted) && (program-->(pc+1) == X)) rtrue;
		pc = pc + 2;
		instruction = (program-->pc)/100;
	}
	rfalse;
];

@h Disassembly.
Purely for debugging purposes:

=
[ DirectorDisassemble db pc which depth i program operand;
	if ((db <= 0) || (db > NO_DIALOGUE_BEATS)) return;
	print (PrintDialogueBeatName) db;
	print " (";
	if (DirectorBeatAvailable(db)) print "available"; else print "unavailable";
	print ", ";
	if (DirectorBeatRelevant(db)) print "relevant"; else print "irrelevant";
	print ", ";
	if (DirectorBeatAccessible(db, player)) print "accessible"; else print "inaccessible";
	print ", ";
	if (GProperty(DIALOGUE_BEAT_TY, db, performed)) print "performed"; else print "unperformed";
	print ", ";
	if (GProperty(DIALOGUE_BEAT_TY, db, recurring)) print "recurring"; else print "non-recurring";
	print ", ";
	if (GProperty(DIALOGUE_BEAT_TY, db, spontaneous)) print "spontaneous"; else print "unspontaneous";
	print "):^";
	program = DirectorBeatGetProgram(db);
	if (program) {
		pc = 0;
		while (program-->pc) {
			which = (program-->pc)/100;
			depth = (program-->pc)%100;
			operand = (program-->(pc+1));
			for (i=0: i<depth: i++) print "  ";
			switch (which) {
				LINE_DCODEI: print "LINE ", (PrintDialogueLineName) operand, "^";
				CHOICE_DCODEI: print "CHOICE ", (PrintDialogueChoiceName) operand, "^";
				DECISION_DCODEI: print "DECISION of type ", operand, "^";
				default: print "*** Unimplemented ***^";
			}
			pc = pc + 2;
		}		
	}
];

@h The D-stack.
The interpreter for D-code has to perform beats (and therefore their programs)
in a way which can easily nest, since one beat can call for another to be
performed and then continue. We therefore need the full state of the interpreter
to exist on a stack:

|DirectorStackBeat| holds the beat whose program is being interpreted.

|DirectorStackPC| holds the current PC ("program counter"), which counts in
words from the start of the program, which is position 0. It therefore
increases by 2 to advance by one instruction.

|DirectorStackMin| holds the minimum instruction level for this frame.

|DirectorStackStart| is a flag which is true if and only if the current
frame started from PC 0, that is, from the beginning of the beat. 

|DirectorStackDecisionPC| holds the PC position of the last instruction
node of |DECISION_DCODEI| type, that is, the last decision; or -1 if no
decision node has been reached in this stack frame yet.

|DirectorStackLastPC| holds the PC position before the most recent
instruction was executed, or 0 if none has yet been executed.

|DirectorStackChoices| holds a valid Inform list, which in turn holds the
set of choices in the current decision. If no decision has been reached in
the execution of the stack frame, the list is empty.

|DirectorStackLastSpeaker| holds the identity of the last person/object to
be the speaker in a line which was actually performed (and note that not
all |LINE_DCODEI| instructions result in a performance). It is |nothing|
if no line has been performed in (this performance of) the current beat,
except perhaps for narration.

|DirectorStackLastInterlocutor| similarly holds the identity of the interlocutor
for that line. It is |nothing| if no line has been performed in (this performance
of) the current beat, except perhaps for narration, or if the most recently
performed line had no interlocutor.

=
Constant MAX_BEAT_PERFORMANCE_NESTING = 20;

Global director_sp = 0;
Array DirectorStackBeat --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackPC --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackMin --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackStart --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackDecisionPC --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackLastPC --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackChoices --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackLastSpeaker --> MAX_BEAT_PERFORMANCE_NESTING;
Array DirectorStackLastInterlocutor --> MAX_BEAT_PERFORMANCE_NESTING;

@h Pushing and popping.
Two functions exist to create a new "stack frame", pushing, or to destroy
an existing one, popping the stack.

|DirectorPush| must specify the beat, the minimum instruction level to
execute (by default 0), and the initial pc (position in the program) to execute
from (by default 0). Within such a frame, the D-code interpreter will run
from the PC position until it hits an instruction of too low a level, or until
it hits the end of the program. In effect, it can execute either the entire
dialogue tree, or any single branch of it.

=
[ DirectorPush db min pc start_flag;
	if (director_sp >= MAX_BEAT_PERFORMANCE_NESTING)
		"*** Director stack overflow: too many open beats ***";
	DirectorStackBeat-->director_sp = db;
	DirectorStackDecisionPC-->director_sp = -1;
	DirectorStackLastPC-->director_sp = 0;
	DirectorStackPC-->director_sp = pc;
	DirectorStackMin-->director_sp = min;
	if (pc == 0) DirectorStackStart-->director_sp = true;
	else DirectorStackStart-->director_sp = false;
	DirectorStackLastSpeaker-->director_sp = nothing;
	DirectorStackLastInterlocutor-->director_sp = nothing;
	if (DirectorStackChoices-->director_sp == 0) {
		DirectorStackChoices-->director_sp = BlkValueCreate(LIST_OF_TY);
		BlkValueWrite(DirectorStackChoices-->director_sp, LIST_ITEM_KOV_F, DIALOGUE_CHOICE_TY);
	} else {
		LIST_OF_TY_SetLength(DirectorStackChoices-->director_sp, 0);
	}
	director_sp++;
	if (debug_dialogue >= 2) { print "-- Push to: "; DirectorTraceStack(); }
];

[ DirectorPop;
	director_sp--;
	if (debug_dialogue >= 2) { print "-- Pop to: "; DirectorTraceStack(); }
];

@h Flow operations.
|DirectorAgain| implements the flow marker |<-|; |DirectorStop| implements |-> stop|.
Both involve popping, either back to the last decision point (which means adjusting
the PC as well) or to the last time a new beat began.

=
[ DirectorAgain;
	while (director_sp > 0) {
		if (debug_dialogue >= 2) { print "-- again at: "; DirectorTraceStack(); }
		DirectorPop();
		if (DirectorStackDecisionPC-->(director_sp-1) >= 0) {
			DirectorStackPC-->(director_sp-1) = DirectorStackDecisionPC-->(director_sp-1);
			break;
		}
	}
];

[ DirectorStop enough;
	while (director_sp > 0) {
		enough = false;
		if (DirectorStackStart-->(director_sp-1)) enough = true;
		DirectorPop();
		if (enough) break;
	}
];

@h Main interpreter loop.
Calling |DirectorRun()| lets the interpreter rip, running until the end of
the current stack frame's subtree, or some catastrophe happened, or we need to
wait for the player to enter a command into the command parser. (In the
latter case we can resume where we left off with just by calling |DirectorRun()|
again.)

Note that this loop should never hit a |CHOICE_DCODEI| instruction, because
those are always underneath |DECISION_DCODEI| instructions -- which it does hit.

=
[ DirectorRun program pc last_pc instruction operand depth next_instruction sc;
	while (true) {
		! There must be a stack frame
		if (director_sp == 0) return;
		
		! The story must not have finished
		if (deadflag) { director_sp = 0; return; }
		
		! If there are choices to be made, we have to wait for the command
		! input loop and some sort of action to be generated, so return for now
		if (LIST_OF_TY_GetLength(DirectorStackChoices-->(director_sp-1)) > 0) return;

		! If the beat is tied to a scene and the scene has itself finished for
		! unrelated reasons, end the beat now
		sc = DirectorBeatGetScene(DirectorStackBeat-->(director_sp-1));
		if ((sc) && (scene_status-->(sc - 1) == 0)) { DirectorStop(); return; }

		pc = DirectorStackPC-->(director_sp-1);
		if (pc == -1) { DirectorPop(); return; }
		last_pc = pc;
		DirectorStackLastPC-->(director_sp-1) = last_pc;

		! Fetch and decode the next instruction
		program = DirectorBeatGetProgram(DirectorStackBeat-->(director_sp-1));
		instruction = (program-->pc)/100;
		depth = (program-->pc)%100;
		operand = program-->(pc+1);

		if (instruction == 0) { DirectorPop(); return; }
		if (depth < DirectorStackMin-->(director_sp-1)) { DirectorPop(); return; }

		! Advance the PC to the next instruction to be read after this one, or
		! to -1 if there is no next instruction in the current frame
		pc = pc + 2;
		while ((program-->pc)%100 > depth) pc = pc + 2;
		if (program-->pc == 0) pc = -1;
		else if (((program-->pc)%100) < DirectorStackMin-->(director_sp-1)) pc = -1;

		if (debug_dialogue >= 2) {
			print "-- Instruction (";
			if (pc >= 0) print "next is ", pc; else print "last";
			print "): "; DirectorTraceStack();
		}
	
		! Store the next PC position
		DirectorStackPC-->(director_sp-1) = pc;
	
		switch (instruction) {
			LINE_DCODEI:
				line_performance_count++;
				DirectorExecuteLine(operand);
			DECISION_DCODEI:
				DirectorStackDecisionPC-->(director_sp-1) = last_pc;
				DirectorExecuteDecision(operand);
			CHOICE_DCODEI:
				print "*** Encountered CHOICE_DCODEI ***^";
			default: "*** Bad D-code instruction ***";
		}
	}
];

[ DirectorExecuteLine dl last_pc program depth next_instruction;
	last_pc = DirectorStackLastPC-->(director_sp-1);
	program = DirectorBeatGetProgram(DirectorStackBeat-->(director_sp-1));
	depth = (program-->last_pc)%100;
	if (DirectorPerformLine(dl)) {
		! Descend to the subtree of dialogue underneath this line, if any
		next_instruction = program-->(last_pc+2);
		if ((next_instruction) && (next_instruction % 100 == depth+1)) {
			DirectorPush(DirectorStackBeat-->(director_sp-1), depth+1, last_pc+2);
			DirectorRun();
		}
		rtrue;
	}
	rfalse;
];

[ DirectorExecuteDecision decision dc count n spc list;
	list = DirectorStackChoices-->(director_sp-1);
	DirectorGetChoice(list);
	count = LIST_OF_TY_GetLength(list);
	if (debug_dialogue >= 2) {
		if (count == 0) {
			print "-- no available options^";
		} else if (decision == 2 or 3) {
			print "-- available options: "; LIST_OF_TY_Say(list); print "^";
		}
	}
	if (count == 0) return;
	switch (decision) {
		1: "*** blank dtd ***";
		2: 	DivideParagraphPoint();
			if (OFFERING_A_DIALOGUE_CHOICE == 0) "*** no activity ***";
			else {
				BeginActivity(OFFERING_A_DIALOGUE_CHOICE, list);
				if ((ForActivity(OFFERING_A_DIALOGUE_CHOICE, list)) &&
					(RulebookFailed())) rfalse;
				EndActivity(OFFERING_A_DIALOGUE_CHOICE, list);
			}
			DivideParagraphPoint();
			n = DirectorPickANumber(count);
			dc = LIST_OF_TY_GetItem(list, n);
			LIST_OF_TY_SetLength(list, 0);
			style bold;
			TEXT_TY_Say(DirectorChoiceRawContent(dc));
			style roman;
			print "^";
			say__p = 1;
			DivideParagraphPoint();
			DirectorExerciseChoice(dc);
		3:  rfalse;
		4:  dc = LIST_OF_TY_GetItem(list, 1);
			LIST_OF_TY_SetLength(list, 0);
			if (dc) DirectorFollowFlowMarker(dc);
			else "*** c = 0 ***";
		default: "*** unknown dtd ***";
	}
	rfalse;
];
