builtin base OBJECT_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: object
	plural: objects

	default-value: 0

	printing-routine: PrintShortName
	printing-routine-actions: DA_Name
	constant-compilation-method: special
	can-coincide-with-property: no

	description: an object
	index-priority: 1
	index-default-value: nothing
	specification-text: Objects are values intended to simulate physical things: places, people, things, and so on. They come in many kinds. The special value 'nothing' is also allowed, and can be used to mean 'no object at all'.
}

builtin base NUMBER_TY {
	conforms-to: ARITHMETIC_VALUE_TY
	singular: number
	plural: numbers

	default-value: 0
	comparison-routine: signed
	can-exchange: yes

	parsing-routine: DECIMAL_TOKEN
	printing-routine: DecimalNumber
	printing-routine-actions: DA_Number
	constant-compilation-method: literal

	description: a number
	documentation-reference: kind_number
	index-priority: 2
	index-default-value: 0
	specification-text: Whole number in the range -32768, -32767, ..., -2, -1, 0, 1, 2, 3, ..., 32767: small numbers can be written textually as 'one', 'two', 'three', ..., 'ten', 'eleven', 'twelve'. (A much larger number range is allowed if we compile the source to Glulx rather than the Z-machine: see the Settings panel.)
}

builtin base REAL_NUMBER_TY {
	conforms-to: REAL_ARITHMETIC_VALUE_TY
	singular: real number
	plural: real numbers

	comparison-routine: REAL_NUMBER_TY_Compare
	default-value: 0
	can-exchange: yes
	cast: NUMBER_TY

	parsing-routine: FLOAT_TOKEN
	printing-routine: REAL_NUMBER_TY_Say
	printing-routine-actions: REAL_NUMBER_TY_Say
	constant-compilation-method: literal

	description: a real number
	documentation-reference: kind_real_number
	index-priority: 2
	index-default-value: 0
	specification-text: A real, or 'floating-point' number: the difference between this and ordinary "number" is that real numbers can hold values like 3.141, which aren't whole numbers, and can also hold very large or very small quantities in an approximate way. (Use of real numbers is only allowed if we compile the source to Glulx rather than the Z-machine: see the Settings panel.)
}

builtin base TRUTH_STATE_TY {
	conforms-to: UNDERSTANDABLE_VALUE_TY
	singular: truth state
	plural: truth states

	default-value: false
	can-exchange: yes

	loop-domain-schema: for (*1=0: *1<=1: *1++)
	parsing-routine: TRUTH_STATE_TOKEN
	printing-routine: DA_TruthState
	printing-routine-actions: DA_TruthState
	constant-compilation-method: literal

	description: something which is either true or false
	documentation-reference: kind_truthstate
	index-default-value: false
	specification-text: The state of whether something is 'true' or 'false'. (In other computing languages, this might be called 'boolean', after the 19th-century logician George Boole, who first realised this was a kind of value.)
}

builtin base TEXT_TY {
	conforms-to: POINTER_VALUE_TY
	singular: text
	plural: texts

	default-value: 0
	multiple-block: yes
	heap-size-estimate: 256
	small-block-size: 2
	cast: SNIPPET_TY
	can-exchange: yes

	recognition-only-GPR: TEXT_TY_ROGPR
	distinguisher: TEXT_TY_Distinguish
	comparison-routine: BlkValueCompare
	printing-routine: TEXT_TY_Say
	constant-compilation-method: special

	description: some text
	index-default-value: ""
	specification-text: Some text in double quotation marks, perhaps with substitutions written in square brackets.
}

builtin base SNIPPET_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: snippet
	plural: snippets

	default-value: 101

	printing-routine: PrintSnippet
	constant-compilation-method: none

	description: a snippet
	documentation-reference: kind_snippet
	index-default-value: <i>word 1 of command</i>
	specification-text: A fragment of the player's most recent typed command, taking in a run of consecutive words.
}

builtin base UNICODE_CHARACTER_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: unicode character
	plural: unicode characters

	default-value: 32

	constant-compilation-method: literal

	description: a Unicode character
	index-default-value: unicode 32 (<i>a space</i>)
	specification-text: A single character - a letter or item of punctuation.
}

builtin base USE_OPTION_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: use option
	plural: use options

	default-value: 0

	loop-domain-schema: for (*1=0: *1<NO_USE_OPTIONS: *1++)
	printing-routine: PrintUseOption
	constant-compilation-method: special

	description: the name of a use option
	index-priority: 6
	index-default-value: the ineffectual option
	specification-text: One of the optional ways to configure Inform, such as the 'authorial modesty option'.
}

builtin base RESPONSE_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: response
	plural: responses

	default-value: 0

	loop-domain-schema: for (*1=1: *1<=NO_RESPONSES: *1++)
	printing-routine: PrintResponse
	constant-compilation-method: special

	description: the name of a response
	index-priority: 6
	index-default-value: ?
	specification-text: One of the standard responses issued by the Standard Rules or other extensions.
}

builtin base VERB_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: verb
	plural: verbs

	default-value: 0

	loop-domain-schema: for (*2=0, *1=TableOfVerbs-->*2: *1: *2++, *1=TableOfVerbs-->*2)
	printing-routine: PrintVerbAsValue
	constant-compilation-method: special

	description: the name of a verb
	documentation-reference: kind_verb
	index-priority: 6
	index-default-value: verb be
	specification-text: One of the verbs which Inform knows how to conjugate.
}

builtin base TABLE_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: table name
	plural: table names

	default-value: TheEmptyTable

	loop-domain-schema: for (*2=0, *1=TableOfTables-->*2: *1: *2++, *1=TableOfTables-->*2)
	printing-routine: PrintTableName
	constant-compilation-method: special

	description: the name of a table
	documentation-reference: kind_tablename
	index-priority: 6
	index-default-value: <i>a table with no rows or columns</i>
	indexed-grey-if-empty: yes
	specification-text: Like tables of information in a book or newspaper, tables in Inform hold values which have been organised into rows and columns. A table name is just a single value, identifying which table is meant - say, 'Table of US Presidents' might be a table name value.
}

builtin base EQUATION_TY {
	conforms-to: STORED_VALUE_TY
	singular: equation name
	plural: equation names

	default-value: 0

	printing-routine: DA_Number
	constant-compilation-method: special

	description: the name of an equation
	index-priority: 6
	index-default-value: <i>an equation doing nothing</i>
	indexed-grey-if-empty: yes
	specification-text: Like formulae in a textbook or a scientific paper, equations in Inform are written out in displayed form and given names.
}

builtin base RULEBOOK_OUTCOME_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: rulebook outcome
	plural: rulebook outcomes

	printing-routine: RulebookOutcomePrintingRule
	constant-compilation-method: special
	index-default-value: allow access

	description: the name of a rulebook outcome
	index-priority: 6
}

builtin constructor PHRASE_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: phrase k -> l
	plural: phrases k -> l
	terms: contravariant list, covariant optional

	printing-routine: SayPhraseName
	constant-compilation-method: special

	index-default-value: <i>always the default value of L</i>
}

builtin constructor VARIABLE_TY {
	conforms-to: STORED_VALUE_TY

	terms: covariant
	singular: variable-pointer | k variable-pointer
	plural: variable-pointers | k variable-pointers

	index-priority: 0
	! Represents a variable name
}

builtin constructor RELATION_TY {
	conforms-to: POINTER_VALUE_TY
	singular: relation | relation of k to l | relation of k
	plural: relations | relations of k to l | relations of k
	terms: covariant, covariant

	default-value: 0
	multiple-block: yes
	heap-size-estimate: 8
	can-exchange: yes

	comparison-routine: BlkValueCompare
	constant-compilation-method: special
	distinguisher: RELATION_TY_Distinguish
	printing-routine: RELATION_TY_Say

	description: a relation of K to L
	index-default-value: <i>a relation never holding</i>
}

builtin constructor RULE_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: rule | k based rule | rule producing l | k based rule producing l
	plural: rules | k based rules | rules producing l | k based rules producing l
	terms: contravariant optional, covariant optional

	cast: RULEBOOK_TY
	default-value: LITTLE_USED_DO_NOTHING_R

	printing-routine: RulePrintingRule
	constant-compilation-method: special

	description: the name of a rule
	documentation-reference: kind_rule
	index-default-value: the little-used do nothing rule
	indexed-grey-if-empty: yes
	specification-text: One of many, many rules which determine what happens during play. Rules can be triggered by scenes beginning or ending, by certain actions, at certain times, or in the course of carrying out certain activities.
}

builtin constructor RULEBOOK_TY {
	conforms-to: SAYABLE_VALUE_TY
	singular: rulebook | k based rulebook | rulebook producing l | k based rulebook producing l
	plural: rulebooks | k based rulebooks | rulebooks producing l | k based rulebooks producing l
	terms: contravariant optional, covariant optional

	default-value: 0

	constant-compilation-method: special
	printing-routine: RulePrintingRule

	description: the name of a rulebook
	documentation-reference: kind_rulebook
	index-default-value: the action-processing rules
	specification-text: A list of rules to follow, in sequence, to get something done. A rulebook is like a ring-binder, with the individual rules as sheets of paper. Inform normally sorts these into their 'natural' order, with the most specific rules first, but it's easy to shuffle the pages if you need to. When some task is carried out during play, Inform is normally working through a rulebook, turning the pages one by one.
}

builtin constructor ACTIVITY_TY {
	conforms-to: STORED_VALUE_TY
	singular: activity | activity on k
	plural: activities | activities on k
	terms: contravariant optional

	default-value: PRINTING_THE_NAME_ACT

	constant-compilation-method: special

	description: an activity
	documentation-reference: kind_activity
	index-default-value: printing the name
	specification-text: An activity is something which Inform does as part of the mechanics of play - for instance, printing the name of an object, which Inform often has to do. An activity can happen by itself ('printing the banner text', for instance) or can be applied to an object ('printing the name of something', say).
}

builtin constructor LIST_OF_TY {
	conforms-to: POINTER_VALUE_TY
	singular: list of k
	plural: lists of k
	terms: covariant

	default-value: 0
	multiple-block: yes
	heap-size-estimate: 256
	can-exchange: yes

	comparison-routine: BlkValueCompare
	constant-compilation-method: special
	distinguisher: LIST_OF_TY_Distinguish
	printing-routine: LIST_OF_TY_Say

	description: a list of
	documentation-reference: kind_listof
	index-default-value: { }
	specification-text: A flexible-length list of values, where all of the items have to have the same kind of value as each other - for instance, a list of rooms, or a list of lists of numbers. The empty list, with no items yet, is written { }, and a list with items in is written with commas dividing them - say {2, 5, 9}.
}

builtin constructor DESCRIPTION_OF_TY {
	conforms-to: STORED_VALUE_TY
	singular: description of k
	plural: descriptions of k
	terms: covariant

	default-value: Prop_Falsity

	constant-compilation-method: special

	description: a description of
	documentation-reference: kind_description
	index-default-value: <i>matching nothing</i>
	specification-text: A description of a set of values, where all of the items have to have the same kind of value as each other - for instance, 'even numbers' or 'open doors which are in lighted rooms'.
}

builtin constructor PROPERTY_TY {
	conforms-to: STORED_VALUE_TY
	singular: property | k valued property
	plural: properties | k valued properties
	terms: covariant

	constant-compilation-method: special
	printing-routine: PROPERTY_TY_Say

	description: a property of something
}

builtin constructor TABLE_COLUMN_TY {
	conforms-to: STORED_VALUE_TY
	singular: table column | k valued table column
	plural: table columns | k valued table columns
	terms: covariant

	constant-compilation-method: special

	description: the name of a column
}

builtin constructor COMBINATION_TY {
	conforms-to: POINTER_VALUE_TY
	singular: combination | combination k | combination k and l
	plural: combinations | combinations k | combinations k and l
	terms: covariant list, covariant list

	default-value: 0
	multiple-block: yes
	heap-size-estimate: 256
	can-exchange: yes

	comparison-routine: BlkValueCompare
	constant-compilation-method: special
	distinguisher: COMBINATION_TY_Distinguish
	printing-routine: COMBINATION_TY_Say

	description: a list of
	documentation-reference: kind_listof
	index-priority: 0
	index-default-value: { }
	specification-text: A way to combine a fixed small number of values, of possibly different kinds, together.
}
