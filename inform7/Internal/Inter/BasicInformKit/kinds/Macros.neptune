#DEFAULTS:
defined-in-source-text:no
is-incompletely-defined:no
comparison-routine:UnsignedCompare
can-coincide-with-property:no
created-with-assertions:no
has-i6-GPR:no
multiple-block:no
constant-compilation-method:none

#KIND-VARIABLE:
group:1
constant-compilation-method:none
i6-printing-routine:DA_Number
i6-printing-routine-actions:DA_Number
index-priority:0

#KIND-OF-KIND:
group:2
constant-compilation-method:none
i6-printing-routine:DA_Number
i6-printing-routine-actions:DA_Number
index-priority:0

#BASE-KIND:
group:3
conforms-to:VALUE_TY
index-priority:3

#KIND-CONSTRUCTOR:
group:4
conforms-to:VALUE_TY
index-priority:8

*UNDERSTOOD-VARIABLE:
<kind> understood is a <kind> which varies.
*END

! New kinds of value are initially given these settings:

#NEW:
apply-macro:#BASE-KIND
conforms-to:STORED_VALUE_TY
is-incompletely-defined:yes
created-with-assertions:yes
can-coincide-with-property:yes
defined-in-source-text:yes
description:a designed type

! When the source text specifies either a named constant value, or a literal
! pattern, it decides whether the new type is to be an enumeration or a unit,
! at which point one of the following macros is applied to the type:

#ENUMERATION:
conforms-to:ENUMERATED_VALUE_TY
conforms-to:SAYABLE_VALUE_TY
is-incompletely-defined:no
created-with-assertions:yes
default-value:1
index-default-value:<first-constant>
index-priority:5
has-i6-GPR:yes
comparison-routine:signed
can-exchange:yes
description:a designed type
constant-compilation-method:quantitative
apply-template:*UNDERSTOOD-VARIABLE

#LINGUISTIC:
index-priority:7

#UNIT:
conforms-to:ARITHMETIC_VALUE_TY
conforms-to:SAYABLE_VALUE_TY
is-incompletely-defined:no
comparison-routine:signed
can-exchange:yes
defined-in-source-text:yes
created-with-assertions:no
default-value:0
index-default-value:<0-in-literal-pattern>
index-priority:2
has-i6-GPR:yes
constant-compilation-method:literal
apply-template:*UNDERSTOOD-VARIABLE

#REAL:
conforms-to:ARITHMETIC_VALUE_TY
conforms-to:REAL_ARITHMETIC_VALUE_TY
