macro #BASE {
	index-priority: 3
}
macro #CONSTRUCTOR {
	index-priority: 8
}
macro #PUNCTUATION {
	index-priority: 0
}
macro #PROTOCOL {
	index-priority: 0
}

! New kinds of value are initially given these settings:

invention *UNDERSTOOD-VARIABLE {
	<kind> understood is a <kind> which varies.
}

macro #NEW {
	conforms-to: STORED_VALUE_TY
	is-incompletely-defined: yes
	created-with-assertions: yes
	can-coincide-with-property: yes
	description: a designed type
}

! When the source text specifies either a named constant value, or a literal
! pattern, it decides whether the new type is to be an enumeration or a unit,
! at which point one of the following macros is applied to the type:

macro #ENUMERATION {
	conforms-to: ENUMERATED_VALUE_TY
	is-incompletely-defined: no
	created-with-assertions: yes
	default-value: 1
	index-default-value: <first-constant>
	index-priority: 5
	comparison-routine: signed
	can-exchange: yes
	description: a designed type
	constant-compilation-method: quantitative
	invent-source-text: *UNDERSTOOD-VARIABLE
}

macro #UNIT {
	conforms-to: ARITHMETIC_VALUE_TY
	is-incompletely-defined: no
	comparison-routine: signed
	can-exchange: yes
	created-with-assertions: no
	default-value: 0
	index-default-value: <0-in-literal-pattern>
	index-priority: 2
	constant-compilation-method: literal
	invent-source-text: *UNDERSTOOD-VARIABLE
}

macro #REAL {
	conforms-to: REAL_ARITHMETIC_VALUE_TY
}

macro #LINGUISTIC {
	index-priority: 7
}
