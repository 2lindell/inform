Glk Template.

Glk is a fully-featured input-output model, designed by Andrew Plotkin for use
with the Glulx virtual machine, but not used only for that. All 32-bit Inform
programs use Glk.

@h Glk definitions.
General Glk constants and properties.

=
Constant GLK_NULL 0;

Property line_input_buffer_addr;
Property line_input_buffer_curlen;
Property line_input_buffer_maxlen;
Property line_input_buffer_uni;

@h Glk/Glulx gestalts.
A few small definitions for handling Glk/Glulx gestalts.

=
! Can't use gestalt_GarglkText_FAKE or GLULX_GESTALT_Double here as they don't have the correct values yet
Array Cached_Glk_Gestalts --> (24 + 7);
Array Cached_Glulx_Gestalts --> (13 + 1);

[ GlkFeatureTest id;
	return Cached_Glk_Gestalts-->id;
];

[ GlulxFeatureTest id;
	return Cached_Glulx_Gestalts-->id;
];

@h Glk object recovery.
|GGRecoverObjects| handles recovering the Glk objects after restarting or restoring.

=
Global current_glk_object_rock = 0;
Global current_glk_object_reference = 0;

[ GGRecoverObjects ref;
	! Reset all Glk references as if none existed
	FollowRulebook(RESET_GLK_REFERENCES_RB);

	! Iterate through each of the windows, streams, file refs and sound channels
	while (ref = glk_window_iterate(ref, gg_arguments)) {
		current_glk_object_rock = gg_arguments-->0;
		current_glk_object_reference = ref;
		FollowRulebook(IDENTIFY_WINDOWS_RB);
	}
	while (ref = glk_stream_iterate(ref, gg_arguments)) {
		current_glk_object_rock = gg_arguments-->0;
		current_glk_object_reference = ref;
		FollowRulebook(IDENTIFY_STREAMS_RB);
	}
	while (ref = glk_fileref_iterate(ref, gg_arguments)) {
		current_glk_object_rock = gg_arguments-->0;
		current_glk_object_reference = ref;
		FollowRulebook(IDENTIFY_FILEREFS_RB);
	}
	if (glk_gestalt(gestalt_Sound, 0)) {
		while (ref = glk_schannel_iterate(ref, gg_arguments)) {
			current_glk_object_rock = gg_arguments-->0;
			current_glk_object_reference = ref;
			FollowRulebook(IDENTIFY_SCHANNELS_RB);
		}
	}

	! Tell the game to tie up any loose ends
	FollowRulebook(GLK_OBJECT_UPDATING_RB);
	rfalse;
];

@ The built in object recovery rules.

=
[ RESET_GLK_REFERENCES_R;
	Main_Window.glk_ref = 0;
	Main_Window.glk_rock = GG_MAINWIN_ROCK;
	Status_Window.glk_ref = 0;
	Status_Window.glk_rock = GG_STATUSWIN_ROCK;
	Quote_Window.glk_ref = 0;
	Quote_Window.glk_rock = GG_QUOTEWIN_ROCK;
	gg_mainwin = 0;
	gg_statuswin = 0;
	gg_quotewin = 0;
	gg_scriptfref = 0;
	gg_scriptstr = 0;
	gg_savestr = 0;
	statuswin_cursize = 0;
	gg_foregroundchan = 0;
	gg_backgroundchan = 0;
	gg_commandstr = 0;
	gg_command_reading = false;
	rfalse;
];

[ CACHE_GESTALTS_R ix res;
	for (ix = 0: ix < gestalt_GarglkText_FAKE: ix++) {
		Cached_Glk_Gestalts-->ix = glk_gestalt(ix, 0);
	}
	Cached_Glk_Gestalts-->gestalt_GarglkText_FAKE = glk_gestalt(gestalt_GarglkText, 0);
	Cached_Glk_Gestalts-->gestalt_DrawImage_BUFFER = glk_gestalt(gestalt_DrawImage, wintype_TextBuffer);
	Cached_Glk_Gestalts-->gestalt_DrawImage_GRAPHICS = glk_gestalt(gestalt_DrawImage, wintype_Graphics);
	Cached_Glk_Gestalts-->gestalt_HyperlinkInput_BUFFER = glk_gestalt(gestalt_HyperlinkInput, wintype_TextBuffer);
	Cached_Glk_Gestalts-->gestalt_HyperlinkInput_GRID = glk_gestalt(gestalt_HyperlinkInput, wintype_TextGrid);
	Cached_Glk_Gestalts-->gestalt_MouseInput_GRAPHICS = glk_gestalt(gestalt_MouseInput, wintype_Graphics);
	Cached_Glk_Gestalts-->gestalt_MouseInput_GRID = glk_gestalt(gestalt_MouseInput, wintype_TextGrid);
	for (ix = 0: ix <= GLULX_GESTALT_Double: ix++) {
		@gestalt ix 0 res;
		Cached_Glulx_Gestalts-->ix = res;
	}
	rfalse;
];

[ IDENTIFY_WINDOWS_R;
	switch (current_glk_object_rock) {
		GG_MAINWIN_ROCK:
			gg_mainwin = current_glk_object_reference;
			Main_Window.glk_ref = gg_mainwin;
		GG_STATUSWIN_ROCK:
			gg_statuswin = current_glk_object_reference;
			Status_Window.glk_ref = gg_statuswin;
		GG_QUOTEWIN_ROCK:
			gg_quotewin = current_glk_object_reference;
			Quote_Window.glk_ref = gg_quotewin;
	}
	rfalse;
];

[ IDENTIFY_STREAMS_R;
	switch (current_glk_object_rock) {
		GG_SAVESTR_ROCK:
			gg_savestr = current_glk_object_reference;
		GG_SCRIPTSTR_ROCK:
			gg_scriptstr = current_glk_object_reference;
		GG_COMMANDWSTR_ROCK:
			gg_commandstr = current_glk_object_reference;
			gg_command_reading = false;
		GG_COMMANDRSTR_ROCK:
			gg_commandstr = current_glk_object_reference;
			gg_command_reading = true;
	}
	rfalse;
];

[ IDENTIFY_FILEREFS_R;
	switch (current_glk_object_rock) {
		GG_SCRIPTFREF_ROCK:
			gg_scriptfref = current_glk_object_reference;
	}
	rfalse;
];

[ IDENTIFY_SCHANNELS_R;
	switch (current_glk_object_rock) {
		GG_FOREGROUNDCHAN_ROCK:
			gg_foregroundchan = current_glk_object_reference;
		GG_BACKGROUNDCHAN_ROCK:
			gg_backgroundchan = current_glk_object_reference;
	}
	rfalse;
];

[ STOP_SCHANNELS_R;
	if (glk_gestalt(gestalt_Sound, 0)) {
		if (gg_foregroundchan ~= 0) {
			glk_schannel_stop(gg_foregroundchan);
		}
		if (gg_backgroundchan ~= 0) {
			glk_schannel_stop(gg_backgroundchan);
		}
	}
	rfalse;
];

@h Glk windows.
Functions for minimal Glk windows support.

=
[ FindGlkWindowFromRefNum ref win;
	if (ref ~= 0) {
		for (win = K_Glk_Window_First: win: win = win.K_Glk_Window_Next) {
			if (win.glk_ref == ref) {
				return win;
			}
		}
	}
	return nothing;
];

[ WindowBufferCopyToText win txt buf_type;
	if (win && win.line_input_buffer_addr) {
		if (win.line_input_buffer_uni) {
			buf_type = 4;
			! I don't remember why I was setting 0 here
			!win.line_input_buffer_addr-->(win.line_input_buffer_curlen) = 0;
		}
		else {
			buf_type = 1;
			!win.line_input_buffer_addr->(win.line_input_buffer_curlen) = 0;
		}
		BlkValueMassCopyFromArray(txt, win.line_input_buffer_addr, buf_type, win.line_input_buffer_curlen);
	}
	return txt;
];

[ WindowBufferPrint win;
	if (win && win.line_input_buffer_addr) {
		glk_put_buffer_uni(win.line_input_buffer_addr, win.line_input_buffer_curlen);
	}
];

[ WindowBufferSet win txt
		buf ch cp i len p uni;
	if (~~win) {
		IssueRTP("NoWindow", "WindowCopyTextToBuffer: Cannot perform this Glk window operation on nothing.", Architecture32KitRTPs);
		return;
	}
	if (win.line_input_buffer_addr == 0) {
		IssueRTP("WindowHasNoBuffer", "Cannot set current line input of a window which has never requested line input.", Architecture32KitRTPs);
		return;
	}
	buf = win.line_input_buffer_addr;
	uni = win.line_input_buffer_uni;
	cp = txt-->0;
	p = TEXT_TY_Temporarily_Transmute(txt);
	len = BlkValueLBCapacity(txt);
	if (len > win.line_input_buffer_maxlen) {
		len = win.line_input_buffer_maxlen;
	}
	for (i = 0: i < len: i++) {
		ch = BlkValueRead(txt, i);
		if (ch == 0) break;
		if (uni) {
			buf-->i = ch;
		}
		else if (ch <= $FF) {
			buf->i = ch;
		}
		else {
			buf->i = '?';
		}
	}
	TEXT_TY_Untransmute(txt, p, cp);
	win.line_input_buffer_curlen = i;
];

[ WindowClear win;
	if (win && win.glk_ref) {
		glk_window_clear(win.glk_ref);
	}
];

[ WindowFillInDetails win ref;
	win.glk_ref = ref;
	win.glk_rock = glk_window_get_rock(ref);
	win.glk_window_type = glk_window_get_type(ref);
];

[ WindowFocus win;
	if (win) {
		if (win.glk_ref) {
			glk_set_window(win.glk_ref);
		}
		else {
			IssueRTP("ClosedWindow", "WindowFocus: Cannot perform this Glk window operation on a closed window.", Architecture32KitRTPs);
		}
	}
	else {
		IssueRTP("NoWindow", "WindowFocus: Cannot perform this Glk window operation on nothing.", Architecture32KitRTPs);
	}
];

[ WindowGetSize win index;
	if (win && win.glk_ref) {
		glk_window_get_size(win.glk_ref, gg_arguments, gg_arguments + WORDSIZE);
		return gg_arguments-->index;
	}
	return 0;
];

[ WindowMoveCursor win col row;
	if (win) {
		if (win.glk_ref) {
			if (win.glk_window_type == wintype_TextGrid) {
				glk_window_move_cursor(win.glk_ref, col - 1, row - 1);
			}
			else {
				IssueRTP("WrongWindowType", "WindowMoveCursor: Wrong window type for this Glk window operation.", Architecture32KitRTPs);
			}
		}
		else {
			IssueRTP("ClosedWindow", "WindowMoveCursor: Cannot perform this Glk window operation on a closed window.", Architecture32KitRTPs);
		}
	}
	else {
		IssueRTP("NoWindow", "WindowMoveCursor: Cannot perform this Glk window operation on nothing.", Architecture32KitRTPs);
	}
];

@h Glk events.
To handle events we intercept the |glk_select| function. This allows us to handle
events early and consistently.

=
Global Glk_Event_Struct_type;
Global Glk_Event_Struct_win;
Global Glk_Event_Struct_val1;
Global Glk_Event_Struct_val2;
Global glk_event_type_changed;

[ glk_select event_struct;
	! Call the real glk_select
	@push event_struct;
	@glk 192 1 0;

	! Clear the unknown window's ref so that we don't immediately match it
	Unknown_Glk_Window.glk_ref = 0;

	! Copy values to our variables
	Glk_Event_Struct_type = event_struct-->0;
	Glk_Event_Struct_win = event_struct-->1;
	Glk_Event_Struct_val1 = event_struct-->2;
	Glk_Event_Struct_val2 = event_struct-->3;

	! Turn a window reference ID into a window object
	if (Glk_Event_Struct_win > 0) {
		Glk_Event_Struct_win = FindGlkWindowFromRefNum(Glk_Event_Struct_win);
		! If no window was found, then use the unknown window
		if (Glk_Event_Struct_win == nothing) {
			Glk_Event_Struct_win = Unknown_Glk_Window;
			WindowFillInDetails(Unknown_Glk_Window, event_struct-->1);
		}

		! If the current event type is line input, copy the buffer length
		if (Glk_Event_Struct_type == evtype_LineInput) {
			Glk_Event_Struct_win.line_input_buffer_curlen = Glk_Event_Struct_val1;
			! And update the text input status here because it's too risky to leave for a glk event handling rule
			Glk_Event_Struct_win.text_input_status = INPUT_STATUS_NONE;
		}
		else if (Glk_Event_Struct_type == evtype_CharInput) {
			Glk_Event_Struct_win.text_input_status = INPUT_STATUS_NONE;
		}
	}

	! Run the glk event handling rules (but disable rules debugging because it crashes if keyboard input events are pending)
	@push debug_rules; @push say__p; @push say__pc;
	debug_rules = false; ClearParagraphing(1);
	do {
		glk_event_type_changed = 0;
		FollowRulebook(GLK_EVENT_HANDLING_RB, Glk_Event_Struct_type, true);
	} until (glk_event_type_changed == 0);
	@pull say__pc; @pull say__p; @pull debug_rules;

	! If the current event type is line input, update the current buffer length
	if (Glk_Event_Struct_type == evtype_LineInput && Glk_Event_Struct_win) {
		Glk_Event_Struct_val1 = Glk_Event_Struct_win.line_input_buffer_curlen;
	}

	! Copy back to the original event structure
	event_struct-->0 = Glk_Event_Struct_type;
	if (Glk_Event_Struct_win) {
		event_struct-->1 = GProperty(OBJECT_TY, Glk_Event_Struct_win, glk_ref);
	}
	else {
		event_struct-->1 = 0;
	}
	event_struct-->2 = Glk_Event_Struct_val1;
	event_struct-->3 = Glk_Event_Struct_val2;
	rfalse;
];

@ |SetGlkEventType| helps us change the current event type, by ensuring that
if there are any pending keyboard input requests they will be cancelled if the
new event is a keyboard event. It does not however do anything if no keyboard
input requests are pending, which means the new event could be ignored.

=
[ SetGlkEventType type;
	if (type == Glk_Event_Struct_type) {
		return;
	}
	if (type == evtype_CharInput or evtype_LineInput) {
		if (Glk_Event_Struct_win) {
			if (Glk_Event_Struct_win.text_input_status == INPUT_STATUS_ACTIVE_CHAR or INPUT_STATUS_ACTIVE_CHAR_UNI) {
				glk_cancel_char_event(Glk_Event_Struct_win.glk_ref);
			}
			else if (Glk_Event_Struct_win.text_input_status == INPUT_STATUS_ACTIVE_LINE or INPUT_STATUS_ACTIVE_LINE_UNI) {
				glk_cancel_line_event(Glk_Event_Struct_win.glk_ref);
			}
			Glk_Event_Struct_win.text_input_status = INPUT_STATUS_NONE;
		}
		else {
			IssueRTP("SetTextEventWithoutWindow", "You can't set the glk event type to a text input event when there is no glk event window.", Architecture32KitRTPs);
		}
	}
	Glk_Event_Struct_type = type;
	glk_event_type_changed = 1;
	RulebookSucceeds();
];

@h Tracking input requests.
These replaced versions of the glk versions track which types of input have been
requested.

=
[ glk_cancel_char_event win win_obj;
	@push win;
	@glk 211 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = win_obj.text_input_status + 4;
	}
	return 0;
];

[ glk_cancel_hyperlink_event win win_obj;
	@push win;
	@glk 259 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.requesting_hyperlink = false;
	}
	return 0;
];

[ glk_cancel_line_event win event_struct win_obj;
	if (event_struct == 0) {
		event_struct = gg_arguments;
	}
	@push event_struct;
	@push win;
	@glk 209 2 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = win_obj.text_input_status + 4;
		win_obj.line_input_buffer_curlen = event_struct-->2;
	}
	return 0;
];

[ glk_cancel_mouse_event win win_obj;
	@push win;
	@glk 213 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.requesting_mouse = false;
	}
	return 0;
];

[ glk_request_char_event win win_obj;
	@push win;
	@glk 210 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = INPUT_STATUS_ACTIVE_CHAR;
	}
	return 0;
];

[ glk_request_char_event_uni win win_obj;
	@push win;
	@glk 320 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = INPUT_STATUS_ACTIVE_CHAR_UNI;
	}
	return 0;
];

[ glk_request_hyperlink_event win win_obj;
	@push win;
	@glk 258 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.requesting_hyperlink = true;
	}
	return 0;
];

[ glk_request_line_event win buf maxlen initlen win_obj;
	@push initlen;
	@push maxlen;
	@push buf;
	@push win;
	@glk 208 4 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = INPUT_STATUS_ACTIVE_LINE;
		win_obj.line_input_buffer_addr = buf;
		win_obj.line_input_buffer_maxlen = maxlen;
		win_obj.line_input_buffer_uni = false;
	}
	return 0;
];

[ glk_request_line_event_uni win buf maxlen initlen win_obj;
	@push initlen;
	@push maxlen;
	@push buf;
	@push win;
	@glk 321 4 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.text_input_status = INPUT_STATUS_ACTIVE_LINE_UNI;
		win_obj.line_input_buffer_addr = buf;
		win_obj.line_input_buffer_maxlen = maxlen;
		win_obj.line_input_buffer_uni = true;
	}
	return 0;
];

[ glk_request_mouse_event win win_obj;
	@push win;
	@glk 212 1 0;
	win_obj = FindGlkWindowFromRefNum(win);
	if (win_obj) {
		win_obj.requesting_mouse = true;
	}
	return 0;
];

@h Suspending and resuming text input.
These functions allow the author to suspend and then resume a window's text
input requests.

=
[ SuspendTextInput win no_input_echoing;
	if (win && win.glk_ref) {
		if (win.text_input_status == INPUT_STATUS_ACTIVE_CHAR or INPUT_STATUS_ACTIVE_CHAR_UNI) {
			glk_cancel_char_event(win.glk_ref);
		}
		else if (win.text_input_status == INPUT_STATUS_ACTIVE_LINE or INPUT_STATUS_ACTIVE_LINE_UNI) {
			glk_cancel_line_event(win.glk_ref);
			! Manually echo the command if required
			if (BasicInformKit`MANUAL_INPUT_ECHOING_CFGF && Cached_Glk_Gestalts-->gestalt_LineInputEcho && no_input_echoing == 0) {
				glk_set_style(style_Input);
				glk_put_buffer_uni(win.line_input_buffer_addr, win.line_input_buffer_curlen);
				glk_set_style(style_Normal);
				glk_put_char(10); ! newline
			}
		}
	}
];

[ ResumeTextInput win;
	if (win && win.glk_ref) {
		switch (win.text_input_status) {
			INPUT_STATUS_SUSPENDED_CHAR:
				glk_request_char_event(win.glk_ref);
			INPUT_STATUS_SUSPENDED_CHAR_UNI:
				glk_request_char_event_uni(win.glk_ref);
			INPUT_STATUS_SUSPENDED_LINE:
				glk_request_line_event(win.glk_ref, win.line_input_buffer_addr, win.line_input_buffer_maxlen, win.line_input_buffer_curlen);
			INPUT_STATUS_SUSPENDED_LINE_UNI:
				glk_request_line_event_uni(win.glk_ref, win.line_input_buffer_addr, win.line_input_buffer_maxlen, win.line_input_buffer_curlen);
		}
	}
];

@h Debugging verb.
This powers the GLKLIST command, when there's a command parser to read it.

=
[ GlkDebuggingList id val;
	id = glk_window_iterate(0, gg_arguments);
	while (id) {
		print "Window ", id, " (", gg_arguments-->0, "): ";
		val = glk_window_get_type(id);
		switch (val) {
			1: print "pair";
			2: print "blank";
			3: print "textbuffer";
			4: print "textgrid";
			5: print "graphics";
			default: print "unknown";
		}
		val = glk_window_get_parent(id);
		if (val) print ", parent is window ", val;
		else     print ", no parent (root)";
		val = glk_window_get_stream(id);
		print ", stream ", val;
		val = glk_window_get_echo_stream(id);
		if (val) print ", echo stream ", val;
		print "^";
		id = glk_window_iterate(id, gg_arguments);
	}
	id = glk_stream_iterate(0, gg_arguments);
	while (id) {
		print "Stream ", id, " (", gg_arguments-->0, ")^";
		id = glk_stream_iterate(id, gg_arguments);
	}
	id = glk_fileref_iterate(0, gg_arguments);
	while (id) {
		print "Fileref ", id, " (", gg_arguments-->0, ")^";
		id = glk_fileref_iterate(id, gg_arguments);
	}
	if (glk_gestalt(gestalt_Sound, 0)) {
		id = glk_schannel_iterate(0, gg_arguments);
		while (id) {
			print "Soundchannel ", id, " (", gg_arguments-->0, ")^";
			id = glk_schannel_iterate(id, gg_arguments);
		}
	}
];
