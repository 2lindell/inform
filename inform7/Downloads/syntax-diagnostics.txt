ROOT_NT
    HEADING_NT'implied inclusions' {under: H0'implied inclusions'} {heading 0} {implied}
        INCLUSION_NT'include basic inform by graham nelson'
            HEADING_NT'version 1 of basic inform by graham nelson begins here' {heading 0} {under: H0'version 1 of basic inform by graham nelson begins here'}{includes: Basic Inform by Graham Nelson v1 } {unit: 0}
                BEGINHERE_NT'version 1 of basic inform by graham nelson' {unit: 0}
                SENTENCE_NT'Basic Inform, included in every project, defines the basic f' {unit: 0} {classified}
                HEADING_NT'part one - preamble' {heading 3} {under: H3'part one - preamble'} {unit: 0}
                    SENTENCE_NT'the verb to mean means the meaning relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to mean'
                        UNPARSED_NOUN_NT'meaning relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-verb meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-verb meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-plural meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-plural meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-activity meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-activity meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-action meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-action meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-adjective meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-adjective meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-either-or meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-either-or meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in defined-by-table meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in defined-by-table meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in rule-listed-in meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in rule-listed-in meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-figure meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-figure meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-sound meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-sound meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in new-file meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in new-file meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the built-in episode meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'built-in episode meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be means the equality relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be'
                        UNPARSED_NOUN_NT'equality relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to imply means the built-in verb-means meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to imply'
                        UNPARSED_NOUN_NT'built-in verb-means meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to imply means the meaning relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to imply'
                        UNPARSED_NOUN_NT'meaning relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be able to be means the built-in can-be meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be able to be'
                        UNPARSED_NOUN_NT'built-in can-be meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to have means the possession relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to have'
                        UNPARSED_NOUN_NT'possession relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to specify means the built-in specifies-notation me' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to specify'
                        UNPARSED_NOUN_NT'built-in specifies-notation meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to relate means the built-in new-relation meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to relate'
                        UNPARSED_NOUN_NT'built-in new-relation meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to relate means the universal relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to relate'
                        UNPARSED_NOUN_NT'universal relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to substitute for means the built-in rule-substitut' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to substitute for'
                        UNPARSED_NOUN_NT'built-in rule-substitutes-for meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to do means the built-in rule-does-nothing meaning' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to do'
                        UNPARSED_NOUN_NT'built-in rule-does-nothing meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to do + if means the built-in rule-does-nothing-if ' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to do + if'
                        UNPARSED_NOUN_NT'built-in rule-does-nothing-if meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to do + when means the built-in rule-does-nothing-i' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to do + when'
                        UNPARSED_NOUN_NT'built-in rule-does-nothing-if meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to do + unless means the built-in rule-does-nothing' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to do + unless'
                        UNPARSED_NOUN_NT'built-in rule-does-nothing-unless meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to translate into + as means the built-in translate' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to translate into + as'
                        UNPARSED_NOUN_NT'built-in translates-into-unicode meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to translate into + as means the built-in translate' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to translate into + as'
                        UNPARSED_NOUN_NT'built-in translates-into-i6 meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to translate into + as means the built-in translate' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to translate into + as'
                        UNPARSED_NOUN_NT'built-in translates-into-language meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to translate as means the built-in use-translates m' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to translate as'
                        UNPARSED_NOUN_NT'built-in use-translates meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to provide means the provision relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to provide'
                        UNPARSED_NOUN_NT'provision relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to use in the imperative means the built-in use mea' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to use'
                        UNPARSED_NOUN_NT'built-in use meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to include + in in the imperative means the built-i' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to include + in'
                        UNPARSED_NOUN_NT'built-in include-in meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to omit + from in the imperative means the built-in' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to omit + from'
                        UNPARSED_NOUN_NT'built-in omit-from meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to test + with in the imperative means the built-in' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to test + with'
                        UNPARSED_NOUN_NT'built-in test-with meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be greater than means the numerically-greater-th' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be greater than'
                        UNPARSED_NOUN_NT'numerically-greater-than relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be less than means the numerically-less-than rel' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be less than'
                        UNPARSED_NOUN_NT'numerically-less-than relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be at least means the numerically-greater-than-o' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be at least'
                        UNPARSED_NOUN_NT'numerically-greater-than-or-equal-to relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to be at most means the numerically-less-than-or-eq' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to be at most'
                        UNPARSED_NOUN_NT'numerically-less-than-or-equal-to relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the operator > means the numerically-greater-than relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'>'
                        UNPARSED_NOUN_NT'numerically-greater-than relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the operator < means the numerically-less-than relation' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'<'
                        UNPARSED_NOUN_NT'numerically-less-than relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the operator >= means the numerically-greater-than-or-equal-' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'>='
                        UNPARSED_NOUN_NT'numerically-greater-than-or-equal-to relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the operator <= means the numerically-less-than-or-equal-to ' {unit: 0} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'<='
                        UNPARSED_NOUN_NT'numerically-less-than-or-equal-to relation' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'use ineffectual translates as (-  ! Use ineffectual does not' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'ineffectual'
                        UNPARSED_NOUN_NT'(-  ! Use ineffectual does nothing. '
                    SENTENCE_NT'use american dialect translates as (-  Constant DIALECT_US; ' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'american dialect'
                        UNPARSED_NOUN_NT'(-  Constant DIALECT_US; '
                    SENTENCE_NT'use the serial comma translates as (-  Constant SERIAL_COMMA' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'the serial comma'
                        UNPARSED_NOUN_NT'(-  Constant SERIAL_COMMA; '
                    SENTENCE_NT'use memory economy translates as (-  Constant MEMORY_ECONOMY' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'memory economy'
                        UNPARSED_NOUN_NT'(-  Constant MEMORY_ECONOMY; '
                    SENTENCE_NT'use engineering notation translates as (-  Constant USE_E_NO' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'engineering notation'
                        UNPARSED_NOUN_NT'(-  Constant USE_E_NOTATION = 0; '
                    SENTENCE_NT'use unabbreviated object names translates as (-  Constant UN' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'unabbreviated object names'
                        UNPARSED_NOUN_NT'(-  Constant UNABBREVIATED_OBJECT_NAMES = 0; '
                    SENTENCE_NT'use predictable randomisation translates as (-  Constant FIX' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'predictable randomisation'
                        UNPARSED_NOUN_NT'(-  Constant FIX_RNG; '
                    SENTENCE_NT'use fast route-finding translates as (-  Constant FAST_ROUTE' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'fast route-finding'
                        UNPARSED_NOUN_NT'(-  Constant FAST_ROUTE_FINDING; '
                    SENTENCE_NT'use slow route-finding translates as (-  Constant SLOW_ROUTE' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'slow route-finding'
                        UNPARSED_NOUN_NT'(-  Constant SLOW_ROUTE_FINDING; '
                    SENTENCE_NT'use numbered rules translates as (-  Constant NUMBERED_RULES' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'numbered rules'
                        UNPARSED_NOUN_NT'(-  Constant NUMBERED_RULES; '
                    SENTENCE_NT'use telemetry recordings translates as (-  Constant TELEMETR' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'telemetry recordings'
                        UNPARSED_NOUN_NT'(-  Constant TELEMETRY_ON; '
                    SENTENCE_NT'use no deprecated features translates as (-  Constant NO_DEP' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'no deprecated features'
                        UNPARSED_NOUN_NT'(-  Constant NO_DEPRECATED_FEATURES; '
                    SENTENCE_NT'use gn testing version translates as (-  Constant GN_TESTING' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'gn testing version'
                        UNPARSED_NOUN_NT'(-  Constant GN_TESTING_VERSION; '
                    SENTENCE_NT'use authorial modesty translates as (-  Constant AUTHORIAL_M' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'authorial modesty'
                        UNPARSED_NOUN_NT'(-  Constant AUTHORIAL_MODESTY; '
                    SENTENCE_NT'use dynamic memory allocation of at least 8192 translates as' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'dynamic memory allocation of at least 8192'
                        UNPARSED_NOUN_NT'(-  Constant DynamicMemoryAllocation = {N}; '
                    SENTENCE_NT'use maximum text length of at least 1024 translates as (-  C' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'maximum text length of at least 1024'
                        UNPARSED_NOUN_NT'(-  Constant TEXT_TY_BufferSize = {N}+3; '
                    SENTENCE_NT'use index figure thumbnails of at least 50 translates as (- ' {unit: 0} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'index figure thumbnails of at least 50'
                        UNPARSED_NOUN_NT'(-  Constant MAX_FIGURE_THUMBNAILS_IN_INDEX = {N}; '
                    SENTENCE_NT'use dynamic memory allocation of at least 8192' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'dynamic memory allocation of at least 8192'
                    SENTENCE_NT'use alloc_chunk_size of 32000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'alloc_chunk_size of 32000'
                    SENTENCE_NT'use max_arrays of 10000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_arrays of 10000'
                    SENTENCE_NT'use max_classes of 200' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_classes of 200'
                    SENTENCE_NT'use max_verbs of 255' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_verbs of 255'
                    SENTENCE_NT'use max_labels of 10000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_labels of 10000'
                    SENTENCE_NT'use max_zcode_size of 500000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_zcode_size of 500000'
                    SENTENCE_NT'use max_static_data of 180000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_static_data of 180000'
                    SENTENCE_NT'use max_prop_table_size of 200000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_prop_table_size of 200000'
                    SENTENCE_NT'use max_indiv_prop_table_size of 20000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_indiv_prop_table_size of 20000'
                    SENTENCE_NT'use max_stack_size of 65536' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_stack_size of 65536'
                    SENTENCE_NT'use max_symbols of 20000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_symbols of 20000'
                    SENTENCE_NT'use max_expression_nodes of 256' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_expression_nodes of 256'
                    SENTENCE_NT'use max_labels of 200000' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_labels of 200000'
                    SENTENCE_NT'use max_local_variables of 256' {unit: 0} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'max_local_variables of 256'
                HEADING_NT'part two - miscellaneous definitions' {heading 3} {under: H3'part two - miscellaneous definitions'} {unit: 0}
                    SENTENCE_NT'an object has a value called variable initial value' {unit: 0} {classified}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'value' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'variable initial value'
                    SENTENCE_NT'an object has a text called specification' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'specification'
                    SENTENCE_NT'an object has a text called indefinite appearance text' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'indefinite appearance text'
                    SENTENCE_NT'an object has a text called printed name' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'printed name'
                    SENTENCE_NT'an object has a text called printed plural name' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'printed plural name'
                    SENTENCE_NT'an object has a text called an indefinite article' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'indefinite article'
                    SENTENCE_NT'an object can be plural-named or singular-named' {unit: 0} {classified}
                        VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                        COMMON_NOUN_NT'an object' {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        UNPARSED_NOUN_NT'plural-named or singular-named'
                            AND_NT'or'
                                UNPARSED_NOUN_NT'plural-named'
                                UNPARSED_NOUN_NT'singular-named'
                    SENTENCE_NT'an object is usually singular-named' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ADJECTIVE_NT'singular-named' {refined} {predicate: singular-named} {creation: << singular-named(x) ^ singular-named(x) >>}
                    SENTENCE_NT'an object can be proper-named or improper-named' {unit: 0} {classified}
                        VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                        COMMON_NOUN_NT'an object' {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        UNPARSED_NOUN_NT'proper-named or improper-named'
                            AND_NT'or'
                                UNPARSED_NOUN_NT'proper-named'
                                UNPARSED_NOUN_NT'improper-named'
                    SENTENCE_NT'an object is usually improper-named' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        ADJECTIVE_NT'improper-named' {refined} {predicate: improper-named} {creation: << improper-named(x) ^ improper-named(x) >>}
                    SENTENCE_NT'an object can be ambiguously plural' {unit: 0} {classified}
                        VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                        COMMON_NOUN_NT'an object' {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                        UNPARSED_NOUN_NT'ambiguously plural'
                            UNPARSED_NOUN_NT'ambiguously plural'
                    SENTENCE_NT'the indefinite article property translates into inter as art' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'indefinite article property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'article'
                    SENTENCE_NT'the printed plural name property translates into inter as pl' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'printed plural name property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'plural'
                    SENTENCE_NT'the printed name property translates into inter as short_nam' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'printed name property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'short_name'
                    SENTENCE_NT'the plural-named property translates into inter as pluralnam' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'plural-named property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'pluralname'
                    SENTENCE_NT'the ambiguously plural property translates into inter as amb' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'ambiguously plural property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'ambigpluralname'
                    SENTENCE_NT'the proper-named property translates into inter as proper' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                        UNPARSED_NOUN_NT'proper-named property' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'proper'
                    SENTENCE_NT'a natural language is a kind of value' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'natural language' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=natural language(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                        KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                            COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the language of play is a natural language that varies' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'language of play' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'language of play' {nonlocal: 'language of play'(var)natural language}} {created here}
                        COMMON_NOUN_NT'natural language that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=natural languages variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the parameter-object is an object that varies' {unit: 0} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'parameter-object' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'parameter-object' {nonlocal: 'parameter-object'(var)object}} {created here}
                        COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the parameter-object variable translates into inter as param' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                        UNPARSED_NOUN_NT'parameter-object variable' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'parameter_value'
                    SENTENCE_NT'startup rules is a rulebook' {unit: 0} {classified} {clears pronouns} {interpretation of subject: infs'object'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'startup rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: startup}} {created here}
                        COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'startup rules have outcomes allow startup ( success ) and de' {unit: 0} {classified}
                        VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                        PROPER_NOUN_NT'startup rules' {refined} {eval: CONSTANT_NT'startup rules' {kind: rulebook} {rulebook: startup}{meaning: {startup rules = RULEBOOK_MC}}}
                        RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                            PROPERTY_LIST_NT'and' {refined}
                                UNPARSED_NOUN_NT'outcomes allow startup ( success )'
                                UNPARSED_NOUN_NT'deny startup ( failure )'
                    SENTENCE_NT'shutdown rules is a rulebook' {unit: 0} {classified} {clears pronouns}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'shutdown rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: shutdown}} {created here}
                        COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'starting the virtual machine ( documented at act_startvm ) i' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                        UNPARSED_NOUN_NT'starting the virtual machine ( documented at act_startvm )'
                        UNPARSED_NOUN_NT'an activity'
                    SENTENCE_NT'the enable glulx acceleration rule is listed first in for st' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                        UNPARSED_NOUN_NT'the enable glulx acceleration rule'
                        UNPARSED_NOUN_NT'first in for starting the virtual machine'
                    SENTENCE_NT'the enable glulx acceleration rule translates into inter as ' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                        UNPARSED_NOUN_NT'enable glulx acceleration rule' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'ENABLE_GLULX_ACCEL_R'
                    SENTENCE_NT'printing the name of something ( documented at act_pn ) is a' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                        UNPARSED_NOUN_NT'printing the name of something ( documented at act_pn )'
                        UNPARSED_NOUN_NT'an activity'
                    SENTENCE_NT'the standard name printing rule is listed last in the for pr' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                        UNPARSED_NOUN_NT'the standard name printing rule'
                        UNPARSED_NOUN_NT'last in the for printing the name rulebook'
                    SENTENCE_NT'the standard name printing rule translates into inter as STA' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                        UNPARSED_NOUN_NT'standard name printing rule' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'STANDARD_NAME_PRINTING_R'
                    SENTENCE_NT'printing the plural name of something ( documented at act_pp' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                        UNPARSED_NOUN_NT'printing the plural name of something ( documented at act_pp'
                        UNPARSED_NOUN_NT'an activity'
                    SENTENCE_NT'the standard printing the plural name rule is listed last in' {unit: 0} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                        UNPARSED_NOUN_NT'the standard printing the plural name rule'
                        UNPARSED_NOUN_NT'last in the for printing the plural name rulebook'
                    SENTENCE_NT'the standard printing the plural name rule translates into i' {unit: 0} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                        UNPARSED_NOUN_NT'standard printing the plural name rule' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'STANDARD_PLURAL_NAME_PRINTING_R'
                HEADING_NT'part three - phrasebook' {heading 3} {under: H3'part three - phrasebook'} {unit: 0}
                    HEADING_NT'chapter 1 - saying' {heading 4} {under: H4'chapter 1 - saying'} {unit: 0}
                        HEADING_NT'section 1 - saying values' {heading 5} {under: H5'section 1 - saying values'} {unit: 0}
                            RULE_NT'to say ( val - sayable value of kind k ) ( documented at ph_' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-say:val:K} '
                            RULE_NT'to say ( something - number ) in words ( documented at phs_n' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (number) say__n=({something}); '
                            RULE_NT'to say s ( documented at phs_s )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  STextSubstitution(); '
                            RULE_NT'to showme ( val - value ) ( documented at ph_showme )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-show-me:val} '
                        HEADING_NT'section 2 - saying names' {heading 5} {under: H5'section 2 - saying names'} {unit: 0}
                            RULE_NT'to say a ( something - object ) ( documented at phs_a )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (a) {something}; '
                            RULE_NT'to say an ( something - object ) ( documented at phs_a )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (a) {something}; '
                            RULE_NT'to say a ( something - object ) ( documented at phs_a )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CIndefArt({something}); '
                            RULE_NT'to say an ( something - object ) ( documented at phs_a )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CIndefArt({something}); '
                            RULE_NT'to say the ( something - object ) ( documented at phs_the )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (the) {something}; '
                            RULE_NT'to say the ( something - object ) ( documented at phs_the )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (The) {something}; '
                        HEADING_NT'section 3 - saying special characters' {heading 5} {under: H5'section 3 - saying special characters'} {unit: 0}
                            RULE_NT'to say bracket -- running on ( documented at phs_bracket )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "["; '
                            RULE_NT'to say close bracket -- running on ( documented at phs_close' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "]"; '
                            RULE_NT'to say apostrophe/' -- running on ( documented at phs_apostr' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "'"; '
                            RULE_NT'to say quotation mark -- running on ( documented at phs_quot' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "~"; '
                        HEADING_NT'section 4 - saying line and paragraph breaks' {heading 5} {under: H5'section 4 - saying line and paragraph breaks'} {unit: 0}
                            RULE_NT'to say line break -- running on ( documented at phs_linebrea' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  new_line; '
                            RULE_NT'to say no line break -- running on ( documented at phs_nolin' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'do nothing'
                                        INVOCATION_NT'do nothing' {phrase invoked: call}
                            RULE_NT'to say conditional paragraph break -- running on ( documente' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DivideParagraphPoint(); '
                            RULE_NT'to say paragraph break -- running on ( documented at phs_par' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DivideParagraphPoint(); new_line; '
                            RULE_NT'to say run paragraph on -- running on ( documented at phs_ru' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RunParagraphOn(); '
                            RULE_NT'to decide if a paragraph break is pending ( documented at ph' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (say__p) '
                        HEADING_NT'section 5 - saying if and otherwise' {heading 5} {under: H5'section 5 - saying if and otherwise'} {unit: 0}
                            RULE_NT'to say if ( c - condition ) ( documented at phs_if )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	if (~~({c})) jump {-label:Say};
                                    		'
                            RULE_NT'to say unless ( c - condition ) ( documented at phs_unless )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	if ({c}) jump {-label:Say};
                                    		'
                            RULE_NT'to say otherwise/else if ( c - condition ) ( documented at p' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say}; if '
                            RULE_NT'to say otherwise/else unless ( c - condition ) ( documented ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say}; if '
                            RULE_NT'to say otherwise ( documented at phs_otherwise )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say};
                                    		'
                            RULE_NT'to say else ( documented at phs_otherwise )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say};
                                    		'
                            RULE_NT'to say end if ( documented at phs_endif )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	.{-label:Say}{-counter-up:Say}; .{-label:SayX}{-counter'
                            RULE_NT'to say end unless ( documented at phs_endunless )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	.{-label:Say}{-counter-up:Say}; .{-label:SayX}{-counter'
                        HEADING_NT'section 6 - saying one of' {heading 5} {under: H5'section 6 - saying one of'} {unit: 0}
                            RULE_NT'to say one of -- beginning say_one_of ( documented at phs_on' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	{-counter-makes-array:say_one_of}
                                    	{-counter-makes-arra'
                            RULE_NT'to say or -- continuing say_one_of ( documented at phs_or )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  @nop; {-segment-count}: '
                            RULE_NT'to say at random -- ending say_one_of with marker i7_soo_ran' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say purely at random -- ending say_one_of with marker i7_' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say then at random -- ending say_one_of with marker i7_so' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say then purely at random -- ending say_one_of with marke' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say sticky random -- ending say_one_of with marker i7_soo' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say as decreasingly likely outcomes -- ending say_one_of ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say in random order -- ending say_one_of with marker i7_s' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say cycling -- ending say_one_of with marker i7_soo_cyc (' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say stopping -- ending say_one_of with marker i7_soo_stop' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            RULE_NT'to say first time -- beginning say_first_time ( documented a' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-counter-makes-array:say_first_time}
                                    	if ((say__comp =='
                            RULE_NT'to say only -- ending say_first_time ( documented at phs_fir' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                        HEADING_NT'section 7 - saying fonts and visual effects' {heading 5} {under: H5'section 7 - saying fonts and visual effects'} {unit: 0}
                            RULE_NT'to say bold type -- running on ( documented at phs_bold )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style bold; '
                            RULE_NT'to say italic type -- running on ( documented at phs_italic ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style underline; '
                            RULE_NT'to say roman type -- running on ( documented at phs_roman )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style roman; '
                            RULE_NT'to say fixed letter spacing -- running on ( documented at ph' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  font off; '
                            RULE_NT'to say variable letter spacing -- running on ( documented at' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  font on; '
                        HEADING_NT'section 8 - saying lists of values' {heading 5} {under: H5'section 8 - saying lists of values'} {unit: 0}
                            RULE_NT'to say ( l - a list of values ) in brace notation ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 1); '
                            RULE_NT'to say ( l - a list of objects ) with definite articles ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 2); '
                            RULE_NT'to say ( l - a list of objects ) with indefinite articles ( ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 3); '
                    HEADING_NT'chapter 2 - conditions and variables' {heading 4} {under: H4'chapter 2 - conditions and variables'} {unit: 0}
                        HEADING_NT'section 1 - conditions' {heading 5} {under: H5'section 1 - conditions'} {unit: 0}
                            RULE_NT'to now ( cn - condition ) ( documented at ph_now )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {cn} '
                            RULE_NT'to decide what truth state is whether or not ( c - condition' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({C}) '
                        HEADING_NT'section 2 - assigning temporary variables' {heading 5} {under: H5'section 2 - assigning temporary variables'} {unit: 0}
                            RULE_NT'to let ( t - nonexisting variable ) be ( u - value ) ( assig' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-copy:t:u}
                                    	'
                            RULE_NT'to let ( t - nonexisting variable ) be ( u - name of kind of' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-initialise:t}
                                    	'
                            RULE_NT'to let ( t - nonexisting variable ) be ( u - description of ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-initialise:t}
                                    		{-now-matches-descr'
                            RULE_NT'to let ( t - nonexisting variable ) be given by ( q - equati' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-primitive-definition:solve-equation'
                            RULE_NT'to let ( t - existing variable ) be ( u - value ) ( assignme' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	{-copy:t:u}
                                    	'
                            RULE_NT'to let ( t - existing variable ) be given by ( q - equation ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-primitive-definition:solve-equation};
                                    	'
                        HEADING_NT'section 3 - increase and decrease' {heading 5} {under: H5'section 3 - increase and decrease'} {unit: 0}
                            RULE_NT'to increase ( s - storage ) by ( w - value ) ( assignment op' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:+w};
                                    	'
                            RULE_NT'to decrease ( s - storage ) by ( w - value ) ( assignment op' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:-w};
                                    	'
                            RULE_NT'to increment ( s - storage ) ( documented at ph_increment )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:+};
                                    	'
                            RULE_NT'to decrement ( s - storage ) ( documented at ph_decrement )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:-};
                                    	'
                    HEADING_NT'chapter 2 - arithmetic' {heading 4} {under: H4'chapter 2 - arithmetic'} {unit: 0}
                        HEADING_NT'section 1 - arithmetic operations' {heading 5} {under: H5'section 1 - arithmetic operations'} {unit: 0}
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is remainder after dividing' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is ( x - arithmetic value )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            RULE_NT'to decide which arithmetic value is the square root of ( x -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X}) '
                            RULE_NT'to decide which arithmetic value is the cube root of ( x - a' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X}) '
                            RULE_NT'to decide which arithmetic value is total ( p - arithmetic v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:total-of} '
                        HEADING_NT'section 2 - saying real numbers ( not for z-machine )' {heading 5} {under: H5'section 2 - saying real numbers ( not for z-machine )'} {unit: 0}
                            RULE_NT'to say ( r - a real number ) to ( n - number ) decimal place' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  Float({R}, {N}); '
                            RULE_NT'to say ( r - a real number ) in decimal notation ( documente' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatDec({R}); '
                            RULE_NT'to say ( r - a real number ) to ( n - number ) decimal place' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatDec({R}, {N}); '
                            RULE_NT'to say ( r - a real number ) in scientific notation ( docume' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatExp({R}); '
                            RULE_NT'to say ( r - a real number ) to ( n - number ) decimal place' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatExp({R}, {N}); '
                        HEADING_NT'section 3 - real arithmetic ( not for z-machine )' {heading 5} {under: H5'section 3 - real arithmetic ( not for z-machine )'} {unit: 0}
                            RULE_NT'to decide which real number is the reciprocal of ( r - a rea' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Reciprocal({R}) '
                            RULE_NT'to decide which real number is the absolute value of ( r - a' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Abs({R}) '
                            RULE_NT'to decide which real number is the real square root of ( r -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Root({R}) '
                            RULE_NT'to decide which real number is the real square of ( r - a re' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = r^2 where x is a real number'
                                        INVOCATION_NT'let x be given by x = r^2 where x is a real number' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: value} {required: value}
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = r^2 where x is a real number' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'equation name'} {required: equation name}
                                                CONSTANT_NT'x = r^2 where x is a real number' {kind: equation name} {equation: x = r^2}
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                LOCAL_VARIABLE_NT'x' {local: LV"x"-real number real number}
                            RULE_NT'to decide which real number is the ceiling of ( r - a real n' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Ceiling({R}) '
                            RULE_NT'to decide which real number is the floor of ( r - a real num' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Floor({R}) '
                            RULE_NT'to decide which number is ( r - a real number ) to the neare' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_to_NUMBER_TY({R}) '
                        HEADING_NT'section 4 - exponential functions ( not for z-machine )' {heading 5} {under: H5'section 4 - exponential functions ( not for z-machine )'} {unit: 0}
                            RULE_NT'to decide which real number is the natural/-- logarithm of (' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Log({R}) '
                            RULE_NT'to decide which real number is the logarithm to base ( n - a' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_BLog({R}, {N}) '
                            RULE_NT'to decide which real number is the exponential of ( r - a re' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Exp({R}) '
                            RULE_NT'to decide which real number is ( r - a real number ) to the ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Pow({R}, {P}) '
                        HEADING_NT'section 5 - trigonometric functions ( not for z-machine )' {heading 5} {under: H5'section 5 - trigonometric functions ( not for z-machine )'} {unit: 0}
                            RULE_NT'to decide which real number is ( r - a real number ) degrees' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Times({R}, $+0.0174532925) '
                            RULE_NT'to decide which real number is the sine of ( r - a real numb' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Sin({R}) '
                            RULE_NT'to decide which real number is the cosine of ( r - a real nu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Cos({R}) '
                            RULE_NT'to decide which real number is the tangent of ( r - a real n' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Tan({R}) '
                            RULE_NT'to decide which real number is the arcsine of ( r - a real n' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arcsin({R}) '
                            RULE_NT'to decide which real number is the arccosine of ( r - a real' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arccos({R}) '
                            RULE_NT'to decide which real number is the arctangent of ( r - a rea' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arctan({R}) '
                        HEADING_NT'section 6 - trigonometric functions ( not for z-machine )' {heading 5} {under: H5'section 6 - trigonometric functions ( not for z-machine )'} {unit: 0}
                            RULE_NT'to decide which real number is the hyperbolic sine of ( r - ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Sinh({R}) '
                            RULE_NT'to decide which real number is the hyperbolic cosine of ( r ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Cosh({R}) '
                            RULE_NT'to decide which real number is the hyperbolic tangent of ( r' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Tanh({R}) '
                            RULE_NT'to decide which real number is the hyperbolic arcsine of ( r' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = log ( r + root ( r^2 + 1 ) ) where x i'
                                        INVOCATION_NT'let x be given by x = log ( r + root ( r^2 + 1 ) ) where x i' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: value} {required: value}
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = log ( r + root ( r^2 + 1 ) ) where x is a real number' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'equation name'} {required: equation name}
                                                CONSTANT_NT'x = log ( r + root ( r^2 + 1 ) ) where x is a real number' {kind: equation name} {equation: x = log ( r + root ( r^2 + 1 ) )}
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                LOCAL_VARIABLE_NT'x' {local: LV"x"-real number real number}
                            RULE_NT'to decide which real number is the hyperbolic arccosine of (' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = log ( r + root ( r^2 - 1 ) ) where x i'
                                        INVOCATION_NT'let x be given by x = log ( r + root ( r^2 - 1 ) ) where x i' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: value} {required: value}
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = log ( r + root ( r^2 - 1 ) ) where x is a real number' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'equation name'} {required: equation name}
                                                CONSTANT_NT'x = log ( r + root ( r^2 - 1 ) ) where x is a real number' {kind: equation name} {equation: x = log ( r + root ( r^2 - 1 ) )}
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                LOCAL_VARIABLE_NT'x' {local: LV"x"-real number real number}
                            RULE_NT'to decide which real number is the hyperbolic arctangent of ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) whe'
                                        INVOCATION_NT'let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) whe' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: value} {required: value}
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real num' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'equation name'} {required: equation name}
                                                CONSTANT_NT'x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real num' {kind: equation name} {equation: x = 0.5* ( log ( 1+r ) - log ( 1-r ) )}
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'x' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                LOCAL_VARIABLE_NT'x' {local: LV"x"-real number real number}
                    HEADING_NT'chapter 3 - control' {heading 4} {under: H4'chapter 3 - control'} {unit: 0}
                        HEADING_NT'section 1 - deciding outcomes' {heading 5} {under: H5'section 1 - deciding outcomes'} {unit: 0}
                            RULE_NT'to decide yes ( documented at ph_yes )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to decide if only'
                            RULE_NT'to decide no ( documented at ph_no )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to decide if only'
                            RULE_NT'to stop ( documented at ph_stop )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to only'
                            RULE_NT'to decide on ( something - value ) ( documented at ph_decide' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return {-return-value:something}; '
                        HEADING_NT'section 2 - if and unless' {heading 5} {under: H5'section 2 - if and unless'} {unit: 0}
                            RULE_NT'to if ( c - condition ) begin -- end conditional ( documente' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {c}  '
                            RULE_NT'to unless ( c - condition ) begin -- end conditional ( docum' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~{c})  '
                            RULE_NT'to if ( v - value ) is begin -- end conditional ( documented' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-   '
                            RULE_NT'to do nothing ( documented at ph_nothing )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ; '
                        HEADING_NT'section 3 - while and repeat' {heading 5} {under: H5'section 3 - while and repeat'} {unit: 0}
                            RULE_NT'to while ( c - condition ) begin -- end loop ( documented at' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  while {c}  '
                            RULE_NT'to repeat with ( loopvar - nonexisting k variable ) running ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  for ({loopvar}={v}: {loopvar}<={w}: {loopvar}++)  '
                            RULE_NT'to repeat with ( loopvar - nonexisting k variable ) running ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  for ({loopvar}={v}: {loopvar}<={w}: {loopvar}++)  '
                            RULE_NT'to repeat with ( loopvar - nonexisting k variable ) running ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:repeat-through} '
                            RULE_NT'to repeat with ( loopvar - nonexisting object variable ) run' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:repeat-through-list} '
                            RULE_NT'to repeat through ( t - table name ) begin -- end loop ( doc' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}'
                            RULE_NT'to repeat through ( t - table name ) in reverse order begin ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}'
                            RULE_NT'to repeat through ( t - table name ) in ( tc - table column ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}'
                            RULE_NT'to repeat through ( t - table name ) in reverse ( tc - table' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}'
                        HEADING_NT'section 4 - loop flow' {heading 5} {under: H5'section 4 - loop flow'} {unit: 0}
                            RULE_NT'to break -- in loop ( documented at ph_break )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:break} '
                            RULE_NT'to next -- in loop ( documented at ph_next )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  continue; '
                    HEADING_NT'chapter 4 - values' {heading 4} {under: H4'chapter 4 - values'} {unit: 0}
                        HEADING_NT'section 1 - enumerations' {heading 5} {under: H5'section 1 - enumerations'} {unit: 0}
                            RULE_NT'to decide which number is number of ( s - description of val' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:number-of} '
                            RULE_NT'to decide which k is ( name of kind of enumerated value k ) ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-next-routine:K}({X}) '
                            RULE_NT'to decide which k is ( name of kind of enumerated value k ) ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-previous-routine:K}({X}) '
                            RULE_NT'to decide which k is the first value of ( name of kind of en' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'decide on the default value of k'
                            RULE_NT'to decide which k is the last value of ( name of kind of enu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'decide on k before the default value of k'
                        HEADING_NT'section 2 - randomness' {heading 5} {under: H5'section 2 - randomness'} {unit: 0}
                            RULE_NT'to decide which k is a/-- random ( s - description of values' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:random-of} '
                            RULE_NT'to decide which k is a random ( name of kind of arithmetic v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            RULE_NT'to decide which k is a random ( name of kind of arithmetic v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            RULE_NT'to decide which k is a random ( name of kind of enumerated v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            RULE_NT'to decide which k is a random ( name of kind of enumerated v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            RULE_NT'to decide whether a random chance of ( n - number ) in ( m -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (GenerateRandomNumber(1, {M}) <= {N}) '
                            RULE_NT'to seed the random-number generator with ( n - number ) ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  VM_Seed_RNG({N}); '
                        HEADING_NT'section 3 - default values' {heading 5} {under: H5'section 3 - default values'} {unit: 0}
                            RULE_NT'to decide what k is the default value of ( v - name of kind ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-new:K} '
                    HEADING_NT'chapter 5 - text' {heading 4} {under: H4'chapter 5 - text'} {unit: 0}
                        HEADING_NT'section 1 - breaking down text' {heading 5} {under: H5'section 1 - breaking down text'} {unit: 0}
                            RULE_NT'to decide what number is the number of characters in ( t - t' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, CHR_BLOB) '
                            RULE_NT'to decide what number is the number of words in ( t - text )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, WORD_BLOB) '
                            RULE_NT'to decide what number is the number of punctuated words in (' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, PWORD_BLOB) '
                            RULE_NT'to decide what number is the number of unpunctuated words in' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, UWORD_BLOB) '
                            RULE_NT'to decide what number is the number of lines in ( t - text )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, LINE_BLOB) '
                            RULE_NT'to decide what number is the number of paragraphs in ( t - t' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, PARA_BLOB) '
                            RULE_NT'to decide what text is character number ( n - a number ) in ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, CHR'
                            RULE_NT'to decide what text is word number ( n - a number ) in ( t -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, WOR'
                            RULE_NT'to decide what text is punctuated word number ( n - a number' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, PWO'
                            RULE_NT'to decide what text is unpunctuated word number ( n - a numb' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, UWO'
                            RULE_NT'to decide what text is line number ( n - a number ) in ( t -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, LIN'
                            RULE_NT'to decide what text is paragraph number ( n - a number ) in ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, PAR'
                            RULE_NT'to decide what text is the substituted form of ( t - text ) ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_SubstitutedForm({-new:text}, {-by-reference:T}) '
                        HEADING_NT'section 2 - matching and replacing' {heading 5} {under: H5'section 2 - matching and replacing'} {unit: 0}
                            RULE_NT'to decide if ( t - text ) exactly matches the text ( find - ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-refer'
                            RULE_NT'to decide if ( t - text ) matches the text ( find - text ) ,' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-refer'
                            RULE_NT'to decide what number is number of times ( t - text ) matche' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-refer'
                            RULE_NT'to replace the text ( find - text ) in ( t - text ) with ( r' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB, {-lvalue-by-reference:T}, {'
                            RULE_NT'to replace the word ( find - text ) in ( t - text ) with ( r' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceText(WORD_BLOB, {-lvalue-by-reference:T},'
                            RULE_NT'to replace the punctuated word ( find - text ) in ( t - text' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceText(PWORD_BLOB, {-lvalue-by-reference:T}'
                            RULE_NT'to replace character number ( n - a number ) in ( t - text )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(CHR_BLOB, {-lvalue-by-reference:T}, '
                            RULE_NT'to replace word number ( n - a number ) in ( t - text ) with' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(WORD_BLOB, {-lvalue-by-reference:T},'
                            RULE_NT'to replace punctuated word number ( n - a number ) in ( t - ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(PWORD_BLOB, {-lvalue-by-reference:T}'
                            RULE_NT'to replace unpunctuated word number ( n - a number ) in ( t ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(UWORD_BLOB, {-lvalue-by-reference:T}'
                            RULE_NT'to replace line number ( n - a number ) in ( t - text ) with' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(LINE_BLOB, {-lvalue-by-reference:T},'
                            RULE_NT'to replace paragraph number ( n - a number ) in ( t - text )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(PARA_BLOB, {-lvalue-by-reference:T},'
                        HEADING_NT'section 3 - regular expressions' {heading 5} {under: H5'section 3 - regular expressions'} {unit: 0}
                            RULE_NT'to decide if ( t - text ) exactly matches the regular expres' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-re'
                            RULE_NT'to decide if ( t - text ) matches the regular expression ( f' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-re'
                            RULE_NT'to decide what text is text matching regular expression ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_RE_GetMatchVar(0) '
                            RULE_NT'to decide what text is text matching subexpression ( n - a n' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_RE_GetMatchVar({N}) '
                            RULE_NT'to decide what number is number of times ( t - text ) matche' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-re'
                            RULE_NT'to replace the regular expression ( find - text ) in ( t - t' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB, {-lvalue-by-reference:T}'
                        HEADING_NT'section 4 - casing of text' {heading 5} {under: H5'section 4 - casing of text'} {unit: 0}
                            RULE_NT'to decide what text is ( t - text ) in lower case ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T},'
                            RULE_NT'to decide what text is ( t - text ) in upper case ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T},'
                            RULE_NT'to decide what text is ( t - text ) in title case ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T},'
                            RULE_NT'to decide what text is ( t - text ) in sentence case ( docum' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T},'
                            RULE_NT'to decide if ( t - text ) is in lower case ( documented at p' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersOfCase({-by-reference:T}, 0) '
                            RULE_NT'to decide if ( t - text ) is in upper case ( documented at p' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersOfCase({-by-reference:T}, 1) '
                        HEADING_NT'section 5 - adaptive text' {heading 5} {under: H5'section 5 - adaptive text'} {unit: 0}
                            RULE_NT'to say infinitive of ( v - a verb ) ( documented at phs_infi' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(1); '
                            RULE_NT'to say past participle of ( v - a verb ) ( documented at phs' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(2); '
                            RULE_NT'to say present participle of ( v - a verb ) ( documented at ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(3); '
                            RULE_NT'to say adapt ( v - verb ) ( documented at phs_adapt )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, PNToVP(), story_tense); '
                            RULE_NT'to say adapt ( v - verb ) in ( t - grammatical tense ) ( doc' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, PNToVP(), {T}); '
                            RULE_NT'to say adapt ( v - verb ) from ( p - narrative viewpoint ) (' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, {P}, story_tense); '
                            RULE_NT'to say adapt ( v - verb ) in ( t - grammatical tense ) from ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, {P}, {T}); '
                            RULE_NT'to say negate ( v - verb ) ( documented at phs_negate )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, PNToVP(), story_tense); '
                            RULE_NT'to say negate ( v - verb ) in ( t - grammatical tense ) ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, PNToVP(), {T}); '
                            RULE_NT'to say negate ( v - verb ) from ( p - narrative viewpoint ) ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, {P}, story_tense); '
                            RULE_NT'to say negate ( v - verb ) in ( t - grammatical tense ) from' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, {P}, {T}); '
                            RULE_NT'to decide which relation of objects is meaning of ( v - a ve' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_MEANING) '
                    HEADING_NT'chapter 6 - data structures' {heading 4} {under: H4'chapter 6 - data structures'} {unit: 0}
                        HEADING_NT'section 1 - tables' {heading 5} {under: H5'section 1 - tables'} {unit: 0}
                            RULE_NT'to choose a/the/-- row ( n - number ) in/from ( t - table na' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = {N}; '
                            RULE_NT'to choose a/the/-- row with ( tc - k valued table column ) o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableRowCorr(ct_0, {TC}, '
                            RULE_NT'to choose a/the/-- blank row in/from ( t - table name ) ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableBlankRow(ct_0); '
                            RULE_NT'to choose a/the/-- random row in/from ( t - table name ) ( d' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableRandomRow(ct_0); '
                            RULE_NT'to decide which number is number of rows in/from ( t - table' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRows({T}) '
                            RULE_NT'to decide which number is number of blank rows in/from ( t -' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankRows({T}) '
                            RULE_NT'to decide which number is number of filled rows in/from ( t ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableFilledRows({T}) '
                            RULE_NT'to decide if there is ( tr - table-reference ) ( documented ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-reference-exists:TR}) '
                            RULE_NT'to decide if there is no ( tr - table-reference ) ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-reference-exists:TR} == false) '
                            RULE_NT'to blank out ( tr - table-reference ) ( documented at ph_bla' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-by-reference-blank-out:tr}; '
                            RULE_NT'to blank out the whole row ( documented at ph_blankoutrow )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutRow({-my:ct_0}, {-my:ct_1}); '
                            RULE_NT'to blank out the whole ( tc - table column ) in/from/of ( t ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutColumn({T}, {TC}); '
                            RULE_NT'to blank out the whole of ( t - table name ) ( documented at' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutAll({T}); '
                            RULE_NT'to showme the contents of ( t - table name ) ( documented at' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableDebug({T}); '
                            RULE_NT'to say the/-- current table row ( documented at phs_currentt' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRowDebug({-my:ct_0}, {-my:ct_1}); '
                            RULE_NT'to say row ( n - number ) in/from ( t - table name ) ( docum' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRowDebug({T}, {N}); '
                            RULE_NT'to say ( tc - table column ) in/from ( t - table name ) ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableColumnDebug({T}, {TC}); '
                        HEADING_NT'section 2 - sorting tables' {heading 5} {under: H5'section 2 - sorting tables'} {unit: 0}
                            RULE_NT'to sort ( t - table name ) in/into random order ( documented' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableShuffle({T}); '
                            RULE_NT'to sort ( t - table name ) in/into ( tc - table column ) ord' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableSort({T}, {TC}, 1); '
                            RULE_NT'to sort ( t - table name ) in/into reverse ( tc - table colu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableSort({T}, {TC}, -1); '
                        HEADING_NT'section 3 - lists' {heading 5} {under: H5'section 3 - lists'} {unit: 0}
                            RULE_NT'to add ( new entry - k ) to ( l - list of values of kind k )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_InsertItem({-lvalue-by-reference:L}, {new ent'
                            RULE_NT'to add ( new entry - k ) at entry ( e - number ) in ( l - li' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_InsertItem({-lvalue-by-reference:L}, {new ent'
                            RULE_NT'to add ( lx - list of ks ) to ( l - list of values of kind k' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_AppendList({-lvalue-by-reference:L}, {-by-ref'
                            RULE_NT'to add ( lx - list of ks ) at entry ( e - number ) in ( l - ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_AppendList({-lvalue-by-reference:L}, {-by-ref'
                            RULE_NT'to remove ( existing entry - k ) from ( l - list of values o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveValue({-lvalue-by-reference:L}, {existi'
                            RULE_NT'to remove ( n - list of ks ) from ( l - list of values of ki' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Remove_List({-lvalue-by-reference:L}, {-by-re'
                            RULE_NT'to remove entry ( n - number ) from ( l - list of values ) ,' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveItemRange({-lvalue-by-reference:L}, {N}'
                            RULE_NT'to remove entries ( n - number ) to ( n2 - number ) from ( l' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveItemRange({-lvalue-by-reference:L}, {N}'
                            RULE_NT'to decide if ( n - k ) is listed in ( l - list of values of ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (LIST_OF_TY_FindItem({-by-reference:L}, {N})) '
                            RULE_NT'to decide if ( n - k ) is not listed in ( l - list of values' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (LIST_OF_TY_FindItem({-by-reference:L}, {N}) == false) '
                            RULE_NT'to decide what list of ks is the list of ( d - description o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-new-list-of:list of K} '
                        HEADING_NT'section 4 - length of lists' {heading 5} {under: H5'section 4 - length of lists'} {unit: 0}
                            RULE_NT'to decide what number is the number of entries in/of ( l - a' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_GetLength({-by-reference:L}) '
                            RULE_NT'to truncate ( l - a list of values ) to ( n - a number ) ent' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, '
                            RULE_NT'to truncate ( l - a list of values ) to the first ( n - a nu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, '
                            RULE_NT'to truncate ( l - a list of values ) to the last ( n - a num' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, '
                            RULE_NT'to extend ( l - a list of values ) to ( n - a number ) entri' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, 1); '
                            RULE_NT'to change ( l - a list of values ) to have ( n - a number ) ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, 0); '
                        HEADING_NT'section 5 - list operations' {heading 5} {under: H5'section 5 - list operations'} {unit: 0}
                            RULE_NT'to reverse ( l - a list of values ) ( documented at ph_rever' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Reverse({-lvalue-by-reference:L}); '
                            RULE_NT'to rotate ( l - a list of values ) ( documented at ph_rotate' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Rotate({-lvalue-by-reference:L}, 0); '
                            RULE_NT'to rotate ( l - a list of values ) backwards ( documented at' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Rotate({-lvalue-by-reference:L}, 1); '
                            RULE_NT'to sort ( l - a list of values ) ( documented at ph_sortlist' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 1); '
                            RULE_NT'to sort ( l - a list of values ) in/into reverse order ( doc' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, -1); '
                            RULE_NT'to sort ( l - a list of values ) in/into random order ( docu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 2); '
                            RULE_NT'to sort ( l - a list of objects ) in/into ( p - property ) o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 1, {P}, {-prop'
                            RULE_NT'to sort ( l - a list of objects ) in/into reverse ( p - prop' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, -1, {P}, {-pro'
                        HEADING_NT'section 6 - relations' {heading 5} {under: H5'section 6 - relations'} {unit: 0}
                            RULE_NT'to show relation ( r - relation ) ( documented at ph_showrel' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-show-me:R}; RelationTest({-by-reference:R}, RELS_SHOW)'
                            RULE_NT'to decide which object is next step via ( r - relation of ob' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationRouteTo({-by-reference:R},{O1},{O2},false) '
                            RULE_NT'to decide which number is number of steps via ( r - relation' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationRouteTo({-by-reference:R},{O1},{O2},true) '
                            RULE_NT'to decide which list of ks is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of'
                            RULE_NT'to decide which list of ls is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of'
                            RULE_NT'to decide which list of ls is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of'
                            RULE_NT'to decide which list of ks is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_X, {Y}, '
                            RULE_NT'to decide which list of ls is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_Y, {X}, '
                            RULE_NT'to decide which list of ls is list of ( name of kind of valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_Y, {X}, '
                            RULE_NT'to decide whether ( name of kind of value k ) relates to ( y' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {Y}, RL'
                            RULE_NT'to decide whether ( x - k ) relates to ( name of kind of val' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RL'
                            RULE_NT'to decide which k is ( name of kind of value k ) that/which/' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {Y}, RL'
                            RULE_NT'to decide which l is ( name of kind of value l ) to which/wh' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RL'
                            RULE_NT'to decide which l is ( name of kind of value l ) that/which/' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RL'
                    HEADING_NT'chapter 7 - functional programming' {heading 4} {under: H4'chapter 7 - functional programming'} {unit: 0}
                        HEADING_NT'section 1 - applying functions' {heading 5} {under: H5'section 1 - applying functions'} {unit: 0}
                            RULE_NT'to decide whether ( val - k ) matches ( desc - description o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:description-application} '
                            RULE_NT'to decide what k is ( function - phrase nothing -> value of ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            RULE_NT'to decide what l is ( function - phrase value of kind k -> v' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            RULE_NT'to decide what m is ( function - phrase ( value of kind k , ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            RULE_NT'to decide what n is ( function - phrase ( value of kind k , ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            RULE_NT'to apply ( function - phrase nothing -> nothing ) ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            RULE_NT'to apply ( function - phrase value of kind k -> nothing ) to' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            RULE_NT'to apply ( function - phrase ( value of kind k , value of ki' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            RULE_NT'to apply ( function - phrase ( value of kind k , value of ki' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                        HEADING_NT'section 2 - working with lists' {heading 5} {under: H5'section 2 - working with lists'} {unit: 0}
                            RULE_NT'to decide what list of l is ( function - phrase k -> value o' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the result be a list of ls' {indent: 1}
                                    CODE_BLOCK_NT {control structure: RPT}
                                        INVOCATION_LIST_NT'repeat with item running through the original list' {colon_block_command} {indent: 1}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'let the mapped item be the function applied to the item' {indent: 2}
                                            INVOCATION_LIST_NT'add the mapped item to the result' {indent: 2}
                                    INVOCATION_LIST_NT'decide on the result' {indent: 1}
                            RULE_NT'to decide what k is the ( function - phrase ( k , k ) -> k )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the total be a k' {indent: 1}
                                    INVOCATION_LIST_NT'let the count be 0' {indent: 1}
                                    CODE_BLOCK_NT {control structure: RPT}
                                        INVOCATION_LIST_NT'repeat with item running through the original list' {colon_block_command} {indent: 1}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'increase the count by 1' {indent: 2}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the count is 1' {indent: 2} {colon_block_command}
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now the total is the item' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'the total is the item'
                                                CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 2} {control structure: O}
                                                    INVOCATION_LIST_NT'now the total is the function applied to the total and the i' {indent: 3} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'the total is the function applied to the total and the item'
                                    INVOCATION_LIST_NT'decide on the total' {indent: 1}
                            RULE_NT'to decide what list of k is the filter to ( criterion - desc' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the filtered list be a list of k' {indent: 1}
                                    CODE_BLOCK_NT {control structure: RPT}
                                        INVOCATION_LIST_NT'repeat with item running through the full list' {colon_block_command} {indent: 1}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item matches the criterion' {colon_block_command} {indent: 2}
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'add the item to the filtered list' {indent: 3}
                                    INVOCATION_LIST_NT'decide on the filtered list' {indent: 1}
                    HEADING_NT'chapter 8 - rulebooks and activities' {heading 4} {under: H4'chapter 8 - rulebooks and activities'} {unit: 0}
                        HEADING_NT'section 1 - carrying out activities' {heading 5} {under: H5'section 1 - carrying out activities'} {unit: 0}
                            RULE_NT'to carry out the ( a - activity on nothing ) activity ( docu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CarryOutActivity({A}); '
                            RULE_NT'to carry out the ( a - activity on value of kind k ) activit' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CarryOutActivity({A}, {val}); '
                            RULE_NT'to continue the activity ( documented at ph_continueactivity' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                        HEADING_NT'section 2 - advanced activities' {heading 5} {under: H5'section 2 - advanced activities'} {unit: 0}
                            RULE_NT'to begin the ( a - activity on nothing ) activity ( document' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BeginActivity({A}); '
                            RULE_NT'to begin the ( a - activity on value of kind k ) activity wi' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BeginActivity({A}, {val}); '
                            RULE_NT'to decide whether handling ( a - activity ) activity ( docum' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~(ForActivity({A}))) '
                            RULE_NT'to decide whether handling ( a - activity on value of kind k' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~(ForActivity({A}, {val}))) '
                            RULE_NT'to end the ( a - activity on nothing ) activity ( documented' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  EndActivity({A}); '
                            RULE_NT'to end the ( a - activity on value of kind k ) activity with' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  EndActivity({A}, {val}); '
                            RULE_NT'to abandon the ( a - activity on nothing ) activity ( docume' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AbandonActivity({A}); '
                            RULE_NT'to abandon the ( a - activity on value of kind k ) activity ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AbandonActivity({A}, {val}); '
                        HEADING_NT'section 3 - following rules' {heading 5} {under: H5'section 3 - following rules'} {unit: 0}
                            RULE_NT'to follow ( rl - a rule ) ( documented at ph_follow )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}); '
                            RULE_NT'to follow ( rl - value of kind k based rule producing a valu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}, {V}, true); '
                            RULE_NT'to follow ( rl - a nothing based rule ) ( documented at ph_f' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}); '
                            RULE_NT'to decide what k is the ( name of kind k ) produced by ( rl ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, 0, true, {-strong-kind:K}) '
                            RULE_NT'to decide what l is the ( name of kind l ) produced by ( rl ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, {V}, true, {-strong-kind:L}) '
                            RULE_NT'to decide what k is the ( name of kind k ) produced by ( rl ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, 0, true, {-strong-kind:K}) '
                            RULE_NT'to abide by ( rl - a rule ) ( documented at ph_abide )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL})) rtrue;  - in to only'
                            RULE_NT'to abide by ( rl - value of kind k based rule producing a va' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL}, {V}, true)) rtrue;  - in to onl'
                            RULE_NT'to abide by ( rl - a nothing based rule ) ( documented at ph' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL})) rtrue;  - in to only'
                        HEADING_NT'section 4 - success and failure' {heading 5} {under: H5'section 4 - success and failure'} {unit: 0}
                            RULE_NT'to make no decision ( documented at ph_nodecision )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                            RULE_NT'to rule succeeds ( documented at ph_succeeds )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookSucceeds(); rtrue;  - in to only'
                            RULE_NT'to rule fails ( documented at ph_fails )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookFails(); rtrue;  - in to only'
                            RULE_NT'to rule succeeds with result ( val - a value ) ( documented ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookSucceeds({-weak-kind:rule-return-kind},{-return-'
                            RULE_NT'to decide if rule succeeded ( documented at ph_succeeded )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (RulebookSucceeded()) '
                            RULE_NT'to decide if rule failed ( documented at ph_failed )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (RulebookFailed()) '
                            RULE_NT'to decide which rulebook outcome is the outcome of the ruleb' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (ResultOfRule()) '
                    HEADING_NT'chapter 9 - external files ( not for z-machine )' {heading 4} {under: H4'chapter 9 - external files ( not for z-machine )'} {unit: 0}
                        HEADING_NT'section 1 - files of text' {heading 5} {under: H5'section 1 - files of text'} {unit: 0}
                            RULE_NT'to write ( t - text ) to ( fn - external file ) ( documented' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutContents({FN}, {T}, false); '
                            RULE_NT'to append ( t - text ) to ( fn - external file ) ( documente' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutContents({FN}, {T}, true); '
                            RULE_NT'to say text of ( fn - external file ) ( documented at ph_say' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PrintContents({FN}); say__p = 1; '
                        HEADING_NT'section 2 - files of data' {heading 5} {under: H5'section 2 - files of data'} {unit: 0}
                            RULE_NT'to read ( filename - external file ) into ( t - table name )' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_GetTable({filename}, {T}); '
                            RULE_NT'to write ( filename - external file ) from ( t - table name ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutTable({filename}, {T}); '
                        HEADING_NT'section 3 - file handling' {heading 5} {under: H5'section 3 - file handling'} {unit: 0}
                            RULE_NT'to decide if ( filename - external file ) exists ( documente' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (FileIO_Exists({filename}, false)) '
                            RULE_NT'to decide if ready to read ( filename - external file ) ( do' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (FileIO_Ready({filename}, false)) '
                            RULE_NT'to mark ( filename - external file ) as ready to read ( docu' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_MarkReady({filename}, true); '
                            RULE_NT'to mark ( filename - external file ) as not ready to read ( ' {unit: 0}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_MarkReady({filename}, false); '
                HEADING_NT'part four - adjectival definitions' {heading 3} {under: H3'part four - adjectival definitions'} {unit: 0}
                    HEADING_NT'section 1 - miscellaneous useful adjectives' {heading 5} {under: H5'section 1 - miscellaneous useful adjectives'} {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                    HEADING_NT'section 2 - adjectives for relations' {heading 5} {under: H5'section 2 - adjectives for relations'} {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                    HEADING_NT'section 3 - adjectives for real numbers ( not for z-machine ' {heading 5} {under: H5'section 3 - adjectives for real numbers ( not for z-machine )'} {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        RULE_NT'definition' {unit: 0}
                        ENDHERE_NT'basic inform' {unit: 0}
        INCLUSION_NT'include english language by graham nelson'
            HEADING_NT'version 1 of english language by graham nelson begins here' {heading 0} {under: H0'version 1 of english language by graham nelson begins here'}{includes: English Language by Graham Nelson v1 } {unit: 1}
                BEGINHERE_NT'version 1 of english language by graham nelson' {unit: 1}
                SENTENCE_NT'To make English the language of play.' {unit: 1} {classified}
                SENTENCE_NT'use authorial modesty' {unit: 1} {classified}
                    VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                    UNPARSED_NOUN_NT'authorial modesty'
                HEADING_NT'section 1 - modal verbs and contractions' {heading 5} {under: H5'section 1 - modal verbs and contractions'} {unit: 1}
                    SENTENCE_NT'to be able to is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to be able to'
                    SENTENCE_NT'to could is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to could'
                    SENTENCE_NT'to may is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to may'
                    SENTENCE_NT'to might is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to might'
                    SENTENCE_NT'to must is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to must'
                    SENTENCE_NT'to should is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to should'
                    SENTENCE_NT'to would is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to would'
                    SENTENCE_NT'to 're is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to 're'
                    SENTENCE_NT'to 've is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to 've'
                    SENTENCE_NT'to aren't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to aren't'
                    SENTENCE_NT'to can't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to can't'
                    SENTENCE_NT'to don't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to don't'
                    SENTENCE_NT'to haven't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to haven't'
                    SENTENCE_NT'to mustn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to mustn't'
                    SENTENCE_NT'to mightn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to mightn't'
                    SENTENCE_NT'to mayn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to mayn't'
                    SENTENCE_NT'to wouldn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to wouldn't'
                    SENTENCE_NT'to couldn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to couldn't'
                    SENTENCE_NT'to shouldn't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to shouldn't'
                    SENTENCE_NT'to won't is a verb' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to won't'
                HEADING_NT'section 2 - fallback definitions ( not for interactive ficti' {heading 5} {under: H5'section 2 - fallback definitions ( not for interactive fiction language element )'} {unit: 1}
                HEADING_NT'section 1 - grammatical definitions' {heading 5} {under: H5'section 1 - grammatical definitions'} {unit: 1}
                    SENTENCE_NT'the language of play is a natural language that varies' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'language of play' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'language of play' {nonlocal: 'language of play'(var)natural language}{meaning: {language of play = VARIABLE_MC}}}
                        COMMON_NOUN_NT'natural language that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=natural languages variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the language of play is usually the english language' {unit: 1} {classified}
                        VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'language of play' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'language of play' {nonlocal: 'language of play'(var)natural language}{meaning: {language of play = VARIABLE_MC}}}
                        PROPER_NOUN_NT'english language' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'english language'} {eval: CONSTANT_NT'english language' {kind: natural language} {instance: I2'english language'[natural language]} {enumeration: 0}{meaning: {english language = NAMED_CONSTANT_MC}}}
                    SENTENCE_NT'a grammatical tense is a kind of value' {unit: 1} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical tense' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=grammatical tense(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                        KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                            COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the grammatical tenses are present tense , past tense , perf' {unit: 1} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical tenses' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'grammatical tense'-k} {creation: << kind=grammatical tense(x) >>} {eval: TEST_VALUE_NT}
                        AND_NT',' {refined}
                            PROPER_NOUN_NT'present tense' {refined} {refers: infs'present tense'} {eval: CONSTANT_NT'present tense' {kind: grammatical tense} {instance: I6'present tense'[grammatical tense]} {enumeration: 1}} {created here}
                            AND_NT',' {refined}
                                PROPER_NOUN_NT'past tense' {refined} {refers: infs'past tense'} {eval: CONSTANT_NT'past tense' {kind: grammatical tense} {instance: I7'past tense'[grammatical tense]} {enumeration: 2}} {created here}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'perfect tense' {refined} {refers: infs'perfect tense'} {eval: CONSTANT_NT'perfect tense' {kind: grammatical tense} {instance: I8'perfect tense'[grammatical tense]} {enumeration: 3}} {created here}
                                    AND_NT'and' {refined}
                                        PROPER_NOUN_NT'past perfect tense' {refined} {refers: infs'past perfect tense'} {eval: CONSTANT_NT'past perfect tense' {kind: grammatical tense} {instance: I9'past perfect tense'[grammatical tense]} {enumeration: 4}} {created here}
                                        PROPER_NOUN_NT'future tense' {refined} {refers: infs'future tense'} {eval: CONSTANT_NT'future tense' {kind: grammatical tense} {instance: I10'future tense'[grammatical tense]} {enumeration: 5}} {created here}
                    SENTENCE_NT'a narrative viewpoint is a kind of value' {unit: 1} {classified} {interpretation of subject: infs'grammatical tense'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'narrative viewpoint' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=narrative viewpoint(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                        KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                            COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the narrative viewpoints are first person singular , second ' {unit: 1} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                        COMMON_NOUN_NT'narrative viewpoints' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'narrative viewpoint'-k} {creation: << kind=narrative viewpoint(x) >>} {eval: TEST_VALUE_NT}
                        AND_NT',' {refined}
                            PROPER_NOUN_NT'first person singular' {refined} {refers: infs'first person singular'} {eval: CONSTANT_NT'first person singular' {kind: narrative viewpoint} {instance: I11'first person singular'[narrative viewpoint]} {enumeration: 1}} {created here}
                            AND_NT',' {refined}
                                PROPER_NOUN_NT'second person singular' {refined} {refers: infs'second person singular'} {eval: CONSTANT_NT'second person singular' {kind: narrative viewpoint} {instance: I12'second person singular'[narrative viewpoint]} {enumeration: 2}} {created here}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'third person singular' {refined} {refers: infs'third person singular'} {eval: CONSTANT_NT'third person singular' {kind: narrative viewpoint} {instance: I13'third person singular'[narrative viewpoint]} {enumeration: 3}} {created here}
                                    AND_NT',' {refined}
                                        PROPER_NOUN_NT'first person plural' {refined} {refers: infs'first person plural'} {eval: CONSTANT_NT'first person plural' {kind: narrative viewpoint} {instance: I14'first person plural'[narrative viewpoint]} {enumeration: 4}} {created here}
                                        AND_NT',' {refined}
                                            PROPER_NOUN_NT'second person plural' {refined} {refers: infs'second person plural'} {eval: CONSTANT_NT'second person plural' {kind: narrative viewpoint} {instance: I15'second person plural'[narrative viewpoint]} {enumeration: 5}} {created here}
                                            PROPER_NOUN_NT'third person plural' {refined} {refers: infs'third person plural'} {eval: CONSTANT_NT'third person plural' {kind: narrative viewpoint} {instance: I16'third person plural'[narrative viewpoint]} {enumeration: 6}} {created here}
                    SENTENCE_NT'a natural language has a narrative viewpoint called the adap' {unit: 1} {classified} {interpretation of subject: infs'narrative viewpoint'-k}
                        VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'natural language' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'natural language'-k} {creation: << kind=natural language(x) >>} {eval: TEST_VALUE_NT}
                        ALLOWED_NT {refined}
                            PROPERTYCALLED_NT'called'
                                UNPARSED_NOUN_NT'narrative viewpoint' {indefinite 'a' n/m/f nom/acc s}
                                UNPARSED_NOUN_NT'adaptive text viewpoint'
                    SENTENCE_NT'the adaptive text viewpoint of the english language is first' {unit: 1} {classified} {interpretation of subject: infs'natural language'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        X_OF_Y_NT'adaptive text viewpoint of the english language' {definite 'the' n/m/f s/p nom/acc} {refined}
                            PROPER_NOUN_NT'english language' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'english language'} {eval: CONSTANT_NT'english language' {kind: natural language} {instance: I2'english language'[natural language]} {enumeration: 0}{meaning: {english language = NAMED_CONSTANT_MC}}}
                            PROPER_NOUN_NT'adaptive text viewpoint' {refined} {eval: CONSTANT_NT {kind: narrative viewpoints valued property} {property: 'adaptive text viewpoint'=narrative viewpoint}}
                        PROPER_NOUN_NT'first person plural' {refined} {refers: infs'first person plural'} {eval: CONSTANT_NT'first person plural' {kind: narrative viewpoint} {instance: I14'first person plural'[narrative viewpoint]} {enumeration: 0}{meaning: {first person plural = NAMED_CONSTANT_MC}}}
                    SENTENCE_NT'a grammatical case is a kind of value' {unit: 1} {classified} {interpretation of subject: infs'natural language'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical case' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=grammatical case(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                        KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                            COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the grammatical cases are nominative and accusative' {unit: 1} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical cases' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'grammatical case'-k} {creation: << kind=grammatical case(x) >>} {eval: TEST_VALUE_NT}
                        AND_NT'and' {refined}
                            PROPER_NOUN_NT'nominative' {refined} {refers: infs'nominative'} {eval: CONSTANT_NT'nominative' {kind: grammatical case} {instance: I17'nominative'[grammatical case]} {enumeration: 1}} {created here}
                            PROPER_NOUN_NT'accusative' {refined} {refers: infs'accusative'} {eval: CONSTANT_NT'accusative' {kind: grammatical case} {instance: I18'accusative'[grammatical case]} {enumeration: 2}} {created here}
                    SENTENCE_NT'a grammatical gender is a kind of value' {unit: 1} {classified} {interpretation of subject: infs'grammatical case'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical gender' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=grammatical gender(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                        KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                            COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the grammatical genders are neuter gender , masculine gender' {unit: 1} {classified} {interpretation of subject: infs'object'-k}
                        VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                        COMMON_NOUN_NT'grammatical genders' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'grammatical gender'-k} {creation: << kind=grammatical gender(x) >>} {eval: TEST_VALUE_NT}
                        AND_NT',' {refined}
                            PROPER_NOUN_NT'neuter gender' {refined} {refers: infs'neuter gender'} {eval: CONSTANT_NT'neuter gender' {kind: grammatical gender} {instance: I19'neuter gender'[grammatical gender]} {enumeration: 1}} {created here}
                            AND_NT',' {refined}
                                PROPER_NOUN_NT'masculine gender' {refined} {refers: infs'masculine gender'} {eval: CONSTANT_NT'masculine gender' {kind: grammatical gender} {instance: I20'masculine gender'[grammatical gender]} {enumeration: 2}} {created here}
                                PROPER_NOUN_NT'feminine gender' {refined} {refers: infs'feminine gender'} {eval: CONSTANT_NT'feminine gender' {kind: grammatical gender} {instance: I21'feminine gender'[grammatical gender]} {enumeration: 3}} {created here}
                    SENTENCE_NT'the story tense is a grammatical tense that varies' {unit: 1} {classified} {interpretation of subject: infs'grammatical gender'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'story tense' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story tense' {nonlocal: 'story tense'(var)grammatical tense}} {created here}
                        COMMON_NOUN_NT'grammatical tense that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=grammatical tenses variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the story tense variable translates into i6 as story_tense' {unit: 1} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                        UNPARSED_NOUN_NT'story tense variable' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'story_tense'
                    SENTENCE_NT'the story viewpoint is a narrative viewpoint that varies' {unit: 1} {classified} {interpretation of subject: infs'grammatical gender'-k}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                        PROPER_NOUN_NT'story viewpoint' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story viewpoint' {nonlocal: 'story viewpoint'(var)narrative viewpoint}} {created here}
                        COMMON_NOUN_NT'narrative viewpoint that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=narrative viewpoints variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                    SENTENCE_NT'the story viewpoint variable translates into i6 as story_vie' {unit: 1} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                        UNPARSED_NOUN_NT'story viewpoint variable' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'story_viewpoint'
                    RULE_NT'to say regarding ( item - an object )' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingSingleObject({item}); '
                    RULE_NT'to say regarding ( n - a number )' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingNumber({N}); '
                    RULE_NT'to say regarding list writer internals' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingLWI(); '
                    RULE_NT'to say regarding ( d - a description of objects )' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(- 
                            	 	objectloop({-my:1} ofclass Object)
                            			if ({-matches-d'
                    RULE_NT'to decide if the prior naming context is plural' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  ((prior_named_list >= 2) || (prior_named_noun && prior_n'
                HEADING_NT'section 2 - saying pronouns ( for interactive fiction langua' {heading 5} {under: H5'section 2 - saying pronouns ( for interactive fiction language element only )'} {unit: 1}
                    RULE_NT'to say we' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "I"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"I"'
                                            INVOCATION_NT'"I"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"I"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"I"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"you"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"you"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "he"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"he"'
                                                    INVOCATION_NT'"he"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"he"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"he"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "she"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"she"'
                                                    INVOCATION_NT'"she"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"she"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"she"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "we"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"we"'
                                            INVOCATION_NT'"we"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"we"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"we"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"you"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"you"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"they"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"they"' {kind: text}
                    RULE_NT'to say us' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "me"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"me"'
                                            INVOCATION_NT'"me"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"me"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"me"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"you"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"you"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "him"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"him"'
                                                    INVOCATION_NT'"him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"him"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"him"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "her"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"her"'
                                                    INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"her"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "us"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"us"'
                                            INVOCATION_NT'"us"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"us"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"us"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"you"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"you"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "them"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"them"'
                                            INVOCATION_NT'"them"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"them"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"them"' {kind: text}
                    RULE_NT'to say ours' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "mine"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"mine"'
                                            INVOCATION_NT'"mine"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"mine"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"mine"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"yours"'
                                            INVOCATION_NT'"yours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"yours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"yours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "his"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"his"'
                                                    INVOCATION_NT'"his"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"his"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"his"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "hers"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"hers"'
                                                    INVOCATION_NT'"hers"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"hers"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"hers"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "ours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"ours"'
                                            INVOCATION_NT'"ours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"ours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"ours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"yours"'
                                            INVOCATION_NT'"yours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"yours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"yours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "theirs"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"theirs"'
                                            INVOCATION_NT'"theirs"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"theirs"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"theirs"' {kind: text}
                    RULE_NT'to say ourselves' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "myself"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"myself"'
                                            INVOCATION_NT'"myself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"myself"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"myself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yourself"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"yourself"'
                                            INVOCATION_NT'"yourself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"yourself"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"yourself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "himself"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"himself"'
                                                    INVOCATION_NT'"himself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"himself"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"himself"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "herself"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"herself"'
                                                    INVOCATION_NT'"herself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"herself"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"herself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "ourselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"ourselves"'
                                            INVOCATION_NT'"ourselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"ourselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"ourselves"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yourselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"yourselves"'
                                            INVOCATION_NT'"yourselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"yourselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"yourselves"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "themselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"themselves"'
                                            INVOCATION_NT'"themselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"themselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"themselves"' {kind: text}
                    RULE_NT'to say our' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "my"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"my"'
                                            INVOCATION_NT'"my"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"my"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"my"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "your"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"your"'
                                            INVOCATION_NT'"your"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"your"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"your"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "his"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"his"'
                                                    INVOCATION_NT'"his"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"his"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"his"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "her"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"her"'
                                                    INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"her"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "our"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"our"'
                                            INVOCATION_NT'"our"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"our"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"our"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "your"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"your"'
                                            INVOCATION_NT'"your"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"your"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"your"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "their"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"their"'
                                            INVOCATION_NT'"their"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"their"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"their"' {kind: text}
                    RULE_NT'to say we' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "I"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"I"'
                                            INVOCATION_NT'"I"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"I"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"I"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "He"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"He"'
                                                    INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"He"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "She"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"She"'
                                                    INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"She"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "We"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"We"'
                                            INVOCATION_NT'"We"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"We"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"We"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"They"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"They"' {kind: text}
                    RULE_NT'to say us' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Me"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Me"'
                                            INVOCATION_NT'"Me"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Me"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Me"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Him"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Him"'
                                                    INVOCATION_NT'"Him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Him"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Him"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "Her"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                    INVOCATION_NT'"Her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Her"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Her"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Us"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Us"'
                                            INVOCATION_NT'"Us"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Us"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Us"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Them"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Them"'
                                            INVOCATION_NT'"Them"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Them"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Them"' {kind: text}
                    RULE_NT'to say ours' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Mine"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Mine"'
                                            INVOCATION_NT'"Mine"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Mine"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Mine"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Yours"'
                                            INVOCATION_NT'"Yours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Yours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Yours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "His"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"His"'
                                                    INVOCATION_NT'"His"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"His"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"His"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "Hers"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Hers"'
                                                    INVOCATION_NT'"Hers"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Hers"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Hers"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Ours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Ours"'
                                            INVOCATION_NT'"Ours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Ours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Ours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yours"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Yours"'
                                            INVOCATION_NT'"Yours"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Yours"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Yours"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Theirs"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Theirs"'
                                            INVOCATION_NT'"Theirs"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Theirs"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Theirs"' {kind: text}
                    RULE_NT'to say ourselves' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Myself"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Myself"'
                                            INVOCATION_NT'"Myself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Myself"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Myself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yourself"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Yourself"'
                                            INVOCATION_NT'"Yourself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Yourself"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Yourself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Himself"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Himself"'
                                                    INVOCATION_NT'"Himself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Himself"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Himself"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "Herself"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Herself"'
                                                    INVOCATION_NT'"Herself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Herself"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Herself"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Ourselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Ourselves"'
                                            INVOCATION_NT'"Ourselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Ourselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Ourselves"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yourselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Yourselves"'
                                            INVOCATION_NT'"Yourselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Yourselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Yourselves"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Themselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Themselves"'
                                            INVOCATION_NT'"Themselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Themselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Themselves"' {kind: text}
                    RULE_NT'to say our' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular' {proposition: << ('story viewpoint' == 'first person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "My"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"My"'
                                            INVOCATION_NT'"My"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"My"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"My"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular' {proposition: << ('story viewpoint' == 'second person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Your"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Your"'
                                            INVOCATION_NT'"Your"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Your"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Your"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person singular' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular' {proposition: << ('story viewpoint' == 'third person singular') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is male' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the player is male' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is male' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is male' {proposition: << male('player') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "His"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"His"'
                                                    INVOCATION_NT'"His"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"His"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"His"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "Her"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                    INVOCATION_NT'"Her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Her"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Her"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is first person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural' {proposition: << ('story viewpoint' == 'first person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Our"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Our"'
                                            INVOCATION_NT'"Our"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Our"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Our"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is second person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural' {proposition: << ('story viewpoint' == 'second person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Your"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Your"'
                                            INVOCATION_NT'"Your"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Your"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Your"' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the story viewpoint is third person plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural' {proposition: << ('story viewpoint' == 'third person plural') >>} {term: 'story viewpoint'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Their"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Their"'
                                            INVOCATION_NT'"Their"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Their"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Their"' {kind: text}
                HEADING_NT'section 3 - further pronouns ( for interactive fiction langu' {heading 5} {under: H5'section 3 - further pronouns ( for interactive fiction language element only )'} {unit: 1}
                    RULE_NT'to say those' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say those in the accusative' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'those in the accusative'
                                    INVOCATION_NT'those in the accusative' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'accusative' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'grammatical case'} {required: grammatical case}
                                            CONSTANT_NT'accusative' {kind: grammatical case} {instance: I18'accusative'[grammatical case]} {enumeration: 0}{meaning: {accusative = NAMED_CONSTANT_MC}}
                    RULE_NT'to say those' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say those in the nominative' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'those in the nominative'
                                    INVOCATION_NT'those in the nominative' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nominative' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'grammatical case'} {required: grammatical case}
                                            CONSTANT_NT'nominative' {kind: grammatical case} {instance: I17'nominative'[grammatical case]} {enumeration: 0}{meaning: {nominative = NAMED_CONSTANT_MC}}
                    RULE_NT'to say those in ( case - grammatical case )' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the case is nominative' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the case is nominative' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'case is nominative' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'case is nominative' {proposition: << ('case' == 'nominative') >>} {term: 'case'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the item be the prior named object' {indent: 2}
                                        INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "those"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"those"'
                                                    INVOCATION_NT'"those"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"those"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"those"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 2}
                                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[we]"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we' {phrase invoked: call}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 2}
                                                            INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "he"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"he"'
                                                                    INVOCATION_NT'"he"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"he"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"he"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                                            CODE_BLOCK_NT {control structure: IF}
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 2}
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: <null-parse-node>
                                                                        }
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "she"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"she"'
                                                                            INVOCATION_NT'"she"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"she"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"she"' {kind: text}
                                                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                                    CODE_BLOCK_NT'say "that"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"that"'
                                                                            INVOCATION_NT'"that"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"that"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"that"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                    INVOCATION_LIST_NT'let the item be the prior named object' {indent: 2}
                                        INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "those"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"those"'
                                                    INVOCATION_NT'"those"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"those"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"those"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 2}
                                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[we]"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we' {phrase invoked: call}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 2}
                                                            INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "him"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"him"'
                                                                    INVOCATION_NT'"him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"him"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"him"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                                            CODE_BLOCK_NT {control structure: IF}
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 2}
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: <null-parse-node>
                                                                        }
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "her"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"her"'
                                                                            INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"her"' {kind: text}
                                                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                                    CODE_BLOCK_NT'say "that"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"that"'
                                                                            INVOCATION_NT'"that"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"that"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"that"' {kind: text}
                    RULE_NT'to say those in ( case - grammatical case )' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the case is nominative' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the case is nominative' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'case is nominative' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'case is nominative' {proposition: << ('case' == 'nominative') >>} {term: 'case'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the item be the prior named object' {indent: 2}
                                        INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Those"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Those"'
                                                    INVOCATION_NT'"Those"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Those"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Those"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 2}
                                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[We]"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we' {phrase invoked: call}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 2}
                                                            INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "He"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"He"'
                                                                    INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"He"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                                            CODE_BLOCK_NT {control structure: IF}
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 2}
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: <null-parse-node>
                                                                        }
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "She"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"She"'
                                                                            INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"She"' {kind: text}
                                                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                                    CODE_BLOCK_NT'say "That"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"That"'
                                                                            INVOCATION_NT'"That"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"That"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"That"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                    INVOCATION_LIST_NT'let the item be the prior named object' {indent: 2}
                                        INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 2}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Those"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"Those"'
                                                    INVOCATION_NT'"Those"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"Those"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"Those"' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 2}
                                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[We]"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we' {phrase invoked: call}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 2}
                                                            INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Him"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Him"'
                                                                    INVOCATION_NT'"Him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Him"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Him"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                                            CODE_BLOCK_NT {control structure: IF}
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 2}
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: <null-parse-node>
                                                                        }
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "Her"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"Her"'
                                                                            INVOCATION_NT'"Her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"Her"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"Her"' {kind: text}
                                                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                                    CODE_BLOCK_NT'say "That"' {control structure: SAY}
                                                                        INVOCATION_LIST_SAY_NT'"That"'
                                                                            INVOCATION_NT'"That"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                RVALUE_CONTEXT_NT'"That"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                    CONSTANT_NT'"That"' {kind: text}
                    RULE_NT'to say they' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"they"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"they"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[we]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "he"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"he"'
                                                            INVOCATION_NT'"he"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"he"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"he"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "she"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"she"'
                                                                    INVOCATION_NT'"she"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"she"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"she"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "it"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"it"'
                                                                    INVOCATION_NT'"it"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"it"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"it"' {kind: text}
                    RULE_NT'to say they' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"They"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"They"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[We]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "He"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"He"'
                                                            INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"He"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "She"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"She"'
                                                                    INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"She"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "It"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"It"'
                                                                    INVOCATION_NT'"It"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"It"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"It"' {kind: text}
                    RULE_NT'to say their' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "their"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"their"'
                                            INVOCATION_NT'"their"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"their"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"their"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[our]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'our'
                                                    INVOCATION_NT'our' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "his"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"his"'
                                                            INVOCATION_NT'"his"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"his"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"his"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "her"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"her"'
                                                                    INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"her"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "its"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"its"'
                                                                    INVOCATION_NT'"its"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"its"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"its"' {kind: text}
                    RULE_NT'to say their' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Their"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Their"'
                                            INVOCATION_NT'"Their"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Their"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Their"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Our]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'our'
                                                    INVOCATION_NT'our' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "His"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"His"'
                                                            INVOCATION_NT'"His"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"His"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"His"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Her"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                                    INVOCATION_NT'"Her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Her"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Her"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "Its"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Its"'
                                                                    INVOCATION_NT'"Its"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Its"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Its"' {kind: text}
                    RULE_NT'to say them' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "them"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"them"'
                                            INVOCATION_NT'"them"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"them"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"them"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[us]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'us'
                                                    INVOCATION_NT'us' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "him"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"him"'
                                                            INVOCATION_NT'"him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"him"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"him"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "her"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"her"'
                                                                    INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"her"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "it"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"it"'
                                                                    INVOCATION_NT'"it"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"it"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"it"' {kind: text}
                    RULE_NT'to say them' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Them"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Them"'
                                            INVOCATION_NT'"Them"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Them"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Them"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Us]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'us'
                                                    INVOCATION_NT'us' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "Him"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"Him"'
                                                            INVOCATION_NT'"Him"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"Him"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"Him"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Her"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                                    INVOCATION_NT'"Her"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Her"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Her"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "It"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"It"'
                                                                    INVOCATION_NT'"It"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"It"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"It"' {kind: text}
                    RULE_NT'to say theirs' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "theirs"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"theirs"'
                                            INVOCATION_NT'"theirs"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"theirs"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"theirs"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[ours]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'ours'
                                                    INVOCATION_NT'ours' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "his"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"his"'
                                                            INVOCATION_NT'"his"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"his"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"his"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "hers"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"hers"'
                                                                    INVOCATION_NT'"hers"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"hers"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"hers"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "its"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"its"'
                                                                    INVOCATION_NT'"its"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"its"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"its"' {kind: text}
                    RULE_NT'to say theirs' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Theirs"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Theirs"'
                                            INVOCATION_NT'"Theirs"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Theirs"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Theirs"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Ours]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'ours'
                                                    INVOCATION_NT'ours' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "His"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"His"'
                                                            INVOCATION_NT'"His"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"His"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"His"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Hers"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Hers"'
                                                                    INVOCATION_NT'"Hers"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Hers"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Hers"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "Its"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Its"'
                                                                    INVOCATION_NT'"Its"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Its"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Its"' {kind: text}
                    RULE_NT'to say themselves' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "themselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"themselves"'
                                            INVOCATION_NT'"themselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"themselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"themselves"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[ourselves]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'ourselves'
                                                    INVOCATION_NT'ourselves' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "himself"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"himself"'
                                                            INVOCATION_NT'"himself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"himself"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"himself"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "herself"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"herself"'
                                                                    INVOCATION_NT'"herself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"herself"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"herself"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "itself"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"itself"'
                                                                    INVOCATION_NT'"itself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"itself"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"itself"' {kind: text}
                    RULE_NT'to say themselves' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Themselves"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Themselves"'
                                            INVOCATION_NT'"Themselves"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Themselves"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Themselves"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Ourselves]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'ourselves'
                                                    INVOCATION_NT'ourselves' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "Himself"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"Himself"'
                                                            INVOCATION_NT'"Himself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"Himself"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"Himself"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Herself"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Herself"'
                                                                    INVOCATION_NT'"Herself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Herself"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Herself"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "Itself"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"Itself"'
                                                                    INVOCATION_NT'"Itself"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"Itself"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"Itself"' {kind: text}
                    RULE_NT'to say they're' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"they"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"they"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[we]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "he"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"he"'
                                                            INVOCATION_NT'"he"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"he"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"he"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "she"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"she"'
                                                                    INVOCATION_NT'"she"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"she"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"she"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "that"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"that"'
                                                                    INVOCATION_NT'"that"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"that"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"that"' {kind: text}
                            CODE_BLOCK_NT'say "['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say they're' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"They"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"They"' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[We]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if the item is a male person and item is not neuter' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person' {proposition: << kind=person('item') ^ male('item') >>} {term: 'item'}
                                                                TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "He"' {control structure: SAY}
                                                        INVOCATION_LIST_SAY_NT'"He"'
                                                            INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                    CONSTANT_NT'"He"' {kind: text}
                                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter' {colon_block_command} {indent: 1}
                                                            INVOCATION_NT'if the item is a female person and item is not neuter' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person' {proposition: << kind=person('item') ^ female('item') >>} {term: 'item'}
                                                                        TEST_PROPOSITION_NT'item is not neuter' {proposition: << NOT< neuter('item') NOT> >>} {term: 'item'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "She"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"She"'
                                                                    INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"She"' {kind: text}
                                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                            CODE_BLOCK_NT'say "That"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'"That"'
                                                                    INVOCATION_NT'"That"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                        RVALUE_CONTEXT_NT'"That"' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                            CONSTANT_NT'"That"' {kind: text}
                            CODE_BLOCK_NT'say "['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say it' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]It"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"It"'
                                    INVOCATION_NT'"It"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"It"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"It"' {kind: text}
                    RULE_NT'to say there' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]There"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"There"'
                                    INVOCATION_NT'"There"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"There"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"There"' {kind: text}
                    RULE_NT'to say it' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]it"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"it"'
                                    INVOCATION_NT'"it"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"it"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"it"' {kind: text}
                    RULE_NT'to say there' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]there"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"there"'
                                    INVOCATION_NT'"there"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"there"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"there"' {kind: text}
                    RULE_NT'to say it's' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]It['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"It"' {suppress_newlines}
                                    INVOCATION_NT'"It"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"It"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"It"' {kind: text}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say there's' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]There['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"There"' {suppress_newlines}
                                    INVOCATION_NT'"There"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"There"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"There"' {kind: text}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say it's' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]it['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"it"' {suppress_newlines}
                                    INVOCATION_NT'"it"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"it"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"it"' {kind: text}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say there's' {unit: 1}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]there['re]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                INVOCATION_LIST_SAY_NT'"there"' {suppress_newlines}
                                    INVOCATION_NT'"there"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"there"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"there"' {kind: text}
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re' {say verb: } {say verb: }
                    RULE_NT'to say possessive' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[our]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'our'
                                            INVOCATION_NT'our' {phrase invoked: call}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[the item][apostrophe]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the item' {suppress_newlines}
                                                    INVOCATION_NT'the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-object object}
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                            CODE_BLOCK_NT'say "[the item][apostrophe]s"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the item' {suppress_newlines}
                                                    INVOCATION_NT'the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-object object}
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe' {phrase invoked: call}
                                                INVOCATION_LIST_SAY_NT'"s"'
                                                    INVOCATION_NT'"s"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"s"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"s"' {kind: text}
                    RULE_NT'to say possessive' {unit: 1}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object' {indent: 1}
                                INVOCATION_NT'let the item be the prior named object' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}{meaning: {prior named object = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the item is the player' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the item is the player' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'item is the player' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'item is the player' {proposition: << ('item' == 'the player') >>} {term: 'item'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[Our]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'our'
                                            INVOCATION_NT'our' {phrase invoked: call}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the prior naming context is plural' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the prior naming context is plural' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'prior naming context is plural' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The item][apostrophe]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the item' {suppress_newlines}
                                                    INVOCATION_NT'the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-object object}
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe' {phrase invoked: call}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                            CODE_BLOCK_NT'say "[The item][apostrophe]s"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the item' {suppress_newlines}
                                                    INVOCATION_NT'the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-object object}
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe' {phrase invoked: call}
                                                INVOCATION_LIST_SAY_NT'"s"'
                                                    INVOCATION_NT'"s"' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"s"' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"s"' {kind: text}
                    ENDHERE_NT'english language' {unit: 1}
        INCLUSION_NT'include english language by graham nelson'
        INCLUSION_NT'include standard rules by graham nelson'
            HEADING_NT'version 6 of the standard rules by graham nelson begins here' {heading 0} {under: H0'version 6 of the standard rules by graham nelson begins here'}{includes: Standard Rules by Graham Nelson v6 } {unit: 2}
                BEGINHERE_NT'version 6 of the standard rules by graham nelson' {unit: 2}
                SENTENCE_NT'The Standard Rules, included in every project, define phrase' {unit: 2} {classified}
                HEADING_NT'part one - preamble' {heading 3} {under: H3'part one - preamble'} {unit: 2}
                    SENTENCE_NT'the verb to begin when means the built-in scene-begins-when ' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to begin when'
                        UNPARSED_NOUN_NT'built-in scene-begins-when meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to end when means the built-in scene-ends-when mean' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to end when'
                        UNPARSED_NOUN_NT'built-in scene-ends-when meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to end + when means the built-in scene-ends-when me' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to end + when'
                        UNPARSED_NOUN_NT'built-in scene-ends-when meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to understand + as in the imperative means the buil' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to understand + as'
                        UNPARSED_NOUN_NT'built-in understand-as meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to release along with in the imperative means the b' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to release along with'
                        UNPARSED_NOUN_NT'built-in release-along-with meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'the verb to index map with in the imperative means the built' {unit: 2} {classified}
                        VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                        UNPARSED_NOUN_NT'to index map with'
                        UNPARSED_NOUN_NT'built-in index-map-with meaning' {definite 'the' n/m/f s/p nom/acc}
                    SENTENCE_NT'use command line echoing translates as (-  Constant ECHO_COM' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'command line echoing'
                        UNPARSED_NOUN_NT'(-  Constant ECHO_COMMANDS; '
                    SENTENCE_NT'use full-length room descriptions translates as (-  #IFNDEF ' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'full-length room descriptions'
                        UNPARSED_NOUN_NT'(-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 2; #ENDIF; '
                    SENTENCE_NT'use abbreviated room descriptions translates as (-  #IFNDEF ' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'abbreviated room descriptions'
                        UNPARSED_NOUN_NT'(-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 3; #ENDIF; '
                    SENTENCE_NT'use scoring translates as (-  #IFNDEF USE_SCORING; Constant ' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'scoring'
                        UNPARSED_NOUN_NT'(-  #IFNDEF USE_SCORING; Constant USE_SCORING = 1; #ENDIF; '
                    SENTENCE_NT'use no scoring translates as (-  #IFNDEF USE_SCORING; Consta' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'no scoring'
                        UNPARSED_NOUN_NT'(-  #IFNDEF USE_SCORING; Constant USE_SCORING = 0; #ENDIF; '
                    SENTENCE_NT'use manual pronouns translates as (-  Constant MANUAL_PRONOU' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'manual pronouns'
                        UNPARSED_NOUN_NT'(-  Constant MANUAL_PRONOUNS; '
                    SENTENCE_NT'use undo prevention translates as (-  Constant PREVENT_UNDO;' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'undo prevention'
                        UNPARSED_NOUN_NT'(-  Constant PREVENT_UNDO; '
                    SENTENCE_NT'use verbose room descriptions translates as (-  Constant DEF' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'verbose room descriptions'
                        UNPARSED_NOUN_NT'(-  Constant DEFAULT_VERBOSE_DESCRIPTIONS; '
                    SENTENCE_NT'use brief room descriptions translates as (-  Constant DEFAU' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'brief room descriptions'
                        UNPARSED_NOUN_NT'(-  Constant DEFAULT_BRIEF_DESCRIPTIONS; '
                    SENTENCE_NT'use superbrief room descriptions translates as (-  Constant ' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'superbrief room descriptions'
                        UNPARSED_NOUN_NT'(-  Constant DEFAULT_SUPERBRIEF_DESCRIPTIONS; '
                    SENTENCE_NT'use maximum things understood at once of at least 100 transl' {unit: 2} {classified}
                        VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                        UNPARSED_NOUN_NT'maximum things understood at once of at least 100'
                        UNPARSED_NOUN_NT'(-  Constant MATCH_LIST_WORDS = {N}; '
                    SENTENCE_NT'use maximum things understood at once of at least 100' {unit: 2} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'maximum things understood at once of at least 100'
                HEADING_NT'part two - the physical world model' {heading 3} {under: H3'part two - the physical world model'} {unit: 2}
                    HEADING_NT'chapter 1 - verbs and relations' {heading 4} {under: H4'chapter 1 - verbs and relations'} {unit: 2}
                        SENTENCE_NT'the verb to be in means the reversed containment relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be in'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be inside means the reversed containment relatio' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be inside'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be within means the reversed containment relatio' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be within'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be held in means the reversed containment relati' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be held in'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be held inside means the reversed containment re' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be held inside'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to contain means the containment relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to contain'
                            UNPARSED_NOUN_NT'containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be contained in means the reversed containment r' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be contained in'
                            UNPARSED_NOUN_NT'reversed containment relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be on top of means the reversed support relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be on top of'
                            UNPARSED_NOUN_NT'reversed support relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be on means the reversed support relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be on'
                            UNPARSED_NOUN_NT'reversed support relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to support means the support relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to support'
                            UNPARSED_NOUN_NT'support relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be supported on means the reversed support relat' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be supported on'
                            UNPARSED_NOUN_NT'reversed support relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to incorporate means the incorporation relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to incorporate'
                            UNPARSED_NOUN_NT'incorporation relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be part of means the reversed incorporation rela' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be part of'
                            UNPARSED_NOUN_NT'reversed incorporation relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be a part of means the reversed incorporation re' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be a part of'
                            UNPARSED_NOUN_NT'reversed incorporation relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be parts of means the reversed incorporation rel' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be parts of'
                            UNPARSED_NOUN_NT'reversed incorporation relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to enclose means the enclosure relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to enclose'
                            UNPARSED_NOUN_NT'enclosure relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to carry means the carrying relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to carry'
                            UNPARSED_NOUN_NT'carrying relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to hold means the holding relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to hold'
                            UNPARSED_NOUN_NT'holding relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to wear means the wearing relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to wear'
                            UNPARSED_NOUN_NT'wearing relation' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                        SENTENCE_NT'the verb to be able to see means the visibility relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be able to see'
                            UNPARSED_NOUN_NT'visibility relation' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the verb to be able to touch means the touchability relation' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to be able to touch'
                            UNPARSED_NOUN_NT'touchability relation' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                        SENTENCE_NT'the verb to conceal ( he conceals , they conceal , he concea' {unit: 2} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to conceal ( he conceals , they conceal , he concealed , it '
                            UNPARSED_NOUN_NT'concealment relation' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'definition' {unit: 2}
                    HEADING_NT'chapter 2 - kinds for the physical world' {heading 4} {under: H4'chapter 2 - kinds for the physical world'} {unit: 2}
                        HEADING_NT'section 1 - kind definitions' {heading 5} {under: H5'section 1 - kind definitions'} {unit: 2}
                            SENTENCE_NT'a room is a kind' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=room(x) >>} {refers: infs'room'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind' {refined} {refers: infs'object'-k}
                            SENTENCE_NT'a thing is a kind' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=thing(x) >>} {refers: infs'thing'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind' {refined} {refers: infs'object'-k}
                            SENTENCE_NT'a direction is a kind' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=direction(x) >>} {refers: infs'direction'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind' {refined} {refers: infs'object'-k}
                            SENTENCE_NT'a door is a kind of thing' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=door(x) >>} {refers: infs'door'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'a container is a kind of thing' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=container(x) >>} {refers: infs'container'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'a supporter is a kind of thing' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'supporter' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=supporter(x) >>} {refers: infs'supporter'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'a backdrop is a kind of thing' {unit: 2} {classified} {interpretation of subject: infs'supporter'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'backdrop' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=backdrop(x) >>} {refers: infs'backdrop'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the plural of person is people' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-plural}
                                UNPARSED_NOUN_NT'person'
                                UNPARSED_NOUN_NT'people'
                            SENTENCE_NT'the plural of person is persons' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-plural}
                                UNPARSED_NOUN_NT'person'
                                UNPARSED_NOUN_NT'persons'
                            SENTENCE_NT'a person is a kind of thing' {unit: 2} {classified} {interpretation of subject: infs'backdrop'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=person(x) >>} {refers: infs'person'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'a region is a kind' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'region' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=region(x) >>} {refers: infs'region'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind' {refined} {refers: infs'object'-k}
                        HEADING_NT'section 2 - rooms' {heading 5} {under: H5'section 2 - rooms'} {unit: 2}
                            SENTENCE_NT'the specification of room is Represents geographical locatio' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of room' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'room' {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents geographical locations, both indoor
                                and outdoor, ' {refined} {eval: CONSTANT_NT'Represents geographical locations, both indoor
                                and outdoor, ' {kind: text}}
                            SENTENCE_NT'a room can be privately-named or publicly-named' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a room' {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'privately-named'
                                        UNPARSED_NOUN_NT'publicly-named'
                            SENTENCE_NT'a room is usually publicly-named' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'publicly-named' {refined} {predicate: publicly-named} {creation: << publicly-named(x) ^ publicly-named(x) >>}
                            SENTENCE_NT'a room can be lighted or dark' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a room' {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'lighted or dark'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'lighted'
                                        UNPARSED_NOUN_NT'dark'
                            SENTENCE_NT'a room is usually lighted' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'lighted' {refined} {predicate: lighted} {creation: << lighted(x) ^ lighted(x) >>}
                            SENTENCE_NT'a room can be visited or unvisited' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a room' {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'visited or unvisited'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'visited'
                                        UNPARSED_NOUN_NT'unvisited'
                            SENTENCE_NT'a room is usually unvisited' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unvisited' {refined} {predicate: unvisited} {creation: << unvisited(x) ^ unvisited(x) >>}
                            SENTENCE_NT'a room has a text called description' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'description'
                            SENTENCE_NT'a room has an object called map region' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'map region'
                            SENTENCE_NT'the map region of a room is usually nothing' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'map region of a room' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'map region' {refined} {eval: CONSTANT_NT {kind: objects valued property} {property: 'map region'=object}}
                                PROPER_NOUN_NT'nothing' {refined} {eval: CONSTANT_NT'nothing' {kind: object} {nothing}}
                            SENTENCE_NT'the verb to be adjacent to means the reversed adjacency rela' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be adjacent to'
                                UNPARSED_NOUN_NT'reversed adjacency relation' {definite 'the' n/m/f s/p nom/acc}
                            RULE_NT'definition' {unit: 2}
                            SENTENCE_NT'the verb to be regionally in means the reversed regional-con' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be regionally in'
                                UNPARSED_NOUN_NT'reversed regional-containment relation' {definite 'the' n/m/f s/p nom/acc}
                            SENTENCE_NT'the specification of region is Represents a broader area tha' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of region' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'region' {refined} {refers: infs'region'} {creation: << kind=region(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a broader area than a single
                                room, and allows rul' {refined} {eval: CONSTANT_NT'Represents a broader area than a single
                                room, and allows rul' {kind: text}}
                            SENTENCE_NT'a region can be privately-named or publicly-named' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a region' {refined} {refers: infs'region'} {creation: << kind=region(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'privately-named'
                                        UNPARSED_NOUN_NT'publicly-named'
                            SENTENCE_NT'a region is usually publicly-named' {unit: 2} {classified} {interpretation of subject: infs'room'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'region' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'region'} {creation: << kind=region(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'publicly-named' {refined} {predicate: publicly-named} {creation: << publicly-named(x) ^ publicly-named(x) >>}
                        HEADING_NT'section 3 - things' {heading 5} {under: H5'section 3 - things'} {unit: 2}
                            SENTENCE_NT'the specification of thing is Represents anything interactiv' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of thing' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents anything interactive in the model
                                world that is n' {refined} {eval: CONSTANT_NT'Represents anything interactive in the model
                                world that is n' {kind: text}}
                            SENTENCE_NT'a thing can be lit or unlit' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'lit or unlit'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'lit'
                                        UNPARSED_NOUN_NT'unlit'
                            SENTENCE_NT'a thing is usually unlit' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unlit' {refined} {predicate: unlit} {creation: << unlit(x) ^ unlit(x) >>}
                            SENTENCE_NT'a thing can be edible or inedible' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'edible or inedible'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'edible'
                                        UNPARSED_NOUN_NT'inedible'
                            SENTENCE_NT'a thing is usually inedible' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'inedible' {refined} {predicate: inedible} {creation: << inedible(x) ^ inedible(x) >>}
                            SENTENCE_NT'a thing can be fixed in place or portable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'fixed in place or portable'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'fixed in place'
                                        UNPARSED_NOUN_NT'portable'
                            SENTENCE_NT'a thing is usually portable' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'portable' {refined} {predicate: portable} {creation: << portable(x) ^ portable(x) >>}
                            SENTENCE_NT'a thing can be scenery' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'scenery'
                                    UNPARSED_NOUN_NT'scenery'
                            SENTENCE_NT'a thing can be wearable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'wearable'
                                    UNPARSED_NOUN_NT'wearable'
                            SENTENCE_NT'a thing can be pushable between rooms' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'pushable between rooms'
                                    UNPARSED_NOUN_NT'pushable between rooms'
                            SENTENCE_NT'a thing can be handled' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'handled'
                                    UNPARSED_NOUN_NT'handled'
                            SENTENCE_NT'a thing can be privately-named or publicly-named' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'privately-named'
                                        UNPARSED_NOUN_NT'publicly-named'
                            SENTENCE_NT'a thing is usually publicly-named' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'publicly-named' {refined} {predicate: publicly-named} {creation: << publicly-named(x) ^ publicly-named(x) >>}
                            SENTENCE_NT'a thing can be undescribed or described' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'undescribed or described'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'undescribed'
                                        UNPARSED_NOUN_NT'described'
                            SENTENCE_NT'a thing is usually described' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'described' {refined} {predicate: described} {creation: << described(x) ^ described(x) >>}
                            SENTENCE_NT'a thing can be marked for listing or unmarked for listing' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'marked for listing or unmarked for listing'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'marked for listing'
                                        UNPARSED_NOUN_NT'unmarked for listing'
                            SENTENCE_NT'a thing is usually unmarked for listing' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unmarked for listing' {refined} {predicate: unmarked for listing} {creation: << unmarked for listing(x) ^ unmarked for listing(x) >>}
                            SENTENCE_NT'a thing can be mentioned or unmentioned' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'mentioned or unmentioned'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'mentioned'
                                        UNPARSED_NOUN_NT'unmentioned'
                            SENTENCE_NT'a thing is usually mentioned' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'mentioned' {refined} {predicate: mentioned} {creation: << mentioned(x) ^ mentioned(x) >>}
                            SENTENCE_NT'a thing has a text called a description' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'description'
                            SENTENCE_NT'a thing has a text called an initial appearance' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'thing' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'initial appearance'
                            SENTENCE_NT'scenery is usually fixed in place' {unit: 2} {classified} {interpretation of subject: infs'thing'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                ADJECTIVE_NT'scenery' {refined} {predicate: scenery} {creation: << scenery(x) >>}
                                ADJECTIVE_NT'fixed in place' {refined} {predicate: fixed in place} {creation: << fixed in place(x) >>}
                        HEADING_NT'section 4 - directions' {heading 5} {under: H5'section 4 - directions'} {unit: 2}
                            SENTENCE_NT'the specification of direction is Represents a direction of ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of direction' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'direction' {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a direction of movement, such
                                as northeast or dow' {refined} {eval: CONSTANT_NT'Represents a direction of movement, such
                                as northeast or dow' {kind: text}}
                            SENTENCE_NT'a direction can be privately-named or publicly-named' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a direction' {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'privately-named'
                                        UNPARSED_NOUN_NT'publicly-named'
                            SENTENCE_NT'a direction is usually publicly-named' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'publicly-named' {refined} {predicate: publicly-named} {creation: << publicly-named(x) ^ publicly-named(x) >>}
                            SENTENCE_NT'a direction can be marked for listing or unmarked for listin' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a direction' {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'marked for listing or unmarked for listing'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'marked for listing'
                                        UNPARSED_NOUN_NT'unmarked for listing'
                            SENTENCE_NT'a direction is usually unmarked for listing' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unmarked for listing' {refined} {predicate: unmarked for listing} {creation: << unmarked for listing(x) ^ unmarked for listing(x) >>}
                            SENTENCE_NT'a direction can be scenery' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a direction' {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'scenery'
                                    UNPARSED_NOUN_NT'scenery'
                            SENTENCE_NT'a direction is always scenery' {unit: 2} {classified}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'scenery' {refined} {predicate: scenery} {creation: << scenery(x) ^ scenery(x) >>}
                            SENTENCE_NT'a direction has a direction called an opposite' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'opposite'
                            SENTENCE_NT'the north is a direction' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'north' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'north'} {eval: CONSTANT_NT'north' {kind: object} {instance: I22'north'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the northeast is a direction' {unit: 2} {classified} {interpretation of subject: infs'north'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'northeast' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: object} {instance: I23'northeast'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the northwest is a direction' {unit: 2} {classified} {interpretation of subject: infs'northeast'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'northwest' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'northwest'} {eval: CONSTANT_NT'northwest' {kind: object} {instance: I24'northwest'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the south is a direction' {unit: 2} {classified} {interpretation of subject: infs'northwest'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'south' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'south'} {eval: CONSTANT_NT'south' {kind: object} {instance: I25'south'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the southeast is a direction' {unit: 2} {classified} {interpretation of subject: infs'south'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'southeast' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'southeast'} {eval: CONSTANT_NT'southeast' {kind: object} {instance: I26'southeast'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the southwest is a direction' {unit: 2} {classified} {interpretation of subject: infs'southeast'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'southwest' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'southwest'} {eval: CONSTANT_NT'southwest' {kind: object} {instance: I27'southwest'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the east is a direction' {unit: 2} {classified} {interpretation of subject: infs'southwest'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'east' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'east'} {eval: CONSTANT_NT'east' {kind: object} {instance: I28'east'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the west is a direction' {unit: 2} {classified} {interpretation of subject: infs'east'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'west' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: object} {instance: I29'west'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the up is a direction' {unit: 2} {classified} {interpretation of subject: infs'west'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'up' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'up'} {eval: CONSTANT_NT'up' {kind: object} {instance: I30'up'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the down is a direction' {unit: 2} {classified} {interpretation of subject: infs'up'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'down' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'down'} {eval: CONSTANT_NT'down' {kind: object} {instance: I31'down'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the inside is a direction' {unit: 2} {classified} {interpretation of subject: infs'down'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'inside' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'inside'} {eval: CONSTANT_NT'inside' {kind: object} {instance: I32'inside'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the outside is a direction' {unit: 2} {classified} {interpretation of subject: infs'inside'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'outside' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'outside'} {eval: CONSTANT_NT'outside' {kind: object} {instance: I33'outside'} {enumeration: 0}} {created here}
                                COMMON_NOUN_NT'direction' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'direction'} {creation: << kind=direction(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the north has opposite south' {unit: 2} {classified} {interpretation of subject: infs'outside'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'north' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'north'} {eval: CONSTANT_NT'north' {kind: direction} {instance: I22'north'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite south' {refined}
                            SENTENCE_NT'understand "n" as north' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"n"'
                                UNPARSED_NOUN_NT'north'
                            SENTENCE_NT'the northeast has opposite southwest' {unit: 2} {classified} {interpretation of subject: infs'north'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'northeast' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: direction} {instance: I23'northeast'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite southwest' {refined}
                            SENTENCE_NT'understand "ne" as northeast' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"ne"'
                                UNPARSED_NOUN_NT'northeast'
                            SENTENCE_NT'the northwest has opposite southeast' {unit: 2} {classified} {interpretation of subject: infs'northeast'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'northwest' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'northwest'} {eval: CONSTANT_NT'northwest' {kind: direction} {instance: I24'northwest'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite southeast' {refined}
                            SENTENCE_NT'understand "nw" as northwest' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"nw"'
                                UNPARSED_NOUN_NT'northwest'
                            SENTENCE_NT'the south has opposite north' {unit: 2} {classified} {interpretation of subject: infs'northwest'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'south' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'south'} {eval: CONSTANT_NT'south' {kind: direction} {instance: I25'south'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite north' {refined}
                            SENTENCE_NT'understand "s" as south' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"s"'
                                UNPARSED_NOUN_NT'south'
                            SENTENCE_NT'the southeast has opposite northwest' {unit: 2} {classified} {interpretation of subject: infs'south'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'southeast' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'southeast'} {eval: CONSTANT_NT'southeast' {kind: direction} {instance: I26'southeast'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite northwest' {refined}
                            SENTENCE_NT'understand "se" as southeast' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"se"'
                                UNPARSED_NOUN_NT'southeast'
                            SENTENCE_NT'the southwest has opposite northeast' {unit: 2} {classified} {interpretation of subject: infs'southeast'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'southwest' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'southwest'} {eval: CONSTANT_NT'southwest' {kind: direction} {instance: I27'southwest'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite northeast' {refined}
                            SENTENCE_NT'understand "sw" as southwest' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"sw"'
                                UNPARSED_NOUN_NT'southwest'
                            SENTENCE_NT'the east has opposite west' {unit: 2} {classified} {interpretation of subject: infs'southwest'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'east' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'east'} {eval: CONSTANT_NT'east' {kind: direction} {instance: I28'east'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite west' {refined}
                            SENTENCE_NT'understand "e" as east' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"e"'
                                UNPARSED_NOUN_NT'east'
                            SENTENCE_NT'the west has opposite east' {unit: 2} {classified} {interpretation of subject: infs'east'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'west' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: direction} {instance: I29'west'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite east' {refined}
                            SENTENCE_NT'understand "w" as west' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"w"'
                                UNPARSED_NOUN_NT'west'
                            SENTENCE_NT'up has opposite down' {unit: 2} {classified} {interpretation of subject: infs'west'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'up' {refined} {refers: infs'up'} {eval: CONSTANT_NT'up' {kind: direction} {instance: I30'up'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite down' {refined}
                            SENTENCE_NT'understand "u" as up' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"u"'
                                UNPARSED_NOUN_NT'up'
                            SENTENCE_NT'down has opposite up' {unit: 2} {classified} {interpretation of subject: infs'up'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'down' {refined} {refers: infs'down'} {eval: CONSTANT_NT'down' {kind: direction} {instance: I31'down'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite up' {refined}
                            SENTENCE_NT'understand "d" as down' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"d"'
                                UNPARSED_NOUN_NT'down'
                            SENTENCE_NT'inside has opposite outside' {unit: 2} {classified} {interpretation of subject: infs'down'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'inside' {refined} {refers: infs'inside'} {eval: CONSTANT_NT'inside' {kind: direction} {instance: I32'inside'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite outside' {refined}
                            SENTENCE_NT'understand "in" as inside' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"in"'
                                UNPARSED_NOUN_NT'inside'
                            SENTENCE_NT'outside has opposite inside' {unit: 2} {classified} {interpretation of subject: infs'inside'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'outside' {refined} {refers: infs'outside'} {eval: CONSTANT_NT'outside' {kind: direction} {instance: I33'outside'} {enumeration: 0}}
                                RELATIONSHIP_NT'has' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'opposite inside' {refined}
                            SENTENCE_NT'understand "out" as outside' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"out"'
                                UNPARSED_NOUN_NT'outside'
                            SENTENCE_NT'the inside object translates into inter as in_obj' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 1}
                                UNPARSED_NOUN_NT'inside object' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'in_obj'
                            SENTENCE_NT'the outside object translates into inter as out_obj' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 1}
                                UNPARSED_NOUN_NT'outside object' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'out_obj'
                            SENTENCE_NT'the verb to be above means the reversed mapping up relation' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be above'
                                UNPARSED_NOUN_NT'reversed mapping up relation' {definite 'the' n/m/f s/p nom/acc}
                            SENTENCE_NT'the verb to be mapped above means the reversed mapping up re' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be mapped above'
                                UNPARSED_NOUN_NT'reversed mapping up relation' {definite 'the' n/m/f s/p nom/acc}
                            SENTENCE_NT'the verb to be below means the reversed mapping down relatio' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be below'
                                UNPARSED_NOUN_NT'reversed mapping down relation' {definite 'the' n/m/f s/p nom/acc}
                            SENTENCE_NT'the verb to be mapped below means the reversed mapping down ' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be mapped below'
                                UNPARSED_NOUN_NT'reversed mapping down relation' {definite 'the' n/m/f s/p nom/acc}
                        HEADING_NT'section 5 - doors' {heading 5} {under: H5'section 5 - doors'} {unit: 2}
                            SENTENCE_NT'the specification of door is Represents a conduit joining tw' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of door' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'door' {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a conduit joining two rooms, most
                                often a door or' {refined} {eval: CONSTANT_NT'Represents a conduit joining two rooms, most
                                often a door or' {kind: text}}
                            SENTENCE_NT'a door is always fixed in place' {unit: 2} {classified}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'fixed in place' {refined} {predicate: fixed in place} {creation: << fixed in place(x) ^ fixed in place(x) >>}
                            SENTENCE_NT'a door is never pushable between rooms' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is never' {certainty:impossible} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'pushable between rooms' {refined} {predicate: pushable between rooms} {creation: << pushable between rooms(x) ^ pushable between rooms(x) >>}
                            SENTENCE_NT'a door has an object called other side' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'other side'
                            SENTENCE_NT'the other side property translates into inter as door_to' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'other side property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'door_to'
                            SENTENCE_NT'leading-through relates one room ( called the other side ) t' {unit: 2} {classified}
                                VERB_NT'relates' {verb 'relate' 3p s act IS_TENSE +ve} {special meaning: new-relation}
                                UNPARSED_NOUN_NT'leading-through' {new relation: leading-through}
                                UNPARSED_NOUN_NT'one room ( called the other side )'
                                UNPARSED_NOUN_NT'various doors'
                            SENTENCE_NT'the verb to be through means the leading-through relation' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to be through'
                                UNPARSED_NOUN_NT'leading-through relation' {definite 'the' n/m/f s/p nom/acc}
                        HEADING_NT'section 6 - containers' {heading 5} {under: H5'section 6 - containers'} {unit: 2}
                            SENTENCE_NT'the specification of container is Represents something into ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of container' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents something into which portable
                                things can be put, ' {refined} {eval: CONSTANT_NT'Represents something into which portable
                                things can be put, ' {kind: text}}
                            SENTENCE_NT'a container can be enterable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'enterable'
                                    UNPARSED_NOUN_NT'enterable'
                            SENTENCE_NT'a container can be transparent or opaque' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'transparent or opaque'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'transparent'
                                        UNPARSED_NOUN_NT'opaque'
                            SENTENCE_NT'a container is usually opaque' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'opaque' {refined} {predicate: opaque} {creation: << opaque(x) ^ opaque(x) >>}
                            SENTENCE_NT'a container has a number called carrying capacity' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'number' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a container is usually 100' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'carrying capacity of a container' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'carrying capacity' {refined} {eval: CONSTANT_NT {kind: numbers valued property} {property: 'carrying capacity'=number}}
                                PROPER_NOUN_NT'100' {refined} {eval: CONSTANT_NT'100' {kind: number} {explicit literal} {number: 100}}
                        HEADING_NT'section 7 - supporters' {heading 5} {under: H5'section 7 - supporters'} {unit: 2}
                            SENTENCE_NT'the specification of supporter is Represents a surface on wh' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of supporter' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'supporter' {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a surface on which things can be
                                placed, such as ' {refined} {eval: CONSTANT_NT'Represents a surface on which things can be
                                placed, such as ' {kind: text}}
                            SENTENCE_NT'a supporter can be enterable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a supporter' {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'enterable'
                                    UNPARSED_NOUN_NT'enterable'
                            SENTENCE_NT'a supporter has a number called carrying capacity' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'supporter' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'number' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a supporter is usually 100' {unit: 2} {classified} {interpretation of subject: infs'supporter'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'carrying capacity of a supporter' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'supporter' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'carrying capacity' {refined} {eval: CONSTANT_NT {kind: numbers valued property} {property: 'carrying capacity'=number}}
                                PROPER_NOUN_NT'100' {refined} {eval: CONSTANT_NT'100' {kind: number} {explicit literal} {number: 100}}
                            SENTENCE_NT'a supporter is usually fixed in place' {unit: 2} {classified} {interpretation of subject: infs'supporter'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'supporter' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'fixed in place' {refined} {predicate: fixed in place} {creation: << fixed in place(x) ^ fixed in place(x) >>}
                            SENTENCE_NT'a supporter can be transparent' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a supporter' {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'transparent'
                                    UNPARSED_NOUN_NT'transparent'
                            SENTENCE_NT'a supporter is always transparent' {unit: 2} {classified} {interpretation of subject: infs'supporter'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'supporter' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'transparent' {refined} {predicate: transparent} {creation: << transparent(x) ^ transparent(x) >>}
                        HEADING_NT'section 8 - openability' {heading 5} {under: H5'section 8 - openability'} {unit: 2}
                            SENTENCE_NT'a door can be open or closed' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a door' {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'open or closed'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'open'
                                        UNPARSED_NOUN_NT'closed'
                            SENTENCE_NT'a door is usually closed' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'closed' {refined} {predicate: closed} {creation: << closed(x) ^ closed(x) >>}
                            SENTENCE_NT'a door can be openable or unopenable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a door' {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'openable or unopenable'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'openable'
                                        UNPARSED_NOUN_NT'unopenable'
                            SENTENCE_NT'a door is usually openable' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'openable' {refined} {predicate: openable} {creation: << openable(x) ^ openable(x) >>}
                            SENTENCE_NT'a container can be open or closed' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'open or closed'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'open'
                                        UNPARSED_NOUN_NT'closed'
                            SENTENCE_NT'a container is usually open' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'open' {refined} {predicate: open} {creation: << open(x) ^ open(x) >>}
                            SENTENCE_NT'a container can be openable or unopenable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'openable or unopenable'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'openable'
                                        UNPARSED_NOUN_NT'unopenable'
                            SENTENCE_NT'a container is usually unopenable' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unopenable' {refined} {predicate: unopenable} {creation: << unopenable(x) ^ unopenable(x) >>}
                        HEADING_NT'section 9 - lockability' {heading 5} {under: H5'section 9 - lockability'} {unit: 2}
                            SENTENCE_NT'a door can be lockable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a door' {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'lockable'
                                    UNPARSED_NOUN_NT'lockable'
                            SENTENCE_NT'a door is usually not lockable' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'not lockable' {refined} {predicate: not-lockable} {creation: << not-lockable(x) ^ NOT< lockable(x) NOT> >>}
                            SENTENCE_NT'a door can be locked or unlocked' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a door' {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'locked or unlocked'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'locked'
                                        UNPARSED_NOUN_NT'unlocked'
                            SENTENCE_NT'a door is usually unlocked' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
                            SENTENCE_NT'a door has an object called a matching key' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'matching key'
                            SENTENCE_NT'a locked door is usually lockable' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'locked door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'locked door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: locked} {creation: << kind=door(x) ^ locked(x) >>}
                                ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) >>}
                            SENTENCE_NT'a locked door is usually closed' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'locked door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'locked door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: locked} {creation: << kind=door(x) ^ locked(x) >>}
                                ADJECTIVE_NT'closed' {refined} {predicate: closed} {creation: << closed(x) >>}
                            SENTENCE_NT'a lockable door is usually openable' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'lockable door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ lockable(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'lockable door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) ^ lockable(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: lockable} {creation: << kind=door(x) ^ lockable(x) >>}
                                ADJECTIVE_NT'openable' {refined} {predicate: openable} {creation: << openable(x) >>}
                            SENTENCE_NT'a container can be lockable' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'lockable'
                                    UNPARSED_NOUN_NT'lockable'
                            SENTENCE_NT'a container is usually not lockable' {unit: 2} {classified} {interpretation of subject: infs'door'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'not lockable' {refined} {predicate: not-lockable} {creation: << not-lockable(x) ^ NOT< lockable(x) NOT> >>}
                            SENTENCE_NT'a container can be locked or unlocked' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'locked or unlocked'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'locked'
                                        UNPARSED_NOUN_NT'unlocked'
                            SENTENCE_NT'a container is usually unlocked' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
                            SENTENCE_NT'a container has an object called a matching key' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'matching key'
                            SENTENCE_NT'a locked container is usually lockable' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'locked container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'locked container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: locked} {creation: << kind=container(x) ^ locked(x) >>}
                                ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) >>}
                            SENTENCE_NT'a locked container is usually closed' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'locked container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'locked container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ locked(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: locked} {creation: << kind=container(x) ^ locked(x) >>}
                                ADJECTIVE_NT'closed' {refined} {predicate: closed} {creation: << closed(x) >>}
                            SENTENCE_NT'a lockable container is usually openable' {unit: 2} {classified} {interpretation of subject: infs'container'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                WITH_NT'lockable container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ lockable(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'lockable container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) ^ lockable(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: lockable} {creation: << kind=container(x) ^ lockable(x) >>}
                                ADJECTIVE_NT'openable' {refined} {predicate: openable} {creation: << openable(x) >>}
                            SENTENCE_NT'lock-fitting relates one thing ( called the matching key ) t' {unit: 2} {classified}
                                VERB_NT'relates' {verb 'relate' 3p s act IS_TENSE +ve} {special meaning: new-relation}
                                UNPARSED_NOUN_NT'lock-fitting' {new relation: lock-fitting}
                                UNPARSED_NOUN_NT'one thing ( called the matching key )'
                                UNPARSED_NOUN_NT'various things'
                            SENTENCE_NT'the verb to unlock means the lock-fitting relation' {unit: 2} {classified}
                                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                                UNPARSED_NOUN_NT'to unlock'
                                UNPARSED_NOUN_NT'lock-fitting relation' {definite 'the' n/m/f s/p nom/acc}
                        HEADING_NT'section 10 - backdrops' {heading 5} {under: H5'section 10 - backdrops'} {unit: 2}
                            SENTENCE_NT'the specification of backdrop is Represents an aspect of the' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of backdrop' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'backdrop' {refined} {refers: infs'backdrop'} {creation: << kind=backdrop(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents an aspect of the landscape
                                or architecture which ' {refined} {eval: CONSTANT_NT'Represents an aspect of the landscape
                                or architecture which ' {kind: text}}
                            SENTENCE_NT'a backdrop is usually scenery' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'backdrop' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'backdrop'} {creation: << kind=backdrop(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'scenery' {refined} {predicate: scenery} {creation: << scenery(x) ^ scenery(x) >>}
                            SENTENCE_NT'a backdrop is always fixed in place' {unit: 2} {classified} {interpretation of subject: infs'backdrop'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'backdrop' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'backdrop'} {creation: << kind=backdrop(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'fixed in place' {refined} {predicate: fixed in place} {creation: << fixed in place(x) ^ fixed in place(x) >>}
                            SENTENCE_NT'a backdrop is never pushable between rooms' {unit: 2} {classified} {interpretation of subject: infs'backdrop'}
                                VERB_NT'is never' {certainty:impossible} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'backdrop' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'backdrop'} {creation: << kind=backdrop(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'pushable between rooms' {refined} {predicate: pushable between rooms} {creation: << pushable between rooms(x) ^ pushable between rooms(x) >>}
                        HEADING_NT'section 11 - people' {heading 5} {under: H5'section 11 - people'} {unit: 2}
                            SENTENCE_NT'the specification of person is Despite the name, not necessa' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of person' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Despite the name, not necessarily a human
                                being, but anythin' {refined} {eval: CONSTANT_NT'Despite the name, not necessarily a human
                                being, but anythin' {kind: text}}
                            SENTENCE_NT'a person can be female or male' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'female or male'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'female'
                                        UNPARSED_NOUN_NT'male'
                            SENTENCE_NT'a person is usually male' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'male' {refined} {predicate: male} {creation: << male(x) ^ male(x) >>}
                            SENTENCE_NT'a person can be neuter' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'neuter'
                                    UNPARSED_NOUN_NT'neuter'
                            SENTENCE_NT'a person is usually not neuter' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'not neuter' {refined} {predicate: not-neuter} {creation: << not-neuter(x) ^ NOT< neuter(x) NOT> >>}
                            SENTENCE_NT'a person has a number called carrying capacity' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'number' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a person is usually 100' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'carrying capacity of a person' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'carrying capacity' {refined} {eval: CONSTANT_NT {kind: numbers valued property} {property: 'carrying capacity'=number}}
                                PROPER_NOUN_NT'100' {refined} {eval: CONSTANT_NT'100' {kind: number} {explicit literal} {number: 100}}
                            SENTENCE_NT'a person can be transparent' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'transparent'
                                    UNPARSED_NOUN_NT'transparent'
                            SENTENCE_NT'a person is always transparent' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'transparent' {refined} {predicate: transparent} {creation: << transparent(x) ^ transparent(x) >>}
                            SENTENCE_NT'the yourself is an undescribed person' {unit: 2} {classified} {interpretation of subject: infs'person'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'yourself' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: object} {instance: I34'yourself'} {enumeration: 0}} {created here}
                                WITH_NT'undescribed person' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) ^ undescribed(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'undescribed person' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) ^ undescribed(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: undescribed} {creation: << kind=person(x) ^ undescribed(x) ^ undescribed(x) >>}
                            SENTENCE_NT'the yourself is proper-named' {unit: 2} {classified} {interpretation of subject: infs'yourself'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'yourself' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: person} {instance: I34'yourself'} {enumeration: 0}}
                                ADJECTIVE_NT'proper-named' {refined} {predicate: proper-named} {creation: << proper-named(x) ^ proper-named(x) >>}
                            SENTENCE_NT'the yourself is privately-named' {unit: 2} {classified} {interpretation of subject: infs'yourself'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'yourself' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: person} {instance: I34'yourself'} {enumeration: 0}}
                                ADJECTIVE_NT'privately-named' {refined} {predicate: privately-named} {creation: << privately-named(x) ^ privately-named(x) >>}
                            SENTENCE_NT'understand "your former self" or "my former self" or "former' {unit: 2} {classified}
                                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                UNPARSED_NOUN_NT'"your former self" or "my former self" or "former self" or "'
                                UNPARSED_NOUN_NT'yourself when the player is not yourself'
                            SENTENCE_NT'the description of yourself is usually "As good-looking as e' {unit: 2} {classified} {interpretation of subject: infs'yourself'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'description of yourself' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    PROPER_NOUN_NT'yourself' {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: person} {instance: I34'yourself'} {enumeration: 0}}
                                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                                PROPER_NOUN_NT'"As good-looking as ever."' {refined} {eval: CONSTANT_NT'"As good-looking as ever."' {kind: text}}
                            SENTENCE_NT'the yourself object translates into inter as selfobj' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 1}
                                UNPARSED_NOUN_NT'yourself object' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'selfobj'
                        HEADING_NT'section 12 - animals , men and women' {heading 5} {under: H5'section 12 - animals , men and women'} {unit: 2}
                            SENTENCE_NT'the plural of man is men' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-plural}
                                UNPARSED_NOUN_NT'man'
                                UNPARSED_NOUN_NT'men'
                            SENTENCE_NT'the plural of woman is women' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-plural}
                                UNPARSED_NOUN_NT'woman'
                                UNPARSED_NOUN_NT'women'
                            SENTENCE_NT'a man is a kind of person' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'man' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=man(x) >>} {refers: infs'man'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of person' {refined} {refers: infs'person'}
                                    COMMON_NOUN_NT'person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specification of man is Represents a man or boy.' {unit: 2} {classified} {interpretation of subject: infs'man'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of man' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'man' {refined} {refers: infs'man'} {creation: << kind=man(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a man or boy.' {refined} {eval: CONSTANT_NT'Represents a man or boy.' {kind: text}}
                            SENTENCE_NT'a man is always male' {unit: 2} {classified} {interpretation of subject: infs'man'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'man' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'male' {refined} {predicate: male} {creation: << male(x) ^ male(x) >>}
                            SENTENCE_NT'a man is never neuter' {unit: 2} {classified} {interpretation of subject: infs'man'}
                                VERB_NT'is never' {certainty:impossible} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'man' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'neuter' {refined} {predicate: neuter} {creation: << neuter(x) ^ neuter(x) >>}
                            SENTENCE_NT'a woman is a kind of person' {unit: 2} {classified} {interpretation of subject: infs'man'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'woman' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=woman(x) >>} {refers: infs'woman'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of person' {refined} {refers: infs'person'}
                                    COMMON_NOUN_NT'person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specification of woman is Represents a woman or girl.' {unit: 2} {classified} {interpretation of subject: infs'woman'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of woman' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'woman' {refined} {refers: infs'woman'} {creation: << kind=woman(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a woman or girl.' {refined} {eval: CONSTANT_NT'Represents a woman or girl.' {kind: text}}
                            SENTENCE_NT'a woman is always female' {unit: 2} {classified} {interpretation of subject: infs'woman'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'woman' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'female' {refined} {predicate: female} {creation: << female(x) ^ female(x) >>}
                            SENTENCE_NT'a woman is never neuter' {unit: 2} {classified} {interpretation of subject: infs'woman'}
                                VERB_NT'is never' {certainty:impossible} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'woman' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'neuter' {refined} {predicate: neuter} {creation: << neuter(x) ^ neuter(x) >>}
                            SENTENCE_NT'an animal is a kind of person' {unit: 2} {classified} {interpretation of subject: infs'woman'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'animal' {indefinite 'an' n/m/f nom/acc s} {refined} {creation: << kind=animal(x) >>} {refers: infs'animal'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of person' {refined} {refers: infs'person'}
                                    COMMON_NOUN_NT'person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specification of animal is Represents an animal, or at a' {unit: 2} {classified} {interpretation of subject: infs'animal'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of animal' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'animal' {refined} {refers: infs'animal'} {creation: << kind=animal(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents an animal, or at any rate a
                                non-human living crea' {refined} {eval: CONSTANT_NT'Represents an animal, or at any rate a
                                non-human living crea' {kind: text}}
                        HEADING_NT'section 13 - devices' {heading 5} {under: H5'section 13 - devices'} {unit: 2}
                            SENTENCE_NT'a device is a kind of thing' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'device' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=device(x) >>} {refers: infs'device'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'a device can be switched on or switched off' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a device' {refined} {refers: infs'device'} {creation: << kind=device(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'switched on or switched off'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'switched on'
                                        UNPARSED_NOUN_NT'switched off'
                            SENTENCE_NT'a device is usually switched off' {unit: 2} {classified} {interpretation of subject: infs'device'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'device' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'device'} {creation: << kind=device(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'switched off' {refined} {predicate: switched off} {creation: << switched off(x) ^ switched off(x) >>}
                            SENTENCE_NT'the specification of device is Represents a machine or contr' {unit: 2} {classified} {interpretation of subject: infs'device'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of device' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'device' {refined} {refers: infs'device'} {creation: << kind=device(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a machine or contrivance of some
                                kind which can b' {refined} {eval: CONSTANT_NT'Represents a machine or contrivance of some
                                kind which can b' {kind: text}}
                        HEADING_NT'section 14 - vehicles' {heading 5} {under: H5'section 14 - vehicles'} {unit: 2}
                            SENTENCE_NT'a vehicle is a kind of container' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'vehicle' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=vehicle(x) >>} {refers: infs'vehicle'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of container' {refined} {refers: infs'container'}
                                    COMMON_NOUN_NT'container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specification of vehicle is Represents a container large' {unit: 2} {classified} {interpretation of subject: infs'vehicle'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of vehicle' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'vehicle' {refined} {refers: infs'vehicle'} {creation: << kind=vehicle(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a container large enough for
                                a person to enter, a' {refined} {eval: CONSTANT_NT'Represents a container large enough for
                                a person to enter, a' {kind: text}}
                            SENTENCE_NT'a vehicle is always enterable' {unit: 2} {classified} {interpretation of subject: infs'vehicle'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'vehicle' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'vehicle'} {creation: << kind=vehicle(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'enterable' {refined} {predicate: enterable} {creation: << enterable(x) ^ enterable(x) >>}
                            SENTENCE_NT'a vehicle is usually not portable' {unit: 2} {classified} {interpretation of subject: infs'vehicle'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'vehicle' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'vehicle'} {creation: << kind=vehicle(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'not portable' {refined} {predicate: not-portable} {creation: << not-portable(x) ^ NOT< portable(x) NOT> >>}
                        HEADING_NT'section 15 - player's holdall' {heading 5} {under: H5'section 15 - player's holdall'} {unit: 2}
                            SENTENCE_NT'a player's holdall is a kind of container' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'player's holdall' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=player's holdall(x) >>} {refers: infs'player's holdall'} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of container' {refined} {refers: infs'container'}
                                    COMMON_NOUN_NT'container' {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specification of player's holdall is Represents a contai' {unit: 2} {classified} {interpretation of subject: infs'player's holdall'}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                X_OF_Y_NT'specification of player's holdall' {definite 'the' n/m/f s/p nom/acc} {refined}
                                    COMMON_NOUN_NT'player's holdall' {refined} {refers: infs'player's holdall'} {creation: << kind=player's holdall(x) >>} {eval: TEST_VALUE_NT}
                                    PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                                PROPER_NOUN_NT'Represents a container which the
                                player can carry around as ' {refined} {eval: CONSTANT_NT'Represents a container which the
                                player can carry around as ' {kind: text}}
                            SENTENCE_NT'a player's holdall is always portable' {unit: 2} {classified} {interpretation of subject: infs'player's holdall'}
                                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'player's holdall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'player's holdall'} {creation: << kind=player's holdall(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'portable' {refined} {predicate: portable} {creation: << portable(x) ^ portable(x) >>}
                            SENTENCE_NT'a player's holdall is usually openable' {unit: 2} {classified} {interpretation of subject: infs'player's holdall'}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'player's holdall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'player's holdall'} {creation: << kind=player's holdall(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'openable' {refined} {predicate: openable} {creation: << openable(x) ^ openable(x) >>}
                        HEADING_NT'section 16 - inter identifier equivalents' {heading 5} {under: H5'section 16 - inter identifier equivalents'} {unit: 2}
                            SENTENCE_NT'the wearable property translates into inter as clothing' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'wearable property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'clothing'
                            SENTENCE_NT'the undescribed property translates into inter as concealed' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'undescribed property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'concealed'
                            SENTENCE_NT'the edible property translates into inter as edible' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'edible property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'edible'
                            SENTENCE_NT'the enterable property translates into inter as enterable' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'enterable property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'enterable'
                            SENTENCE_NT'the female property translates into inter as female' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'female property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'female'
                            SENTENCE_NT'the mentioned property translates into inter as mentioned' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'mentioned property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'mentioned'
                            SENTENCE_NT'the lit property translates into inter as light' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'lit property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'light'
                            SENTENCE_NT'the lighted property translates into inter as light' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'lighted property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'light'
                            SENTENCE_NT'the lockable property translates into inter as lockable' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'lockable property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'lockable'
                            SENTENCE_NT'the locked property translates into inter as locked' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'locked property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'locked'
                            SENTENCE_NT'the handled property translates into inter as moved' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'handled property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'moved'
                            SENTENCE_NT'the neuter property translates into inter as neuter' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'neuter property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'neuter'
                            SENTENCE_NT'the switched on property translates into inter as on' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'switched on property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'on'
                            SENTENCE_NT'the open property translates into inter as open' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'open property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'open'
                            SENTENCE_NT'the openable property translates into inter as openable' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'openable property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'openable'
                            SENTENCE_NT'the privately-named property translates into inter as privat' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'privately-named property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'privately_named'
                            SENTENCE_NT'the pushable between rooms property translates into inter as' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'pushable between rooms property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'pushable'
                            SENTENCE_NT'the scenery property translates into inter as scenery' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'scenery property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'scenery'
                            SENTENCE_NT'the fixed in place property translates into inter as static' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'fixed in place property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'static'
                            SENTENCE_NT'the transparent property translates into inter as transparen' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'transparent property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'transparent'
                            SENTENCE_NT'the visited property translates into inter as visited' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'visited property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'visited'
                            SENTENCE_NT'the marked for listing property translates into inter as wor' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'marked for listing property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'workflag'
                            SENTENCE_NT'the list grouping key property translates into inter as list' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'list grouping key property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'list_together'
                            SENTENCE_NT'the carrying capacity property translates into inter as capa' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'carrying capacity property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'capacity'
                            SENTENCE_NT'the description property translates into inter as descriptio' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'description property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'description'
                            SENTENCE_NT'the initial appearance property translates into inter as ini' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'initial appearance property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'initial'
                            SENTENCE_NT'the map region property translates into inter as map_region' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'map region property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'map_region'
                            SENTENCE_NT'the matching key property translates into inter as with_key' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: -1}
                                UNPARSED_NOUN_NT'matching key property' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'with_key'
                HEADING_NT'part three - variables and rulebooks' {heading 3} {under: H3'part three - variables and rulebooks'} {unit: 2}
                    HEADING_NT'chapter 1 - variables' {heading 4} {under: H4'chapter 1 - variables'} {unit: 2}
                        HEADING_NT'section 1 - situation' {heading 5} {under: H5'section 1 - situation'} {unit: 2}
                            SENTENCE_NT'the player is a person that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'player' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'player' {nonlocal: 'player'(var)person}} {created here}
                                COMMON_NOUN_NT'person that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=people variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the player variable translates into inter as player' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'player variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'player'
                            SENTENCE_NT'the location -- documented at var_location -- is an object t' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'location' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the score -- documented at var_score -- is a number that var' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'score' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'score' {nonlocal: 'score'(var)number}} {created here}
                                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the last notified score is a number that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'last notified score' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'last notified score' {nonlocal: 'last notified score'(var)number}} {created here}
                                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the maximum score is a number that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'maximum score' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'maximum score' {nonlocal: 'maximum score'(var)number}} {created here}
                                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the turn count is a number that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'turn count' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'turn count' {nonlocal: 'turn count'(var)number}} {created here}
                                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the time of day -- documented at var_time -- is a time that ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'time of day' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'time of day' {nonlocal: 'time of day'(var)time}} {created here}
                                COMMON_NOUN_NT'time that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=times variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the darkness witnessed is a truth state that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'darkness witnessed' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'darkness witnessed' {nonlocal: 'darkness witnessed'(var)truth state}} {created here}
                                COMMON_NOUN_NT'truth state that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=truth states variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the location variable translates into inter as real_location' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'location variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'real_location'
                            SENTENCE_NT'the score variable translates into inter as score' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'score variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'score'
                            SENTENCE_NT'the last notified score variable translates into inter as la' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'last notified score variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'last_score'
                            SENTENCE_NT'the maximum score variable translates into inter as MAX_SCOR' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'maximum score variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'MAX_SCORE'
                            SENTENCE_NT'the turn count variable translates into inter as turns' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'turn count variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'turns'
                            SENTENCE_NT'the time of day variable translates into inter as the_time' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'time of day variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'the_time'
                        HEADING_NT'section 2 - current action' {heading 5} {under: H5'section 2 - current action'} {unit: 2}
                            SENTENCE_NT'the noun -- documented at var_noun -- is an object that vari' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'noun' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the second noun is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'second noun' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the person asked -- documented at var_person_asked -- is an ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'person asked' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the reason the action failed -- documented at var_reason -- ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'reason the action failed' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'reason the action failed' {nonlocal: 'reason the action failed'(var)rule}} {created here}
                                COMMON_NOUN_NT'action name based rule producing nothing that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=rules variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the item described is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'item described' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'item described' {nonlocal: 'item described'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the noun variable translates into inter as noun' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'noun variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'noun'
                            SENTENCE_NT'the second noun variable translates into inter as second' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'second noun variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'second'
                            SENTENCE_NT'the person asked variable translates into inter as actor' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'person asked variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'actor'
                            SENTENCE_NT'the reason the action failed variable translates into inter ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'reason the action failed variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'reason_the_action_failed'
                            SENTENCE_NT'the item described variable translates into inter as self' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'item described variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'self'
                        HEADING_NT'section 3 - used when ruling on accessibility' {heading 5} {under: H5'section 3 - used when ruling on accessibility'} {unit: 2}
                            SENTENCE_NT'the person reaching -- documented at var_person_reaching -- ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'person reaching' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'person reaching' {nonlocal: 'person reaching'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the container in question is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'container in question' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'container in question' {nonlocal: 'container in question'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the supporter in question is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'supporter in question' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'supporter in question' {nonlocal: 'supporter in question'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the particular possession -- documented at var_particular --' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'particular possession' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'particular possession' {nonlocal: 'particular possession'(var)thing}} {created here}
                                COMMON_NOUN_NT'thing that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=things variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the person reaching variable translates into inter as actor' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'person reaching variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'actor'
                            SENTENCE_NT'the container in question variable translates into inter as ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'container in question variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'parameter_object'
                            SENTENCE_NT'the supporter in question variable translates into inter as ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'supporter in question variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'parameter_object'
                            SENTENCE_NT'the particular possession variable translates into inter as ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'particular possession variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'particular_possession'
                        HEADING_NT'section 4 - used when understanding typed commands' {heading 5} {under: H5'section 4 - used when understanding typed commands'} {unit: 2}
                            SENTENCE_NT'the player's command -- documented at var_command -- is a sn' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'player's command' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}} {created here}
                                COMMON_NOUN_NT'snippet that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=snippets variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the matched text is a snippet that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'matched text' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'matched text' {nonlocal: 'matched text'(var)snippet}} {created here}
                                COMMON_NOUN_NT'snippet that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=snippets variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the topic understood is a snippet that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'topic understood' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'topic understood' {nonlocal: 'topic understood'(var)snippet}} {created here}
                                COMMON_NOUN_NT'snippet that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=snippets variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the current item from the multiple object list is an object ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'current item from the multiple object list' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'current item from the multiple object list' {nonlocal: 'current item from the multiple object list'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the player's command variable translates into inter as playe' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'player's command variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'players_command'
                            SENTENCE_NT'the matched text variable translates into inter as matched_t' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'matched text variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'matched_text'
                            SENTENCE_NT'the topic understood variable translates into inter as parse' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'topic understood variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'parsed_number'
                            SENTENCE_NT'the current item from the multiple object list variable tran' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'current item from the multiple object list variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'multiple_object_item'
                        HEADING_NT'section 5 - presentation on screen' {heading 5} {under: H5'section 5 - presentation on screen'} {unit: 2}
                            SENTENCE_NT'the command prompt -- documented at var_prompt -- is a text ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'command prompt' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'command prompt' {nonlocal: 'command prompt'(var)text}} {created here}
                                COMMON_NOUN_NT'text that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=texts variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the command prompt is ">"' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'command prompt' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'command prompt' {nonlocal: 'command prompt'(var)text}{meaning: {command prompt = VARIABLE_MC}}}
                                PROPER_NOUN_NT'">"' {refined} {eval: CONSTANT_NT'">"' {kind: text}}
                            SENTENCE_NT'the left hand status line -- documented at var_sl -- is a te' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'left hand status line' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'left hand status line' {nonlocal: 'left hand status line'(var)text}} {created here}
                                COMMON_NOUN_NT'text that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=texts variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the right hand status line is a text that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'right hand status line' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'right hand status line' {nonlocal: 'right hand status line'(var)text}} {created here}
                                COMMON_NOUN_NT'text that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=texts variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the left hand status line variable translates into inter as ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'left hand status line variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'left_hand_status_line'
                            SENTENCE_NT'the right hand status line variable translates into inter as' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'right hand status line variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'right_hand_status_line'
                            SENTENCE_NT'the listing group size is a number that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'listing group size' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'listing group size' {nonlocal: 'listing group size'(var)number}} {created here}
                                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the listing group size variable translates into inter as lis' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'listing group size variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'listing_size'
                        HEADING_NT'section 6 - language generation' {heading 5} {under: H5'section 6 - language generation'} {unit: 2}
                            SENTENCE_NT'the prior named object is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'prior named object' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'prior named object' {nonlocal: 'prior named object'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the prior named object variable translates into inter as pri' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'prior named object variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'prior_named_noun'
                            SENTENCE_NT'an object has a text called list grouping key' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'object'-k} {creation: << kind=object(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'list grouping key'
                        HEADING_NT'section 7 - unindexed standard rules variables - unindexed' {heading 5} {under: H5'section 7 - unindexed standard rules variables - unindexed'} {unit: 2}
                            SENTENCE_NT'the story title , the story author , the story headline , th' {unit: 2} {classified}
                                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'story title' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story title' {nonlocal: 'story title'(const)text}} {created here}
                                    AND_NT',' {refined}
                                        PROPER_NOUN_NT'story author' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story author' {nonlocal: 'story author'(const)text}} {created here}
                                        AND_NT',' {refined}
                                            PROPER_NOUN_NT'story headline' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story headline' {nonlocal: 'story headline'(const)text}} {created here}
                                            AND_NT'and' {refined}
                                                PROPER_NOUN_NT'story genre' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story genre' {nonlocal: 'story genre'(const)text}} {created here}
                                                PROPER_NOUN_NT'story description' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story description' {nonlocal: 'story description'(const)text}} {created here}
                                COMMON_NOUN_NT'text variables' {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=texts variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the release number and the story creation year are number va' {unit: 2} {classified}
                                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                                AND_NT'and' {refined}
                                    PROPER_NOUN_NT'release number' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'release number' {nonlocal: 'release number'(const)number}} {created here}
                                    PROPER_NOUN_NT'story creation year' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story creation year' {nonlocal: 'story creation year'(const)number}} {created here}
                                COMMON_NOUN_NT'number variables' {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the release number is usually 1' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'release number' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'release number' {nonlocal: 'release number'(const)number}{meaning: {release number = VARIABLE_MC}}}
                                PROPER_NOUN_NT'1' {refined} {eval: CONSTANT_NT'1' {kind: text} {explicit literal} {number: 1}}
                            SENTENCE_NT'the story headline is usually "An Interactive Fiction"' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'story headline' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story headline' {nonlocal: 'story headline'(const)text}{meaning: {story headline = VARIABLE_MC}}}
                                PROPER_NOUN_NT'"An Interactive Fiction"' {refined} {eval: CONSTANT_NT'"An Interactive Fiction"' {kind: text}}
                            SENTENCE_NT'the story genre is usually "Fiction"' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'story genre' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'story genre' {nonlocal: 'story genre'(const)text}{meaning: {story genre = VARIABLE_MC}}}
                                PROPER_NOUN_NT'"Fiction"' {refined} {eval: CONSTANT_NT'"Fiction"' {kind: text}}
                            SENTENCE_NT'the story title variable translates into inter as Story' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'story title variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'Story'
                        HEADING_NT'section sr2/6b - unindexed standard rules variables - uninde' {heading 5} {under: H5'section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only )'} {unit: 2}
                            SENTENCE_NT'figure of cover is the file of cover art ( The cover art. )' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-figure}
                                UNPARSED_NOUN_NT'figure of cover'
                                UNPARSED_NOUN_NT'of cover art ( The cover art. )'
                        HEADING_NT'section 8 - unindexed standard rules variables - unindexed' {heading 5} {under: H5'section 8 - unindexed standard rules variables - unindexed'} {unit: 2}
                            SENTENCE_NT'the i6-nothing-constant is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'i6-nothing-constant' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'i6-nothing-constant' {nonlocal: 'i6-nothing-constant'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the i6-nothing-constant variable translates into inter as no' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'i6-nothing-constant variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'nothing'
                            SENTENCE_NT'the i6-varying-global is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'i6-varying-global' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'i6-varying-global' {nonlocal: 'i6-varying-global'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the i6-varying-global variable translates into inter as noth' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'i6-varying-global variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'nothing'
                            SENTENCE_NT'the item-pushed-between-rooms is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'item-pushed-between-rooms' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'item-pushed-between-rooms' {nonlocal: 'item-pushed-between-rooms'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the item-pushed-between-rooms variable translates into inter' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'item-pushed-between-rooms variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'move_pushing'
                            SENTENCE_NT'the actor-location is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'actor-location' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'actor-location' {nonlocal: 'actor-location'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the actor-location variable translates into inter as actor_l' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'actor-location variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'actor_location'
                            SENTENCE_NT'the scene being changed is a scene that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'scene being changed' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'scene being changed' {nonlocal: 'scene being changed'(var)scene}} {created here}
                                COMMON_NOUN_NT'scene that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=scenes variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the scene being changed variable translates into inter as pa' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'scene being changed variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'parameter_value'
                    HEADING_NT'chapter 2 - rulebooks' {heading 4} {under: H4'chapter 2 - rulebooks'} {unit: 2}
                        HEADING_NT'section 1 - the standard rulebooks' {heading 5} {under: H5'section 1 - the standard rulebooks'} {unit: 2}
                            SENTENCE_NT'turn sequence rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'turn sequence rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: turn sequence}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'scene changing rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'scene changing rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: scene changing}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'when play begins is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'when play begins' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: when play begins}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'when play ends is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'when play ends' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: when play ends}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'when scene begins is a scene based rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'when scene begins' {refined} {eval: CONSTANT_NT {kind: scenes based rulebook} {rulebook: when scene begins}} {created here}
                                COMMON_NOUN_NT'scene based rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=scenes based rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'when scene ends is a scene based rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'when scene ends' {refined} {eval: CONSTANT_NT {kind: scenes based rulebook} {rulebook: when scene ends}} {created here}
                                COMMON_NOUN_NT'scene based rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=scenes based rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'every turn rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'every turn rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: every turn}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'action-processing rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'action-processing rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: action-processing}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the action-processing rulebook has a person called the actor' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'action-processing rulebook' {kind: rulebook} {rulebook: action-processing}{meaning: {action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'actor' {definite 'the' n/m/f s/p nom/acc}
                            SENTENCE_NT'setting action variables is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'setting action variables' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: setting action variables}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specific action-processing rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: specific action-processing}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the specific action-processing rulebook has a truth state ca' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'truth state' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'action in world'
                            SENTENCE_NT'the specific action-processing rulebook has a truth state ca' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'truth state' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'action keeping silent'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook calle' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'specific check rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook calle' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'specific carry out rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook calle' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'specific report rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a truth state ca' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'specific action-processing rulebook' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'specific action-processing rulebook' {kind: rulebook} {rulebook: specific action-processing}{meaning: {specific action-processing rulebook = RULEBOOK_MC}}}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'truth state' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'within the player's sight'
                            SENTENCE_NT'the player's action awareness rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'player's action awareness rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: player's action awareness}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'accessibility rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'accessibility rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: accessibility}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'reaching inside rules is an object-based rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'reaching inside rules' {refined} {eval: CONSTANT_NT {kind: objects based rulebook} {rulebook: reaching inside}} {created here}
                                COMMON_NOUN_NT'object-based rulebook' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=objects based rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'reaching inside rules have outcomes allow access ( success )' {unit: 2} {classified}
                                VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                                PROPER_NOUN_NT'reaching inside rules' {refined} {eval: CONSTANT_NT'reaching inside rules' {kind: objects based rulebook} {rulebook: reaching inside}{meaning: {reaching inside rules = RULEBOOK_MC}}}
                                RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'and' {refined}
                                        UNPARSED_NOUN_NT'outcomes allow access ( success )'
                                        UNPARSED_NOUN_NT'deny access ( failure )'
                            SENTENCE_NT'reaching outside rules is an object-based rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'reaching outside rules' {refined} {eval: CONSTANT_NT {kind: objects based rulebook} {rulebook: reaching outside}} {created here}
                                COMMON_NOUN_NT'object-based rulebook' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=objects based rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'reaching outside rules have outcomes allow access ( success ' {unit: 2} {classified}
                                VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                                PROPER_NOUN_NT'reaching outside rules' {refined} {eval: CONSTANT_NT'reaching outside rules' {kind: objects based rulebook} {rulebook: reaching outside}{meaning: {reaching outside rules = RULEBOOK_MC}}}
                                RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'and' {refined}
                                        UNPARSED_NOUN_NT'outcomes allow access ( success )'
                                        UNPARSED_NOUN_NT'deny access ( failure )'
                            SENTENCE_NT'visibility rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'visibility rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: visibility}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'visibility rules have outcomes there is sufficient light ( f' {unit: 2} {classified}
                                VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                                PROPER_NOUN_NT'visibility rules' {refined} {eval: CONSTANT_NT'visibility rules' {kind: rulebook} {rulebook: visibility}{meaning: {visibility rules = RULEBOOK_MC}}}
                                RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'and' {refined}
                                        UNPARSED_NOUN_NT'outcomes there is sufficient light ( failure )'
                                        UNPARSED_NOUN_NT'there is insufficient light ( success )'
                            SENTENCE_NT'persuasion rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'persuasion rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: persuasion}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'persuasion rules have outcomes persuasion succeeds ( success' {unit: 2} {classified}
                                VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                                PROPER_NOUN_NT'persuasion rules' {refined} {eval: CONSTANT_NT'persuasion rules' {kind: rulebook} {rulebook: persuasion}{meaning: {persuasion rules = RULEBOOK_MC}}}
                                RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT'and' {refined}
                                        UNPARSED_NOUN_NT'outcomes persuasion succeeds ( success )'
                                        UNPARSED_NOUN_NT'persuasion fails ( failure )'
                            SENTENCE_NT'unsuccessful attempt by is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'unsuccessful attempt by' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: unsuccessful attempt by}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'before rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'before rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: before}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'instead rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'instead rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: instead}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'check rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'check rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: check}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'carry out rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'carry out rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: carry out}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'after rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'after rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: after}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'report rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'report rules' {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: report}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the does the player mean rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'does the player mean rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: does the player mean}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the does the player mean rules have outcomes it is very like' {unit: 2} {classified}
                                VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                                PROPER_NOUN_NT'does the player mean rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'does the player mean rules' {kind: rulebook} {rulebook: does the player mean}{meaning: {does the player mean rules = RULEBOOK_MC}}}
                                RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                    PROPERTY_LIST_NT',' {refined}
                                        UNPARSED_NOUN_NT'outcomes it is very likely'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'it is likely'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'it is possible'
                                                AND_NT'and'
                                                    UNPARSED_NOUN_NT'it is unlikely'
                                                    UNPARSED_NOUN_NT'it is very unlikely'
                            SENTENCE_NT'the multiple action processing rules is a rulebook' {unit: 2} {classified} {clears pronouns}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'multiple action processing rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: multiple action processing}} {created here}
                                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
                        HEADING_NT'section 2 - the standard rules' {heading 5} {under: H5'section 2 - the standard rules'} {unit: 2}
                            SENTENCE_NT'the little-used do nothing rule translates into inter as LIT' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'little-used do nothing rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'LITTLE_USED_DO_NOTHING_R'
                            SENTENCE_NT'the start in the correct scenes rule is listed first in the ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the start in the correct scenes rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the position player in model world rule is listed first in t' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the position player in model world rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            RULE_NT'this is the declare everything initially unmentioned rule' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: RPT}
                                        INVOCATION_LIST_NT'repeat with item running through things' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'repeat with item running through things' {phrase invoked: call} {kind variable declarations: K=thing}
                                                NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                    UNKNOWN_NT'item'
                                                RVALUE_CONTEXT_NT'things' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                    CONSTANT_NT'things' {kind: description of things} {proposition: << kind=thing(x) >>}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now the item is not mentioned' {indent: 2} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'the item is not mentioned'
                            SENTENCE_NT'the declare everything initially unmentioned rule is listed ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the declare everything initially unmentioned rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the update chronological records rule is listed first in the' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the update chronological records rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the seed random number generator rule is listed first in the' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the seed random number generator rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the virtual machine startup rule is listed first in the star' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the virtual machine startup rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the initialise memory rule is listed first in the startup ru' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the initialise memory rule'
                                UNPARSED_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the virtual machine startup rule translates into inter as VI' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'virtual machine startup rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'VIRTUAL_MACHINE_STARTUP_R'
                            SENTENCE_NT'the initialise memory rule translates into inter as INITIALI' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'initialise memory rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'INITIALISE_MEMORY_R'
                            SENTENCE_NT'the seed random number generator rule translates into inter ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'seed random number generator rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'SEED_RANDOM_NUMBER_GENERATOR_R'
                            SENTENCE_NT'the update chronological records rule translates into inter ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'update chronological records rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'UPDATE_CHRONOLOGICAL_RECORDS_R'
                            SENTENCE_NT'the position player in model world rule translates into inte' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'position player in model world rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'POSITION_PLAYER_IN_MODEL_R'
                            RULE_NT'this is the start in the correct scenes rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'scene changing rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'scene changing rules' {kind: rulebook} {rulebook: scene changing}{meaning: {scene changing rules = RULEBOOK_MC}}
                            SENTENCE_NT'the when play begins stage rule is listed in the startup rul' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the when play begins stage rule'
                                UNPARSED_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the fix baseline scoring rule is listed in the startup ruleb' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the fix baseline scoring rule'
                                UNPARSED_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the display banner rule is listed in the startup rulebook' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the display banner rule'
                                UNPARSED_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the initial room description rule is listed in the startup r' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the initial room description rule'
                                UNPARSED_NOUN_NT'in the startup rulebook'
                            RULE_NT'this is the when play begins stage rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the when play begins rulebook'
                                        INVOCATION_NT'follow the when play begins rulebook' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'when play begins rulebook' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'when play begins rulebook' {kind: rulebook} {rulebook: when play begins}{meaning: {when play begins rulebook = RULEBOOK_MC}}
                            RULE_NT'this is the fix baseline scoring rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now the last notified score is the score' {control structure: NOW}
                                        CONDITION_CONTEXT_NT'the last notified score is the score'
                            RULE_NT'this is the display banner rule' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[banner text]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'banner text'
                                            INVOCATION_NT'banner text' {phrase invoked: call}
                            RULE_NT'this is the initial room description rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'try looking'
                                        INVOCATION_NT'try looking' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'looking' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                CONSTANT_NT'looking' {kind: action} {action pattern: <action: looking / >}
                            RULE_NT'a first turn sequence rule ( this is the every turn stage ru' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the every turn rules'
                                        INVOCATION_NT'follow the every turn rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'every turn rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'every turn rules' {kind: rulebook} {rulebook: every turn}{meaning: {every turn rules = RULEBOOK_MC}}
                            RULE_NT'a first turn sequence rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'scene changing rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'scene changing rules' {kind: rulebook} {rulebook: scene changing}{meaning: {scene changing rules = RULEBOOK_MC}}
                            SENTENCE_NT'the generate action rule is listed first in the turn sequenc' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the generate action rule'
                                UNPARSED_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the declare everything initially unmentioned rule is listed ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the declare everything initially unmentioned rule'
                                UNPARSED_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the parse command rule is listed first in the turn sequence ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the parse command rule'
                                UNPARSED_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the timed events rule is listed in the turn sequence ruleboo' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the timed events rule'
                                UNPARSED_NOUN_NT'in the turn sequence rulebook'
                            SENTENCE_NT'the advance time rule is listed in the turn sequence ruleboo' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the advance time rule'
                                UNPARSED_NOUN_NT'in the turn sequence rulebook'
                            SENTENCE_NT'the update chronological records rule is listed in the turn ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the update chronological records rule'
                                UNPARSED_NOUN_NT'in the turn sequence rulebook'
                            RULE_NT'a last turn sequence rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'scene changing rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'scene changing rules' {kind: rulebook} {rulebook: scene changing}{meaning: {scene changing rules = RULEBOOK_MC}}
                            SENTENCE_NT'the adjust light rule is listed last in the turn sequence ru' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the adjust light rule'
                                UNPARSED_NOUN_NT'last in the turn sequence rulebook'
                            SENTENCE_NT'the note object acquisitions rule is listed last in the turn' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the note object acquisitions rule'
                                UNPARSED_NOUN_NT'last in the turn sequence rulebook'
                            SENTENCE_NT'the notify score changes rule is listed last in the turn seq' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the notify score changes rule'
                                UNPARSED_NOUN_NT'last in the turn sequence rulebook'
                            RULE_NT'this is the notify score changes rule' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the score is not the last notified score' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the score is not the last notified score' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'score is not the last notified score' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'score is not the last notified score' {proposition: << NOT< ('score' == 'the last notified score') NOT> >>} {term: 'score'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'issue score notification message' {indent: 2}
                                                INVOCATION_NT'issue score notification message' {phrase invoked: call}
                                            INVOCATION_LIST_NT'now the last notified score is the score' {indent: 2} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'the last notified score is the score'
                            SENTENCE_NT'the adjust light rule translates into inter as ADJUST_LIGHT_' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'adjust light rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'ADJUST_LIGHT_R'
                                    UNPARSED_NOUN_NT'"[It] [are] [if story tense is present tense]now [end if]pit'
                            SENTENCE_NT'the advance time rule translates into inter as ADVANCE_TIME_' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'advance time rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'ADVANCE_TIME_R'
                            SENTENCE_NT'the generate action rule translates into inter as GENERATE_A' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'generate action rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'GENERATE_ACTION_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"(considering the first sixteen objects only)[command clarif'
                                        UNPARSED_NOUN_NT'"Nothing to do!" ( b )'
                            SENTENCE_NT'the note object acquisitions rule translates into inter as N' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'note object acquisitions rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'NOTE_OBJECT_ACQUISITIONS_R'
                            SENTENCE_NT'the parse command rule translates into inter as PARSE_COMMAN' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'parse command rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PARSE_COMMAND_R'
                            SENTENCE_NT'the timed events rule translates into inter as TIMED_EVENTS_' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'timed events rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'TIMED_EVENTS_R'
                            SENTENCE_NT'the when play ends stage rule is listed first in the shutdow' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the when play ends stage rule'
                                UNPARSED_NOUN_NT'first in the shutdown rulebook'
                            SENTENCE_NT'the resurrect player if asked rule is listed last in the shu' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the resurrect player if asked rule'
                                UNPARSED_NOUN_NT'last in the shutdown rulebook'
                            SENTENCE_NT'the print player's obituary rule is listed last in the shutd' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the print player's obituary rule'
                                UNPARSED_NOUN_NT'last in the shutdown rulebook'
                            SENTENCE_NT'the ask the final question rule is listed last in the shutdo' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the ask the final question rule'
                                UNPARSED_NOUN_NT'last in the shutdown rulebook'
                            RULE_NT'this is the when play ends stage rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the when play ends rulebook'
                                        INVOCATION_NT'follow the when play ends rulebook' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'when play ends rulebook' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'when play ends rulebook' {kind: rulebook} {rulebook: when play ends}{meaning: {when play ends rulebook = RULEBOOK_MC}}
                            RULE_NT'this is the print player's obituary rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the printing the player's obituary activity'
                                        INVOCATION_NT'carry out the printing the player's obituary activity' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'printing the player's obituary' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                CONSTANT_NT'printing the player's obituary' {kind: activity} {activity: printing the player's obituary}{meaning: {printing the player's obituary = ACTIVITY_MC}}
                            SENTENCE_NT'the resurrect player if asked rule translates into inter as ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'resurrect player if asked rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'RESURRECT_PLAYER_IF_ASKED_R'
                            SENTENCE_NT'the ask the final question rule translates into inter as ASK' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'ask the final question rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'ASK_FINAL_QUESTION_R'
                            SENTENCE_NT'the scene change machinery rule is listed last in the scene ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the scene change machinery rule'
                                UNPARSED_NOUN_NT'last in the scene changing rulebook'
                            SENTENCE_NT'the scene change machinery rule translates into inter as SCE' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'scene change machinery rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'SCENE_CHANGE_MACHINERY_R'
                        HEADING_NT'section 3 - the entire game scene' {heading 5} {under: H5'section 3 - the entire game scene'} {unit: 2}
                            SENTENCE_NT'the entire game is a scene' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'entire game' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'entire game'} {eval: CONSTANT_NT'entire game' {kind: scene} {instance: I36'entire game'[scene]} {enumeration: 1}} {created here}
                                COMMON_NOUN_NT'scene' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'scene'-k} {creation: << kind=scene(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the entire game begins when the story has not ended' {unit: 2} {classified}
                                VERB_NT'begins when' {verb 'begin' 3p s act IS_TENSE +ve} {prep1: when} {special meaning: scene-begins-when}
                                UNPARSED_NOUN_NT'the entire game'
                                UNPARSED_NOUN_NT'the story has not ended'
                            SENTENCE_NT'the entire game ends when the story has ended' {unit: 2} {classified}
                                VERB_NT'ends when' {verb 'end' 3p s act IS_TENSE +ve} {prep1: when} {special meaning: scene-ends-when}
                                UNPARSED_NOUN_NT'the entire game'
                                UNPARSED_NOUN_NT'the story has ended'
                        HEADING_NT'section 4 - action processing' {heading 5} {under: H5'section 4 - action processing'} {unit: 2}
                            SENTENCE_NT'the before stage rule is listed first in the action-processi' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the before stage rule'
                                UNPARSED_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the set pronouns from items from multiple object lists rule ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the set pronouns from items from multiple object lists rule'
                                UNPARSED_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the announce items from multiple object lists rule is listed' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the announce items from multiple object lists rule'
                                UNPARSED_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the basic visibility rule is listed in the action-processing' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the basic visibility rule'
                                UNPARSED_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the basic accessibility rule is listed in the action-process' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the basic accessibility rule'
                                UNPARSED_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the carrying requirements rule is listed in the action-proce' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the carrying requirements rule'
                                UNPARSED_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the instead stage rule is listed last in the action-processi' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the instead stage rule'
                                UNPARSED_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the requested actions require persuasion rule is listed last' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the requested actions require persuasion rule'
                                UNPARSED_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the carry out requested actions rule is listed last in the a' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the carry out requested actions rule'
                                UNPARSED_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the descend to specific action-processing rule is listed las' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the descend to specific action-processing rule'
                                UNPARSED_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the end action-processing in success rule is listed last in ' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the end action-processing in success rule'
                                UNPARSED_NOUN_NT'last in the action-processing rules'
                            RULE_NT'this is the set pronouns from items from multiple object lis' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the current item from the multiple object list is not not' {colon_block_command}
                                            INVOCATION_NT'if the current item from the multiple object list is not not' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'current item from the multiple object list is not nothing' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'current item from the multiple object list is not nothing' {proposition: << NOT< ('current item from the multiple object list' == 'nothing') NOT> >>} {term: 'current item from the multiple object list'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'set pronouns from the current item from the multiple object ' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'set pronouns from the current item from the multiple object ' {phrase invoked: call}
                                                    RVALUE_CONTEXT_NT'current item from the multiple object list' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                        NONLOCAL_VARIABLE_NT'current item from the multiple object list' {nonlocal: 'current item from the multiple object list'(var)object}{meaning: {current item from the multiple object list = VARIABLE_MC}}
                            RULE_NT'this is the announce items from multiple object lists rule' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the current item from the multiple object list is not not' {colon_block_command}
                                            INVOCATION_NT'if the current item from the multiple object list is not not' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'current item from the multiple object list is not nothing' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'current item from the multiple object list is not nothing' {proposition: << NOT< ('current item from the multiple object list' == 'nothing') NOT> >>} {term: 'current item from the multiple object list'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[current item from the multiple object list]: [run para' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"[current item from the multiple object list]: [run paragrap'
                                                    INVOCATION_NT'"[current item from the multiple object list]: [run paragrap' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"[current item from the multiple object list]: [run paragrap' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"[current item from the multiple object list]: [run paragrap' {kind: text}
                            RULE_NT'this is the before stage rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'abide by the before rules'
                                        INVOCATION_NT'abide by the before rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'before rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'before rules' {kind: rulebook} {rulebook: before}{meaning: {before rules = RULEBOOK_MC}}
                            RULE_NT'this is the instead stage rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'abide by the instead rules'
                                        INVOCATION_NT'abide by the instead rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'instead rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'instead rules' {kind: rulebook} {rulebook: instead}{meaning: {instead rules = RULEBOOK_MC}}
                            RULE_NT'this is the end action-processing in success rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'rule succeeds'
                                        INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            SENTENCE_NT'the basic accessibility rule translates into inter as BASIC_' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'basic accessibility rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'BASIC_ACCESSIBILITY_R'
                                    UNPARSED_NOUN_NT'"You must name something more substantial." ( a )'
                            SENTENCE_NT'the basic visibility rule translates into inter as BASIC_VIS' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'basic visibility rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'BASIC_VISIBILITY_R'
                                    UNPARSED_NOUN_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                            SENTENCE_NT'the carrying requirements rule translates into inter as CARR' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'carrying requirements rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'CARRYING_REQUIREMENTS_R'
                            SENTENCE_NT'the requested actions require persuasion rule translates int' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'requested actions require persuasion rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'REQUESTED_ACTIONS_REQUIRE_R'
                                    UNPARSED_NOUN_NT'"[The noun] [have] better things to do." ( a )'
                            SENTENCE_NT'the carry out requested actions rule translates into inter a' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'carry out requested actions rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'CARRY_OUT_REQUESTED_ACTIONS_R'
                                    UNPARSED_NOUN_NT'"[The noun] [are] unable to do that." ( a )'
                            SENTENCE_NT'the descend to specific action-processing rule translates in' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'descend to specific action-processing rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'DESCEND_TO_SPECIFIC_ACTION_R'
                            SENTENCE_NT'the work out details of specific action rule is listed first' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the work out details of specific action rule'
                                UNPARSED_NOUN_NT'first in the specific action-processing rules'
                            RULE_NT'a specific action-processing rule ( this is the investigate ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the player's action awareness rules'
                                        INVOCATION_NT'follow the player's action awareness rules' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'player's action awareness rules' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                CONSTANT_NT'player's action awareness rules' {kind: rulebook} {rulebook: player's action awareness}{meaning: {player's action awareness rules = RULEBOOK_MC}}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if rule succeeded' {colon_block_command}
                                            INVOCATION_NT'if rule succeeded' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'rule succeeded' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'rule succeeded'
                                                        PHRASE_TO_DECIDE_VALUE_NT'rule succeeded'
                                                            INVOCATION_LIST_NT'rule succeeded'
                                                                INVOCATION_NT'rule succeeded' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now within the player's sight is true' {results_from_splitting} {indent: 1} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'within the player's sight is true'
                                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                                            INVOCATION_LIST_NT'now within the player's sight is false' {indent: 1} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'within the player's sight is false'
                            RULE_NT'a specific action-processing rule ( this is the check stage ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'anonymously abide by the specific check rulebook'
                                        INVOCATION_NT'anonymously abide by the specific check rulebook' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'specific check rulebook' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                NONLOCAL_VARIABLE_NT'specific check rulebook' {nonlocal: 'specific check rulebook'(var)rulebook}
                            RULE_NT'a specific action-processing rule ( this is the carry out st' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the specific carry out rulebook'
                                        INVOCATION_NT'follow the specific carry out rulebook' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'specific carry out rulebook' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                NONLOCAL_VARIABLE_NT'specific carry out rulebook' {nonlocal: 'specific carry out rulebook'(var)rulebook}
                            RULE_NT'a specific action-processing rule ( this is the after stage ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if action in world is true' {colon_block_command}
                                            INVOCATION_NT'if action in world is true' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'action in world is true' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'action in world is true' {proposition: << ('action in world' == 'true') >>} {term: 'action in world'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'abide by the after rules' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'abide by the after rules' {phrase invoked: call}
                                                    RVALUE_CONTEXT_NT'after rules' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                        CONSTANT_NT'after rules' {kind: rulebook} {rulebook: after}{meaning: {after rules = RULEBOOK_MC}}
                            RULE_NT'a specific action-processing rule ( this is the investigate ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if within the player's sight is false' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if within the player's sight is false' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'within the player's sight is false' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'within the player's sight is false' {proposition: << ('within the player's sight' == 'false') >>} {term: 'within the player's sight'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'follow the player's action awareness rules' {indent: 2}
                                                INVOCATION_NT'follow the player's action awareness rules' {phrase invoked: call}
                                                    RVALUE_CONTEXT_NT'player's action awareness rules' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                        CONSTANT_NT'player's action awareness rules' {kind: rulebook} {rulebook: player's action awareness}{meaning: {player's action awareness rules = RULEBOOK_MC}}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if rule succeeded' {indent: 2} {colon_block_command}
                                                    INVOCATION_NT'if rule succeeded' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'rule succeeded' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_VALUE_NT'rule succeeded'
                                                                PHRASE_TO_DECIDE_VALUE_NT'rule succeeded'
                                                                    INVOCATION_LIST_NT'rule succeeded'
                                                                        INVOCATION_NT'rule succeeded' {phrase invoked: call} {resulting: truth state}
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now within the player's sight is true' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'within the player's sight is true'
                            RULE_NT'a specific action-processing rule ( this is the report stage' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if within the player's sight is true and action keeping sile' {colon_block_command}
                                            INVOCATION_NT'if within the player's sight is true and action keeping sile' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'within the player's sight is true and action keeping silent ' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'within the player's sight is true and action keeping silent '
                                                        TEST_PROPOSITION_NT'within the player's sight is true' {proposition: << ('within the player's sight' == 'true') >>} {term: 'within the player's sight'}
                                                        TEST_PROPOSITION_NT'action keeping silent is false' {proposition: << ('action keeping silent' == 'false') >>} {term: 'action keeping silent'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'follow the specific report rulebook' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'follow the specific report rulebook' {phrase invoked: call}
                                                    RVALUE_CONTEXT_NT'specific report rulebook' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                        NONLOCAL_VARIABLE_NT'specific report rulebook' {nonlocal: 'specific report rulebook'(var)rulebook}
                            RULE_NT'the last specific action-processing rule' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'rule succeeds'
                                        INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            SENTENCE_NT'the work out details of specific action rule translates into' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'work out details of specific action rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'WORK_OUT_DETAILS_OF_SPECIFIC_R'
                            RULE_NT'a player's action awareness rule ( this is the player aware ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is the actor' {colon_block_command}
                                            INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            RULE_NT'a player's action awareness rule ( this is the player aware ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the player is not the actor and the player can see the ac' {colon_block_command}
                                            INVOCATION_NT'if the player is not the actor and the player can see the ac' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'player is not the actor and the player can see the actor' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'player is not the actor and the player can see the actor'
                                                        TEST_PROPOSITION_NT'player is not the actor' {proposition: << NOT< ('player' == 'the actor') NOT> >>} {term: 'player'}
                                                        TEST_PROPOSITION_NT'the player can see the actor' {proposition: << can-see('the player', 'the actor') >>} {term: 'the player'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            RULE_NT'a player's action awareness rule ( this is the player aware ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the noun is a thing and the player can see the noun' {colon_block_command}
                                            INVOCATION_NT'if the noun is a thing and the player can see the noun' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'noun is a thing and the player can see the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'noun is a thing and the player can see the noun'
                                                        TEST_PROPOSITION_NT'noun is a thing' {proposition: << kind=thing('noun') >>} {term: 'noun'}
                                                        TEST_PROPOSITION_NT'the player can see the noun' {proposition: << can-see('the player', 'the noun') >>} {term: 'the player'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            RULE_NT'a player's action awareness rule ( this is the player aware ' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the second noun is a thing and the player can see the sec' {colon_block_command}
                                            INVOCATION_NT'if the second noun is a thing and the player can see the sec' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'second noun is a thing and the player can see the second nou' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'second noun is a thing and the player can see the second nou'
                                                        TEST_PROPOSITION_NT'second noun is a thing' {proposition: << kind=thing('second noun') >>} {term: 'second noun'}
                                                        TEST_PROPOSITION_NT'the player can see the second noun' {proposition: << can-see('the player', 'the second noun') >>} {term: 'the player'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                        HEADING_NT'section 5 - accessibility' {heading 5} {under: H5'section 5 - accessibility'} {unit: 2}
                            SENTENCE_NT'the access through barriers rule is listed last in the acces' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the access through barriers rule'
                                UNPARSED_NOUN_NT'last in the accessibility rules'
                            SENTENCE_NT'the access through barriers rule translates into inter as AC' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'access through barriers rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'ACCESS_THROUGH_BARRIERS_R'
                                    UNPARSED_NOUN_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                            SENTENCE_NT'the can't reach inside rooms rule is listed last in the reac' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the can't reach inside rooms rule'
                                UNPARSED_NOUN_NT'last in the reaching inside rules'
                            SENTENCE_NT'the can't reach inside closed containers rule is listed last' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the can't reach inside closed containers rule'
                                UNPARSED_NOUN_NT'last in the reaching inside rules'
                            SENTENCE_NT'the can't reach inside closed containers rule translates int' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'can't reach inside closed containers rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'CANT_REACH_INSIDE_CLOSED_R'
                                    UNPARSED_NOUN_NT'"[The noun] [aren't] open." ( a )'
                            SENTENCE_NT'the can't reach inside rooms rule translates into inter as C' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'can't reach inside rooms rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'CANT_REACH_INSIDE_ROOMS_R'
                                    UNPARSED_NOUN_NT'"[We] [can't] reach into [the noun]." ( a )'
                            SENTENCE_NT'the can't reach outside closed containers rule is listed las' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the can't reach outside closed containers rule'
                                UNPARSED_NOUN_NT'last in the reaching outside rules'
                            SENTENCE_NT'the can't reach outside closed containers rule translates in' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'can't reach outside closed containers rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'CANT_REACH_OUTSIDE_CLOSED_R'
                                    UNPARSED_NOUN_NT'"[The noun] [aren't] open." ( a )'
                            SENTENCE_NT'the can't act in the dark rule is listed last in the visibil' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                UNPARSED_NOUN_NT'the can't act in the dark rule'
                                UNPARSED_NOUN_NT'last in the visibility rules'
                            RULE_NT'the last visibility rule ( this is the can't act in the dark' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if in darkness' {colon_block_command}
                                            INVOCATION_NT'if in darkness' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'in darkness' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_VALUE_NT'in darkness'
                                                        PHRASE_TO_DECIDE_VALUE_NT'in darkness'
                                                            INVOCATION_LIST_NT'in darkness'
                                                                INVOCATION_NT'in darkness' {phrase invoked: call} {resulting: truth state}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                            RULE_NT'does the player mean taking something which is carried by th' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'it is very unlikely'
                        HEADING_NT'section 6 - adjectival definitions' {heading 5} {under: H5'section 6 - adjectival definitions'} {unit: 2}
                            SENTENCE_NT'a scene can be recurring or non-recurring' {unit: 2} {classified}
                                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                                COMMON_NOUN_NT'a scene' {refined} {refers: infs'scene'-k} {creation: << kind=scene(x) >>} {eval: TEST_VALUE_NT}
                                UNPARSED_NOUN_NT'recurring or non-recurring'
                                    AND_NT'or'
                                        UNPARSED_NOUN_NT'recurring'
                                        UNPARSED_NOUN_NT'non-recurring'
                            SENTENCE_NT'a scene is usually non-recurring' {unit: 2} {classified}
                                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'scene' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'scene'-k} {creation: << kind=scene(x) >>} {eval: TEST_VALUE_NT}
                                ADJECTIVE_NT'non-recurring' {refined} {predicate: non-recurring} {creation: << non-recurring(x) ^ non-recurring(x) >>}
                            SENTENCE_NT'the entire game is recurring' {unit: 2} {classified} {interpretation of subject: infs'scene'-k}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'entire game' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'entire game'} {eval: CONSTANT_NT'entire game' {kind: scene} {instance: I36'entire game'[scene]} {enumeration: 0}{meaning: {entire game = NAMED_CONSTANT_MC}}}
                                ADJECTIVE_NT'recurring' {refined} {predicate: recurring} {creation: << recurring(x) ^ recurring(x) >>}
                        HEADING_NT'section 7 - scene descriptions' {heading 5} {under: H5'section 7 - scene descriptions'} {unit: 2}
                            SENTENCE_NT'a scene has a text called description' {unit: 2} {classified}
                                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'scene' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'scene'-k} {creation: << kind=scene(x) >>} {eval: TEST_VALUE_NT}
                                ALLOWED_NT {refined}
                                    PROPERTYCALLED_NT'called'
                                        UNPARSED_NOUN_NT'text' {indefinite 'a' n/m/f nom/acc s}
                                        UNPARSED_NOUN_NT'description'
                            RULE_NT'when a scene ( called the event ) begins ( this is the scene' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the description of the event is not ""' {colon_block_command}
                                            INVOCATION_NT'if the description of the event is not ""' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'description of the event is not ""' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'description of the event is not ""' {proposition: << NOT< ('description of the event' == '""') NOT> >>} {term: 'description of the event'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[description of the event][paragraph break]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'description of the event' {suppress_newlines}
                                                    INVOCATION_NT'description of the event' {phrase invoked: call} {kind variable declarations: K=text} {save self}
                                                        RVALUE_CONTEXT_NT'description of the event' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            PROPERTY_VALUE_NT'description of the event' {record as self}
                                                                CONSTANT_NT {kind: nothing valued property} {property: 'description'=text}{meaning: {description = PROPERTY_MC}}
                                                                LOCAL_VARIABLE_NT'the event' {local: LV"event"-scene scene}
                                                INVOCATION_LIST_SAY_NT'paragraph break'
                                                    INVOCATION_NT'paragraph break' {phrase invoked: call}
                        HEADING_NT'section 8 - command parser errors' {heading 5} {under: H5'section 8 - command parser errors'} {unit: 2}
                            SENTENCE_NT'a command parser error is a kind of value' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                COMMON_NOUN_NT'command parser error' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=command parser error(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                                KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                                    COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the command parser errors are didn't understand error , only' {unit: 2} {classified} {interpretation of subject: infs'object'-k}
                                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                                COMMON_NOUN_NT'command parser errors' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'command parser error'-k} {creation: << kind=command parser error(x) >>} {eval: TEST_VALUE_NT}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'didn't understand error' {refined} {refers: infs'didn't understand error'} {eval: CONSTANT_NT'didn't understand error' {kind: command parser error} {instance: I37'didn't understand error'[command parser error]} {enumeration: 1}} {created here}
                                    AND_NT',' {refined}
                                        PROPER_NOUN_NT'only understood as far as error' {refined} {refers: infs'only understood as far as error'} {eval: CONSTANT_NT'only understood as far as error' {kind: command parser error} {instance: I38'only understood as far as error'[command parser error]} {enumeration: 2}} {created here}
                                        AND_NT',' {refined}
                                            PROPER_NOUN_NT'didn't understand that number error' {refined} {refers: infs'didn't understand that number error'} {eval: CONSTANT_NT'didn't understand that number error' {kind: command parser error} {instance: I39'didn't understand that number error'[command parser error]} {enumeration: 3}} {created here}
                                            AND_NT',' {refined}
                                                PROPER_NOUN_NT'can only do that to something animate error' {refined} {refers: infs'can only do that to something animate error'} {eval: CONSTANT_NT'can only do that to something animate error' {kind: command parser error} {instance: I40'can only do that to something animate error'[command parser error]} {enumeration: 4}} {created here}
                                                AND_NT',' {refined}
                                                    PROPER_NOUN_NT'can't see any such thing error' {refined} {refers: infs'can't see any such thing error'} {eval: CONSTANT_NT'can't see any such thing error' {kind: command parser error} {instance: I41'can't see any such thing error'[command parser error]} {enumeration: 5}} {created here}
                                                    AND_NT',' {refined}
                                                        PROPER_NOUN_NT'said too little error' {refined} {refers: infs'said too little error'} {eval: CONSTANT_NT'said too little error' {kind: command parser error} {instance: I42'said too little error'[command parser error]} {enumeration: 6}} {created here}
                                                        AND_NT',' {refined}
                                                            PROPER_NOUN_NT'aren't holding that error' {refined} {refers: infs'aren't holding that error'} {eval: CONSTANT_NT'aren't holding that error' {kind: command parser error} {instance: I43'aren't holding that error'[command parser error]} {enumeration: 7}} {created here}
                                                            AND_NT',' {refined}
                                                                PROPER_NOUN_NT'can't use multiple objects error' {refined} {refers: infs'can't use multiple objects error'} {eval: CONSTANT_NT'can't use multiple objects error' {kind: command parser error} {instance: I44'can't use multiple objects error'[command parser error]} {enumeration: 8}} {created here}
                                                                AND_NT',' {refined}
                                                                    PROPER_NOUN_NT'can only use multiple objects error' {refined} {refers: infs'can only use multiple objects error'} {eval: CONSTANT_NT'can only use multiple objects error' {kind: command parser error} {instance: I45'can only use multiple objects error'[command parser error]} {enumeration: 9}} {created here}
                                                                    AND_NT',' {refined}
                                                                        PROPER_NOUN_NT'not sure what it refers to error' {refined} {refers: infs'not sure what it refers to error'} {eval: CONSTANT_NT'not sure what it refers to error' {kind: command parser error} {instance: I46'not sure what it refers to error'[command parser error]} {enumeration: 10}} {created here}
                                                                        AND_NT',' {refined}
                                                                            PROPER_NOUN_NT'excepted something not included error' {refined} {refers: infs'excepted something not included error'} {eval: CONSTANT_NT'excepted something not included error' {kind: command parser error} {instance: I47'excepted something not included error'[command parser error]} {enumeration: 11}} {created here}
                                                                            AND_NT',' {refined}
                                                                                PROPER_NOUN_NT'not a verb i recognise error' {refined} {refers: infs'not a verb i recognise error'} {eval: CONSTANT_NT'not a verb i recognise error' {kind: command parser error} {instance: I48'not a verb i recognise error'[command parser error]} {enumeration: 12}} {created here}
                                                                                AND_NT',' {refined}
                                                                                    PROPER_NOUN_NT'not something you need to refer to error' {refined} {refers: infs'not something you need to refer to error'} {eval: CONSTANT_NT'not something you need to refer to error' {kind: command parser error} {instance: I49'not something you need to refer to error'[command parser error]} {enumeration: 13}} {created here}
                                                                                    AND_NT',' {refined}
                                                                                        PROPER_NOUN_NT'can't see it at the moment error' {refined} {refers: infs'can't see it at the moment error'} {eval: CONSTANT_NT'can't see it at the moment error' {kind: command parser error} {instance: I50'can't see it at the moment error'[command parser error]} {enumeration: 14}} {created here}
                                                                                        AND_NT',' {refined}
                                                                                            PROPER_NOUN_NT'didn't understand the way that finished error' {refined} {refers: infs'didn't understand the way that finished error'} {eval: CONSTANT_NT'didn't understand the way that finished error' {kind: command parser error} {instance: I51'didn't understand the way that finished error'[command parser error]} {enumeration: 15}} {created here}
                                                                                            AND_NT',' {refined}
                                                                                                PROPER_NOUN_NT'not enough of those available error' {refined} {refers: infs'not enough of those available error'} {eval: CONSTANT_NT'not enough of those available error' {kind: command parser error} {instance: I52'not enough of those available error'[command parser error]} {enumeration: 16}} {created here}
                                                                                                AND_NT',' {refined}
                                                                                                    PROPER_NOUN_NT'nothing to do error' {refined} {refers: infs'nothing to do error'} {eval: CONSTANT_NT'nothing to do error' {kind: command parser error} {instance: I53'nothing to do error'[command parser error]} {enumeration: 17}} {created here}
                                                                                                    AND_NT',' {refined}
                                                                                                        PROPER_NOUN_NT'noun did not make sense in that context error' {refined} {refers: infs'noun did not make sense in that context error'} {eval: CONSTANT_NT'noun did not make sense in that context error' {kind: command parser error} {instance: I54'noun did not make sense in that context error'[command parser error]} {enumeration: 18}} {created here}
                                                                                                        AND_NT',' {refined}
                                                                                                            PROPER_NOUN_NT'referred to a determination of scope error' {refined} {refers: infs'referred to a determination of scope error'} {eval: CONSTANT_NT'referred to a determination of scope error' {kind: command parser error} {instance: I55'referred to a determination of scope error'[command parser error]} {enumeration: 19}} {created here}
                                                                                                            AND_NT',' {refined}
                                                                                                                PROPER_NOUN_NT'i beg your pardon error' {refined} {refers: infs'i beg your pardon error'} {eval: CONSTANT_NT'i beg your pardon error' {kind: command parser error} {instance: I56'i beg your pardon error'[command parser error]} {enumeration: 20}} {created here}
                                                                                                                AND_NT',' {refined}
                                                                                                                    PROPER_NOUN_NT'can't again the addressee error' {refined} {refers: infs'can't again the addressee error'} {eval: CONSTANT_NT'can't again the addressee error' {kind: command parser error} {instance: I57'can't again the addressee error'[command parser error]} {enumeration: 21}} {created here}
                                                                                                                    AND_NT',' {refined}
                                                                                                                        PROPER_NOUN_NT'comma can't begin error' {refined} {refers: infs'comma can't begin error'} {eval: CONSTANT_NT'comma can't begin error' {kind: command parser error} {instance: I58'comma can't begin error'[command parser error]} {enumeration: 22}} {created here}
                                                                                                                        AND_NT',' {refined}
                                                                                                                            PROPER_NOUN_NT'can't see whom to talk to error' {refined} {refers: infs'can't see whom to talk to error'} {eval: CONSTANT_NT'can't see whom to talk to error' {kind: command parser error} {instance: I59'can't see whom to talk to error'[command parser error]} {enumeration: 23}} {created here}
                                                                                                                            AND_NT',' {refined}
                                                                                                                                PROPER_NOUN_NT'can't talk to inanimate things error' {refined} {refers: infs'can't talk to inanimate things error'} {eval: CONSTANT_NT'can't talk to inanimate things error' {kind: command parser error} {instance: I60'can't talk to inanimate things error'[command parser error]} {enumeration: 24}} {created here}
                                                                                                                                PROPER_NOUN_NT'didn't understand addressee's last name error' {refined} {refers: infs'didn't understand addressee's last name error'} {eval: CONSTANT_NT'didn't understand addressee's last name error' {kind: command parser error} {instance: I61'didn't understand addressee's last name error'[command parser error]} {enumeration: 25}} {created here}
                            SENTENCE_NT'the latest parser error is a command parser error that varie' {unit: 2} {classified} {interpretation of subject: infs'command parser error'-k}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'latest parser error' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'latest parser error' {nonlocal: 'latest parser error'(var)command parser error}} {created here}
                                COMMON_NOUN_NT'command parser error that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=command parser errors variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the latest parser error variable translates into inter as et' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'latest parser error variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'etype'
                        HEADING_NT'section 9 - responses for internal rules' {heading 5} {under: H5'section 9 - responses for internal rules'} {unit: 2}
                            SENTENCE_NT'the list writer internal rule translates into inter as LIST_' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'list writer internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'LIST_WRITER_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'" (" ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'")" ( b )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'" and " ( c )'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"providing light" ( d )'
                                                    AND_NT','
                                                        UNPARSED_NOUN_NT'"closed" ( e )'
                                                        AND_NT','
                                                            UNPARSED_NOUN_NT'"empty" ( f )'
                                                            AND_NT','
                                                                UNPARSED_NOUN_NT'"closed and empty" ( g )'
                                                                AND_NT','
                                                                    UNPARSED_NOUN_NT'"closed and providing light" ( h )'
                                                                    AND_NT','
                                                                        UNPARSED_NOUN_NT'"empty and providing light" ( i )'
                                                                        AND_NT','
                                                                            UNPARSED_NOUN_NT'"closed, empty[if serial comma option is active],[end if] an'
                                                                            AND_NT','
                                                                                UNPARSED_NOUN_NT'"providing light and being worn" ( k )'
                                                                                AND_NT','
                                                                                    UNPARSED_NOUN_NT'"being worn" ( l )'
                                                                                    AND_NT','
                                                                                        UNPARSED_NOUN_NT'"open" ( m )'
                                                                                        AND_NT','
                                                                                            UNPARSED_NOUN_NT'"open but empty" ( n )'
                                                                                            AND_NT','
                                                                                                UNPARSED_NOUN_NT'"closed" ( o )'
                                                                                                AND_NT','
                                                                                                    UNPARSED_NOUN_NT'"closed and locked" ( p )'
                                                                                                    AND_NT','
                                                                                                        UNPARSED_NOUN_NT'"containing" ( q )'
                                                                                                        AND_NT','
                                                                                                            UNPARSED_NOUN_NT'"on [if the noun is a person]whom[otherwise]which[end if] " '
                                                                                                            AND_NT','
                                                                                                                UNPARSED_NOUN_NT'", on top of [if the noun is a person]whom[otherwise]which[e'
                                                                                                                AND_NT','
                                                                                                                    UNPARSED_NOUN_NT'"in [if the noun is a person]whom[otherwise]which[end if] " '
                                                                                                                    AND_NT','
                                                                                                                        UNPARSED_NOUN_NT'", inside [if the noun is a person]whom[otherwise]which[end '
                                                                                                                        AND_NT','
                                                                                                                            UNPARSED_NOUN_NT'"[regarding list writer internals][are]" ( v )'
                                                                                                                            AND_NT','
                                                                                                                                UNPARSED_NOUN_NT'"[regarding list writer internals][are] nothing" ( w )'
                                                                                                                                AND_NT','
                                                                                                                                    UNPARSED_NOUN_NT'"Nothing" ( x )'
                                                                                                                                    UNPARSED_NOUN_NT'"nothing" ( y )'
                            SENTENCE_NT'the action processing internal rule translates into inter as' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'action processing internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'ACTION_PROCESSING_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"[bracket]That command asks to do something outside of play,'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"You must name an object." ( b )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"You may not name an object." ( c )'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"You must supply a noun." ( d )'
                                                    AND_NT','
                                                        UNPARSED_NOUN_NT'"You may not supply a noun." ( e )'
                                                        AND_NT','
                                                            UNPARSED_NOUN_NT'"You must name a second object." ( f )'
                                                            AND_NT','
                                                                UNPARSED_NOUN_NT'"You may not name a second object." ( g )'
                                                                AND_NT','
                                                                    UNPARSED_NOUN_NT'"You must supply a second noun." ( h )'
                                                                    AND_NT','
                                                                        UNPARSED_NOUN_NT'"You may not supply a second noun." ( i )'
                                                                        AND_NT','
                                                                            UNPARSED_NOUN_NT'"(Since something dramatic has happened, your list of comman'
                                                                            UNPARSED_NOUN_NT'"I didn't understand that instruction." ( k )'
                            SENTENCE_NT'the parser error internal rule translates into inter as PARS' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'parser error internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PARSER_ERROR_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"I didn't understand that sentence." ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"I only understood you as far as wanting to " ( b )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"I only understood you as far as wanting to (go) " ( c )'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"I didn't understand that number." ( d )'
                                                    AND_NT','
                                                        UNPARSED_NOUN_NT'"[We] [can't] see any such thing." ( e )'
                                                        AND_NT','
                                                            UNPARSED_NOUN_NT'"You seem to have said too little!" ( f )'
                                                            AND_NT','
                                                                UNPARSED_NOUN_NT'"[We] [aren't] holding that!" ( g )'
                                                                AND_NT','
                                                                    UNPARSED_NOUN_NT'"You can't use multiple objects with that verb." ( h )'
                                                                    AND_NT','
                                                                        UNPARSED_NOUN_NT'"You can only use multiple objects once on a line." ( i )'
                                                                        AND_NT','
                                                                            UNPARSED_NOUN_NT'"I'm not sure what ['][pronoun i6 dictionary word]['] refers'
                                                                            AND_NT','
                                                                                UNPARSED_NOUN_NT'"[We] [can't] see ['][pronoun i6 dictionary word]['] ([the n'
                                                                                AND_NT','
                                                                                    UNPARSED_NOUN_NT'"You excepted something not included anyway!" ( l )'
                                                                                    AND_NT','
                                                                                        UNPARSED_NOUN_NT'"You can only do that to something animate." ( m )'
                                                                                        AND_NT','
                                                                                            UNPARSED_NOUN_NT'"That's not a verb I [if American dialect option is
                                                                                            active]r'
                                                                                            AND_NT','
                                                                                                UNPARSED_NOUN_NT'"That's not something you need to refer to in the course of '
                                                                                                AND_NT','
                                                                                                    UNPARSED_NOUN_NT'"I didn't understand the way that finished." ( p )'
                                                                                                    AND_NT','
                                                                                                        UNPARSED_NOUN_NT'"[if number understood is 0]None[otherwise]Only [number unde'
                                                                                                        AND_NT','
                                                                                                            UNPARSED_NOUN_NT'"That noun did not make sense in this context." ( r )'
                                                                                                            AND_NT','
                                                                                                                UNPARSED_NOUN_NT'"To repeat a command like 'frog, jump', just say 'again', no'
                                                                                                                AND_NT','
                                                                                                                    UNPARSED_NOUN_NT'"You can't begin with a comma." ( t )'
                                                                                                                    AND_NT','
                                                                                                                        UNPARSED_NOUN_NT'"You seem to want to talk to someone, but I can't see whom."'
                                                                                                                        AND_NT','
                                                                                                                            UNPARSED_NOUN_NT'"You can't talk to [the noun]." ( v )'
                                                                                                                            AND_NT','
                                                                                                                                UNPARSED_NOUN_NT'"To talk to someone, try 'someone, hello' or some such." ( w'
                                                                                                                                UNPARSED_NOUN_NT'"I beg your pardon?" ( x )'
                            SENTENCE_NT'the parser nothing error internal rule translates into inter' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'parser nothing error internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PARSER_N_ERROR_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"Nothing to do!" ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"[There] [adapt the verb are from the third person plural] n'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"[regarding the noun][Those] [seem] to belong to [the noun].'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"[regarding the noun][Those] [can't] contain things." ( d )'
                                                    AND_NT','
                                                        UNPARSED_NOUN_NT'"[The noun] [aren't] open." ( e )'
                                                        UNPARSED_NOUN_NT'"[The noun] [are] empty." ( f )'
                            SENTENCE_NT'the darkness name internal rule translates into inter as DAR' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'darkness name internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'DARKNESS_NAME_INTERNAL_R'
                                    UNPARSED_NOUN_NT'"Darkness" ( a )'
                            SENTENCE_NT'the parser command internal rule translates into inter as PA' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'parser command internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PARSER_COMMAND_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"Sorry, that can't be corrected." ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"Think nothing of it." ( b )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"'Oops' can only correct a single word." ( c )'
                                                UNPARSED_NOUN_NT'"You can hardly repeat that." ( d )'
                            SENTENCE_NT'the parser clarification internal rule translates into inter' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'parser clarification internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PARSER_CLARIF_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"Who do you mean, " ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"Which do you mean, " ( b )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"Sorry, you can only have one item here. Which exactly?" ( c'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"Whom do you want [if the noun is not the player][the noun] '
                                                    AND_NT','
                                                        UNPARSED_NOUN_NT'"What do you want [if the noun is not the player][the noun] '
                                                        AND_NT','
                                                            UNPARSED_NOUN_NT'"those things" ( f )'
                                                            AND_NT','
                                                                UNPARSED_NOUN_NT'"that" ( g )'
                                                                UNPARSED_NOUN_NT'" or " ( h )'
                            SENTENCE_NT'the yes or no question internal rule translates into inter a' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'yes or no question internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'YES_OR_NO_QUESTION_INTERNAL_R'
                                    UNPARSED_NOUN_NT'"Please answer yes or no." ( a )'
                            SENTENCE_NT'the print protagonist internal rule translates into inter as' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                                UNPARSED_NOUN_NT'print protagonist internal rule' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'PRINT_PROTAGONIST_INTERNAL_R'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"[We]" ( a )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"[ourselves]" ( b )'
                                            UNPARSED_NOUN_NT'"[our] former self" ( c )'
                HEADING_NT'part four - activities' {heading 3} {under: H3'part four - activities'} {unit: 2}
                    HEADING_NT'section 1 - responses' {heading 5} {under: H5'section 1 - responses'} {unit: 2}
                        SENTENCE_NT'issuing the response text of something -- documented at act_' {unit: 2} {classified} {clears pronouns}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'issuing the response text of something' {refined} {eval: CONSTANT_NT {kind: activity on responses} {activity: issuing the response text}} {created here}
                            COMMON_NOUN_NT'activity on responses' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'activity on values'-k} {creation: << kind=activity on responses(x) >>} {eval: TEST_VALUE_NT}
                        SENTENCE_NT'the standard issuing the response text rule is listed last i' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard issuing the response text rule'
                            UNPARSED_NOUN_NT'last in for issuing the response text'
                        SENTENCE_NT'the standard issuing the response text rule translates into ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard issuing the response text rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'STANDARD_RESPONSE_ISSUING_R'
                    HEADING_NT'section 2 - naming and listing' {heading 5} {under: H5'section 2 - naming and listing'} {unit: 2}
                        RULE_NT'before printing the name of a thing ( called the item being ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if expanding text for comparison purposes' {colon_block_command}
                                        INVOCATION_NT'if expanding text for comparison purposes' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'expanding text for comparison purposes' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'expanding text for comparison purposes'
                                                    PHRASE_TO_DECIDE_VALUE_NT'expanding text for comparison purposes'
                                                        INVOCATION_LIST_NT'expanding text for comparison purposes'
                                                            INVOCATION_NT'expanding text for comparison purposes' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the activity' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the activity' {phrase invoked: call}
                                INVOCATION_LIST_NT'now the item being printed is mentioned' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the item being printed is mentioned'
                        SENTENCE_NT'printing a number of something ( documented at act_pan ) is ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing a number of something ( documented at act_pan )'
                            UNPARSED_NOUN_NT'an activity'
                        RULE_NT'rule for printing a number of something ( called the item ) ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[listing group size in words] "' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'listing group size in words'
                                        INVOCATION_NT'listing group size in words' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'listing group size' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'number'} {required: number}
                                                NONLOCAL_VARIABLE_NT'listing group size' {nonlocal: 'listing group size'(var)number}{meaning: {listing group size = VARIABLE_MC}}
                                    INVOCATION_LIST_SAY_NT'" "'
                                        INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'" "' {kind: text}
                                INVOCATION_LIST_NT'carry out the printing the plural name activity with the ite'
                                    INVOCATION_NT'carry out the printing the plural name activity with the ite' {phrase invoked: call} {kind variable declarations: K=object}
                                        RVALUE_CONTEXT_NT'printing the plural name' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                            CONSTANT_NT'printing the plural name' {kind: activity on objects} {activity: printing the plural name}{meaning: {printing the plural name = ACTIVITY_MC}}
                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                        SENTENCE_NT'the standard printing a number of something rule is listed l' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard printing a number of something rule'
                            UNPARSED_NOUN_NT'last in the for printing a number rulebook'
                        SENTENCE_NT'printing room description details of something ( documented ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing room description details of something ( documented '
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing inventory details of something ( documented at act_' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing inventory details of something ( documented at act_'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'listing contents of something ( documented at act_lc ) is an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'listing contents of something ( documented at act_lc )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the standard contents listing rule is listed last in the for' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard contents listing rule'
                            UNPARSED_NOUN_NT'last in the for listing contents rulebook'
                        SENTENCE_NT'the standard contents listing rule translates into inter as ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard contents listing rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'STANDARD_CONTENTS_LISTING_R'
                        SENTENCE_NT'grouping together something ( documented at act_gt ) is an a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'grouping together something ( documented at act_gt )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'writing a paragraph about something ( documented at act_wpa ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'writing a paragraph about something ( documented at act_wpa '
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'listing nondescript items of something ( documented at act_l' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'listing nondescript items of something ( documented at act_l'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the name of a dark room ( documented at act_darknam' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the name of a dark room ( documented at act_darknam'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the description of a dark room ( documented at act_' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the description of a dark room ( documented at act_'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the announcement of darkness ( documented at act_no' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the announcement of darkness ( documented at act_no'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the announcement of light ( documented at act_nowli' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the announcement of light ( documented at act_nowli'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing a refusal to act in the dark ( documented at act_to' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing a refusal to act in the dark ( documented at act_to'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the look around once light available rule is listed last in ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the look around once light available rule'
                            UNPARSED_NOUN_NT'last in for printing the announcement of light'
                        RULE_NT'this is the look around once light available rule' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try looking'
                                    INVOCATION_NT'try looking' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'looking' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'looking' {kind: action} {action pattern: <action: looking / >}
                        SENTENCE_NT'constructing the status line ( documented at act_csl ) is an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'constructing the status line ( documented at act_csl )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the banner text ( documented at act_banner ) is an ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the banner text ( documented at act_banner )'
                            UNPARSED_NOUN_NT'an activity'
                    HEADING_NT'section 3 - command parsing' {heading 5} {under: H5'section 3 - command parsing'} {unit: 2}
                        SENTENCE_NT'reading a command ( documented at act_reading ) is an activi' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'reading a command ( documented at act_reading )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'deciding the scope of something ( future action ) ( document' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'deciding the scope of something ( future action ) ( document'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'deciding the concealed possessions of something ( documented' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'deciding the concealed possessions of something ( documented'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'deciding whether all includes something ( future action ) ( ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'deciding whether all includes something ( future action ) ( '
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the for deciding whether all includes rules have outcomes it' {unit: 2} {classified}
                            VERB_NT'have' {verb 'have' 3p p act IS_TENSE +ve}
                            PROPER_NOUN_NT'for deciding whether all includes rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'for deciding whether all includes rules' {kind: objects based rulebook} {rulebook: for deciding whether all includes}{meaning: {for deciding whether all includes rules = RULEBOOK_MC}}}
                            RELATIONSHIP_NT'have' {meaning: is-had-by} {refined}
                                PROPERTY_LIST_NT'and' {refined}
                                    UNPARSED_NOUN_NT'outcomes it does not ( failure )'
                                    UNPARSED_NOUN_NT'it does ( success )'
                        SENTENCE_NT'clarifying the parser's choice of something ( future action ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'clarifying the parser's choice of something ( future action '
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'asking which do you mean ( future action ) ( documented at a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'asking which do you mean ( future action ) ( documented at a'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing a parser error ( documented at act_parsererror ) is' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing a parser error ( documented at act_parsererror )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'supplying a missing noun ( documented at act_smn ) is an act' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'supplying a missing noun ( documented at act_smn )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'supplying a missing second noun ( documented at act_smn ) is' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'supplying a missing second noun ( documented at act_smn )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'implicitly taking something ( documented at act_implicitly )' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'implicitly taking something ( documented at act_implicitly )'
                            UNPARSED_NOUN_NT'an activity'
                        RULE_NT'rule for deciding whether all includes scenery while taking ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        RULE_NT'rule for deciding whether all includes people while taking o' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        RULE_NT'rule for deciding whether all includes fixed in place things' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        RULE_NT'rule for deciding whether all includes things enclosed by th' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        RULE_NT'rule for deciding whether all includes a person while droppi' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        RULE_NT'rule for supplying a missing noun while an actor smelling ( ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is the touchability ceiling of the player' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is the touchability ceiling of the player'
                        RULE_NT'rule for supplying a missing noun while an actor listening (' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is the touchability ceiling of the player' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is the touchability ceiling of the player'
                        RULE_NT'rule for supplying a missing noun while an actor going ( thi' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "You'll have to say which compass direction to go in." (' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"You'll have to say which compass direction to go in." ( a )'
                                        INVOCATION_NT'"You'll have to say which compass direction to go in." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"You'll have to say which compass direction to go in." ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"You'll have to say which compass direction to go in." ( a )' {kind: text}
                        SENTENCE_NT'the standard implicit taking rule is listed last in for impl' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard implicit taking rule'
                            UNPARSED_NOUN_NT'last in for implicitly taking'
                        SENTENCE_NT'the standard implicit taking rule translates into inter as S' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard implicit taking rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'STANDARD_IMPLICIT_TAKING_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"(first taking [the noun])[command clarification break]" ( a'
                                    UNPARSED_NOUN_NT'"([the second noun] first taking [the noun])[command clarifi'
                    HEADING_NT'section 4 - posthumous activities' {heading 5} {under: H5'section 4 - posthumous activities'} {unit: 2}
                        SENTENCE_NT'amusing a victorious player ( documented at act_amuse ) is a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'amusing a victorious player ( documented at act_amuse )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'printing the player's obituary ( documented at act_obit ) is' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the player's obituary ( documented at act_obit )'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the print obituary headline rule is listed last in for print' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the print obituary headline rule'
                            UNPARSED_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the print final score rule is listed last in for printing th' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the print final score rule'
                            UNPARSED_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the display final status line rule is listed last in for pri' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the display final status line rule'
                            UNPARSED_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the print obituary headline rule translates into inter as PR' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'print obituary headline rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PRINT_OBITUARY_HEADLINE_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'" You have died " ( a )'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'" You have won " ( b )'
                                        UNPARSED_NOUN_NT'" The End " ( c )'
                        SENTENCE_NT'the print final score rule translates into inter as PRINT_FI' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'print final score rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PRINT_FINAL_SCORE_R'
                        SENTENCE_NT'the display final status line rule translates into inter as ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'display final status line rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'DISPLAY_FINAL_STATUS_LINE_R'
                        SENTENCE_NT'handling the final question is an activity' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'handling the final question'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the immediately restart the vm rule translates into inter as' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'immediately restart the vm rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'IMMEDIATELY_RESTART_VM_R'
                        SENTENCE_NT'the immediately restore saved game rule translates into inte' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'immediately restore saved game rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'IMMEDIATELY_RESTORE_SAVED_R'
                        SENTENCE_NT'the immediately quit rule translates into inter as IMMEDIATE' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'immediately quit rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'IMMEDIATELY_QUIT_R'
                        SENTENCE_NT'the immediately undo rule translates into inter as IMMEDIATE' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'immediately undo rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'IMMEDIATELY_UNDO_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"The use of 'undo' is forbidden in this story." ( a )'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"You can't 'undo' what hasn't been done!" ( b )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"Your interpreter does not provide 'undo'. Sorry!" ( c )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"'Undo' failed. Sorry!" ( d )'
                                                AND_NT','
                                                    UNPARSED_NOUN_NT'"[bracket]Previous turn undone.[close bracket]" ( e )'
                                                    UNPARSED_NOUN_NT'"'Undo' capacity exhausted. Sorry!" ( f )'
                        SENTENCE_NT'the print the final question rule is listed in before handli' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the print the final question rule'
                            UNPARSED_NOUN_NT'in before handling the final question'
                        SENTENCE_NT'the print the final prompt rule is listed in before handling' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the print the final prompt rule'
                            UNPARSED_NOUN_NT'in before handling the final question'
                        SENTENCE_NT'the read the final answer rule is listed last in before hand' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the read the final answer rule'
                            UNPARSED_NOUN_NT'last in before handling the final question'
                        SENTENCE_NT'the standard respond to final question rule is listed last i' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard respond to final question rule'
                            UNPARSED_NOUN_NT'last in for handling the final question'
                        RULE_NT'this is the print the final prompt rule' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "> [run paragraph on]" ( a )' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"> [run paragraph on]" ( a )'
                                        INVOCATION_NT'"> [run paragraph on]" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"> [run paragraph on]" ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"> [run paragraph on]" ( a )' {kind: text}
                        SENTENCE_NT'the read the final answer rule translates into inter as READ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'read the final answer rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'READ_FINAL_ANSWER_R'
                    HEADING_NT'section 5 - the final question' {heading 5} {under: H5'section 5 - the final question'} {unit: 2}
                        RULE_NT'this is the print the final question rule' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let named options count be 0' {indent: 1}
                                    INVOCATION_NT'let named options count be 0' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'named options count' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                            UNKNOWN_NT'named options count'
                                        RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of final question options' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of final question options' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of final question options' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of final question options' {kind: table name} {table: table_data}{meaning: {table of final question options = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has en' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the only if victorious entry is false or the story has en' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended fin' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended fin'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false' {proposition: << ('only if victorious entry' == 'false') >>} {term: 'only if victorious entry'}
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final respons' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if there is a final response rule entry or the final respons' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response a' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response a'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry' {phrase invoked: call} {resulting: truth state}
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'final response rule'}{meaning: {final response rule = TABLE_COLUMN_MC}}
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty' {proposition: << NOT< empty('the final response activity entry') NOT> >>} {term: 'the final response activity entry'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if there is a final question wording entry' {indent: 4} {colon_block_command}
                                                                INVOCATION_NT'if there is a final question wording entry' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'there is a final question wording entry' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_VALUE_NT'there is a final question wording entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a final question wording entry'
                                                                                INVOCATION_LIST_NT'there is a final question wording entry'
                                                                                    INVOCATION_NT'there is a final question wording entry' {phrase invoked: call} {resulting: truth state}
                                                                                        LVALUE_TR_CONTEXT_NT'a final question wording entry' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                            TABLE_ENTRY_NT'a final question wording entry'
                                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'final question wording'}{meaning: {final question wording = TABLE_COLUMN_MC}}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'increase named options count by 1' {results_from_splitting} {indent: 5}
                                                                    INVOCATION_NT'increase named options count by 1' {phrase invoked: call}
                                                                        LVALUE_CONTEXT_NT'named options count' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                                            LOCAL_VARIABLE_NT'named options count' {local: LV"named options count"-number number}
                                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the named options count is less than 1' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the named options count is less than 1' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'named options count is less than 1' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'named options count is less than 1' {proposition: << less-than('named options count', '1') >>} {term: 'named options count'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the immediately quit rule' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'abide by the immediately quit rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'immediately quit rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'immediately quit rule' {kind: rule} {rule: immediately quit rule}{meaning: {immediately quit rule = MISCELLANEOUS_MC}}
                                CODE_BLOCK_NT'say "Would you like to " ( a )' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"Would you like to " ( a )'
                                        INVOCATION_NT'"Would you like to " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"Would you like to " ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"Would you like to " ( a )' {kind: text}
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of final question options' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of final question options' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of final question options' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of final question options' {kind: table name} {table: table_data}{meaning: {table of final question options = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has en' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the only if victorious entry is false or the story has en' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended fin' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended fin'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false' {proposition: << ('only if victorious entry' == 'false') >>} {term: 'only if victorious entry'}
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final respons' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if there is a final response rule entry or the final respons' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response a' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response a'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry' {phrase invoked: call} {resulting: truth state}
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'final response rule'}{meaning: {final response rule = TABLE_COLUMN_MC}}
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty' {proposition: << NOT< empty('the final response activity entry') NOT> >>} {term: 'the final response activity entry'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if there is a final question wording entry' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if there is a final question wording entry' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'there is a final question wording entry' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_VALUE_NT'there is a final question wording entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a final question wording entry'
                                                                                INVOCATION_LIST_NT'there is a final question wording entry'
                                                                                    INVOCATION_NT'there is a final question wording entry' {phrase invoked: call} {resulting: truth state}
                                                                                        LVALUE_TR_CONTEXT_NT'a final question wording entry' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                            TABLE_ENTRY_NT'a final question wording entry'
                                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'final question wording'}{meaning: {final question wording = TABLE_COLUMN_MC}}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say final question wording entry' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'final question wording entry'
                                                                        INVOCATION_NT'final question wording entry' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'final question wording entry' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                TABLE_ENTRY_NT'final question wording entry'
                                                                                    CONSTANT_NT {kind: nothing valued table column} {table column: 'final question wording'}{meaning: {final question wording = TABLE_COLUMN_MC}}
                                                                INVOCATION_LIST_NT'decrease named options count by 1' {indent: 5}
                                                                    INVOCATION_NT'decrease named options count by 1' {phrase invoked: call}
                                                                        LVALUE_CONTEXT_NT'named options count' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                                            LOCAL_VARIABLE_NT'named options count' {local: LV"named options count"-number number}
                                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the named options count is 1' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the named options count is 1' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'named options count is 1' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'named options count is 1' {proposition: << ('named options count' == '1') >>} {term: 'named options count'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the serial comma option is active' {indent: 6} {colon_block_command}
                                                                                INVOCATION_NT'if the serial comma option is active' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'serial comma option is active' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'serial comma option is active' {proposition: << active('serial comma option') >>} {term: 'serial comma option'}
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say ","' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'","'
                                                                                        INVOCATION_NT'","' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'","' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'","' {kind: text}
                                                                        CODE_BLOCK_NT'say " or " ( b )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'" or " ( b )'
                                                                                INVOCATION_NT'" or " ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'" or " ( b )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'" or " ( b )' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the named options count is 0' {colon_block_command} {indent: 5}
                                                                                INVOCATION_NT'if the named options count is 0' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'named options count is 0' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'named options count is 0' {proposition: << ('named options count' == '0') >>} {term: 'named options count'}
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "?[line break]"' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"?"' {suppress_newlines}
                                                                                        INVOCATION_NT'"?"' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"?"' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"?"' {kind: text}
                                                                                    INVOCATION_LIST_SAY_NT'line break'
                                                                                        INVOCATION_NT'line break' {phrase invoked: call}
                                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 5} {control structure: O}
                                                                                CODE_BLOCK_NT'say ", "' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'", "'
                                                                                        INVOCATION_NT'", "' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'", "' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'", "' {kind: text}
                        RULE_NT'this is the standard respond to final question rule' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of final question options' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of final question options' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of final question options' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of final question options' {kind: table name} {table: table_data}{meaning: {table of final question options = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has en' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the only if victorious entry is false or the story has en' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended fin' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended fin'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false' {proposition: << ('only if victorious entry' == 'false') >>} {term: 'only if victorious entry'}
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final respons' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if there is a final response rule entry or the final respons' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response a' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response a'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry' {phrase invoked: call} {resulting: truth state}
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'final response rule'}{meaning: {final response rule = TABLE_COLUMN_MC}}
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty' {proposition: << NOT< empty('the final response activity entry') NOT> >>} {term: 'the final response activity entry'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the player's command matches the topic entry' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the player's command matches the topic entry' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'player's command matches the topic entry' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_VALUE_NT'player's command matches the topic entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'player's command matches the topic entry'
                                                                                INVOCATION_LIST_NT'player's command matches the topic entry'
                                                                                    INVOCATION_NT'player's command matches the topic entry' {phrase invoked: call} {resulting: truth state}
                                                                                        RVALUE_CONTEXT_NT'player's command' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                                                                            NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}{meaning: {player's command = VARIABLE_MC}}
                                                                                        RVALUE_CONTEXT_NT'topic entry' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'a topic'} {required: topic}
                                                                                            TABLE_ENTRY_NT'topic entry'
                                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'topic'}{meaning: {topic = TABLE_COLUMN_MC}}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if there is a final response rule entry' {indent: 5} {colon_block_command}
                                                                        INVOCATION_NT'if there is a final response rule entry' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'there is a final response rule entry' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_VALUE_NT'there is a final response rule entry'
                                                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                                        INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                            INVOCATION_NT'there is a final response rule entry' {phrase invoked: call} {resulting: truth state}
                                                                                                LVALUE_TR_CONTEXT_NT'a final response rule entry' {token check to do: <null-parse-node>
                                                                                                } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                                                    TABLE_ENTRY_NT'a final response rule entry'
                                                                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'final response rule'}{meaning: {final response rule = TABLE_COLUMN_MC}}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'abide by final response rule entry' {results_from_splitting} {indent: 6}
                                                                            INVOCATION_NT'abide by final response rule entry' {phrase invoked: call}
                                                                                RVALUE_CONTEXT_NT'final response rule entry' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                                                    TABLE_ENTRY_NT'final response rule entry'
                                                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'final response rule'}{meaning: {final response rule = TABLE_COLUMN_MC}}
                                                                    CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 5} {control structure: O}
                                                                        INVOCATION_LIST_NT'carry out the final response activity entry activity' {indent: 6}
                                                                            INVOCATION_NT'carry out the final response activity entry activity' {phrase invoked: call}
                                                                                RVALUE_CONTEXT_NT'final response activity entry' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                                                    TABLE_ENTRY_NT'final response activity entry'
                                                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'final response activity'}{meaning: {final response activity = TABLE_COLUMN_MC}}
                                                                INVOCATION_LIST_NT'rule succeeds' {indent: 5}
                                                                    INVOCATION_NT'rule succeeds' {phrase invoked: call}
                                CODE_BLOCK_NT'say "Please give one of the answers above." ( a )' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"Please give one of the answers above." ( a )'
                                        INVOCATION_NT'"Please give one of the answers above." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"Please give one of the answers above." ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"Please give one of the answers above." ( a )' {kind: text}
                    HEADING_NT'section 6 - final question options' {heading 5} {under: H5'section 6 - final question options'} {unit: 2}
                        TABLE_NT'table of final question options final question wording only ' {unit: 2}
                    HEADING_NT'section 7 - locale descriptions - unindexed' {heading 5} {under: H5'section 7 - locale descriptions - unindexed'} {unit: 2}
                        TABLE_NT'table of locale priorities notable-object ( an object ) loca' {unit: 2}
                        RULE_NT'to describe locale for ( o - object )' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'carry out the printing the locale description activity with '
                                    INVOCATION_NT'carry out the printing the locale description activity with ' {phrase invoked: call} {kind variable declarations: K=object}
                                        RVALUE_CONTEXT_NT'printing the locale description' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                            CONSTANT_NT'printing the locale description' {kind: activity on objects} {activity: printing the locale description}{meaning: {printing the locale description = ACTIVITY_MC}}
                                        RVALUE_CONTEXT_NT'o' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                            LOCAL_VARIABLE_NT'o' {local: LV"o"-object object}
                        RULE_NT'to set the/-- locale priority of ( o - an object ) to ( n - ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if o is a thing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if o is a thing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'o is a thing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'o is a thing' {proposition: << kind=thing('o') >>} {term: 'o'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if n is at most 0' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if n is at most 0' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'n is at most 0' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'n is at most 0' {proposition: << at-most('n', '0') >>} {term: 'n'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now o is mentioned' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'o is mentioned'
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if there is a notable-object of o in the table of locale pri' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if there is a notable-object of o in the table of locale pri' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'there is a notable-object of o in the table of locale priori' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'there is a notable-object of o in the table of locale priori'
                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a notable-object of o in the table of locale priori'
                                                                INVOCATION_LIST_NT'there is a notable-object of o in the table of locale priori'
                                                                    INVOCATION_NT'there is a notable-object of o in the table of locale priori' {phrase invoked: call} {resulting: truth state}
                                                                        LVALUE_TR_CONTEXT_NT'a notable-object of o in the table of locale priorities' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                            TABLE_ENTRY_NT'a notable-object of o in the table of locale priorities'
                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'notable-object'}{meaning: {notable-object = TABLE_COLUMN_MC}}
                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'notable-object'}{meaning: {notable-object = TABLE_COLUMN_MC}}
                                                                                LOCAL_VARIABLE_NT'o' {local: LV"o"-object object}
                                                                                CONSTANT_NT'the table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'choose row with a notable-object of o in the table of locale' {indent: 3}
                                                    INVOCATION_NT'choose row with a notable-object of o in the table of locale' {phrase invoked: call} {kind variable declarations: K=object}
                                                        RVALUE_CONTEXT_NT'a notable-object' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: table column}
                                                            CONSTANT_NT'a notable-object' {kind: nothing valued table column} {table column: 'notable-object'}{meaning: {notable-object = TABLE_COLUMN_MC}}
                                                        RVALUE_CONTEXT_NT'o' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'o' {local: LV"o"-object object}
                                                        RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                            CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if n is at most 0' {indent: 3} {colon_block_command}
                                                        INVOCATION_NT'if n is at most 0' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'n is at most 0' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'n is at most 0' {proposition: << at-most('n', '0') >>} {term: 'n'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'blank out the whole row' {results_from_splitting} {indent: 4}
                                                            INVOCATION_NT'blank out the whole row' {phrase invoked: call}
                                                    CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 3} {control structure: O}
                                                        INVOCATION_LIST_NT'now the locale description priority entry is n' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the locale description priority entry is n'
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if n is greater than 0' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if n is greater than 0' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'n is greater than 0' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'n is greater than 0' {proposition: << greater-than('n', '0') >>} {term: 'n'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'choose a blank row in the table of locale priorities' {indent: 4}
                                                            INVOCATION_NT'choose a blank row in the table of locale priorities' {phrase invoked: call}
                                                                RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                                    CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                                        INVOCATION_LIST_NT'now the notable-object entry is o' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the notable-object entry is o'
                                                        INVOCATION_LIST_NT'now the locale description priority entry is n' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the locale description priority entry is n'
                        SENTENCE_NT'printing the locale description of something ( documented at' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing the locale description of something ( documented at'
                            UNPARSED_NOUN_NT'an activity'
                        SENTENCE_NT'the locale paragraph count is a number that varies' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'locale paragraph count' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'locale paragraph count' {nonlocal: 'locale paragraph count'(var)number}} {created here}
                            COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                        RULE_NT'before printing the locale description ( this is the initial' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the locale paragraph count is 0' {indent: 1} {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the locale paragraph count is 0'
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of locale priorities' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'blank out the whole row' {indent: 2}
                                            INVOCATION_NT'blank out the whole row' {phrase invoked: call}
                        RULE_NT'before printing the locale description ( this is the find no' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object'
                                    INVOCATION_NT'let the domain be the parameter-object' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            NONLOCAL_VARIABLE_NT'parameter-object' {nonlocal: 'parameter-object'(var)object}{meaning: {parameter-object = VARIABLE_MC}}
                                INVOCATION_LIST_NT'carry out the choosing notable locale objects activity with '
                                    INVOCATION_NT'carry out the choosing notable locale objects activity with ' {phrase invoked: call} {kind variable declarations: K=object}
                                        RVALUE_CONTEXT_NT'choosing notable locale objects' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                            CONSTANT_NT'choosing notable locale objects' {kind: activity on objects} {activity: choosing notable locale objects}{meaning: {choosing notable locale objects = ACTIVITY_MC}}
                                        RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                            LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing the locale description ( this is the interestin' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object' {indent: 1}
                                    INVOCATION_NT'let the domain be the parameter-object' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            NONLOCAL_VARIABLE_NT'parameter-object' {nonlocal: 'parameter-object'(var)object}{meaning: {parameter-object = VARIABLE_MC}}
                                INVOCATION_LIST_NT'sort the table of locale priorities in locale description pr' {indent: 1}
                                    INVOCATION_NT'sort the table of locale priorities in locale description pr' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                            CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                        RVALUE_CONTEXT_NT'locale description priority' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'table column'} {required: table column}
                                            CONSTANT_NT'locale description priority' {kind: nothing valued table column} {table column: 'locale description priority'}{meaning: {locale description priority = TABLE_COLUMN_MC}}
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of locale priorities' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'carry out the printing a locale paragraph about activity wit' {indent: 2}
                                            INVOCATION_NT'carry out the printing a locale paragraph about activity wit' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'printing a locale paragraph about' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'printing a locale paragraph about' {kind: activity on objects} {activity: printing a locale paragraph about}{meaning: {printing a locale paragraph about = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'notable-object entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    TABLE_ENTRY_NT'notable-object entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'notable-object'}{meaning: {notable-object = TABLE_COLUMN_MC}}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing the locale description ( this is the you-can-al' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object' {indent: 1}
                                    INVOCATION_NT'let the domain be the parameter-object' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            NONLOCAL_VARIABLE_NT'parameter-object' {nonlocal: 'parameter-object'(var)object}{meaning: {parameter-object = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the mentionable count be 0' {indent: 1}
                                    INVOCATION_NT'let the mentionable count be 0' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'mentionable count' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                            UNKNOWN_NT'mentionable count'
                                        RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat with item running through things' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat with item running through things' {phrase invoked: call} {kind variable declarations: K=thing}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'things' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'things' {kind: description of things} {proposition: << kind=thing(x) >>}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is not marked for listing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the item is not marked for listing'
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat through the table of locale priorities' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'table of locale priorities' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of locale priorities' {kind: table name} {table: table_data}{meaning: {table of locale priorities = TABLE_MC}}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the locale description priority entry is greater than 0' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the locale description priority entry is greater than 0' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'locale description priority entry is greater than 0' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'locale description priority entry is greater than 0' {proposition: << greater-than('locale description priority entry', '0') >>} {term: 'locale description priority entry'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the notable-object entry is marked for listing' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the notable-object entry is marked for listing'
                                        INVOCATION_LIST_NT'increase the mentionable count by 1' {indent: 2}
                                            INVOCATION_NT'increase the mentionable count by 1' {phrase invoked: call}
                                                LVALUE_CONTEXT_NT'mentionable count' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                    LOCAL_VARIABLE_NT'mentionable count' {local: LV"mentionable count"-number number}
                                                RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the mentionable count is greater than 0' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the mentionable count is greater than 0' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'mentionable count is greater than 0' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'mentionable count is greater than 0' {proposition: << greater-than('mentionable count', '0') >>} {term: 'mentionable count'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: RPT}
                                            INVOCATION_LIST_NT'repeat with item running through things' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'repeat with item running through things' {phrase invoked: call} {kind variable declarations: K=thing}
                                                    NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                        UNKNOWN_NT'item'
                                                    RVALUE_CONTEXT_NT'things' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                        CONSTANT_NT'things' {kind: description of things} {proposition: << kind=thing(x) >>}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the item is mentioned' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the item is mentioned' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'item is mentioned' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'item is mentioned' {proposition: << mentioned('item') >>} {term: 'item'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the item is not marked for listing' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the item is not marked for listing'
                                        INVOCATION_LIST_NT'begin the listing nondescript items activity with the domain' {indent: 2}
                                            INVOCATION_NT'begin the listing nondescript items activity with the domain' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'listing nondescript items' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'listing nondescript items' {kind: activity on objects} {activity: listing nondescript items}{meaning: {listing nondescript items = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the number of marked for listing things is 0' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the number of marked for listing things is 0' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'number of marked for listing things is 0' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'number of marked for listing things is 0' {proposition: << ('number of marked for listing things' == '0') >>} {term: 'number of marked for listing things'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'abandon the listing nondescript items activity with the doma' {indent: 3}
                                                    INVOCATION_NT'abandon the listing nondescript items activity with the doma' {phrase invoked: call} {kind variable declarations: K=object}
                                                        RVALUE_CONTEXT_NT'listing nondescript items' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                            CONSTANT_NT'listing nondescript items' {kind: activity on objects} {activity: listing nondescript items}{meaning: {listing nondescript items = ACTIVITY_MC}}
                                                        RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if handling the listing nondescript items activity with the ' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if handling the listing nondescript items activity with the ' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'handling the listing nondescript items activity with the dom' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_VALUE_NT'handling the listing nondescript items activity with the dom'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'handling the listing nondescript items activity with the dom'
                                                                        INVOCATION_LIST_NT'handling the listing nondescript items activity with the dom'
                                                                            INVOCATION_NT'handling the listing nondescript items activity with the dom' {phrase invoked: call} {resulting: truth state} {kind variable declarations: K=object}
                                                                                RVALUE_CONTEXT_NT'listing nondescript items' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                                                    CONSTANT_NT'listing nondescript items' {kind: activity on objects} {activity: listing nondescript items}{meaning: {listing nondescript items = ACTIVITY_MC}}
                                                                                RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                                                    LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the domain is the location' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the domain is the location' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'domain is the location' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'domain is the location' {proposition: << ('domain' == 'the location') >>} {term: 'domain'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[We] " ( a )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[We] " ( a )'
                                                                        INVOCATION_NT'"[We] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[We] " ( a )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[We] " ( a )' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the domain is a supporter or the domain is an animal' {colon_block_command} {indent: 4}
                                                                        INVOCATION_NT'if the domain is a supporter or the domain is an animal' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'domain is a supporter or the domain is an animal' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                LOGICAL_OR_NT'domain is a supporter or the domain is an animal'
                                                                                    TEST_PROPOSITION_NT'domain is a supporter' {proposition: << kind=supporter('domain') >>} {term: 'domain'}
                                                                                    TEST_PROPOSITION_NT'the domain is an animal' {proposition: << kind=animal('the domain') >>} {term: 'the domain'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "On [the domain] [we] " ( b )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"On [the domain] [we] " ( b )'
                                                                                INVOCATION_NT'"On [the domain] [we] " ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"On [the domain] [we] " ( b )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"On [the domain] [we] " ( b )' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 4} {control structure: O}
                                                                        CODE_BLOCK_NT'say "In [the domain] [we] " ( c )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"In [the domain] [we] " ( c )'
                                                                                INVOCATION_NT'"In [the domain] [we] " ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"In [the domain] [we] " ( c )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"In [the domain] [we] " ( c )' {kind: text}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the locale paragraph count is greater than 0' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the locale paragraph count is greater than 0' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'locale paragraph count is greater than 0' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'locale paragraph count is greater than 0' {proposition: << greater-than('locale paragraph count', '0') >>} {term: 'locale paragraph count'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[regarding the player][can] also see " ( d )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the player][can] also see " ( d )'
                                                                        INVOCATION_NT'"[regarding the player][can] also see " ( d )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[regarding the player][can] also see " ( d )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[regarding the player][can] also see " ( d )' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 4} {control structure: O}
                                                                CODE_BLOCK_NT'say "[regarding the player][can] see " ( e )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the player][can] see " ( e )'
                                                                        INVOCATION_NT'"[regarding the player][can] see " ( e )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[regarding the player][can] see " ( e )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[regarding the player][can] see " ( e )' {kind: text}
                                                        INVOCATION_LIST_NT'let the common holder be nothing' {indent: 4}
                                                            INVOCATION_NT'let the common holder be nothing' {phrase invoked: call}
                                                                NEW_LOCAL_CONTEXT_NT'common holder' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                                    UNKNOWN_NT'common holder'
                                                                RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                    CONSTANT_NT'nothing' {kind: object} {nothing}
                                                        INVOCATION_LIST_NT'let contents form of list be true' {indent: 4}
                                                            INVOCATION_NT'let contents form of list be true' {phrase invoked: call}
                                                                NEW_LOCAL_CONTEXT_NT'contents form of list' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {new var: truth state} {required: value}
                                                                    UNKNOWN_NT'contents form of list'
                                                                RVALUE_CONTEXT_NT'true' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                    CONSTANT_NT'true' {kind: truth state} {explicit literal} {number: 1}
                                                        CODE_BLOCK_NT {control structure: RPT}
                                                            INVOCATION_LIST_NT'repeat with list item running through marked for listing thi' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'repeat with list item running through marked for listing thi' {phrase invoked: call} {kind variable declarations: K=thing}
                                                                    NEW_LOCAL_CONTEXT_NT'list item' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                                        UNKNOWN_NT'list item'
                                                                    RVALUE_CONTEXT_NT'marked for listing things' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                        CONSTANT_NT'marked for listing things' {kind: description of things} {proposition: << kind=thing(x) ^ marked for listing(x) >>}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the holder of the list item is not the common holder' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the holder of the list item is not the common holder' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'holder of the list item is not the common holder' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'holder of the list item is not the common holder' {proposition: << NOT< ('holder of the list item' == 'the common holder') NOT> >>} {term: 'holder of the list item'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the common holder is nothing' {indent: 6} {colon_block_command}
                                                                                INVOCATION_NT'if the common holder is nothing' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'common holder is nothing' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'common holder is nothing' {proposition: << ('common holder' == 'nothing') >>} {term: 'common holder'}
                                                                            CODE_BLOCK_NT
                                                                                INVOCATION_LIST_NT'now the common holder is the holder of the list item' {results_from_splitting} {indent: 7} {control structure: NOW}
                                                                                    CONDITION_CONTEXT_NT'the common holder is the holder of the list item'
                                                                            CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 6} {control structure: O}
                                                                                INVOCATION_LIST_NT'now contents form of list is false' {indent: 7} {control structure: NOW}
                                                                                    CONDITION_CONTEXT_NT'contents form of list is false'
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the list item is mentioned' {indent: 5} {colon_block_command}
                                                                        INVOCATION_NT'if the list item is mentioned' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'list item is mentioned' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'list item is mentioned' {proposition: << mentioned('list item') >>} {term: 'list item'}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the list item is not marked for listing' {results_from_splitting} {indent: 6} {control structure: NOW}
                                                                            CONDITION_CONTEXT_NT'the list item is not marked for listing'
                                                        INVOCATION_LIST_NT'filter list recursion to unmentioned things' {indent: 4}
                                                            INVOCATION_NT'filter list recursion to unmentioned things' {phrase invoked: call}
                                                                RVALUE_CONTEXT_NT'unmentioned things' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                                                    CONSTANT_NT'unmentioned things' {kind: description of things} {proposition: << kind=thing(x) ^ unmentioned(x) >>}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if contents form of list is true and the common holder is no' {indent: 4} {colon_block_command}
                                                                INVOCATION_NT'if contents form of list is true and the common holder is no' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'contents form of list is true and the common holder is not n' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        LOGICAL_AND_NT'contents form of list is true and the common holder is not n'
                                                                            TEST_PROPOSITION_NT'contents form of list is true' {proposition: << ('contents form of list' == 'true') >>} {term: 'contents form of list'}
                                                                            TEST_PROPOSITION_NT'the common holder is not nothing' {proposition: << NOT< ('the common holder' == 'nothing') NOT> >>} {term: 'the common holder'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'list the contents of the common holder , as a sentence , inc' {results_from_splitting} {indent: 5}
                                                                    INVOCATION_NT'list the contents of the common holder' {phrase invoked: call} {phrase options invoked: as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only}
                                                                        RVALUE_CONTEXT_NT'common holder' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                            LOCAL_VARIABLE_NT'common holder' {local: LV<unallocated> object}
                                                            CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 4} {control structure: O}
                                                                CODE_BLOCK_NT'say "[a list of marked for listing things including contents' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'a list of marked for listing things including contents'
                                                                        INVOCATION_NT'a list of marked for listing things including contents' {phrase invoked: call}
                                                                            RVALUE_CONTEXT_NT'marked for listing things' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                                                                CONSTANT_NT'marked for listing things' {kind: description of things} {proposition: << kind=thing(x) ^ marked for listing(x) >>}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the domain is the location' {indent: 4} {colon_block_command}
                                                                INVOCATION_NT'if the domain is the location' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'domain is the location' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'domain is the location' {proposition: << ('domain' == 'the location') >>} {term: 'domain'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say " here" ( f )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'" here" ( f )'
                                                                        INVOCATION_NT'" here" ( f )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'" here" ( f )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'" here" ( f )' {kind: text}
                                                        CODE_BLOCK_NT'say ".[paragraph break]"' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"."' {suppress_newlines}
                                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"."' {kind: text}
                                                            INVOCATION_LIST_SAY_NT'paragraph break'
                                                                INVOCATION_NT'paragraph break' {phrase invoked: call}
                                                        INVOCATION_LIST_NT'unfilter list recursion' {indent: 4}
                                                            INVOCATION_NT'unfilter list recursion' {phrase invoked: call}
                                                INVOCATION_LIST_NT'end the listing nondescript items activity with the domain' {indent: 3}
                                                    INVOCATION_NT'end the listing nondescript items activity with the domain' {phrase invoked: call} {kind variable declarations: K=object}
                                                        RVALUE_CONTEXT_NT'listing nondescript items' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                            CONSTANT_NT'listing nondescript items' {kind: activity on objects} {activity: listing nondescript items}{meaning: {listing nondescript items = ACTIVITY_MC}}
                                                        RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        SENTENCE_NT'choosing notable locale objects of something ( documented at' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'choosing notable locale objects of something ( documented at'
                            UNPARSED_NOUN_NT'an activity'
                        RULE_NT'for choosing notable locale objects ( this is the standard n' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object' {indent: 1}
                                    INVOCATION_NT'let the domain be the parameter-object' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            NONLOCAL_VARIABLE_NT'parameter-object' {nonlocal: 'parameter-object'(var)object}{meaning: {parameter-object = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the held item be the first thing held by the domain' {indent: 1}
                                    INVOCATION_NT'let the held item be the first thing held by the domain' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'held item' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'held item'
                                        RVALUE_CONTEXT_NT'first thing held by the domain' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'first thing held by the domain'
                                                INVOCATION_LIST_NT'first thing held by the domain'
                                                    INVOCATION_NT'first thing held by the domain' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'domain' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'domain' {local: LV"domain"-object object}
                                CODE_BLOCK_NT {control structure: WHI}
                                    INVOCATION_LIST_NT'while the held item is a thing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'while the held item is a thing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'held item is a thing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'held item is a thing' {proposition: << kind=thing('held item') >>} {term: 'held item'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the held item to 5' {indent: 2}
                                            INVOCATION_NT'set the locale priority of the held item to 5' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'held item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'held item' {local: LV"held item"-object object}
                                                RVALUE_CONTEXT_NT'5' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                                    CONSTANT_NT'5' {kind: number} {explicit literal} {number: 5}
                                        INVOCATION_LIST_NT'now the held item is the next thing held after the held item' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the held item is the next thing held after the held item'
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        SENTENCE_NT'printing a locale paragraph about something ( documented at ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                            UNPARSED_NOUN_NT'printing a locale paragraph about something ( documented at '
                            UNPARSED_NOUN_NT'an activity'
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item encloses the player' {colon_block_command}
                                        INVOCATION_NT'if the item encloses the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item encloses the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item encloses the player' {proposition: << encloses('item', 'the player') >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'set the locale priority of the item to 0' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                                    CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is scenery' {colon_block_command}
                                        INVOCATION_NT'if the item is scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item is scenery' {proposition: << scenery('item') >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'set the locale priority of the item to 0' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                                    CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is undescribed' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the item is undescribed' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is undescribed' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item is undescribed' {proposition: << undescribed('item') >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0' {indent: 2}
                                            INVOCATION_NT'set the locale priority of the item to 0' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                                    CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is not mentioned' {colon_block_command}
                                        INVOCATION_NT'if the item is not mentioned' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is not mentioned' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item is not mentioned' {proposition: << NOT< mentioned('item') NOT> >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set pronouns from the item' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'set pronouns from the item' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is not mentioned' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the item is not mentioned' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is not mentioned' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item is not mentioned' {proposition: << NOT< mentioned('item') NOT> >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if a paragraph break is pending' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if a paragraph break is pending' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'a paragraph break is pending' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'a paragraph break is pending'
                                                            PHRASE_TO_DECIDE_VALUE_NT'a paragraph break is pending'
                                                                INVOCATION_LIST_NT'a paragraph break is pending'
                                                                    INVOCATION_NT'a paragraph break is pending' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[conditional paragraph break]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'conditional paragraph break'
                                                        INVOCATION_NT'conditional paragraph break' {phrase invoked: call}
                                        INVOCATION_LIST_NT'carry out the writing a paragraph about activity with the it' {indent: 2}
                                            INVOCATION_NT'carry out the writing a paragraph about activity with the it' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'writing a paragraph about' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'writing a paragraph about' {kind: activity on objects} {activity: writing a paragraph about}{meaning: {writing a paragraph about = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if a paragraph break is pending' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if a paragraph break is pending' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'a paragraph break is pending' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'a paragraph break is pending'
                                                            PHRASE_TO_DECIDE_VALUE_NT'a paragraph break is pending'
                                                                INVOCATION_LIST_NT'a paragraph break is pending'
                                                                    INVOCATION_NT'a paragraph break is pending' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1' {indent: 3}
                                                    INVOCATION_NT'increase the locale paragraph count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'locale paragraph count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count' {nonlocal: 'locale paragraph count'(var)number}{meaning: {locale paragraph count = VARIABLE_MC}}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                INVOCATION_LIST_NT'now the item is mentioned' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                                CODE_BLOCK_NT'say "[conditional paragraph break]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'conditional paragraph break'
                                                        INVOCATION_NT'conditional paragraph break' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is not mentioned' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the item is not mentioned' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is not mentioned' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'item is not mentioned' {proposition: << NOT< mentioned('item') NOT> >>} {term: 'item'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the item provides the property initial appearance and the' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the item provides the property initial appearance and the' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'item provides the property initial appearance and the item i' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'item provides the property initial appearance and the item i'
                                                            TEST_PROPOSITION_NT'item provides the property initial appearance' {proposition: << provides('item', 'the property initial appearance') >>} {term: 'item'}
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'the item is not handled' {proposition: << NOT< handled('the item') NOT> >>} {term: 'the item'}
                                                                TEST_PROPOSITION_NT'the initial appearance of the item is not ""' {proposition: << NOT< ('the initial appearance of the item' == '""') NOT> >>} {term: 'the initial appearance of the item'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1' {indent: 3}
                                                    INVOCATION_NT'increase the locale paragraph count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'locale paragraph count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count' {nonlocal: 'locale paragraph count'(var)number}{meaning: {locale paragraph count = VARIABLE_MC}}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                CODE_BLOCK_NT'say "[initial appearance of the item]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'initial appearance of the item'
                                                        INVOCATION_NT'initial appearance of the item' {phrase invoked: call} {kind variable declarations: K=text} {save self}
                                                            RVALUE_CONTEXT_NT'initial appearance of the item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                PROPERTY_VALUE_NT'initial appearance of the item' {record as self}
                                                                    CONSTANT_NT {kind: nothing valued property} {property: 'initial appearance'=text}{meaning: {initial appearance = PROPERTY_MC}}
                                                                    LOCAL_VARIABLE_NT'the item' {local: LV"item"-thing thing}
                                                CODE_BLOCK_NT'say "[paragraph break]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break' {phrase invoked: call}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if a locale-supportable thing is on the item' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if a locale-supportable thing is on the item' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'a locale-supportable thing is on the item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'a locale-supportable thing is on the item' {proposition: << Exists x : kind=thing(x) ^ locale-supportable(x) ^ ('the item' == <SupporterOf(*1) : x>) >>} {term: x}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: RPT}
                                                            INVOCATION_LIST_NT'repeat with possibility running through things on the item' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'repeat with possibility running through things on the item' {phrase invoked: call} {kind variable declarations: K=thing}
                                                                    NEW_LOCAL_CONTEXT_NT'possibility' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                                        UNKNOWN_NT'possibility'
                                                                    RVALUE_CONTEXT_NT'things on the item' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                        CONSTANT_NT'things on the item' {kind: description of things} {proposition: << kind=thing(x) ^ (const_0 == <SupporterOf(*1) : x>) >>}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is marked for listing' {indent: 5} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the possibility is mentioned' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the possibility is mentioned' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'possibility is mentioned' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'possibility is mentioned' {proposition: << mentioned('possibility') >>} {term: 'possibility'}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the possibility is not marked for listing' {indent: 6} {control structure: NOW}
                                                                            CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                        CODE_BLOCK_NT'say "On [the item] " ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                                INVOCATION_NT'"On [the item] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"On [the item] " ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"On [the item] " ( a )' {kind: text}
                                                        INVOCATION_LIST_NT'list the contents of the item , as a sentence , including co' {indent: 4}
                                                            INVOCATION_NT'list the contents of the item' {phrase invoked: call} {phrase options invoked: as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only}
                                                                RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                        CODE_BLOCK_NT'say ".[paragraph break]"' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"."' {suppress_newlines}
                                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"."' {kind: text}
                                                            INVOCATION_LIST_SAY_NT'paragraph break'
                                                                INVOCATION_NT'paragraph break' {phrase invoked: call}
                                                INVOCATION_LIST_NT'now the item is mentioned' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a supporter ( called t' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat with item running through not handled things on the t' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat with item running through not handled things on the t' {phrase invoked: call} {kind variable declarations: K=thing}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'not handled things on the tabletop which provide the propert' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'not handled things on the tabletop which provide the propert' {kind: description of things} {proposition: << kind=thing(x) ^ not-handled(x) ^ kind=supporter(const_0) ^ provides(const_1, 'the property initial appearance') ^ (const_2 == <SupporterOf(*1) : x>) >>}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the item is not a person and the initial appearance of th' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the item is not a person and the initial appearance of th' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'item is not a person and the initial appearance of the item ' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'item is not a person and the initial appearance of the item '
                                                            TEST_PROPOSITION_NT'item is not a person' {proposition: << NOT< kind=person('item') NOT> >>} {term: 'item'}
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'the initial appearance of the item is not ""' {proposition: << NOT< ('the initial appearance of the item' == '""') NOT> >>} {term: 'the initial appearance of the item'}
                                                                TEST_PROPOSITION_NT'the item is not undescribed' {proposition: << NOT< undescribed('the item') NOT> >>} {term: 'the item'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the item is mentioned' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                                CODE_BLOCK_NT'say initial appearance of the item' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'initial appearance of the item'
                                                        INVOCATION_NT'initial appearance of the item' {phrase invoked: call} {kind variable declarations: K=text} {save self}
                                                            RVALUE_CONTEXT_NT'initial appearance of the item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                PROPERTY_VALUE_NT'initial appearance of the item' {record as self}
                                                                    CONSTANT_NT {kind: nothing valued property} {property: 'initial appearance'=text}{meaning: {initial appearance = PROPERTY_MC}}
                                                                    LOCAL_VARIABLE_NT'the item' {local: LV<unallocated> thing}
                                                CODE_BLOCK_NT'say paragraph break' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'definition' {unit: 2}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is scenery and the item does not enclose the pla' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the item is scenery and the item does not enclose the pla' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is scenery and the item does not enclose the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'item is scenery and the item does not enclose the player'
                                                    TEST_PROPOSITION_NT'item is scenery' {proposition: << scenery('item') >>} {term: 'item'}
                                                    TEST_PROPOSITION_NT'the item does not enclose the player' {proposition: << NOT< encloses('the item', 'the player') NOT> >>} {term: 'the item'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if a locale-supportable thing is on the item' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if a locale-supportable thing is on the item' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'a locale-supportable thing is on the item' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'a locale-supportable thing is on the item' {proposition: << Exists x : kind=thing(x) ^ locale-supportable(x) ^ ('the item' == <SupporterOf(*1) : x>) >>} {term: x}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'set pronouns from the item' {indent: 3}
                                                    INVOCATION_NT'set pronouns from the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                CODE_BLOCK_NT {control structure: RPT}
                                                    INVOCATION_LIST_NT'repeat with possibility running through things on the item' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'repeat with possibility running through things on the item' {phrase invoked: call} {kind variable declarations: K=thing}
                                                            NEW_LOCAL_CONTEXT_NT'possibility' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                                UNKNOWN_NT'possibility'
                                                            RVALUE_CONTEXT_NT'things on the item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                CONSTANT_NT'things on the item' {kind: description of things} {proposition: << kind=thing(x) ^ (const_0 == <SupporterOf(*1) : x>) >>}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the possibility is marked for listing' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the possibility is mentioned' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the possibility is mentioned' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'possibility is mentioned' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'possibility is mentioned' {proposition: << mentioned('possibility') >>} {term: 'possibility'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is not marked for listing' {indent: 5} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1' {indent: 3}
                                                    INVOCATION_NT'increase the locale paragraph count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'locale paragraph count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count' {nonlocal: 'locale paragraph count'(var)number}{meaning: {locale paragraph count = VARIABLE_MC}}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                CODE_BLOCK_NT'say "On [the item] " ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                        INVOCATION_NT'"On [the item] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"On [the item] " ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"On [the item] " ( a )' {kind: text}
                                                INVOCATION_LIST_NT'list the contents of the item , as a sentence , including co' {indent: 3}
                                                    INVOCATION_NT'list the contents of the item' {phrase invoked: call} {phrase options invoked: as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                CODE_BLOCK_NT'say ".[paragraph break]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"."' {suppress_newlines}
                                                        INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"."' {kind: text}
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                        RULE_NT'for printing a locale paragraph about a thing ( called the i' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the item is mentioned and the item is not undescribed and' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the item is mentioned and the item is not undescribed and' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'item is mentioned and the item is not undescribed and the it' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'item is mentioned and the item is not undescribed and the it'
                                                    TEST_PROPOSITION_NT'item is mentioned' {proposition: << mentioned('item') >>} {term: 'item'}
                                                    LOGICAL_AND_NT
                                                        TEST_PROPOSITION_NT'the item is not undescribed' {proposition: << NOT< undescribed('the item') NOT> >>} {term: 'the item'}
                                                        LOGICAL_AND_NT
                                                            TEST_PROPOSITION_NT'the item is not scenery' {proposition: << NOT< scenery('the item') NOT> >>} {term: 'the item'}
                                                            TEST_PROPOSITION_NT'the item does not enclose the player' {proposition: << NOT< encloses('the item', 'the player') NOT> >>} {term: 'the item'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if a locale-supportable thing is on the item' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if a locale-supportable thing is on the item' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'a locale-supportable thing is on the item' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'a locale-supportable thing is on the item' {proposition: << Exists x : kind=thing(x) ^ locale-supportable(x) ^ ('the item' == <SupporterOf(*1) : x>) >>} {term: x}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'set pronouns from the item' {indent: 3}
                                                    INVOCATION_NT'set pronouns from the item' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                CODE_BLOCK_NT {control structure: RPT}
                                                    INVOCATION_LIST_NT'repeat with possibility running through things on the item' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'repeat with possibility running through things on the item' {phrase invoked: call} {kind variable declarations: K=thing}
                                                            NEW_LOCAL_CONTEXT_NT'possibility' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                                UNKNOWN_NT'possibility'
                                                            RVALUE_CONTEXT_NT'things on the item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                CONSTANT_NT'things on the item' {kind: description of things} {proposition: << kind=thing(x) ^ (const_0 == <SupporterOf(*1) : x>) >>}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the possibility is marked for listing' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the possibility is mentioned' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the possibility is mentioned' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'possibility is mentioned' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'possibility is mentioned' {proposition: << mentioned('possibility') >>} {term: 'possibility'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is not marked for listing' {indent: 5} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1' {indent: 3}
                                                    INVOCATION_NT'increase the locale paragraph count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'locale paragraph count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count' {nonlocal: 'locale paragraph count'(var)number}{meaning: {locale paragraph count = VARIABLE_MC}}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                CODE_BLOCK_NT'say "On [the item] " ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                        INVOCATION_NT'"On [the item] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"On [the item] " ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"On [the item] " ( a )' {kind: text}
                                                INVOCATION_LIST_NT'list the contents of the item , as a sentence , including co' {indent: 3}
                                                    INVOCATION_NT'list the contents of the item' {phrase invoked: call} {phrase options invoked: as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only}
                                                        RVALUE_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'item' {local: LV"item"-thing thing}
                                                CODE_BLOCK_NT'say ".[paragraph break]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"."' {suppress_newlines}
                                                        INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"."' {kind: text}
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                    INVOCATION_NT'continue the activity' {phrase invoked: call}
                HEADING_NT'part five - actions' {heading 3} {under: H3'part five - actions'} {unit: 2}
                    HEADING_NT'section 1 - verbs needed for adaptive text' {heading 5} {under: H5'section 1 - verbs needed for adaptive text'} {unit: 2}
                        SENTENCE_NT'to achieve is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to achieve'
                        SENTENCE_NT'to appreciate is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to appreciate'
                        SENTENCE_NT'to arrive is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to arrive'
                        SENTENCE_NT'to care is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to care'
                        SENTENCE_NT'to close is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to close'
                        SENTENCE_NT'to die is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to die'
                        SENTENCE_NT'to discover is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to discover'
                        SENTENCE_NT'to drop is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to drop'
                        SENTENCE_NT'to eat is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to eat'
                        SENTENCE_NT'to feel is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to feel'
                        SENTENCE_NT'to find is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to find'
                        SENTENCE_NT'to get is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to get'
                        SENTENCE_NT'to give is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to give'
                        SENTENCE_NT'to go is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to go'
                        SENTENCE_NT'to happen is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to happen'
                        SENTENCE_NT'to hear is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to hear'
                        SENTENCE_NT'to jump is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to jump'
                        SENTENCE_NT'to lack is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to lack'
                        SENTENCE_NT'to lead is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to lead'
                        SENTENCE_NT'to like is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to like'
                        SENTENCE_NT'to listen is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to listen'
                        SENTENCE_NT'to lock is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to lock'
                        SENTENCE_NT'to look is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to look'
                        SENTENCE_NT'to need is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to need'
                        SENTENCE_NT'to open is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to open'
                        SENTENCE_NT'to pass is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to pass'
                        SENTENCE_NT'to pick is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to pick'
                        SENTENCE_NT'to provoke is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to provoke'
                        SENTENCE_NT'to pull is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to pull'
                        SENTENCE_NT'to push is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to push'
                        SENTENCE_NT'to put is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to put'
                        SENTENCE_NT'to rub is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to rub'
                        SENTENCE_NT'to say is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to say'
                        SENTENCE_NT'to search is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to search'
                        SENTENCE_NT'to see is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to see'
                        SENTENCE_NT'to seem is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to seem'
                        SENTENCE_NT'to set is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to set'
                        SENTENCE_NT'to smell is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to smell'
                        SENTENCE_NT'to sniff is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to sniff'
                        SENTENCE_NT'to squeeze is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to squeeze'
                        SENTENCE_NT'to switch is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to switch'
                        SENTENCE_NT'to take is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to take'
                        SENTENCE_NT'to talk is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to talk'
                        SENTENCE_NT'to taste is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to taste'
                        SENTENCE_NT'to touch is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to touch'
                        SENTENCE_NT'to turn is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to turn'
                        SENTENCE_NT'to wait is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to wait'
                        SENTENCE_NT'to wave is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to wave'
                        SENTENCE_NT'to win is a verb' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                            UNPARSED_NOUN_NT'to win'
                    HEADING_NT'section 2 - standard actions concerning the actor's possessi' {heading 5} {under: H5'section 2 - standard actions concerning the actor's possessions'} {unit: 2}
                        SENTENCE_NT'taking inventory is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'taking inventory'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the taking inventory action translates into inter as Inv' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'taking inventory action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Inv'
                        SENTENCE_NT'the specification of the taking inventory action is Taking a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the taking inventory action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'taking inventory action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'taking inventory action' {kind: action name} {action name: taking inventory}{meaning: {taking inventory action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Taking an inventory of
                            one's immediate possessions: the thin' {refined} {eval: CONSTANT_NT'Taking an inventory of
                            one's immediate possessions: the thin' {kind: text}}
                        RULE_NT'carry out taking inventory ( this is the print empty invento' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the first thing held by the player is nothing' {colon_block_command}
                                        INVOCATION_NT'if the first thing held by the player is nothing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'first thing held by the player is nothing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'first thing held by the player is nothing' {proposition: << ('first thing held by the player' == 'nothing') >>} {term: 'first thing held by the player'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [are] carrying nothing." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [are] carrying nothing." ( a )'
                                                INVOCATION_NT'"[We] [are] carrying nothing." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [are] carrying nothing." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [are] carrying nothing." ( a )' {kind: text}
                                        CODE_BLOCK_NT {control structure: INS}
                        RULE_NT'carry out taking inventory ( this is the print standard inve' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[We] [are] carrying:[line break]" ( a )' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"[We] [are] carrying:[line break]" ( a )'
                                        INVOCATION_NT'"[We] [are] carrying:[line break]" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"[We] [are] carrying:[line break]" ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"[We] [are] carrying:[line break]" ( a )' {kind: text}
                                INVOCATION_LIST_NT'list the contents of the player , with newlines , indented ,'
                                    INVOCATION_NT'list the contents of the player' {phrase invoked: call} {phrase options invoked: with newlines , indented , including contents , giving inventory information , with extra indentation}
                                        RVALUE_CONTEXT_NT'player' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'player' {nonlocal: 'player'(var)person}{meaning: {player = VARIABLE_MC}}
                        RULE_NT'report an actor taking inventory ( this is the report other ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the player and the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the player and the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the player and the action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'actor is not the player and the action is not silent'
                                                    TEST_PROPOSITION_NT'actor is not the player' {proposition: << NOT< ('actor' == 'the player') NOT> >>} {term: 'actor'}
                                                    TEST_VALUE_NT'the action is not silent'
                                                        PHRASE_TO_DECIDE_VALUE_NT'the action is not silent'
                                                            INVOCATION_LIST_NT'the action is not silent'
                                                                INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] through [their] possessions." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] through [their] possessions." ( a )'
                                                INVOCATION_NT'"[The actor] [look] through [their] possessions." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] through [their] possessions." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [look] through [their] possessions." ( a )' {kind: text}
                        SENTENCE_NT'taking is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'taking'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the taking action translates into inter as Take' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'taking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Take'
                        SENTENCE_NT'the specification of the taking action is The taking action ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the taking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'taking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'taking action' {kind: action name} {action name: taking}{meaning: {taking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The taking action is the only way
                            an action in the Standard ' {refined} {eval: CONSTANT_NT'The taking action is the only way
                            an action in the Standard ' {kind: text}}
                        RULE_NT'check an actor taking ( this is the can't take yourself rule' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the noun' {proposition: << ('actor' == 'the noun') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] always self-possessed." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] always self-possessed." ( a )'
                                                        INVOCATION_NT'"[We] [are] always self-possessed." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [are] always self-possessed." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [are] always self-possessed." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take other people ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "I don't suppose [the noun] [would care] for that." ( a ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"I don't suppose [the noun] [would care] for that." ( a )'
                                                        INVOCATION_NT'"I don't suppose [the noun] [would care] for that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"I don't suppose [the noun] [would care] for that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"I don't suppose [the noun] [would care] for that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take component par' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is part of something ( called the whole )' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is part of something ( called the whole )' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is part of something ( called the whole )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is part of something ( called the whole )' {proposition: << kind=thing_c(<(*1.component_parent) : 'noun'>) ^ called='whole':thing(<(*1.component_parent) : 'noun'>) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to be a part of [the' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to be a part of [the who'
                                                        INVOCATION_NT'"[regarding the noun][Those] [seem] to be a part of [the who' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to be a part of [the who' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][Those] [seem] to be a part of [the who' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take people's poss' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor wi' {indent: 1}
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor wi' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the owner be the not-counting-parts holder of the noun' {indent: 1}
                                    INVOCATION_NT'let the owner be the not-counting-parts holder of the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'owner' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'owner'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the noun'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the noun'
                                                    INVOCATION_NT'not-counting-parts holder of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: WHI}
                                    INVOCATION_LIST_NT'while the owner is not nothing and the owner is not the loca' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'while the owner is not nothing and the owner is not the loca' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'owner is not nothing and the owner is not the local ceiling' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'owner is not nothing and the owner is not the local ceiling'
                                                    TEST_PROPOSITION_NT'owner is not nothing' {proposition: << NOT< ('owner' == 'nothing') NOT> >>} {term: 'owner'}
                                                    TEST_PROPOSITION_NT'the owner is not the local ceiling' {proposition: << NOT< ('the owner' == 'the local ceiling') NOT> >>} {term: 'the owner'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the owner is a person' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the owner is a person' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'owner is a person' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'owner is a person' {proposition: << kind=person('owner') >>} {term: 'owner'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to belong to [the ow' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to belong to [the owner]'
                                                                INVOCATION_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                                        INVOCATION_LIST_NT'let the owner be the not-counting-parts holder of the owner' {indent: 2}
                                            INVOCATION_NT'let the owner be the not-counting-parts holder of the owner' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'owner' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'owner' {local: LV"owner"-object object}
                                                RVALUE_CONTEXT_NT'not-counting-parts holder of the owner' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the owner'
                                                        INVOCATION_LIST_NT'not-counting-parts holder of the owner'
                                                            INVOCATION_NT'not-counting-parts holder of the owner' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'owner' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'owner' {local: LV"owner"-object object}
                        RULE_NT'check an actor taking ( this is the can't take items out of ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let h be the noun' {indent: 1}
                                    INVOCATION_NT'let h be the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'h' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'h'
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: WHI}
                                    INVOCATION_LIST_NT'while h is not nothing and h is not a room' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'while h is not nothing and h is not a room' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'h is not nothing and h is not a room' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'h is not nothing and h is not a room'
                                                    TEST_PROPOSITION_NT'h is not nothing' {proposition: << NOT< ('h' == 'nothing') NOT> >>} {term: 'h'}
                                                    TEST_PROPOSITION_NT'h is not a room' {proposition: << NOT< kind=room('h') NOT> >>} {term: 'h'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let h be the not-counting-parts holder of h' {indent: 2}
                                            INVOCATION_NT'let h be the not-counting-parts holder of h' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'h' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'h' {local: LV"h"-object object}
                                                RVALUE_CONTEXT_NT'not-counting-parts holder of h' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of h'
                                                        INVOCATION_LIST_NT'not-counting-parts holder of h'
                                                            INVOCATION_NT'not-counting-parts holder of h' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'h' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'h' {local: LV"h"-object object}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if h is nothing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if h is nothing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'h is nothing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'h is nothing' {proposition: << ('h' == 'nothing') >>} {term: 'h'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [aren't] available." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][Those] [aren't] available." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [aren't] available." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][Those] [aren't] available." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take what you're i' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor wi' {indent: 1}
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor wi' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the local ceiling is the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the local ceiling is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'local ceiling is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'local ceiling is the noun' {proposition: << ('local ceiling' == 'the noun') >>} {term: 'local ceiling'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [would have] to get
                                                [if noun is a supporter]off[ot' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get
                                                    [if noun is a supporter]off[otherw'
                                                        INVOCATION_NT'"[We] [would have] to get
                                                        [if noun is a supporter]off[otherw' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get
                                                            [if noun is a supporter]off[otherw' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [would have] to get
                                                                [if noun is a supporter]off[otherw' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take what's alread' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun or the actor is wearing th' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is carrying the noun or the actor is wearing th' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun or the actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'actor is carrying the noun or the actor is wearing the noun'
                                                    TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                                    TEST_PROPOSITION_NT'the actor is wearing the noun' {proposition: << ('the actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'the actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] already [have] [regarding the noun][those]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] already [have] [regarding the noun][those]." ( a )'
                                                        INVOCATION_NT'"[We] already [have] [regarding the noun][those]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] already [have] [regarding the noun][those]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] already [have] [regarding the noun][those]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take scenery rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is scenery' {proposition: << scenery('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] hardly portable." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] hardly portable." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] hardly portable." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] hardly portable." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] hardly portable." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can only take things rul' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not a thing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not a thing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not a thing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not a thing' {proposition: << NOT< kind=thing('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [cannot] carry [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [cannot] carry [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [cannot] carry [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [cannot] carry [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [cannot] carry [the noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't take what's fixed ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is fixed in place' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is fixed in place' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is fixed in place' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is fixed in place' {proposition: << fixed in place('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] fixed in place." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] fixed in place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] fixed in place." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] fixed in place." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the use player's holdall to ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the number of things carried by the actor is at least the' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carryi' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carryi' {proposition: << at-least('number of things carried by the actor', 'the carrying capacity of the actor') >>} {term: 'number of things carried by the actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is holding a player's holdall ( called the curr' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is holding a player's holdall ( called the curr' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is holding a player's holdall ( called the current wor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is holding a player's holdall ( called the current wor' {proposition: << Exists x : kind=player's holdall(x) ^ called='current working sack':player's holdall(x) ^ ('actor' == <HolderOf(*1) : x>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the transferred item be nothing' {indent: 3}
                                                    INVOCATION_NT'let the transferred item be nothing' {phrase invoked: call}
                                                        NEW_LOCAL_CONTEXT_NT'transferred item' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                            UNKNOWN_NT'transferred item'
                                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                                CODE_BLOCK_NT {control structure: RPT}
                                                    INVOCATION_LIST_NT'repeat with the possible item running through things carried' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'repeat with the possible item running through things carried' {phrase invoked: call} {kind variable declarations: K=thing}
                                                            NEW_LOCAL_CONTEXT_NT'possible item' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                                UNKNOWN_NT'possible item'
                                                            RVALUE_CONTEXT_NT'things carried by the actor' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                CONSTANT_NT'things carried by the actor' {kind: description of things} {proposition: << kind=thing(x) ^ ('the actor' == <CarrierOf(*1) : x>) >>}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the possible item is not lit and the possible item is not' {indent: 4} {colon_block_command}
                                                                INVOCATION_NT'if the possible item is not lit and the possible item is not' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'possible item is not lit and the possible item is not the cu' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        LOGICAL_AND_NT'possible item is not lit and the possible item is not the cu'
                                                                            TEST_PROPOSITION_NT'possible item is not lit' {proposition: << NOT< lit('possible item') NOT> >>} {term: 'possible item'}
                                                                            TEST_PROPOSITION_NT'the possible item is not the current working sack' {proposition: << NOT< ('the possible item' == 'the current working sack') NOT> >>} {term: 'the possible item'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'let the transferred item be the possible item' {results_from_splitting} {indent: 5}
                                                                    INVOCATION_NT'let the transferred item be the possible item' {phrase invoked: call}
                                                                        LVALUE_LOCAL_CONTEXT_NT'transferred item' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                                            LOCAL_VARIABLE_NT'transferred item' {local: LV<unallocated> object}
                                                                        RVALUE_CONTEXT_NT'possible item' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                            LOCAL_VARIABLE_NT'possible item' {local: LV<unallocated> thing}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the transferred item is not nothing' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the transferred item is not nothing' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'transferred item is not nothing' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'transferred item is not nothing' {proposition: << NOT< ('transferred item' == 'nothing') NOT> >>} {term: 'transferred item'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "(putting [the transferred item] into [the current worki' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"(putting [the transferred item] into [the current working s'
                                                                        INVOCATION_NT'"(putting [the transferred item] into [the current working s' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"(putting [the transferred item] into [the current working s' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"(putting [the transferred item] into [the current working s' {kind: text}
                                                        INVOCATION_LIST_NT'silently try the actor trying inserting the transferred item' {indent: 4}
                                                            INVOCATION_NT'silently try the actor trying inserting the transferred item' {phrase invoked: call}
                                                                RVALUE_CONTEXT_NT'actor trying inserting the transferred item into the current' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                                    CONSTANT_NT'actor trying inserting the transferred item into the current' {kind: action} {action pattern: <action: inserting it into /  noun: LOCAL_VARIABLE_NT'the transferred item' {local: LV<unallocated> object} second: LOCAL_VARIABLE_NT'the current working sack' {local: LV"current working sack"-player's holdall player's holdall}>}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the transferred item is not in the current working sack' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the transferred item is not in the current working sack' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'transferred item is not in the current working sack' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'transferred item is not in the current working sack' {proposition: << NOT< ('the current working sack' == <ContainerOf(*1) : 'transferred item'>) NOT> >>} {term: 'transferred item'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'stop the action' {indent: 5}
                                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking ( this is the can't exceed carrying ca' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the number of things carried by the actor is at least the' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carryi' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carryi' {proposition: << at-least('number of things carried by the actor', 'the carrying capacity of the actor') >>} {term: 'number of things carried by the actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] carrying too many things already." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] carrying too many things already." ( a )'
                                                        INVOCATION_NT'"[We]['re] carrying too many things already." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We]['re] carrying too many things already." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We]['re] carrying too many things already." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor taking ( this is the standard taking rule' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor carries the noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the actor carries the noun'
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the noun is handled' {results_from_splitting} {indent: 1} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the noun is handled'
                        RULE_NT'report an actor taking ( this is the standard report taking ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Taken." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Taken." ( a )'
                                                        INVOCATION_NT'"Taken." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Taken." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Taken." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [pick] up [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [pick] up [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [pick] up [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [pick] up [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [pick] up [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'removing it from is an action applying to two things' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'removing it from'
                            UNPARSED_NOUN_NT'applying to two things'
                        SENTENCE_NT'the removing it from action translates into inter as Remove' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'removing it from action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Remove'
                        SENTENCE_NT'the specification of the removing it from action is Removing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the removing it from action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'removing it from action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'removing it from action' {kind: action name} {action name: removing it from}{meaning: {removing it from action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Removing is not really
                            an action in its own right. Whereas t' {refined} {eval: CONSTANT_NT'Removing is not really
                            an action in its own right. Whereas t' {kind: text}}
                        RULE_NT'check an actor removing something from ( this is the can't r' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the noun is not the second noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the holder of the noun is not the second noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the noun is not the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the noun is not the second noun' {proposition: << NOT< ('holder of the noun' == 'the second noun') NOT> >>} {term: 'holder of the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [regarding the noun][they] [aren't] there now." ( a' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"But [regarding the noun][they] [aren't] there now." ( a )'
                                                        INVOCATION_NT'"But [regarding the noun][they] [aren't] there now." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"But [regarding the noun][they] [aren't] there now." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"But [regarding the noun][they] [aren't] there now." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor removing something from ( this is the can't r' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the owner be the holder of the noun' {indent: 1}
                                    INVOCATION_NT'let the owner be the holder of the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'owner' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'owner'
                                        RVALUE_CONTEXT_NT'holder of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the noun'
                                                INVOCATION_LIST_NT'holder of the noun'
                                                    INVOCATION_NT'holder of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the owner is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the owner is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'owner is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'owner is a person' {proposition: << kind=person('owner') >>} {term: 'owner'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the owner is the actor' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the owner is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'owner is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'owner is the actor' {proposition: << ('owner' == 'the actor') >>} {term: 'owner'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'convert to the taking off action on the noun' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'convert to the taking off action on the noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'taking off action' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                            CONSTANT_NT'taking off action' {kind: action name} {action name: taking off}{meaning: {taking off action = MISCELLANEOUS_MC}}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to belong to [the ow' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to belong to [the owner]'
                                                        INVOCATION_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor removing something from ( this is the convert' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to the taking action on the noun'
                                    INVOCATION_NT'convert to the taking action on the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'taking action' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                            CONSTANT_NT'taking action' {kind: action name} {action name: taking}{meaning: {taking action = MISCELLANEOUS_MC}}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        SENTENCE_NT'the can't take component parts rule is listed before the can' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the can't take component parts rule'
                            UNPARSED_NOUN_NT'before the can't remove what's not inside rule in the check '
                        SENTENCE_NT'dropping is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'dropping'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the dropping action translates into inter as Drop' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'dropping action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Drop'
                        SENTENCE_NT'the specification of the dropping action is Dropping is one ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the dropping action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'dropping action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'dropping action' {kind: action name} {action name: dropping}{meaning: {dropping action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Dropping is one of five actions
                            by which an actor can get ri' {refined} {eval: CONSTANT_NT'Dropping is one of five actions
                            by which an actor can get ri' {kind: text}}
                        RULE_NT'check an actor dropping ( this is the can't drop yourself ru' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is the actor' {proposition: << ('noun' == 'the actor') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [lack] the dexterity." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [lack] the dexterity." ( a )'
                                                        INVOCATION_NT'"[We] [lack] the dexterity." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [lack] the dexterity." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [lack] the dexterity." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor dropping something which is part of the actor' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [can't drop] part of [ourselves]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [can't drop] part of [ourselves]." ( a )'
                                                INVOCATION_NT'"[We] [can't drop] part of [ourselves]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [can't drop] part of [ourselves]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [can't drop] part of [ourselves]." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor dropping ( this is the can't drop what's alre' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is in the holder of the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is in the holder of the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is in the holder of the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is in the holder of the actor' {proposition: << ('the holder of the actor' == <ContainerOf(*1) : 'noun'>) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [are] already here." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] already here." ( a )'
                                                        INVOCATION_NT'"[The noun] [are] already here." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [are] already here." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [are] already here." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor dropping ( this is the can't drop what's not ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is carrying the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [haven't] got [regarding the noun][those]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [haven't] got [regarding the noun][those]." ( a )'
                                                INVOCATION_NT'"[We] [haven't] got [regarding the noun][those]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [haven't] got [regarding the noun][those]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [haven't] got [regarding the noun][those]." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor dropping ( this is the can't drop clothes bei' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification bre' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]"'
                                                        INVOCATION_NT'"(first taking [the noun] off)[command clarification break]"' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]"' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"(first taking [the noun] off)[command clarification break]"' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor dropping ( this is the can't drop if this exc' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the receptacle be the holder of the actor' {indent: 1}
                                    INVOCATION_NT'let the receptacle be the holder of the actor' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'receptacle' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'receptacle'
                                        RVALUE_CONTEXT_NT'holder of the actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                INVOCATION_LIST_NT'holder of the actor'
                                                    INVOCATION_NT'holder of the actor' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the receptacle is a room' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the receptacle is a room' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'receptacle is a room' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'receptacle is a room' {proposition: << kind=room('receptacle') >>} {term: 'receptacle'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the receptacle provides the property carrying capacity' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the receptacle provides the property carrying capacity' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'receptacle provides the property carrying capacity' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'receptacle provides the property carrying capacity' {proposition: << provides('receptacle', 'the property carrying capacity') >>} {term: 'receptacle'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the receptacle is a supporter' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the receptacle is a supporter' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'receptacle is a supporter' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'receptacle is a supporter' {proposition: << kind=supporter('receptacle') >>} {term: 'receptacle'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the number of things on the receptacle is at least the ca' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the number of things on the receptacle is at least the ca' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'number of things on the receptacle is at least the carrying ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'number of things on the receptacle is at least the carrying ' {proposition: << at-least('number of things on the receptacle', 'the carrying capacity of the receptacle') >>} {term: 'number of things on the receptacle'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 5} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                CODE_BLOCK_NT'say "[There] [are] no more room on [the receptacle]." ( a )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the receptacle]." ( a )'
                                                                        INVOCATION_NT'"[There] [are] no more room on [the receptacle]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[There] [are] no more room on [the receptacle]." ( a )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[There] [are] no more room on [the receptacle]." ( a )' {kind: text}
                                                        INVOCATION_LIST_NT'stop the action' {indent: 4}
                                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the receptacle is a container' {colon_block_command} {indent: 2}
                                                        INVOCATION_NT'if the receptacle is a container' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'receptacle is a container' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'receptacle is a container' {proposition: << kind=container('receptacle') >>} {term: 'receptacle'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the number of things in the receptacle is at least the ca' {colon_block_command} {indent: 3}
                                                                INVOCATION_NT'if the number of things in the receptacle is at least the ca' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'number of things in the receptacle is at least the carrying ' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'number of things in the receptacle is at least the carrying ' {proposition: << at-least('number of things in the receptacle', 'the carrying capacity of the receptacle') >>} {term: 'number of things in the receptacle'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 4}
                                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 5} {control structure: NOW}
                                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the receptacle]." ( b )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the receptacle]." ( b )'
                                                                                INVOCATION_NT'"[There] [are] no more room in [the receptacle]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the receptacle]." ( b )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[There] [are] no more room in [the receptacle]." ( b )' {kind: text}
                                                                INVOCATION_LIST_NT'stop the action' {indent: 4}
                                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor dropping ( this is the standard dropping ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is in the holder of the actor' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is in the holder of the actor'
                        RULE_NT'report an actor dropping ( this is the standard report dropp' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Dropped." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Dropped." ( a )'
                                                        INVOCATION_NT'"Dropped." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Dropped." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Dropped." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [put] down [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [put] down [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [put] down [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [put] down [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [put] down [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'putting it on is an action applying to two things' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'putting it on'
                            UNPARSED_NOUN_NT'applying to two things'
                        SENTENCE_NT'the putting it on action translates into inter as PutOn' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'putting it on action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PutOn'
                        SENTENCE_NT'the specification of the putting it on action is By this act' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the putting it on action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'putting it on action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'putting it on action' {kind: action name} {action name: putting it on}{meaning: {putting it on action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'By this action, an actor puts
                            something he is holding on top' {refined} {eval: CONSTANT_NT'By this action, an actor puts
                            something he is holding on top' {kind: text}}
                        RULE_NT'check an actor putting something on ( this is the convert pu' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is down or the actor is on the second nou' {colon_block_command}
                                        INVOCATION_NT'if the second noun is down or the actor is on the second nou' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is down or the actor is on the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'second noun is down or the actor is on the second noun'
                                                    TEST_PROPOSITION_NT'second noun is down' {proposition: << ('second noun' == 'down') >>} {term: 'second noun'}
                                                    TEST_PROPOSITION_NT'the actor is on the second noun' {proposition: << ('the second noun' == <SupporterOf(*1) : 'the actor'>) >>} {term: 'the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the dropping action on the noun' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'convert to the dropping action on the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'dropping action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'dropping action' {kind: action name} {action name: dropping}{meaning: {dropping action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'check an actor putting something on ( this is the can't put ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is carrying the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                    INVOCATION_NT'carry out the implicitly taking activity with the noun' {phrase invoked: call} {kind variable declarations: K=object}
                                        RVALUE_CONTEXT_NT'implicitly taking' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                            CONSTANT_NT'implicitly taking' {kind: activity on objects} {activity: implicitly taking}{meaning: {implicitly taking = ACTIVITY_MC}}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is carrying the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor putting something on ( this is the can't put ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the noun-cpc be the component parts core of the noun' {indent: 1}
                                    INVOCATION_NT'let the noun-cpc be the component parts core of the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'noun-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'noun-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the noun'
                                                INVOCATION_LIST_NT'component parts core of the noun'
                                                    INVOCATION_NT'component parts core of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the second-cpc be the component parts core of the second' {indent: 1}
                                    INVOCATION_NT'let the second-cpc be the component parts core of the second' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'second-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'second-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the second noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the second noun'
                                                INVOCATION_LIST_NT'component parts core of the second noun'
                                                    INVOCATION_NT'component parts core of the second noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the transfer ceiling be the common ancestor of the noun-' {indent: 1}
                                    INVOCATION_NT'let the transfer ceiling be the common ancestor of the noun-' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'transfer ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'transfer ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the noun-cpc with the second-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the noun-cpc with the second-cpc'
                                                INVOCATION_LIST_NT'common ancestor of the noun-cpc with the second-cpc'
                                                    INVOCATION_NT'common ancestor of the noun-cpc with the second-cpc' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun-cpc' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'noun-cpc' {local: LV"noun-cpc"-object object}
                                                        RVALUE_CONTEXT_NT'second-cpc' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'second-cpc' {local: LV"second-cpc"-object object}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the transfer ceiling is the noun-cpc' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the transfer ceiling is the noun-cpc' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'transfer ceiling is the noun-cpc' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'transfer ceiling is the noun-cpc' {proposition: << ('transfer ceiling' == 'the noun-cpc') >>} {term: 'transfer ceiling'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't put] something on top of itself." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't put] something on top of itself." ( a )'
                                                        INVOCATION_NT'"[We] [can't put] something on top of itself." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't put] something on top of itself." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't put] something on top of itself." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor putting something on ( this is the can't put ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a supporter' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not a supporter' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a supporter' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a supporter' {proposition: << NOT< kind=supporter('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Putting things on [the second noun] [would achieve] not' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Putting things on [the second noun] [would achieve] nothing'
                                                        INVOCATION_NT'"Putting things on [the second noun] [would achieve] nothing' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Putting things on [the second noun] [would achieve] nothing' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Putting things on [the second noun] [would achieve] nothing' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor putting something on ( this is the can't put ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [regarding the noun][them] off)[command c' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"(first taking [regarding the noun][them] off)[command clari'
                                                        INVOCATION_NT'"(first taking [regarding the noun][them] off)[command clari' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"(first taking [regarding the noun][them] off)[command clari' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"(first taking [regarding the noun][them] off)[command clari' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor putting something on ( this is the can't put ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun provides the property carrying capacity' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun provides the property carrying capacity' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun provides the property carrying capacity' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun provides the property carrying capacity' {proposition: << provides('second noun', 'the property carrying capacity') >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the number of things on the second noun is at least the c' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the number of things on the second noun is at least the c' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'number of things on the second noun is at least the carrying' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'number of things on the second noun is at least the carrying' {proposition: << at-least('number of things on the second noun', 'the carrying capacity of the second noun') >>} {term: 'number of things on the second noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[There] [are] no more room on [the second noun]." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the second noun]." ( a )'
                                                                INVOCATION_NT'"[There] [are] no more room on [the second noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room on [the second noun]." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[There] [are] no more room on [the second noun]." ( a )' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor putting something on ( this is the standa' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is on the second noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is on the second noun'
                        RULE_NT'report an actor putting something on ( this is the concise r' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player and the i6 parser is running mult' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player and the i6 parser is running mult' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player and the i6 parser is running multiple ac' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'actor is the player and the i6 parser is running multiple ac'
                                                            TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                            TEST_VALUE_NT'the i6 parser is running multiple actions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the i6 parser is running multiple actions'
                                                                    INVOCATION_LIST_NT'the i6 parser is running multiple actions'
                                                                        INVOCATION_NT'i6 parser is running multiple actions' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Done." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Done." ( a )'
                                                        INVOCATION_NT'"Done." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Done." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Done." ( a )' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor putting something on ( this is the standard ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [put] [the noun] on [the second noun]." ( a' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )' {kind: text}
                        SENTENCE_NT'inserting it into is an action applying to two things' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'inserting it into'
                            UNPARSED_NOUN_NT'applying to two things'
                        SENTENCE_NT'the inserting it into action translates into inter as Insert' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'inserting it into action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Insert'
                        SENTENCE_NT'the specification of the inserting it into action is By this' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the inserting it into action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'inserting it into action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'inserting it into action' {kind: action name} {action name: inserting it into}{meaning: {inserting it into action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'By this action, an actor puts
                            something he is holding into a' {refined} {eval: CONSTANT_NT'By this action, an actor puts
                            something he is holding into a' {kind: text}}
                        RULE_NT'check an actor inserting something into ( this is the conver' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is down or the actor is in the second nou' {colon_block_command}
                                        INVOCATION_NT'if the second noun is down or the actor is in the second nou' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is down or the actor is in the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'second noun is down or the actor is in the second noun'
                                                    TEST_PROPOSITION_NT'second noun is down' {proposition: << ('second noun' == 'down') >>} {term: 'second noun'}
                                                    TEST_PROPOSITION_NT'the actor is in the second noun' {proposition: << ('the second noun' == <ContainerOf(*1) : 'the actor'>) >>} {term: 'the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the dropping action on the noun' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'convert to the dropping action on the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'dropping action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'dropping action' {kind: action name} {action name: dropping}{meaning: {dropping action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is carrying the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                    INVOCATION_NT'carry out the implicitly taking activity with the noun' {phrase invoked: call} {kind variable declarations: K=object}
                                        RVALUE_CONTEXT_NT'implicitly taking' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                            CONSTANT_NT'implicitly taking' {kind: activity on objects} {activity: implicitly taking}{meaning: {implicitly taking = ACTIVITY_MC}}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carrying the noun' {colon_block_command}
                                        INVOCATION_NT'if the actor is carrying the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carrying the noun' {proposition: << ('actor' == <CarrierOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the noun-cpc be the component parts core of the noun' {indent: 1}
                                    INVOCATION_NT'let the noun-cpc be the component parts core of the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'noun-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'noun-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the noun'
                                                INVOCATION_LIST_NT'component parts core of the noun'
                                                    INVOCATION_NT'component parts core of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the second-cpc be the component parts core of the second' {indent: 1}
                                    INVOCATION_NT'let the second-cpc be the component parts core of the second' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'second-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'second-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the second noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the second noun'
                                                INVOCATION_LIST_NT'component parts core of the second noun'
                                                    INVOCATION_NT'component parts core of the second noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'let the transfer ceiling be the common ancestor of the noun-' {indent: 1}
                                    INVOCATION_NT'let the transfer ceiling be the common ancestor of the noun-' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'transfer ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'transfer ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the noun-cpc with the second-cpc' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the noun-cpc with the second-cpc'
                                                INVOCATION_LIST_NT'common ancestor of the noun-cpc with the second-cpc'
                                                    INVOCATION_NT'common ancestor of the noun-cpc with the second-cpc' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun-cpc' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'noun-cpc' {local: LV"noun-cpc"-object object}
                                                        RVALUE_CONTEXT_NT'second-cpc' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            LOCAL_VARIABLE_NT'second-cpc' {local: LV"second-cpc"-object object}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the transfer ceiling is the noun-cpc' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the transfer ceiling is the noun-cpc' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'transfer ceiling is the noun-cpc' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'transfer ceiling is the noun-cpc' {proposition: << ('transfer ceiling' == 'the noun-cpc') >>} {term: 'transfer ceiling'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't put] something inside itself." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't put] something inside itself." ( a )'
                                                        INVOCATION_NT'"[We] [can't put] something inside itself." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't put] something inside itself." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't put] something inside itself." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is a closed container' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is a closed container' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is a closed container' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is a closed container' {proposition: << kind=container('second noun') ^ closed('second noun') >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [are] closed." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [are] closed." ( a )'
                                                        INVOCATION_NT'"[The second noun] [are] closed." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The second noun] [are] closed." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The second noun] [are] closed." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a container' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not a container' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a container' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a container' {proposition: << NOT< kind=container('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [can't contain] thin' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [can't contain] things."'
                                                        INVOCATION_NT'"[regarding the second noun][Those] [can't contain] things."' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [can't contain] things."' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the second noun][Those] [can't contain] things."' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [regarding the noun][them] off)[command c' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"(first taking [regarding the noun][them] off)[command clari'
                                                        INVOCATION_NT'"(first taking [regarding the noun][them] off)[command clari' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"(first taking [regarding the noun][them] off)[command clari' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"(first taking [regarding the noun][them] off)[command clari' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor inserting something into ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun provides the property carrying capacity' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun provides the property carrying capacity' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun provides the property carrying capacity' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun provides the property carrying capacity' {proposition: << provides('second noun', 'the property carrying capacity') >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the number of things in the second noun is at least the c' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the number of things in the second noun is at least the c' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'number of things in the second noun is at least the carrying' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'number of things in the second noun is at least the carrying' {proposition: << at-least('number of things in the second noun', 'the carrying capacity of the second noun') >>} {term: 'number of things in the second noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the second noun]." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the second noun]." ( a )'
                                                                INVOCATION_NT'"[There] [are] no more room in [the second noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the second noun]." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[There] [are] no more room in [the second noun]." ( a )' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor inserting something into ( this is the st' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is in the second noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is in the second noun'
                        RULE_NT'report an actor inserting something into ( this is the conci' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player and the i6 parser is running mult' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player and the i6 parser is running mult' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player and the i6 parser is running multiple ac' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'actor is the player and the i6 parser is running multiple ac'
                                                            TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                            TEST_VALUE_NT'the i6 parser is running multiple actions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the i6 parser is running multiple actions'
                                                                    INVOCATION_LIST_NT'the i6 parser is running multiple actions'
                                                                        INVOCATION_NT'i6 parser is running multiple actions' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Done." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Done." ( a )'
                                                        INVOCATION_NT'"Done." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Done." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Done." ( a )' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor inserting something into ( this is the stand' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [put] [the noun] into [the second noun]." (' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )' {kind: text}
                        SENTENCE_NT'eating is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'eating'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the eating action translates into inter as Eat' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'eating action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Eat'
                        SENTENCE_NT'the specification of the eating action is Eating is the only' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the eating action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'eating action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'eating action' {kind: action name} {action name: eating}{meaning: {eating action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Eating is the only one of the
                            built-in actions which can, in' {refined} {eval: CONSTANT_NT'Eating is the only one of the
                            built-in actions which can, in' {kind: text}}
                        RULE_NT'check an actor eating ( this is the can't eat unless edible ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not a thing or the noun is not edible' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not a thing or the noun is not edible' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not a thing or the noun is not edible' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'noun is not a thing or the noun is not edible'
                                                    TEST_PROPOSITION_NT'noun is not a thing' {proposition: << NOT< kind=thing('noun') NOT> >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is not edible' {proposition: << NOT< edible('the noun') NOT> >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] plainly inedible." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] plainly inedible." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] plainly inedible." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] plainly inedible." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] plainly inedible." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor eating ( this is the can't eat clothing witho' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification bre' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]"'
                                                        INVOCATION_NT'"(first taking [the noun] off)[command clarification break]"' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]"' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"(first taking [the noun] off)[command clarification break]"' {kind: text}
                                        INVOCATION_LIST_NT'try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor eating ( this is the can't eat other people's' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is enclosed by a person ( called the owner ) who' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is enclosed by a person ( called the owner ) who' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is enclosed by a person ( called the owner ) who is not' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is enclosed by a person ( called the owner ) who is not' {proposition: << Exists x : kind=person(x) ^ called='owner':person(x) ^ NOT< (x == 'the actor') NOT> ^ encloses(x, 'noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The owner] [might not appreciate] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The owner] [might not appreciate] that." ( a )'
                                                        INVOCATION_NT'"[The owner] [might not appreciate] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The owner] [might not appreciate] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The owner] [might not appreciate] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor eating ( this is the can't eat portable food ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is portable and the actor is not carrying the no' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is portable and the actor is not carrying the no' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is portable and the actor is not carrying the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun is portable and the actor is not carrying the noun'
                                                    TEST_PROPOSITION_NT'noun is portable' {proposition: << portable('noun') >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the actor is not carrying the noun' {proposition: << NOT< ('the actor' == <CarrierOf(*1) : 'the noun'>) NOT> >>} {term: 'the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun' {indent: 2}
                                            INVOCATION_NT'carry out the implicitly taking activity with the noun' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'implicitly taking' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'implicitly taking' {kind: activity on objects} {activity: implicitly taking}{meaning: {implicitly taking = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is not carrying the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is not carrying the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is not carrying the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is not carrying the noun' {proposition: << NOT< ('actor' == <CarrierOf(*1) : 'the noun'>) NOT> >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor eating ( this is the standard eating rule' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is nowhere' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is nowhere'
                        RULE_NT'report an actor eating ( this is the standard report eating ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [eat] [the noun]. Not bad." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [eat] [the noun]. Not bad." ( a )'
                                                        INVOCATION_NT'"[We] [eat] [the noun]. Not bad." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [eat] [the noun]. Not bad." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [eat] [the noun]. Not bad." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [eat] [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [eat] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [eat] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [eat] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [eat] [the noun]." ( b )' {kind: text}
                    HEADING_NT'section 3 - standard actions which move the actor' {heading 5} {under: H5'section 3 - standard actions which move the actor'} {unit: 2}
                        SENTENCE_NT'going is an action applying to one visible thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'going'
                            UNPARSED_NOUN_NT'applying to one visible thing'
                        SENTENCE_NT'the going action translates into inter as Go' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Go'
                        SENTENCE_NT'the specification of the going action is This is the action ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the going action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'This is the action which allows people
                            to move from one room' {refined} {eval: CONSTANT_NT'This is the action which allows people
                            to move from one room' {kind: text}}
                        SENTENCE_NT'the going action has a room called the room gone from ( matc' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'room gone from ( matched as from )' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the going action has an object called the room gone to ( mat' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'room gone to ( matched as to )' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the going action has an object called the door gone through ' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'door gone through ( matched as through )' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the going action has an object called the vehicle gone by ( ' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'vehicle gone by ( matched as by )' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the going action has an object called the thing gone with ( ' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'going action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'thing gone with ( matched as with )' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'rule for setting action variables for going ( this is the st' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the thing gone with is the item-pushed-between-rooms' {indent: 1} {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the thing gone with is the item-pushed-between-rooms'
                                INVOCATION_LIST_NT'now the room gone from is the location of the actor' {indent: 1} {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the room gone from is the location of the actor'
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is in an enterable vehicle ( called the carriag' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is in an enterable vehicle ( called the carriag' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is in an enterable vehicle ( called the carriage )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is in an enterable vehicle ( called the carriage )' {proposition: << kind=vehicle(<ContainerOf(*1) : 'actor'>) ^ enterable(<ContainerOf(*1) : 'actor'>) ^ called='carriage':vehicle(<ContainerOf(*1) : 'actor'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the vehicle gone by is the carriage' {results_from_splitting} {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the vehicle gone by is the carriage'
                                INVOCATION_LIST_NT'let the target be nothing' {indent: 1}
                                    INVOCATION_NT'let the target be nothing' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a direction' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a direction' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a direction' {proposition: << kind=direction('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let direction d be the noun' {indent: 2}
                                            INVOCATION_NT'let direction d be the noun' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'direction d' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                    UNKNOWN_NT'direction d'
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        INVOCATION_LIST_NT'let the target be the room-or-door direction d from the room' {indent: 2}
                                            INVOCATION_NT'let the target be the room-or-door direction d from the room' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                RVALUE_CONTEXT_NT'room-or-door direction d from the room gone from' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'room-or-door direction d from the room gone from'
                                                        INVOCATION_LIST_NT'room-or-door direction d from the room gone from'
                                                            INVOCATION_NT'room-or-door direction d from the room gone from' {phrase invoked: call} {resulting: object} {unproven}
                                                                RVALUE_CONTEXT_NT'direction d' {token check to do: TEST_VALUE_NT'direction'} {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                                    LOCAL_VARIABLE_NT'direction d' {local: LV<unallocated> object}
                                                                RVALUE_CONTEXT_NT'room gone from' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                                    NONLOCAL_VARIABLE_NT'room gone from' {nonlocal: 'room gone from'(var)room}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is a door' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the noun is a door' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is a door' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is a door' {proposition: << kind=door('noun') >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the target be the noun' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'let the target be the noun' {phrase invoked: call}
                                                        LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the target is a door' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the target is a door' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'target is a door' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'target is a door' {proposition: << kind=door('target') >>} {term: 'target'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the door gone through is the target' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the door gone through is the target'
                                        INVOCATION_LIST_NT'now the target is the other side of the target from the room' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the target is the other side of the target from the room gon'
                                INVOCATION_LIST_NT'now the room gone to is the target' {indent: 1} {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the room gone to is the target'
                        RULE_NT'check an actor going when the actor is on a supporter ( call' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first getting off [the chaise])[command clarification ' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first getting off [the chaise])[command clarification brea'
                                                INVOCATION_NT'"(first getting off [the chaise])[command clarification brea' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first getting off [the chaise])[command clarification brea' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first getting off [the chaise])[command clarification brea' {kind: text}
                                INVOCATION_LIST_NT'silently try the actor exiting' {indent: 1}
                                    INVOCATION_NT'silently try the actor exiting' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'actor exiting' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'actor exiting' {kind: action} {action pattern: <action: exiting / >}
                        RULE_NT'check an actor going ( this is the can't travel in what's no' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let nonvehicle be the holder of the actor' {indent: 1}
                                    INVOCATION_NT'let nonvehicle be the holder of the actor' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'nonvehicle' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'nonvehicle'
                                        RVALUE_CONTEXT_NT'holder of the actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                INVOCATION_LIST_NT'holder of the actor'
                                                    INVOCATION_NT'holder of the actor' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if nonvehicle is the room gone from' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if nonvehicle is the room gone from' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'nonvehicle is the room gone from' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'nonvehicle is the room gone from' {proposition: << ('nonvehicle' == 'the room gone from') >>} {term: 'nonvehicle'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if nonvehicle is the vehicle gone by' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if nonvehicle is the vehicle gone by' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'nonvehicle is the vehicle gone by' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'nonvehicle is the vehicle gone by' {proposition: << ('nonvehicle' == 'the vehicle gone by') >>} {term: 'nonvehicle'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if nonvehicle is a supporter' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if nonvehicle is a supporter' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'nonvehicle is a supporter' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'nonvehicle is a supporter' {proposition: << kind=supporter('nonvehicle') >>} {term: 'nonvehicle'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [would have] to get off [the nonvehicle] first." (' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )'
                                                        INVOCATION_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[We] [would have] to get out of [the nonvehicle] first.' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get out of [the nonvehicle] first." ( '
                                                        INVOCATION_NT'"[We] [would have] to get out of [the nonvehicle] first." ( ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get out of [the nonvehicle] first." ( ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [would have] to get out of [the nonvehicle] first." ( ' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor going ( this is the can't go through undescri' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door gone through is not nothing and the door gone th' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the door gone through is not nothing and the door gone th' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door gone through is not nothing and the door gone through i' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'door gone through is not nothing and the door gone through i'
                                                    TEST_PROPOSITION_NT'door gone through is not nothing' {proposition: << NOT< ('door gone through' == 'nothing') NOT> >>} {term: 'door gone through'}
                                                    TEST_PROPOSITION_NT'the door gone through is undescribed' {proposition: << undescribed('the door gone through') >>} {term: 'the door gone through'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't go] that way." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't go] that way." ( a )'
                                                        INVOCATION_NT'"[We] [can't go] that way." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't go] that way." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't go] that way." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor going ( this is the can't go through closed d' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door gone through is not nothing and the door gone th' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the door gone through is not nothing and the door gone th' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door gone through is not nothing and the door gone through i' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'door gone through is not nothing and the door gone through i'
                                                    TEST_PROPOSITION_NT'door gone through is not nothing' {proposition: << NOT< ('door gone through' == 'nothing') NOT> >>} {term: 'door gone through'}
                                                    TEST_PROPOSITION_NT'the door gone through is closed' {proposition: << closed('the door gone through') >>} {term: 'the door gone through'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first opening [the door gone through])[command clarifi' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"(first opening [the door gone through])[command clarificati'
                                                        INVOCATION_NT'"(first opening [the door gone through])[command clarificati' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"(first opening [the door gone through])[command clarificati' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"(first opening [the door gone through])[command clarificati' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor opening the door gone through' {indent: 2}
                                            INVOCATION_NT'silently try the actor opening the door gone through' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor opening the door gone through' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor opening the door gone through' {kind: action} {action pattern: <action: opening /  noun: NONLOCAL_VARIABLE_NT'the door gone through' {nonlocal: 'door gone through'(var)object}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the door gone through is open' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the door gone through is open' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'door gone through is open' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'door gone through is open' {proposition: << open('door gone through') >>} {term: 'door gone through'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor going ( this is the determine map connection ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the target be nothing' {indent: 1}
                                    INVOCATION_NT'let the target be nothing' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'nothing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            CONSTANT_NT'nothing' {kind: object} {nothing}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a direction' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a direction' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a direction' {proposition: << kind=direction('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let direction d be the noun' {indent: 2}
                                            INVOCATION_NT'let direction d be the noun' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'direction d' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                    UNKNOWN_NT'direction d'
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        INVOCATION_LIST_NT'let the target be the room-or-door direction d from the room' {indent: 2}
                                            INVOCATION_NT'let the target be the room-or-door direction d from the room' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                RVALUE_CONTEXT_NT'room-or-door direction d from the room gone from' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'room-or-door direction d from the room gone from'
                                                        INVOCATION_LIST_NT'room-or-door direction d from the room gone from'
                                                            INVOCATION_NT'room-or-door direction d from the room gone from' {phrase invoked: call} {resulting: object} {unproven}
                                                                RVALUE_CONTEXT_NT'direction d' {token check to do: TEST_VALUE_NT'direction'} {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                                    LOCAL_VARIABLE_NT'direction d' {local: LV<unallocated> object}
                                                                RVALUE_CONTEXT_NT'room gone from' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                                    NONLOCAL_VARIABLE_NT'room gone from' {nonlocal: 'room gone from'(var)room}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is a door' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the noun is a door' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is a door' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is a door' {proposition: << kind=door('noun') >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the target be the noun' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'let the target be the noun' {phrase invoked: call}
                                                        LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the target is a door' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the target is a door' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'target is a door' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'target is a door' {proposition: << kind=door('target') >>} {term: 'target'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the target is the other side of the target from the room' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the target is the other side of the target from the room gon'
                                INVOCATION_LIST_NT'now the room gone to is the target' {indent: 1} {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the room gone to is the target'
                        RULE_NT'check an actor going ( this is the can't go that way rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the room gone to is nothing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the room gone to is nothing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'room gone to is nothing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'room gone to is nothing' {proposition: << ('room gone to' == 'nothing') >>} {term: 'room gone to'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the door gone through is nothing' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the door gone through is nothing' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'door gone through is nothing' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'door gone through is nothing' {proposition: << ('door gone through' == 'nothing') >>} {term: 'door gone through'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [can't go] that way." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [can't go] that way." ( a )'
                                                                INVOCATION_NT'"[We] [can't go] that way." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [can't go] that way." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [can't go] that way." ( a )' {kind: text}
                                                INVOCATION_LIST_NT'stop the action' {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't], since [the door gone through] [lead] nowh' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't], since [the door gone through] [lead] nowhere.'
                                                        INVOCATION_NT'"[We] [can't], since [the door gone through] [lead] nowhere.' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't], since [the door gone through] [lead] nowhere.' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't], since [the door gone through] [lead] nowhere.' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor going ( this is the move player and vehic' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the vehicle gone by is nothing' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the vehicle gone by is nothing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'vehicle gone by is nothing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'vehicle gone by is nothing' {proposition: << ('vehicle gone by' == 'nothing') >>} {term: 'vehicle gone by'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously move the actor to the room gone to during go' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'surreptitiously move the actor to the room gone to during go' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                RVALUE_CONTEXT_NT'room gone to' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'room gone to' {nonlocal: 'room gone to'(var)object}
                                    CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 1} {control structure: O}
                                        INVOCATION_LIST_NT'surreptitiously move the vehicle gone by to the room gone to' {indent: 2}
                                            INVOCATION_NT'surreptitiously move the vehicle gone by to the room gone to' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'vehicle gone by' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'vehicle gone by' {nonlocal: 'vehicle gone by'(var)object}
                                                RVALUE_CONTEXT_NT'room gone to' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'room gone to' {nonlocal: 'room gone to'(var)object}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the location is not the location of the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the location is not the location of the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'location is not the location of the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'location is not the location of the player' {proposition: << NOT< ('location' == 'the location of the player') NOT> >>} {term: 'location'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the location is the location of the player' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the location is the location of the player'
                        RULE_NT'carry out an actor going ( this is the move floating objects' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player or the player is within the vehic' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player or the player is within the vehic' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player or the player is within the vehicle gone' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'actor is the player or the player is within the vehicle gone'
                                                    TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by' {proposition: << ('the vehicle gone by' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                                        TEST_PROPOSITION_NT'the player is within the thing gone with' {proposition: << ('the thing gone with' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'update backdrop positions' {indent: 2}
                                            INVOCATION_NT'update backdrop positions' {phrase invoked: call}
                        RULE_NT'carry out an actor going ( this is the check light in new lo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player or the player is within the vehic' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player or the player is within the vehic' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player or the player is within the vehicle gone' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'actor is the player or the player is within the vehicle gone'
                                                    TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by' {proposition: << ('the vehicle gone by' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                                        TEST_PROPOSITION_NT'the player is within the thing gone with' {proposition: << ('the thing gone with' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously reckon darkness' {indent: 2}
                                            INVOCATION_NT'surreptitiously reckon darkness' {phrase invoked: call}
                        RULE_NT'report an actor going ( this is the describe room gone into ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'produce a room description with going spacing conventions' {indent: 3}
                                                    INVOCATION_NT'produce a room description with going spacing conventions' {phrase invoked: call}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is a direction' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the noun is a direction' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is a direction' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is a direction' {proposition: << kind=direction('noun') >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the location is the room gone from or the player is withi' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the location is the room gone from or the player is withi' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'location is the room gone from or the player is within the v' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_OR_NT'location is the room gone from or the player is within the v'
                                                                    TEST_PROPOSITION_NT'location is the room gone from' {proposition: << ('location' == 'the room gone from') >>} {term: 'location'}
                                                                    LOGICAL_OR_NT
                                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by' {proposition: << ('the vehicle gone by' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                                                        TEST_PROPOSITION_NT'the player is within the thing gone with' {proposition: << ('the thing gone with' == <ContainerOf(*1) : 'the player'>) >>} {term: 'the player'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the room gone from is the room gone to' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the room gone from is the room gone to' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'room gone from is the room gone to' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'room gone from is the room gone to' {proposition: << ('room gone from' == 'the room gone to') >>} {term: 'room gone from'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'continue the action' {indent: 5}
                                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 4} {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the noun is up' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the noun is up' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'noun is up' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'noun is up' {proposition: << ('noun' == 'up') >>} {term: 'noun'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[The actor] [go] up" ( a )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [go] up" ( a )'
                                                                                INVOCATION_NT'"[The actor] [go] up" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [go] up" ( a )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[The actor] [go] up" ( a )' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the noun is down' {colon_block_command} {indent: 5}
                                                                                INVOCATION_NT'if the noun is down' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'noun is down' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'noun is down' {proposition: << ('noun' == 'down') >>} {term: 'noun'}
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [go] down" ( b )' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [go] down" ( b )'
                                                                                        INVOCATION_NT'"[The actor] [go] down" ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [go] down" ( b )' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"[The actor] [go] down" ( b )' {kind: text}
                                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 5} {control structure: O}
                                                                                CODE_BLOCK_NT'say "[The actor] [go] [noun]" ( c )' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [go] [noun]" ( c )'
                                                                                        INVOCATION_NT'"[The actor] [go] [noun]" ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [go] [noun]" ( c )' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"[The actor] [go] [noun]" ( c )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        INVOCATION_LIST_NT'let the back way be the opposite of the noun' {indent: 4}
                                                            INVOCATION_NT'let the back way be the opposite of the noun' {phrase invoked: call}
                                                                NEW_LOCAL_CONTEXT_NT'back way' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {new var: direction} {required: value}
                                                                    UNKNOWN_NT'back way'
                                                                RVALUE_CONTEXT_NT'opposite of the noun' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                    PROPERTY_VALUE_NT'opposite of the noun'
                                                                        CONSTANT_NT {kind: nothing valued property} {property: 'opposite'=direction}{meaning: {opposite = PROPERTY_MC}}
                                                                        NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the location is the room gone to' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the location is the room gone to' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'location is the room gone to' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'location is the room gone to' {proposition: << ('location' == 'the room gone to') >>} {term: 'location'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'let the room back the other way be the room back way from th' {indent: 5}
                                                                    INVOCATION_NT'let the room back the other way be the room back way from th' {phrase invoked: call}
                                                                        NEW_LOCAL_CONTEXT_NT'room back the other way' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                                                            UNKNOWN_NT'room back the other way'
                                                                        RVALUE_CONTEXT_NT'room back way from the location' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                            PHRASE_TO_DECIDE_VALUE_NT'room back way from the location'
                                                                                INVOCATION_LIST_NT'room back way from the location'
                                                                                    INVOCATION_NT'room back way from the location' {phrase invoked: call} {resulting: room} {unproven}
                                                                                        RVALUE_CONTEXT_NT'back way' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                                                            LOCAL_VARIABLE_NT'back way' {local: LV<unallocated> direction}
                                                                                        RVALUE_CONTEXT_NT'location' {token check to do: TEST_VALUE_NT'room'} {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                                                            NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                                                                INVOCATION_LIST_NT'let the room normally this way be the room noun from the roo' {indent: 5}
                                                                    INVOCATION_NT'let the room normally this way be the room noun from the roo' {phrase invoked: call}
                                                                        NEW_LOCAL_CONTEXT_NT'room normally this way' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                                                            UNKNOWN_NT'room normally this way'
                                                                        RVALUE_CONTEXT_NT'room noun from the room gone from' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                            PHRASE_TO_DECIDE_VALUE_NT'room noun from the room gone from'
                                                                                INVOCATION_LIST_NT'room noun from the room gone from'
                                                                                    INVOCATION_NT'room noun from the room gone from' {phrase invoked: call} {resulting: room} {unproven}
                                                                                        RVALUE_CONTEXT_NT'noun' {token check to do: TEST_VALUE_NT'direction'} {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                                                        RVALUE_CONTEXT_NT'room gone from' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                                                            NONLOCAL_VARIABLE_NT'room gone from' {nonlocal: 'room gone from'(var)room}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the room back the other way is the room gone from or the ' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the room back the other way is the room gone from or the ' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'room back the other way is the room gone from or the room ba' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                LOGICAL_OR_NT'room back the other way is the room gone from or the room ba'
                                                                                    TEST_PROPOSITION_NT'room back the other way is the room gone from' {proposition: << ('room back the other way' == 'the room gone from') >>} {term: 'room back the other way'}
                                                                                    TEST_PROPOSITION_NT'the room back the other way is the room normally this way' {proposition: << ('the room back the other way' == 'the room normally this way') >>} {term: 'the room back the other way'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the back way is up' {colon_block_command} {indent: 6}
                                                                                INVOCATION_NT'if the back way is up' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'back way is up' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'back way is up' {proposition: << ('back way' == 'up') >>} {term: 'back way'}
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] from above" ( d )' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from above" ( d )'
                                                                                        INVOCATION_NT'"[The actor] [arrive] from above" ( d )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] from above" ( d )' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"[The actor] [arrive] from above" ( d )' {kind: text}
                                                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                                CODE_BLOCK_NT {control structure: IF}
                                                                                    INVOCATION_LIST_NT'if the back way is down' {colon_block_command} {indent: 6}
                                                                                        INVOCATION_NT'if the back way is down' {phrase invoked: call}
                                                                                            CONDITION_CONTEXT_NT'back way is down' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: <null-parse-node>
                                                                                            }
                                                                                                TEST_PROPOSITION_NT'back way is down' {proposition: << ('back way' == 'down') >>} {term: 'back way'}
                                                                                    CODE_BLOCK_NT
                                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from below" ( e )' {control structure: SAY}
                                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from below" ( e )'
                                                                                                INVOCATION_NT'"[The actor] [arrive] from below" ( e )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from below" ( e )' {token check to do: <null-parse-node>
                                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                        CONSTANT_NT'"[The actor] [arrive] from below" ( e )' {kind: text}
                                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 6} {control structure: O}
                                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from [the back way]" ( f )' {control structure: SAY}
                                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from [the back way]" ( f )'
                                                                                                INVOCATION_NT'"[The actor] [arrive] from [the back way]" ( f )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from [the back way]" ( f )' {token check to do: <null-parse-node>
                                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                        CONSTANT_NT'"[The actor] [arrive] from [the back way]" ( f )' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 5} {control structure: O}
                                                                        CODE_BLOCK_NT'say "[The actor] [arrive]" ( g )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive]" ( g )'
                                                                                INVOCATION_NT'"[The actor] [arrive]" ( g )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive]" ( g )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[The actor] [arrive]" ( g )' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 4} {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the back way is up' {colon_block_command} {indent: 5}
                                                                        INVOCATION_NT'if the back way is up' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'back way is up' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'back way is up' {proposition: << ('back way' == 'up') >>} {term: 'back way'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from above" ' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from above" ( h '
                                                                                INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from above" ( h ' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from above" ( h ' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from above" ( h ' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                        CODE_BLOCK_NT {control structure: IF}
                                                                            INVOCATION_LIST_NT'if the back way is down' {colon_block_command} {indent: 5}
                                                                                INVOCATION_NT'if the back way is down' {phrase invoked: call}
                                                                                    CONDITION_CONTEXT_NT'back way is down' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: <null-parse-node>
                                                                                    }
                                                                                        TEST_PROPOSITION_NT'back way is down' {proposition: << ('back way' == 'down') >>} {term: 'back way'}
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from below" ' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from below" ( i '
                                                                                        INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from below" ( i ' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from below" ( i ' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from below" ( i ' {kind: text}
                                                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 5} {control structure: O}
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from [the ba' {control structure: SAY}
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from [the back w'
                                                                                        INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from [the back w' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from [the back w' {token check to do: <null-parse-node>
                                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                                CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from [the back w' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the location is the room gone from' {colon_block_command} {indent: 2}
                                                        INVOCATION_NT'if the location is the room gone from' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'location is the room gone from' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'location is the room gone from' {proposition: << ('location' == 'the room gone from') >>} {term: 'location'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The actor] [go] through [the noun]" ( k )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [go] through [the noun]" ( k )'
                                                                INVOCATION_NT'"[The actor] [go] through [the noun]" ( k )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[The actor] [go] through [the noun]" ( k )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[The actor] [go] through [the noun]" ( k )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from [the noun]" ( l )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from [the noun]" ( l )'
                                                                INVOCATION_NT'"[The actor] [arrive] from [the noun]" ( l )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from [the noun]" ( l )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[The actor] [arrive] from [the noun]" ( l )' {kind: text}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the vehicle gone by is not nothing' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the vehicle gone by is not nothing' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'vehicle gone by is not nothing' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'vehicle gone by is not nothing' {proposition: << NOT< ('vehicle gone by' == 'nothing') NOT> >>} {term: 'vehicle gone by'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say " "' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'" "'
                                                        INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'" "' {kind: text}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the vehicle gone by is a supporter' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the vehicle gone by is a supporter' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'vehicle gone by is a supporter' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'vehicle gone by is a supporter' {proposition: << kind=supporter('vehicle gone by') >>} {term: 'vehicle gone by'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "on [the vehicle gone by]" ( m )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"on [the vehicle gone by]" ( m )'
                                                                INVOCATION_NT'"on [the vehicle gone by]" ( m )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"on [the vehicle gone by]" ( m )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"on [the vehicle gone by]" ( m )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        CODE_BLOCK_NT'say "in [the vehicle gone by]" ( n )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"in [the vehicle gone by]" ( n )'
                                                                INVOCATION_NT'"in [the vehicle gone by]" ( n )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"in [the vehicle gone by]" ( n )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"in [the vehicle gone by]" ( n )' {kind: text}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the thing gone with is not nothing' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the thing gone with is not nothing' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'thing gone with is not nothing' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'thing gone with is not nothing' {proposition: << NOT< ('thing gone with' == 'nothing') NOT> >>} {term: 'thing gone with'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the player is within the thing gone with' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the player is within the thing gone with' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'player is within the thing gone with' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'player is within the thing gone with' {proposition: << ('the thing gone with' == <ContainerOf(*1) : 'player'>) >>} {term: 'player'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] in front, and [us] alon' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in front, and [us] along to'
                                                                INVOCATION_NT'", pushing [the thing gone with] in front, and [us] along to' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] in front, and [us] along to' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'", pushing [the thing gone with] in front, and [us] along to' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the player is within the vehicle gone by' {colon_block_command} {indent: 3}
                                                                INVOCATION_NT'if the player is within the vehicle gone by' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'player is within the vehicle gone by' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'player is within the vehicle gone by' {proposition: << ('the vehicle gone by' == <ContainerOf(*1) : 'player'>) >>} {term: 'player'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say ", pushing [the thing gone with] in front" ( p )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in front" ( p )'
                                                                        INVOCATION_NT'", pushing [the thing gone with] in front" ( p )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'", pushing [the thing gone with] in front" ( p )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'", pushing [the thing gone with] in front" ( p )' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the location is the room gone from' {colon_block_command} {indent: 3}
                                                                        INVOCATION_NT'if the location is the room gone from' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'location is the room gone from' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'location is the room gone from' {proposition: << ('location' == 'the room gone from') >>} {term: 'location'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] away" ( q )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] away" ( q )'
                                                                                INVOCATION_NT'", pushing [the thing gone with] away" ( q )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] away" ( q )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'", pushing [the thing gone with] away" ( q )' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] in" ( r )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in" ( r )'
                                                                                INVOCATION_NT'", pushing [the thing gone with] in" ( r )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] in" ( r )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'", pushing [the thing gone with] in" ( r )' {kind: text}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is within the vehicle gone by and the player i' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is within the vehicle gone by and the player i' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is within the vehicle gone by and the player is not w' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'player is within the vehicle gone by and the player is not w'
                                                            TEST_PROPOSITION_NT'player is within the vehicle gone by' {proposition: << ('the vehicle gone by' == <ContainerOf(*1) : 'player'>) >>} {term: 'player'}
                                                            TEST_PROPOSITION_NT'the player is not within the thing gone with' {proposition: << NOT< ('the thing gone with' == <ContainerOf(*1) : 'the player'>) NOT> >>} {term: 'the player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say ", taking [us] along" ( s )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'", taking [us] along" ( s )'
                                                        INVOCATION_NT'", taking [us] along" ( s )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'", taking [us] along" ( s )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'", taking [us] along" ( s )' {kind: text}
                                                CODE_BLOCK_NT'say "."' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"."' {kind: text}
                                                INVOCATION_LIST_NT'try looking' {indent: 3}
                                                    INVOCATION_NT'try looking' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'looking' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'looking' {kind: action} {action pattern: <action: looking / >}
                                                INVOCATION_LIST_NT'continue the action' {indent: 3}
                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                        CODE_BLOCK_NT'say "."' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"."' {kind: text}
                        SENTENCE_NT'entering is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'entering'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the entering action translates into inter as Enter' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'entering action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Enter'
                        SENTENCE_NT'the specification of the entering action is Whereas the goin' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the entering action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'entering action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'entering action' {kind: action name} {action name: entering}{meaning: {entering action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Whereas the going action allows
                            people to move from one loca' {refined} {eval: CONSTANT_NT'Whereas the going action allows
                            people to move from one loca' {kind: text}}
                        RULE_NT'rule for supplying a missing noun while entering ( this is t' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if something enterable ( called the box ) is in the location' {colon_block_command}
                                        INVOCATION_NT'if something enterable ( called the box ) is in the location' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'something enterable ( called the box ) is in the location' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'something enterable ( called the box ) is in the location' {proposition: << Exists x : kind=thing_c(x) ^ enterable(x) ^ called='box':thing(x) ^ ('the location' == <ContainerOf(*1) : x>) >>} {term: x}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the noun is the box' {results_from_splitting} {indent: 1} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the noun is the box'
                                    CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                                        INVOCATION_LIST_NT'continue the activity' {indent: 1}
                                            INVOCATION_NT'continue the activity' {phrase invoked: call}
                        SENTENCE_NT'the find what to enter rule is listed last in the for supply' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the find what to enter rule'
                            UNPARSED_NOUN_NT'last in the for supplying a missing noun rulebook'
                        RULE_NT'check an actor entering ( this is the convert enter door int' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a door' {colon_block_command}
                                        INVOCATION_NT'if the noun is a door' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a door' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a door' {proposition: << kind=door('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the going action on the noun' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'convert to the going action on the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'going action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'check an actor entering ( this is the convert enter compass ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a direction' {colon_block_command}
                                        INVOCATION_NT'if the noun is a direction' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a direction' {proposition: << kind=direction('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the going action on the noun' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'convert to the going action on the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'going action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'check an actor entering ( this is the can't enter what's alr' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the noun' {proposition: << ('actor' == 'the noun') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'make no decision' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'make no decision' {phrase invoked: call}
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor wi' {indent: 1}
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor wi' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the local ceiling is the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the local ceiling is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'local ceiling is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'local ceiling is the noun' {proposition: << ('local ceiling' == 'the noun') >>} {term: 'local ceiling'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the noun is a supporter' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the noun is a supporter' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'noun is a supporter' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'noun is a supporter' {proposition: << kind=supporter('noun') >>} {term: 'noun'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "But [we]['re] already on [the noun]." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"But [we]['re] already on [the noun]." ( a )'
                                                                INVOCATION_NT'"But [we]['re] already on [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"But [we]['re] already on [the noun]." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"But [we]['re] already on [the noun]." ( a )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        CODE_BLOCK_NT'say "But [we]['re] already in [the noun]." ( b )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"But [we]['re] already in [the noun]." ( b )'
                                                                INVOCATION_NT'"But [we]['re] already in [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"But [we]['re] already in [the noun]." ( b )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"But [we]['re] already in [the noun]." ( b )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor entering ( this is the can't enter what's not' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not enterable' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not enterable' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not enterable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not enterable' {proposition: << NOT< enterable('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the player's command includes "stand"' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the player's command includes "stand"' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'player's command includes "stand"' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_VALUE_NT'player's command includes "stand"'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'player's command includes "stand"'
                                                                        INVOCATION_LIST_NT'player's command includes "stand"'
                                                                            INVOCATION_NT'player's command includes "stand"' {phrase invoked: call} {resulting: truth state}
                                                                                RVALUE_CONTEXT_NT'player's command' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                                                                    NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}{meaning: {player's command = VARIABLE_MC}}
                                                                                RVALUE_CONTEXT_NT'"stand"' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT'a topic'} {required: topic}
                                                                                    CONSTANT_NT'"stand"' {kind: topic}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] ' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] stan'
                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] stan' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] stan' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] stan' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the player's command includes "sit"' {colon_block_command} {indent: 3}
                                                                INVOCATION_NT'if the player's command includes "sit"' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'player's command includes "sit"' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_VALUE_NT'player's command includes "sit"'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'player's command includes "sit"'
                                                                                INVOCATION_LIST_NT'player's command includes "sit"'
                                                                                    INVOCATION_NT'player's command includes "sit"' {phrase invoked: call} {resulting: truth state}
                                                                                        RVALUE_CONTEXT_NT'player's command' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                                                                            NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}{meaning: {player's command = VARIABLE_MC}}
                                                                                        RVALUE_CONTEXT_NT'"sit"' {token check to do: <null-parse-node>
                                                                                        } {token to be parsed against: TEST_VALUE_NT'a topic'} {required: topic}
                                                                                            CONSTANT_NT'"sit"' {kind: topic}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] ' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] sit '
                                                                        INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] sit ' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] sit ' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] sit ' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the player's command includes "lie"' {colon_block_command} {indent: 3}
                                                                        INVOCATION_NT'if the player's command includes "lie"' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'player's command includes "lie"' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_VALUE_NT'player's command includes "lie"'
                                                                                    PHRASE_TO_DECIDE_VALUE_NT'player's command includes "lie"'
                                                                                        INVOCATION_LIST_NT'player's command includes "lie"'
                                                                                            INVOCATION_NT'player's command includes "lie"' {phrase invoked: call} {resulting: truth state}
                                                                                                RVALUE_CONTEXT_NT'player's command' {token check to do: <null-parse-node>
                                                                                                } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                                                                                    NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}{meaning: {player's command = VARIABLE_MC}}
                                                                                                RVALUE_CONTEXT_NT'"lie"' {token check to do: <null-parse-node>
                                                                                                } {token to be parsed against: TEST_VALUE_NT'a topic'} {required: topic}
                                                                                                    CONSTANT_NT'"lie"' {kind: topic}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] ' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] lie '
                                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] lie ' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] lie ' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] lie ' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] ' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] ente'
                                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] ente' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] ente' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] ente' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor entering ( this is the can't enter closed con' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a closed container' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a closed container' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a closed container' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a closed container' {proposition: << kind=container('noun') ^ closed('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't get] into the closed [noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't get] into the closed [noun]." ( a )'
                                                        INVOCATION_NT'"[We] [can't get] into the closed [noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't get] into the closed [noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't get] into the closed [noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor entering ( this is the can't enter if this ex' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property carrying capacity' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property carrying capacity' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property carrying capacity' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun provides the property carrying capacity' {proposition: << provides('noun', 'the property carrying capacity') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is a supporter' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the noun is a supporter' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is a supporter' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is a supporter' {proposition: << kind=supporter('noun') >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the number of things on the noun is at least the carrying' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the number of things on the noun is at least the carrying' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'number of things on the noun is at least the carrying capaci' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'number of things on the noun is at least the carrying capaci' {proposition: << at-least('number of things on the noun', 'the carrying capacity of the noun') >>} {term: 'number of things on the noun'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 5} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                CODE_BLOCK_NT'say "[There] [are] no more room on [the noun]." ( a )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the noun]." ( a )'
                                                                        INVOCATION_NT'"[There] [are] no more room on [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[There] [are] no more room on [the noun]." ( a )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[There] [are] no more room on [the noun]." ( a )' {kind: text}
                                                        INVOCATION_LIST_NT'stop the action' {indent: 4}
                                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the noun is a container' {colon_block_command} {indent: 2}
                                                        INVOCATION_NT'if the noun is a container' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'noun is a container' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'noun is a container' {proposition: << kind=container('noun') >>} {term: 'noun'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the number of things in the noun is at least the carrying' {colon_block_command} {indent: 3}
                                                                INVOCATION_NT'if the number of things in the noun is at least the carrying' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'number of things in the noun is at least the carrying capaci' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'number of things in the noun is at least the carrying capaci' {proposition: << at-least('number of things in the noun', 'the carrying capacity of the noun') >>} {term: 'number of things in the noun'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 4}
                                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 5} {control structure: NOW}
                                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the noun]." ( b )' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the noun]." ( b )'
                                                                                INVOCATION_NT'"[There] [are] no more room in [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the noun]." ( b )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"[There] [are] no more room in [the noun]." ( b )' {kind: text}
                                                                INVOCATION_LIST_NT'stop the action' {indent: 4}
                                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor entering ( this is the can't enter something ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor wi' {indent: 1}
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor wi' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the local ceiling is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the local ceiling is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'local ceiling is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'local ceiling is the actor' {proposition: << ('local ceiling' == 'the actor') >>} {term: 'local ceiling'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can] only get into something free-standing." ( a ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can] only get into something free-standing." ( a )'
                                                        INVOCATION_NT'"[We] [can] only get into something free-standing." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can] only get into something free-standing." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can] only get into something free-standing." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor entering ( this is the implicitly pass throug' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the actor is the holder of the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the holder of the actor is the holder of the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the actor is the holder of the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the actor is the holder of the noun' {proposition: << ('holder of the actor' == 'the holder of the noun') >>} {term: 'holder of the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor wi' {indent: 1}
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor wi' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local ceiling' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: WHI}
                                    INVOCATION_LIST_NT'while the holder of the actor is not the local ceiling' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'while the holder of the actor is not the local ceiling' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the actor is not the local ceiling' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the actor is not the local ceiling' {proposition: << NOT< ('holder of the actor' == 'the local ceiling') NOT> >>} {term: 'holder of the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the current home be the holder of the actor' {indent: 2}
                                            INVOCATION_NT'let the current home be the holder of the actor' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'current home' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                    UNKNOWN_NT'current home'
                                                RVALUE_CONTEXT_NT'holder of the actor' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                        INVOCATION_LIST_NT'holder of the actor'
                                                            INVOCATION_NT'holder of the actor' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                    NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the current home is a supporter or the current home is an' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the current home is a supporter or the current home is an' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'current home is a supporter or the current home is an animal' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_OR_NT'current home is a supporter or the current home is an animal'
                                                                    TEST_PROPOSITION_NT'current home is a supporter' {proposition: << kind=supporter('current home') >>} {term: 'current home'}
                                                                    TEST_PROPOSITION_NT'the current home is an animal' {proposition: << kind=animal('the current home') >>} {term: 'the current home'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(getting off [the current home])[command clarification ' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"(getting off [the current home])[command clarification brea'
                                                                INVOCATION_NT'"(getting off [the current home])[command clarification brea' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"(getting off [the current home])[command clarification brea' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"(getting off [the current home])[command clarification brea' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        CODE_BLOCK_NT'say "(getting out of [the current home])[command clarificati' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"(getting out of [the current home])[command clarification b'
                                                                INVOCATION_NT'"(getting out of [the current home])[command clarification b' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"(getting out of [the current home])[command clarification b' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"(getting out of [the current home])[command clarification b' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying exiting' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying exiting' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying exiting' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying exiting' {kind: action} {action pattern: <action: exiting / >}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the holder of the actor is the current home' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the holder of the actor is the current home' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'holder of the actor is the current home' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'holder of the actor is the current home' {proposition: << ('holder of the actor' == 'the current home') >>} {term: 'holder of the actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the actor is the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the holder of the actor is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the actor is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the actor is the noun' {proposition: << ('holder of the actor' == 'the noun') >>} {term: 'holder of the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the actor is the holder of the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the holder of the actor is the holder of the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the actor is the holder of the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the actor is the holder of the noun' {proposition: << ('holder of the actor' == 'the holder of the noun') >>} {term: 'holder of the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'let the target be the holder of the noun' {indent: 1}
                                    INVOCATION_NT'let the target be the holder of the noun' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'holder of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the noun'
                                                INVOCATION_LIST_NT'holder of the noun'
                                                    INVOCATION_NT'holder of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is part of the target' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the noun is part of the target' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is part of the target' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is part of the target' {proposition: << ('the target' == <(*1.component_parent) : 'noun'>) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the target be the holder of the target' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'let the target be the holder of the target' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                RVALUE_CONTEXT_NT'holder of the target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the target'
                                                        INVOCATION_LIST_NT'holder of the target'
                                                            INVOCATION_NT'holder of the target' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                CODE_BLOCK_NT {control structure: WHI}
                                    INVOCATION_LIST_NT'while the target is a thing' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'while the target is a thing' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'target is a thing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'target is a thing' {proposition: << kind=thing('target') >>} {term: 'target'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the holder of the target is the local ceiling' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the holder of the target is the local ceiling' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'holder of the target is the local ceiling' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'holder of the target is the local ceiling' {proposition: << ('holder of the target' == 'the local ceiling') >>} {term: 'holder of the target'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if the target is a supporter' {colon_block_command} {indent: 4}
                                                                INVOCATION_NT'if the target is a supporter' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'target is a supporter' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'target is a supporter' {proposition: << kind=supporter('target') >>} {term: 'target'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "(getting onto [the target])[command clarification break' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"(getting onto [the target])[command clarification break]" ('
                                                                        INVOCATION_NT'"(getting onto [the target])[command clarification break]" (' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"(getting onto [the target])[command clarification break]" (' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"(getting onto [the target])[command clarification break]" (' {kind: text}
                                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the target is a container' {colon_block_command} {indent: 4}
                                                                        INVOCATION_NT'if the target is a container' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'target is a container' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'target is a container' {proposition: << kind=container('target') >>} {term: 'target'}
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "(getting into [the target])[command clarification break' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"(getting into [the target])[command clarification break]" ('
                                                                                INVOCATION_NT'"(getting into [the target])[command clarification break]" (' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"(getting into [the target])[command clarification break]" (' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"(getting into [the target])[command clarification break]" (' {kind: text}
                                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 4} {control structure: O}
                                                                        CODE_BLOCK_NT'say "(entering [the target])[command clarification break]" (' {control structure: SAY}
                                                                            INVOCATION_LIST_SAY_NT'"(entering [the target])[command clarification break]" ( e )'
                                                                                INVOCATION_NT'"(entering [the target])[command clarification break]" ( e )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                                    RVALUE_CONTEXT_NT'"(entering [the target])[command clarification break]" ( e )' {token check to do: <null-parse-node>
                                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                        CONSTANT_NT'"(entering [the target])[command clarification break]" ( e )' {kind: text}
                                                INVOCATION_LIST_NT'silently try the actor trying entering the target' {indent: 3}
                                                    INVOCATION_NT'silently try the actor trying entering the target' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'actor trying entering the target' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'actor trying entering the target' {kind: action} {action pattern: <action: entering /  noun: LOCAL_VARIABLE_NT'the target' {local: LV"target"-object object}>}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the holder of the actor is not the target' {indent: 3} {colon_block_command}
                                                        INVOCATION_NT'if the holder of the actor is not the target' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'holder of the actor is not the target' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'holder of the actor is not the target' {proposition: << NOT< ('holder of the actor' == 'the target') NOT> >>} {term: 'holder of the actor'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 4}
                                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                                INVOCATION_LIST_NT'convert to the entering action on the noun' {indent: 3}
                                                    INVOCATION_NT'convert to the entering action on the noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'entering action' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                            CONSTANT_NT'entering action' {kind: action name} {action name: entering}{meaning: {entering action = MISCELLANEOUS_MC}}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                INVOCATION_LIST_NT'continue the action' {indent: 3}
                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                        INVOCATION_LIST_NT'let the target be the holder of the target' {indent: 2}
                                            INVOCATION_NT'let the target be the holder of the target' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                                                RVALUE_CONTEXT_NT'holder of the target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the target'
                                                        INVOCATION_LIST_NT'holder of the target'
                                                            INVOCATION_NT'holder of the target' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'target' {local: LV"target"-object object}
                        RULE_NT'carry out an actor entering ( this is the standard entering ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'surreptitiously move the actor to the noun'
                                    INVOCATION_NT'surreptitiously move the actor to the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'report an actor entering ( this is the standard report enter' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the noun is a supporter' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the noun is a supporter' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'noun is a supporter' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'noun is a supporter' {proposition: << kind=supporter('noun') >>} {term: 'noun'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [get] onto [the noun]." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] onto [the noun]." ( a )'
                                                                INVOCATION_NT'"[We] [get] onto [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [get] onto [the noun]." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [get] onto [the noun]." ( a )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        CODE_BLOCK_NT'say "[We] [get] into [the noun]." ( b )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] into [the noun]." ( b )'
                                                                INVOCATION_NT'"[We] [get] into [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [get] into [the noun]." ( b )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [get] into [the noun]." ( b )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is a container' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the noun is a container' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is a container' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is a container' {proposition: << kind=container('noun') >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [get] into [the noun]." ( c )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] into [the noun]." ( c )'
                                                        INVOCATION_NT'"[The actor] [get] into [the noun]." ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] into [the noun]." ( c )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [get] into [the noun]." ( c )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [get] onto [the noun]." ( d )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] onto [the noun]." ( d )'
                                                        INVOCATION_NT'"[The actor] [get] onto [the noun]." ( d )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] onto [the noun]." ( d )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [get] onto [the noun]." ( d )' {kind: text}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor entering ( this is the describe contents ent' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'describe locale for the noun' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'describe locale for the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        SENTENCE_NT'exiting is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'exiting'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the exiting action translates into inter as Exit' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'exiting action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Exit'
                        SENTENCE_NT'the exiting action has an object called the container exited' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'exiting action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'exiting action' {kind: action name} {action name: exiting}{meaning: {exiting action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'container exited from ( matched as from )' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the specification of the exiting action is Whereas the going' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the exiting action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'exiting action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'exiting action' {kind: action name} {action name: exiting}{meaning: {exiting action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Whereas the going action allows
                            people to move from one loca' {refined} {eval: CONSTANT_NT'Whereas the going action allows
                            people to move from one loca' {kind: text}}
                        RULE_NT'setting action variables for exiting' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the container exited from is the holder of the actor' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the container exited from is the holder of the actor'
                        RULE_NT'check an actor exiting ( this is the convert exit into go ou' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local room be the location of the actor' {indent: 1}
                                    INVOCATION_NT'let the local room be the location of the actor' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local room' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                            UNKNOWN_NT'local room'
                                        RVALUE_CONTEXT_NT'location of the actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'location of the actor'
                                                INVOCATION_LIST_NT'location of the actor'
                                                    INVOCATION_NT'location of the actor' {phrase invoked: call} {resulting: room}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the container exited from is the local room' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the container exited from is the local room' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'container exited from is the local room' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'container exited from is the local room' {proposition: << ('container exited from' == 'the local room') >>} {term: 'container exited from'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the room-or-door outside from the local room is not nothi' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the room-or-door outside from the local room is not nothi' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'room-or-door outside from the local room is not nothing' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'room-or-door outside from the local room is not nothing' {proposition: << NOT< ('room-or-door outside from the local room' == 'nothing') NOT> >>} {term: 'room-or-door outside from the local room'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'convert to the going action on the outside' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'convert to the going action on the outside' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'going action' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                            CONSTANT_NT'going action' {kind: action name} {action name: going}{meaning: {going action = MISCELLANEOUS_MC}}
                                                        RVALUE_CONTEXT_NT'outside' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            CONSTANT_NT'outside' {kind: direction} {instance: I33'outside'} {enumeration: 0}
                        RULE_NT'check an actor exiting ( this is the can't exit when not ins' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local room be the location of the actor' {indent: 1}
                                    INVOCATION_NT'let the local room be the location of the actor' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'local room' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                            UNKNOWN_NT'local room'
                                        RVALUE_CONTEXT_NT'location of the actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'location of the actor'
                                                INVOCATION_LIST_NT'location of the actor'
                                                    INVOCATION_NT'location of the actor' {phrase invoked: call} {resulting: room}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the container exited from is the local room' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the container exited from is the local room' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'container exited from is the local room' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'container exited from is the local room' {proposition: << ('container exited from' == 'the local room') >>} {term: 'container exited from'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [we] [aren't] in anything at the [if story tense is' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"But [we] [aren't] in anything at the [if story tense is pre'
                                                        INVOCATION_NT'"But [we] [aren't] in anything at the [if story tense is pre' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"But [we] [aren't] in anything at the [if story tense is pre' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"But [we] [aren't] in anything at the [if story tense is pre' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor exiting ( this is the can't exit closed conta' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is in a closed container ( called the cage )' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is in a closed container ( called the cage )' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is in a closed container ( called the cage )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is in a closed container ( called the cage )' {proposition: << kind=container(<ContainerOf(*1) : 'actor'>) ^ closed(<ContainerOf(*1) : 'actor'>) ^ called='cage':container(<ContainerOf(*1) : 'actor'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "You can't get out of the closed [cage]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"You can't get out of the closed [cage]." ( a )'
                                                        INVOCATION_NT'"You can't get out of the closed [cage]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"You can't get out of the closed [cage]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"You can't get out of the closed [cage]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor exiting ( this is the convert exit into get o' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is on a supporter ( called the platform )' {colon_block_command}
                                        INVOCATION_NT'if the actor is on a supporter ( called the platform )' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is on a supporter ( called the platform )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is on a supporter ( called the platform )' {proposition: << kind=supporter(<SupporterOf(*1) : 'actor'>) ^ called='platform':supporter(<SupporterOf(*1) : 'actor'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the getting off action on the platform' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'convert to the getting off action on the platform' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'getting off action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'getting off action' {kind: action name} {action name: getting off}{meaning: {getting off action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'platform' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    LOCAL_VARIABLE_NT'platform' {local: LV"platform"-supporter supporter}
                        RULE_NT'carry out an actor exiting ( this is the standard exiting ru' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the former exterior be the not-counting-parts holder of '
                                    INVOCATION_NT'let the former exterior be the not-counting-parts holder of ' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'former exterior' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'former exterior'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the container exited from' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the container exited from'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the container exited from'
                                                    INVOCATION_NT'not-counting-parts holder of the container exited from' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'container exited from' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'container exited from' {nonlocal: 'container exited from'(var)object}
                                INVOCATION_LIST_NT'surreptitiously move the actor to the former exterior'
                                    INVOCATION_NT'surreptitiously move the actor to the former exterior' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                        RVALUE_CONTEXT_NT'former exterior' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            LOCAL_VARIABLE_NT'former exterior' {local: LV"former exterior"-object object}
                        RULE_NT'report an actor exiting ( this is the standard report exitin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the container exited from is a supporter' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the container exited from is a supporter' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'container exited from is a supporter' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'container exited from is a supporter' {proposition: << kind=supporter('container exited from') >>} {term: 'container exited from'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [get] off [the container exited from]." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] off [the container exited from]." ( a )'
                                                                INVOCATION_NT'"[We] [get] off [the container exited from]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [get] off [the container exited from]." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [get] off [the container exited from]." ( a )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                                        CODE_BLOCK_NT'say "[We] [get] out of [the container exited from]." ( b )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] out of [the container exited from]." ( b )'
                                                                INVOCATION_NT'"[We] [get] out of [the container exited from]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [get] out of [the container exited from]." ( b )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [get] out of [the container exited from]." ( b )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [get] out of [the container exited from]." ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] out of [the container exited from]." ( c '
                                                        INVOCATION_NT'"[The actor] [get] out of [the container exited from]." ( c ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] out of [the container exited from]." ( c ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [get] out of [the container exited from]." ( c ' {kind: text}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor exiting ( this is the describe room emerged ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously reckon darkness' {indent: 2}
                                            INVOCATION_NT'surreptitiously reckon darkness' {phrase invoked: call}
                                        INVOCATION_LIST_NT'produce a room description with going spacing conventions' {indent: 2}
                                            INVOCATION_NT'produce a room description with going spacing conventions' {phrase invoked: call}
                        SENTENCE_NT'getting off is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'getting off'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the getting off action translates into inter as GetOff' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'getting off action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'GetOff'
                        SENTENCE_NT'the specification of the getting off action is The getting o' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the getting off action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'getting off action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'getting off action' {kind: action name} {action name: getting off}{meaning: {getting off action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The getting off action is for
                            actors who are currently on to' {refined} {eval: CONSTANT_NT'The getting off action is for
                            actors who are currently on to' {kind: text}}
                        RULE_NT'check an actor getting off ( this is the can't get off thing' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is on the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is on the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is on the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is on the noun' {proposition: << ('the noun' == <SupporterOf(*1) : 'actor'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is carried by the noun' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the actor is carried by the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is carried by the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is carried by the noun' {proposition: << ('the noun' == <CarrierOf(*1) : 'actor'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "But [we] [aren't] on [the noun] at the [if story tense ' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"But [we] [aren't] on [the noun] at the [if story tense is p'
                                                INVOCATION_NT'"But [we] [aren't] on [the noun] at the [if story tense is p' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"But [we] [aren't] on [the noun] at the [if story tense is p' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"But [we] [aren't] on [the noun] at the [if story tense is p' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor getting off ( this is the standard gettin' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the former exterior be the not-counting-parts holder of '
                                    INVOCATION_NT'let the former exterior be the not-counting-parts holder of ' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'former exterior' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'former exterior'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the noun'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the noun'
                                                    INVOCATION_NT'not-counting-parts holder of the noun' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_NT'surreptitiously move the actor to the former exterior'
                                    INVOCATION_NT'surreptitiously move the actor to the former exterior' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                        RVALUE_CONTEXT_NT'former exterior' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            LOCAL_VARIABLE_NT'former exterior' {local: LV"former exterior"-object object}
                        RULE_NT'report an actor getting off ( this is the standard report ge' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [get] off [the noun]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [get] off [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [get] off [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [get] off [the noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [get] off [the noun]." ( a )' {kind: text}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor getting off ( this is the describe room stoo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'produce a room description with going spacing conventions' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'produce a room description with going spacing conventions' {phrase invoked: call}
                    HEADING_NT'section 4 - standard actions concerning the actor's vision' {heading 5} {under: H5'section 4 - standard actions concerning the actor's vision'} {unit: 2}
                        SENTENCE_NT'looking is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'looking'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the looking action translates into inter as Look' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Look'
                        SENTENCE_NT'the specification of the looking action is The looking actio' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the looking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking action' {kind: action name} {action name: looking}{meaning: {looking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The looking action describes the
                            player's current room and a' {refined} {eval: CONSTANT_NT'The looking action describes the
                            player's current room and a' {kind: text}}
                        SENTENCE_NT'the looking action has an action name called the room-descri' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking action' {kind: action name} {action name: looking}{meaning: {looking action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'action name' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'room-describing action' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the looking action has a truth state called abbreviated form' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking action' {kind: action name} {action name: looking}{meaning: {looking action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'truth state' {indefinite 'a' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'abbreviated form allowed'
                        SENTENCE_NT'the looking action has a number called the visibility level ' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking action' {kind: action name} {action name: looking}{meaning: {looking action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'number' {indefinite 'a' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'visibility level count' {definite 'the' n/m/f s/p nom/acc}
                        SENTENCE_NT'the looking action has an object called the visibility ceili' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'looking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking action' {kind: action name} {action name: looking}{meaning: {looking action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'visibility ceiling' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'setting action variables for looking ( this is the determine' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'calculate visibility ceiling at low level' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'calculate visibility ceiling at low level' {phrase invoked: call}
                                INVOCATION_LIST_NT'now the visibility level count is the visibility ceiling cou' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the visibility level count is the visibility ceiling count c'
                                INVOCATION_LIST_NT'now the visibility ceiling is the visibility ceiling calcula' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the visibility ceiling is the visibility ceiling calculated'
                                INVOCATION_LIST_NT'now the room-describing action is the looking action' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the room-describing action is the looking action'
                        RULE_NT'carry out looking ( this is the declare everything unmention' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat with item running through things' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat with item running through things' {phrase invoked: call} {kind variable declarations: K=thing}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'things' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'things' {kind: description of things} {proposition: << kind=thing(x) >>}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is not mentioned' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the item is not mentioned'
                        RULE_NT'carry out looking ( this is the room description heading rul' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say bold type' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'bold type'
                                        INVOCATION_NT'bold type' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the visibility level count is 0' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the visibility level count is 0' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'visibility level count is 0' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'visibility level count is 0' {proposition: << ('visibility level count' == '0') >>} {term: 'visibility level count'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'begin the printing the name of a dark room activity' {indent: 2}
                                            INVOCATION_NT'begin the printing the name of a dark room activity' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'printing the name of a dark room' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                    CONSTANT_NT'printing the name of a dark room' {kind: activity} {activity: printing the name of a dark room}{meaning: {printing the name of a dark room = ACTIVITY_MC}}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if handling the printing the name of a dark room activity' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if handling the printing the name of a dark room activity' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'handling the printing the name of a dark room activity' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'handling the printing the name of a dark room activity'
                                                            PHRASE_TO_DECIDE_VALUE_NT'handling the printing the name of a dark room activity'
                                                                INVOCATION_LIST_NT'handling the printing the name of a dark room activity'
                                                                    INVOCATION_NT'handling the printing the name of a dark room activity' {phrase invoked: call} {resulting: truth state}
                                                                        RVALUE_CONTEXT_NT'printing the name of a dark room' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'activity'} {required: activity}
                                                                            CONSTANT_NT'printing the name of a dark room' {kind: activity} {activity: printing the name of a dark room}{meaning: {printing the name of a dark room = ACTIVITY_MC}}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Darkness" ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Darkness" ( a )'
                                                        INVOCATION_NT'"Darkness" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Darkness" ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Darkness" ( a )' {kind: text}
                                        INVOCATION_LIST_NT'end the printing the name of a dark room activity' {indent: 2}
                                            INVOCATION_NT'end the printing the name of a dark room activity' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'printing the name of a dark room' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                    CONSTANT_NT'printing the name of a dark room' {kind: activity} {activity: printing the name of a dark room}{meaning: {printing the name of a dark room = ACTIVITY_MC}}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the visibility ceiling is the location' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the visibility ceiling is the location' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'visibility ceiling is the location' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'visibility ceiling is the location' {proposition: << ('visibility ceiling' == 'the location') >>} {term: 'visibility ceiling'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[visibility ceiling]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'visibility ceiling'
                                                        INVOCATION_NT'visibility ceiling' {phrase invoked: call} {kind variable declarations: K=object}
                                                            RVALUE_CONTEXT_NT'visibility ceiling' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                NONLOCAL_VARIABLE_NT'visibility ceiling' {nonlocal: 'visibility ceiling'(var)object}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                CODE_BLOCK_NT'say "[The visibility ceiling]"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'the visibility ceiling'
                                                        INVOCATION_NT'the visibility ceiling' {phrase invoked: call}
                                                            RVALUE_CONTEXT_NT'visibility ceiling' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                NONLOCAL_VARIABLE_NT'visibility ceiling' {nonlocal: 'visibility ceiling'(var)object}
                                CODE_BLOCK_NT'say roman type' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'roman type'
                                        INVOCATION_NT'roman type' {phrase invoked: call}
                                INVOCATION_LIST_NT'let intermediate level be the visibility-holder of the actor' {indent: 1}
                                    INVOCATION_NT'let intermediate level be the visibility-holder of the actor' {phrase invoked: call}
                                        NEW_LOCAL_CONTEXT_NT'intermediate level' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                            UNKNOWN_NT'intermediate level'
                                        RVALUE_CONTEXT_NT'visibility-holder of the actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                            PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the actor'
                                                INVOCATION_LIST_NT'visibility-holder of the actor'
                                                    INVOCATION_NT'visibility-holder of the actor' {phrase invoked: call} {resulting: object}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat with intermediate level count running from 2 to the v' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat with intermediate level count running from 2 to the v' {phrase invoked: call} {kind variable declarations: K=number}
                                            NEW_LOCAL_CONTEXT_NT'intermediate level count' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: K}
                                                UNKNOWN_NT'intermediate level count'
                                            RVALUE_CONTEXT_NT'2' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: arithmetic value}
                                                CONSTANT_NT'2' {kind: number} {explicit literal} {number: 2}
                                            RVALUE_CONTEXT_NT'visibility level count' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: arithmetic value}
                                                NONLOCAL_VARIABLE_NT'visibility level count' {nonlocal: 'visibility level count'(var)number}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the intermediate level is a supporter or the intermediate' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the intermediate level is a supporter or the intermediate' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'intermediate level is a supporter or the intermediate level ' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_OR_NT'intermediate level is a supporter or the intermediate level '
                                                            TEST_PROPOSITION_NT'intermediate level is a supporter' {proposition: << kind=supporter('intermediate level') >>} {term: 'intermediate level'}
                                                            TEST_PROPOSITION_NT'the intermediate level is an animal' {proposition: << kind=animal('the intermediate level') >>} {term: 'the intermediate level'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say " (on [the intermediate level])" ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'" (on [the intermediate level])" ( b )'
                                                        INVOCATION_NT'" (on [the intermediate level])" ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'" (on [the intermediate level])" ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'" (on [the intermediate level])" ( b )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say " (in [the intermediate level])" ( c )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'" (in [the intermediate level])" ( c )'
                                                        INVOCATION_NT'" (in [the intermediate level])" ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'" (in [the intermediate level])" ( c )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'" (in [the intermediate level])" ( c )' {kind: text}
                                        INVOCATION_LIST_NT'let the intermediate level be the visibility-holder of the i' {indent: 2}
                                            INVOCATION_NT'let the intermediate level be the visibility-holder of the i' {phrase invoked: call}
                                                LVALUE_LOCAL_CONTEXT_NT'intermediate level' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    LOCAL_VARIABLE_NT'intermediate level' {local: LV"intermediate level"-object object}
                                                RVALUE_CONTEXT_NT'visibility-holder of the intermediate level' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate level'
                                                        INVOCATION_LIST_NT'visibility-holder of the intermediate level'
                                                            INVOCATION_NT'visibility-holder of the intermediate level' {phrase invoked: call} {resulting: object}
                                                                RVALUE_CONTEXT_NT'intermediate level' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                    LOCAL_VARIABLE_NT'intermediate level' {local: LV"intermediate level"-object object}
                                CODE_BLOCK_NT'say line break' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'line break'
                                        INVOCATION_NT'line break' {phrase invoked: call}
                                CODE_BLOCK_NT'say run paragraph on with special look spacing' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'run paragraph on with special look spacing'
                                        INVOCATION_NT'run paragraph on with special look spacing' {phrase invoked: call}
                        RULE_NT'carry out looking ( this is the room description body text r' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the visibility level count is 0' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the visibility level count is 0' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'visibility level count is 0' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'visibility level count is 0' {proposition: << ('visibility level count' == '0') >>} {term: 'visibility level count'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if set to abbreviated room descriptions' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if set to abbreviated room descriptions' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'set to abbreviated room descriptions' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'set to abbreviated room descriptions'
                                                            PHRASE_TO_DECIDE_VALUE_NT'set to abbreviated room descriptions'
                                                                INVOCATION_LIST_NT'set to abbreviated room descriptions'
                                                                    INVOCATION_NT'set to abbreviated room descriptions' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if set to sometimes abbreviated room descriptions and abbrev' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if set to sometimes abbreviated room descriptions and abbrev' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'set to sometimes abbreviated room descriptions and abbreviat' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'set to sometimes abbreviated room descriptions and abbreviat'
                                                            TEST_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                    INVOCATION_LIST_NT'set to sometimes abbreviated room descriptions'
                                                                        INVOCATION_NT'set to sometimes abbreviated room descriptions' {phrase invoked: call} {resulting: truth state}
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'abbreviated form allowed is true' {proposition: << ('abbreviated form allowed' == 'true') >>} {term: 'abbreviated form allowed'}
                                                                TEST_PROPOSITION_NT'darkness witnessed is true' {proposition: << ('darkness witnessed' == 'true') >>} {term: 'darkness witnessed'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                                        INVOCATION_LIST_NT'begin the printing the description of a dark room activity' {indent: 2}
                                            INVOCATION_NT'begin the printing the description of a dark room activity' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'printing the description of a dark room' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                    CONSTANT_NT'printing the description of a dark room' {kind: activity} {activity: printing the description of a dark room}{meaning: {printing the description of a dark room = ACTIVITY_MC}}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if handling the printing the description of a dark room acti' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if handling the printing the description of a dark room acti' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'handling the printing the description of a dark room activit' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'handling the printing the description of a dark room activit'
                                                            PHRASE_TO_DECIDE_VALUE_NT'handling the printing the description of a dark room activit'
                                                                INVOCATION_LIST_NT'handling the printing the description of a dark room activit'
                                                                    INVOCATION_NT'handling the printing the description of a dark room activit' {phrase invoked: call} {resulting: truth state}
                                                                        RVALUE_CONTEXT_NT'printing the description of a dark room' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'activity'} {required: activity}
                                                                            CONSTANT_NT'printing the description of a dark room' {kind: activity} {activity: printing the description of a dark room}{meaning: {printing the description of a dark room = ACTIVITY_MC}}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "[It] [are] pitch dark, and [we] [can't see] a thing." (' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                                        INVOCATION_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'end the printing the description of a dark room activity' {indent: 2}
                                            INVOCATION_NT'end the printing the description of a dark room activity' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'printing the description of a dark room' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'activity on nothing'} {required: activity}
                                                    CONSTANT_NT'printing the description of a dark room' {kind: activity} {activity: printing the description of a dark room}{meaning: {printing the description of a dark room = ACTIVITY_MC}}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the visibility ceiling is the location' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the visibility ceiling is the location' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'visibility ceiling is the location' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'visibility ceiling is the location' {proposition: << ('visibility ceiling' == 'the location') >>} {term: 'visibility ceiling'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if set to abbreviated room descriptions' {indent: 2} {colon_block_command}
                                                        INVOCATION_NT'if set to abbreviated room descriptions' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'set to abbreviated room descriptions' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_VALUE_NT'set to abbreviated room descriptions'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'set to abbreviated room descriptions'
                                                                        INVOCATION_LIST_NT'set to abbreviated room descriptions'
                                                                            INVOCATION_NT'set to abbreviated room descriptions' {phrase invoked: call} {resulting: truth state}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 3}
                                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if set to sometimes abbreviated room descriptions and abbrev' {indent: 2} {colon_block_command}
                                                        INVOCATION_NT'if set to sometimes abbreviated room descriptions and abbrev' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'set to sometimes abbreviated room descriptions and abbreviat' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_AND_NT'set to sometimes abbreviated room descriptions and abbreviat'
                                                                    TEST_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                            INVOCATION_LIST_NT'set to sometimes abbreviated room descriptions'
                                                                                INVOCATION_NT'set to sometimes abbreviated room descriptions' {phrase invoked: call} {resulting: truth state}
                                                                    LOGICAL_AND_NT
                                                                        TEST_PROPOSITION_NT'abbreviated form allowed is true' {proposition: << ('abbreviated form allowed' == 'true') >>} {term: 'abbreviated form allowed'}
                                                                        TEST_PROPOSITION_NT'the location is visited' {proposition: << visited('the location') >>} {term: 'the location'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 3}
                                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                                INVOCATION_LIST_NT'print the location's description' {indent: 2}
                                                    INVOCATION_NT'print the location's description' {phrase invoked: call}
                        RULE_NT'carry out looking ( this is the room description paragraphs ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the visibility level count is greater than 0' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the visibility level count is greater than 0' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'visibility level count is greater than 0' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'visibility level count is greater than 0' {proposition: << greater-than('visibility level count', '0') >>} {term: 'visibility level count'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the intermediate position be the actor' {indent: 2}
                                            INVOCATION_NT'let the intermediate position be the actor' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: value}
                                                    UNKNOWN_NT'intermediate position'
                                                RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                        INVOCATION_LIST_NT'let the ip count be the visibility level count' {indent: 2}
                                            INVOCATION_NT'let the ip count be the visibility level count' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'ip count' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                                    UNKNOWN_NT'ip count'
                                                RVALUE_CONTEXT_NT'visibility level count' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'visibility level count' {nonlocal: 'visibility level count'(var)number}
                                        CODE_BLOCK_NT {control structure: WHI}
                                            INVOCATION_LIST_NT'while the ip count is greater than 0' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'while the ip count is greater than 0' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'ip count is greater than 0' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'ip count is greater than 0' {proposition: << greater-than('ip count', '0') >>} {term: 'ip count'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the intermediate position is marked for listing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the intermediate position is marked for listing'
                                                INVOCATION_LIST_NT'let the intermediate position be the visibility-holder of th' {indent: 3}
                                                    INVOCATION_NT'let the intermediate position be the visibility-holder of th' {phrase invoked: call}
                                                        LVALUE_LOCAL_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                        RVALUE_CONTEXT_NT'visibility-holder of the intermediate position' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate position'
                                                                INVOCATION_LIST_NT'visibility-holder of the intermediate position'
                                                                    INVOCATION_NT'visibility-holder of the intermediate position' {phrase invoked: call} {resulting: object}
                                                                        RVALUE_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                            LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                INVOCATION_LIST_NT'decrease the ip count by 1' {indent: 3}
                                                    INVOCATION_NT'decrease the ip count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'ip count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            LOCAL_VARIABLE_NT'ip count' {local: LV<unallocated> number}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                        INVOCATION_LIST_NT'let the top-down ip count be the visibility level count' {indent: 2}
                                            INVOCATION_NT'let the top-down ip count be the visibility level count' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'top-down ip count' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                                    UNKNOWN_NT'top-down ip count'
                                                RVALUE_CONTEXT_NT'visibility level count' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'visibility level count' {nonlocal: 'visibility level count'(var)number}
                                        CODE_BLOCK_NT {control structure: WHI}
                                            INVOCATION_LIST_NT'while the top-down ip count is greater than 0' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'while the top-down ip count is greater than 0' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'top-down ip count is greater than 0' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'top-down ip count is greater than 0' {proposition: << greater-than('top-down ip count', '0') >>} {term: 'top-down ip count'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the intermediate position be the actor' {indent: 3}
                                                    INVOCATION_NT'let the intermediate position be the actor' {phrase invoked: call}
                                                        LVALUE_LOCAL_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                                                INVOCATION_LIST_NT'let the ip count be 0' {indent: 3}
                                                    INVOCATION_NT'let the ip count be 0' {phrase invoked: call}
                                                        LVALUE_LOCAL_CONTEXT_NT'ip count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                            LOCAL_VARIABLE_NT'ip count' {local: LV<unallocated> number}
                                                        RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                                                CODE_BLOCK_NT {control structure: WHI}
                                                    INVOCATION_LIST_NT'while the ip count is less than the top-down ip count' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'while the ip count is less than the top-down ip count' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'ip count is less than the top-down ip count' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'ip count is less than the top-down ip count' {proposition: << less-than('ip count', 'the top-down ip count') >>} {term: 'ip count'}
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'let the intermediate position be the visibility-holder of th' {indent: 4}
                                                            INVOCATION_NT'let the intermediate position be the visibility-holder of th' {phrase invoked: call}
                                                                LVALUE_LOCAL_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                                    LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                                RVALUE_CONTEXT_NT'visibility-holder of the intermediate position' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                    PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate position'
                                                                        INVOCATION_LIST_NT'visibility-holder of the intermediate position'
                                                                            INVOCATION_NT'visibility-holder of the intermediate position' {phrase invoked: call} {resulting: object}
                                                                                RVALUE_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                                    LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                        INVOCATION_LIST_NT'increase the ip count by 1' {indent: 4}
                                                            INVOCATION_NT'increase the ip count by 1' {phrase invoked: call}
                                                                LVALUE_CONTEXT_NT'ip count' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                                    LOCAL_VARIABLE_NT'ip count' {local: LV<unallocated> number}
                                                                RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                                    CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                INVOCATION_LIST_NT'describe locale for the intermediate position' {indent: 3}
                                                    INVOCATION_NT'describe locale for the intermediate position' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'intermediate position' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'intermediate position' {local: LV<unallocated> thing}
                                                INVOCATION_LIST_NT'decrease the top-down ip count by 1' {indent: 3}
                                                    INVOCATION_NT'decrease the top-down ip count by 1' {phrase invoked: call}
                                                        LVALUE_CONTEXT_NT'top-down ip count' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                            LOCAL_VARIABLE_NT'top-down ip count' {local: LV<unallocated> number}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'carry out looking ( this is the check new arrival rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if in darkness' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if in darkness' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'in darkness' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'in darkness'
                                                    PHRASE_TO_DECIDE_VALUE_NT'in darkness'
                                                        INVOCATION_LIST_NT'in darkness'
                                                            INVOCATION_NT'in darkness' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the darkness witnessed is true' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the darkness witnessed is true'
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the location is a room' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the location is a room' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'location is a room' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'location is a room' {proposition: << kind=room('location') >>} {term: 'location'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the location is visited' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the location is visited'
                        RULE_NT'report an actor looking ( this is the other people looking r' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the player' {proposition: << NOT< ('actor' == 'the player') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] around." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] around." ( a )'
                                                INVOCATION_NT'"[The actor] [look] around." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] around." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [look] around." ( a )' {kind: text}
                        SENTENCE_NT'examining is an action applying to one visible thing and req' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'examining'
                            UNPARSED_NOUN_NT'applying to one visible thing and requiring light'
                        SENTENCE_NT'the examining action translates into inter as Examine' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'examining action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Examine'
                        SENTENCE_NT'the specification of the examining action is The act of look' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the examining action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'examining action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'examining action' {kind: action name} {action name: examining}{meaning: {examining action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The act of looking closely at
                            something. Note that the noun ' {refined} {eval: CONSTANT_NT'The act of looking closely at
                            something. Note that the noun ' {kind: text}}
                        SENTENCE_NT'the examining action has a truth state called examine text p' {unit: 2} {classified}
                            VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                            PROPER_NOUN_NT'examining action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'examining action' {kind: action name} {action name: examining}{meaning: {examining action = MISCELLANEOUS_MC}}}
                            ALLOWED_NT {refined}
                                PROPERTYCALLED_NT'called'
                                    UNPARSED_NOUN_NT'truth state' {indefinite 'a' n/m/f nom/acc s}
                                    UNPARSED_NOUN_NT'examine text printed'
                        RULE_NT'carry out examining ( this is the standard examining rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property description and the descri' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property description and the descri' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property description and the description o' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property description and the description o'
                                                    TEST_PROPOSITION_NT'noun provides the property description' {proposition: << provides('noun', 'the property description') >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the description of the noun is not ""' {proposition: << NOT< ('the description of the noun' == '""') NOT> >>} {term: 'the description of the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[description of the noun][line break]"' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'description of the noun' {suppress_newlines}
                                                INVOCATION_NT'description of the noun' {phrase invoked: call} {kind variable declarations: K=text} {save self}
                                                    RVALUE_CONTEXT_NT'description of the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        PROPERTY_VALUE_NT'description of the noun' {record as self}
                                                            CONSTANT_NT {kind: nothing valued property} {property: 'description'=text}{meaning: {description = PROPERTY_MC}}
                                                            NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                            INVOCATION_LIST_SAY_NT'line break'
                                                INVOCATION_NT'line break' {phrase invoked: call}
                                        INVOCATION_LIST_NT'now examine text printed is true' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        RULE_NT'carry out examining ( this is the examine directions rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a direction' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a direction' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a direction' {proposition: << kind=direction('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [see] nothing unexpected in that direction." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [see] nothing unexpected in that direction." ( a )'
                                                INVOCATION_NT'"[We] [see] nothing unexpected in that direction." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [see] nothing unexpected in that direction." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [see] nothing unexpected in that direction." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'now examine text printed is true' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        RULE_NT'carry out examining ( this is the examine containers rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a container' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a container' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a container' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a container' {proposition: << kind=container('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is open or the noun is transparent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the noun is open or the noun is transparent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is open or the noun is transparent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_OR_NT'noun is open or the noun is transparent'
                                                            TEST_PROPOSITION_NT'noun is open' {proposition: << open('noun') >>} {term: 'noun'}
                                                            TEST_PROPOSITION_NT'the noun is transparent' {proposition: << transparent('the noun') >>} {term: 'the noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if something described which is not scenery is in the noun a' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if something described which is not scenery is in the noun a' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'something described which is not scenery is in the noun and ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                LOGICAL_AND_NT'something described which is not scenery is in the noun and '
                                                                    TEST_PROPOSITION_NT'something described which is not scenery is in the noun' {proposition: << Exists x : kind=thing_c(x) ^ described(x) ^ NOT< scenery(x) NOT> ^ ('the noun' == <ContainerOf(*1) : x>) >>} {term: x}
                                                                    TEST_PROPOSITION_NT'something which is not the player is in the noun' {proposition: << Exists x : kind=thing_c(x) ^ NOT< (x == 'the player') NOT> ^ ('the noun' == <ContainerOf(*1) : x>) >>} {term: x}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "In [the noun] " ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"In [the noun] " ( a )'
                                                                INVOCATION_NT'"In [the noun] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"In [the noun] " ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"In [the noun] " ( a )' {kind: text}
                                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , no' {indent: 4}
                                                            INVOCATION_NT'list the contents of the noun' {phrase invoked: call} {phrase options invoked: as a sentence , tersely , not listing concealed items , prefacing with is/are}
                                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                        CODE_BLOCK_NT'say "."' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"."' {kind: text}
                                                        INVOCATION_LIST_NT'now examine text printed is true' {indent: 4} {control structure: NOW}
                                                            CONDITION_CONTEXT_NT'examine text printed is true'
                                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                                        CODE_BLOCK_NT {control structure: IF}
                                                            INVOCATION_LIST_NT'if examine text printed is false' {colon_block_command} {indent: 3}
                                                                INVOCATION_NT'if examine text printed is false' {phrase invoked: call}
                                                                    CONDITION_CONTEXT_NT'examine text printed is false' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: <null-parse-node>
                                                                    }
                                                                        TEST_PROPOSITION_NT'examine text printed is false' {proposition: << ('examine text printed' == 'false') >>} {term: 'examine text printed'}
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT {control structure: IF}
                                                                    INVOCATION_LIST_NT'if the player is in the noun' {colon_block_command} {indent: 4}
                                                                        INVOCATION_NT'if the player is in the noun' {phrase invoked: call}
                                                                            CONDITION_CONTEXT_NT'player is in the noun' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: <null-parse-node>
                                                                            }
                                                                                TEST_PROPOSITION_NT'player is in the noun' {proposition: << ('the noun' == <ContainerOf(*1) : 'player'>) >>} {term: 'player'}
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'make no decision' {indent: 5}
                                                                            INVOCATION_NT'make no decision' {phrase invoked: call}
                                                                CODE_BLOCK_NT'say "[The noun] [are] empty." ( b )' {control structure: SAY}
                                                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] empty." ( b )'
                                                                        INVOCATION_NT'"[The noun] [are] empty." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                            RVALUE_CONTEXT_NT'"[The noun] [are] empty." ( b )' {token check to do: <null-parse-node>
                                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                                CONSTANT_NT'"[The noun] [are] empty." ( b )' {kind: text}
                                                                INVOCATION_LIST_NT'now examine text printed is true' {indent: 4} {control structure: NOW}
                                                                    CONDITION_CONTEXT_NT'examine text printed is true'
                        RULE_NT'carry out examining ( this is the examine supporters rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a supporter' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a supporter' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a supporter' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a supporter' {proposition: << kind=supporter('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if something described which is not scenery is on the noun a' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if something described which is not scenery is on the noun a' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'something described which is not scenery is on the noun and ' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        LOGICAL_AND_NT'something described which is not scenery is on the noun and '
                                                            TEST_PROPOSITION_NT'something described which is not scenery is on the noun' {proposition: << Exists x : kind=thing_c(x) ^ described(x) ^ NOT< scenery(x) NOT> ^ ('the noun' == <SupporterOf(*1) : x>) >>} {term: x}
                                                            TEST_PROPOSITION_NT'something which is not the player is on the noun' {proposition: << Exists x : kind=thing_c(x) ^ NOT< (x == 'the player') NOT> ^ ('the noun' == <SupporterOf(*1) : x>) >>} {term: x}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "On [the noun] " ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"On [the noun] " ( a )'
                                                        INVOCATION_NT'"On [the noun] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"On [the noun] " ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"On [the noun] " ( a )' {kind: text}
                                                INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , no' {indent: 3}
                                                    INVOCATION_NT'list the contents of the noun' {phrase invoked: call} {phrase options invoked: as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information}
                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                CODE_BLOCK_NT'say "."' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"."' {kind: text}
                                                INVOCATION_LIST_NT'now examine text printed is true' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'examine text printed is true'
                        RULE_NT'carry out examining ( this is the examine devices rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a device' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a device' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a device' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a device' {proposition: << kind=device('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [are] [if story tense is present tense]curre' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The noun] [are] [if story tense is present tense]currently'
                                                INVOCATION_NT'"[The noun] [are] [if story tense is present tense]currently' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The noun] [are] [if story tense is present tense]currently' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The noun] [are] [if story tense is present tense]currently' {kind: text}
                                        INVOCATION_LIST_NT'now examine text printed is true' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        RULE_NT'carry out examining ( this is the examine undescribed things' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if examine text printed is false' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if examine text printed is false' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'examine text printed is false' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'examine text printed is false' {proposition: << ('examine text printed' == 'false') >>} {term: 'examine text printed'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [see] nothing special about [the noun]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [see] nothing special about [the noun]." ( a )'
                                                INVOCATION_NT'"[We] [see] nothing special about [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [see] nothing special about [the noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [see] nothing special about [the noun]." ( a )' {kind: text}
                        RULE_NT'report an actor examining ( this is the report other people ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the player' {proposition: << NOT< ('actor' == 'the player') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] closely at [the noun]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] closely at [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [look] closely at [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] closely at [the noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [look] closely at [the noun]." ( a )' {kind: text}
                        SENTENCE_NT'looking under is an action applying to one visible thing and' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'looking under'
                            UNPARSED_NOUN_NT'applying to one visible thing and requiring light'
                        SENTENCE_NT'the looking under action translates into inter as LookUnder' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'looking under action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'LookUnder'
                        SENTENCE_NT'the specification of the looking under action is The standar' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the looking under action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'looking under action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'looking under action' {kind: action name} {action name: looking under}{meaning: {looking under action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The standard Inform world
                            model does not have a concept of t' {refined} {eval: CONSTANT_NT'The standard Inform world
                            model does not have a concept of t' {kind: text}}
                        RULE_NT'carry out an actor looking under ( this is the standard look' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [find] nothing of interest." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [find] nothing of interest." ( a )'
                                                INVOCATION_NT'"[We] [find] nothing of interest." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [find] nothing of interest." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [find] nothing of interest." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor looking under ( this is the report other peo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is not the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is not the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is not the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is not the player' {proposition: << NOT< ('actor' == 'the player') NOT> >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [look] under [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [look] under [the noun]." ( a )'
                                                        INVOCATION_NT'"[The actor] [look] under [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [look] under [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [look] under [the noun]." ( a )' {kind: text}
                        SENTENCE_NT'searching is an action applying to one thing and requiring l' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'searching'
                            UNPARSED_NOUN_NT'applying to one thing and requiring light'
                        SENTENCE_NT'the searching action translates into inter as Search' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'searching action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Search'
                        SENTENCE_NT'the specification of the searching action is Searching looks' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the searching action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'searching action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'searching action' {kind: action name} {action name: searching}{meaning: {searching action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Searching looks at the contents
                            of an open or transparent co' {refined} {eval: CONSTANT_NT'Searching looks at the contents
                            of an open or transparent co' {kind: text}}
                        RULE_NT'check an actor searching ( this is the can't search unless c' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not a container and the noun is not a support' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not a container and the noun is not a support' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not a container and the noun is not a supporter' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun is not a container and the noun is not a supporter'
                                                    TEST_PROPOSITION_NT'noun is not a container' {proposition: << NOT< kind=container('noun') NOT> >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is not a supporter' {proposition: << NOT< kind=supporter('the noun') NOT> >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [find] nothing of interest." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [find] nothing of interest." ( a )'
                                                        INVOCATION_NT'"[We] [find] nothing of interest." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [find] nothing of interest." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [find] nothing of interest." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor searching ( this is the can't search closed o' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a closed opaque container' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a closed opaque container' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a closed opaque container' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a closed opaque container' {proposition: << kind=container('noun') ^ closed('noun') ^ opaque('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the actor' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the actor' {proposition: << ('player' == 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't see] inside, since [the noun] [are] closed.' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( '
                                                        INVOCATION_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( ' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report searching a container ( this is the standard search c' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun contains a described thing which is not scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun contains a described thing which is not scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun contains a described thing which is not scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun contains a described thing which is not scenery' {proposition: << Exists x : kind=thing(x) ^ described(x) ^ NOT< scenery(x) NOT> ^ ('noun' == <ContainerOf(*1) : x>) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "In [the noun] " ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"In [the noun] " ( a )'
                                                INVOCATION_NT'"In [the noun] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"In [the noun] " ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"In [the noun] " ( a )' {kind: text}
                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , no' {indent: 2}
                                            INVOCATION_NT'list the contents of the noun' {phrase invoked: call} {phrase options invoked: as a sentence , tersely , not listing concealed items , prefacing with is/are}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        CODE_BLOCK_NT'say "."' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"."' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The noun] [are] empty." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The noun] [are] empty." ( b )'
                                                INVOCATION_NT'"[The noun] [are] empty." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The noun] [are] empty." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The noun] [are] empty." ( b )' {kind: text}
                        RULE_NT'report searching a supporter ( this is the standard search s' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun supports a described thing which is not scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun supports a described thing which is not scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun supports a described thing which is not scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun supports a described thing which is not scenery' {proposition: << Exists x : kind=thing(x) ^ described(x) ^ NOT< scenery(x) NOT> ^ ('noun' == <SupporterOf(*1) : x>) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "On [the noun] " ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"On [the noun] " ( a )'
                                                INVOCATION_NT'"On [the noun] " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"On [the noun] " ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"On [the noun] " ( a )' {kind: text}
                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , no' {indent: 2}
                                            INVOCATION_NT'list the contents of the noun' {phrase invoked: call} {phrase options invoked: as a sentence , tersely , not listing concealed items , prefacing with is/are}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        CODE_BLOCK_NT'say "."' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"."' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] nothing on [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[There] [are] nothing on [the noun]." ( b )'
                                                INVOCATION_NT'"[There] [are] nothing on [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[There] [are] nothing on [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[There] [are] nothing on [the noun]." ( b )' {kind: text}
                        RULE_NT'report an actor searching ( this is the report other people ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the player' {proposition: << NOT< ('actor' == 'the player') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [search] [the noun]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [search] [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [search] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [search] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [search] [the noun]." ( a )' {kind: text}
                        SENTENCE_NT'consulting it about is an action applying to one thing and o' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'consulting it about'
                            UNPARSED_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the consulting it about action translates into inter as Cons' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'consulting it about action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Consult'
                        SENTENCE_NT'the specification of the consulting it about action is Consu' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the consulting it about action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'consulting it about action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'consulting it about action' {kind: action name} {action name: consulting it about}{meaning: {consulting it about action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Consulting is a very
                            flexible and potentially powerful actio' {refined} {eval: CONSTANT_NT'Consulting is a very
                            flexible and potentially powerful actio' {kind: text}}
                        RULE_NT'report an actor consulting something about ( this is the blo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [discover] nothing of interest in [the noun]." ( a' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [discover] nothing of interest in [the noun]." ( a )'
                                                INVOCATION_NT'"[We] [discover] nothing of interest in [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [discover] nothing of interest in [the noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [discover] nothing of interest in [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [look] at [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] at [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [look] at [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] at [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [look] at [the noun]." ( b )' {kind: text}
                    HEADING_NT'section 5 - standard actions which change the state of thing' {heading 5} {under: H5'section 5 - standard actions which change the state of things'} {unit: 2}
                        SENTENCE_NT'locking it with is an action applying to one thing and one c' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'locking it with'
                            UNPARSED_NOUN_NT'applying to one thing and one carried thing'
                        SENTENCE_NT'the locking it with action translates into inter as Lock' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'locking it with action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Lock'
                        SENTENCE_NT'the specification of the locking it with action is Locking i' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the locking it with action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'locking it with action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'locking it with action' {kind: action name} {action name: locking it with}{meaning: {locking it with action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Locking is the act of
                            using an object such as a key to ensur' {refined} {eval: CONSTANT_NT'Locking is the act of
                            using an object such as a key to ensur' {kind: text}}
                        RULE_NT'check an actor locking something with ( this is the can't lo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is l' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is l' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is lockable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is lockable'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'lockable'}) >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is lockable' {proposition: << lockable('the noun') >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [don't] seem to be somethin' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [don't] seem to be something [w'
                                                INVOCATION_NT'"[regarding the noun][Those] [don't] seem to be something [w' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [don't] seem to be something [w' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][Those] [don't] seem to be something [w' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor locking something with ( this is the can't lo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is locked' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is locked' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is locked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is locked' {proposition: << locked('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] locked at the [if story t' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] locked at the [if story tense'
                                                        INVOCATION_NT'"[regarding the noun][They're] locked at the [if story tense' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] locked at the [if story tense' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] locked at the [if story tense' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor locking something with ( this is the can't lo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is open' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is open' {proposition: << open('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "First [we] [would have] to close [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"First [we] [would have] to close [the noun]." ( a )'
                                                        INVOCATION_NT'"First [we] [would have] to close [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"First [we] [would have] to close [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"First [we] [would have] to close [the noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor locking something with ( this is the can't lo' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the second noun is not the actor or the nou' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the holder of the second noun is not the actor or the nou' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the second noun is not the actor or the noun does ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'holder of the second noun is not the actor or the noun does '
                                                    TEST_PROPOSITION_NT'holder of the second noun is not the actor' {proposition: << NOT< ('holder of the second noun' == 'the actor') NOT> >>} {term: 'holder of the second noun'}
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the noun does not provide the property matching key' {proposition: << NOT< provides('the noun', 'the property matching key') NOT> >>} {term: 'the noun'}
                                                        TEST_PROPOSITION_NT'the matching key of the noun is not the second noun' {proposition: << NOT< ('the matching key of the noun' == 'the second noun') NOT> >>} {term: 'the matching key of the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [don't] seem to fit ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [don't] seem to fit the '
                                                        INVOCATION_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor locking something with ( this is the stan' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is locked' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is locked'
                        RULE_NT'report an actor locking something with ( this is the standar' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [lock] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [lock] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [lock] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [lock] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [lock] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is visible' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is visible' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is visible' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is visible' {proposition: << visible('actor') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [lock] [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [lock] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [lock] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [lock] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [lock] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'unlocking it with is an action applying to one thing and one' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'unlocking it with'
                            UNPARSED_NOUN_NT'applying to one thing and one carried thing'
                        SENTENCE_NT'the unlocking it with action translates into inter as Unlock' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'unlocking it with action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Unlock'
                        SENTENCE_NT'the specification of the unlocking it with action is Unlocki' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the unlocking it with action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'unlocking it with action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'unlocking it with action' {kind: action name} {action name: unlocking it with}{meaning: {unlocking it with action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Unlocking undoes the
                            effect of locking, and renders the noun' {refined} {eval: CONSTANT_NT'Unlocking undoes the
                            effect of locking, and renders the noun' {kind: text}}
                        RULE_NT'check an actor unlocking something with ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is l' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is l' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is lockable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is lockable'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'lockable'}) >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is lockable' {proposition: << lockable('the noun') >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [don't] seem to be somethin' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [don't] seem to be something [w'
                                                INVOCATION_NT'"[regarding the noun][Those] [don't] seem to be something [w' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [don't] seem to be something [w' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][Those] [don't] seem to be something [w' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor unlocking something with ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not locked' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not locked' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not locked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not locked' {proposition: << NOT< locked('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] unlocked at the [if story' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] unlocked at the [if story ten'
                                                        INVOCATION_NT'"[regarding the noun][They're] unlocked at the [if story ten' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] unlocked at the [if story ten' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] unlocked at the [if story ten' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor unlocking something with ( this is the can't ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the second noun is not the actor or the nou' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the holder of the second noun is not the actor or the nou' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the second noun is not the actor or the noun does ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'holder of the second noun is not the actor or the noun does '
                                                    TEST_PROPOSITION_NT'holder of the second noun is not the actor' {proposition: << NOT< ('holder of the second noun' == 'the actor') NOT> >>} {term: 'holder of the second noun'}
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the noun does not provide the property matching key' {proposition: << NOT< provides('the noun', 'the property matching key') NOT> >>} {term: 'the noun'}
                                                        TEST_PROPOSITION_NT'the matching key of the noun is not the second noun' {proposition: << NOT< ('the matching key of the noun' == 'the second noun') NOT> >>} {term: 'the matching key of the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [don't] seem to fit ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [don't] seem to fit the '
                                                        INVOCATION_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the second noun][Those] [don't] seem to fit the ' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor unlocking something with ( this is the st' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is not locked' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is not locked'
                        RULE_NT'report an actor unlocking something with ( this is the stand' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [unlock] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [unlock] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [unlock] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [unlock] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [unlock] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is visible' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is visible' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is visible' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is visible' {proposition: << visible('actor') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [unlock] [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [unlock] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [unlock] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [unlock] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [unlock] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'switching on is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching on'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the switching on action translates into inter as SwitchOn' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching on action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SwitchOn'
                        SENTENCE_NT'the specification of the switching on action is The switchin' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the switching on action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'switching on action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'switching on action' {kind: action name} {action name: switching on}{meaning: {switching on action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The switching on and switching
                            off actions are for the simpl' {refined} {eval: CONSTANT_NT'The switching on and switching
                            off actions are for the simpl' {kind: text}}
                        RULE_NT'check an actor switching on ( this is the can't switch on un' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property switched on' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the noun provides the property switched on' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property switched on' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun provides the property switched on' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'switched on'=~'switched off'}) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] sw'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor switching on ( this is the can't switch on wh' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is switched on' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is switched on' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is switched on' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is switched on' {proposition: << switched on('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already on." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already on." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already on." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already on." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] already on." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor switching on ( this is the standard switc' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is switched on' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is switched on'
                        RULE_NT'report an actor switching on ( this is the standard report s' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [switch] [the noun] on." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [switch] [the noun] on." ( a )'
                                                INVOCATION_NT'"[The actor] [switch] [the noun] on." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [switch] [the noun] on." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [switch] [the noun] on." ( a )' {kind: text}
                        SENTENCE_NT'switching off is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching off'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the switching off action translates into inter as SwitchOff' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching off action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SwitchOff'
                        SENTENCE_NT'the specification of the switching off action is The switchi' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the switching off action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'switching off action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'switching off action' {kind: action name} {action name: switching off}{meaning: {switching off action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The switching off and switching
                            on actions are for the simpl' {refined} {eval: CONSTANT_NT'The switching off and switching
                            on actions are for the simpl' {kind: text}}
                        RULE_NT'check an actor switching off ( this is the can't switch off ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property switched on' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the noun provides the property switched on' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property switched on' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun provides the property switched on' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'switched on'=~'switched off'}) >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] sw'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] sw' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor switching off ( this is the can't switch off ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is switched off' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is switched off' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is switched off' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is switched off' {proposition: << switched off('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already off." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already off." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already off." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already off." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] already off." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor switching off ( this is the standard swit' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is switched off' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is switched off'
                        RULE_NT'report an actor switching off ( this is the standard report ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [switch] [the noun] off." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [switch] [the noun] off." ( a )'
                                                INVOCATION_NT'"[The actor] [switch] [the noun] off." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [switch] [the noun] off." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [switch] [the noun] off." ( a )' {kind: text}
                        SENTENCE_NT'opening is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'opening'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the opening action translates into inter as Open' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'opening action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Open'
                        SENTENCE_NT'the specification of the opening action is Opening makes som' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the opening action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'opening action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'opening action' {kind: action name} {action name: opening}{meaning: {opening action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Opening makes something no longer
                            a physical barrier. The ac' {refined} {eval: CONSTANT_NT'Opening makes something no longer
                            a physical barrier. The ac' {kind: text}}
                        RULE_NT'check an actor opening ( this is the can't open unless opena' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property openable and the noun is o' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property openable and the noun is o' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property openable and the noun is openable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property openable and the noun is openable'
                                                    TEST_PROPOSITION_NT'noun provides the property openable' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'openable'=~'unopenable'}) >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is openable' {proposition: << openable('the noun') >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] op'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] op' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] op' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] op' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor opening ( this is the can't open what's locke' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is l' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is l' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is locked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is locked'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'lockable'}) >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is locked' {proposition: << locked('the noun') >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [seem] to be locked." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [seem] to be locked." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [seem] to be locked." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [seem] to be locked." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They] [seem] to be locked." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor opening ( this is the can't open what's alrea' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is open' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is open' {proposition: << open('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already open." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already open." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already open." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already open." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] already open." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor opening ( this is the standard opening ru' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is open' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is open'
                        RULE_NT'report an actor opening ( this is the reveal any newly visib' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player and the noun is an opaque contain' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player and the noun is an opaque contain' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player and the noun is an opaque container and ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'actor is the player and the noun is an opaque container and '
                                                    TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    LOGICAL_AND_NT
                                                        TEST_PROPOSITION_NT'the noun is an opaque container' {proposition: << kind=container('the noun') ^ opaque('the noun') >>} {term: 'the noun'}
                                                        LOGICAL_AND_NT
                                                            TEST_PROPOSITION_NT'the first thing held by the noun is not nothing' {proposition: << NOT< ('the first thing held by the noun' == 'nothing') NOT> >>} {term: 'the first thing held by the noun'}
                                                            TEST_PROPOSITION_NT'the noun does not enclose the actor' {proposition: << NOT< encloses('the noun', 'the actor') NOT> >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [open] [the noun], revealing " ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [open] [the noun], revealing " ( a )'
                                                                INVOCATION_NT'"[We] [open] [the noun], revealing " ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [open] [the noun], revealing " ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [open] [the noun], revealing " ( a )' {kind: text}
                                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , no' {indent: 4}
                                                            INVOCATION_NT'list the contents of the noun' {phrase invoked: call} {phrase options invoked: as a sentence , tersely , not listing concealed items}
                                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                        CODE_BLOCK_NT'say "."' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"."' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor opening ( this is the standard report openin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [open] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [open] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [open] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [open] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [open] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player can see the actor' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the player can see the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player can see the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player can see the actor' {proposition: << can-see('player', 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [open] [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [open] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [open] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [open] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [open] [the noun]." ( b )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                CODE_BLOCK_NT'say "[The noun] [open]." ( c )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [open]." ( c )'
                                                        INVOCATION_NT'"[The noun] [open]." ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [open]." ( c )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [open]." ( c )' {kind: text}
                        SENTENCE_NT'closing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'closing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the closing action translates into inter as Close' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'closing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Close'
                        SENTENCE_NT'the specification of the closing action is Closing makes som' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the closing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'closing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'closing action' {kind: action name} {action name: closing}{meaning: {closing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Closing makes something into
                            a physical barrier. The action ' {refined} {eval: CONSTANT_NT'Closing makes something into
                            a physical barrier. The action ' {kind: text}}
                        RULE_NT'check an actor closing ( this is the can't close unless open' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun provides the property openable and the noun is o' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun provides the property openable and the noun is o' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun provides the property openable and the noun is openable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'noun provides the property openable and the noun is openable'
                                                    TEST_PROPOSITION_NT'noun provides the property openable' {proposition: << provides('noun', CONSTANT_NT {kind: either/or property} {property: 'openable'=~'unopenable'}) >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is openable' {proposition: << openable('the noun') >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] cl'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] cl' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] cl' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] cl' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor closing ( this is the can't close what's alre' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is closed' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is closed' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is closed' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is closed' {proposition: << closed('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already closed." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already closed." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already closed." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already closed." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They're] already closed." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor closing ( this is the standard closing ru' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is closed' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the noun is closed'
                        RULE_NT'report an actor closing ( this is the standard report closin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [close] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [close] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [close] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [close] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [close] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player can see the actor' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the player can see the actor' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player can see the actor' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player can see the actor' {proposition: << can-see('player', 'the actor') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [close] [the noun]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [close] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [close] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [close] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [close] [the noun]." ( b )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                CODE_BLOCK_NT'say "[The noun] [close]." ( c )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [close]." ( c )'
                                                        INVOCATION_NT'"[The noun] [close]." ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [close]." ( c )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [close]." ( c )' {kind: text}
                        SENTENCE_NT'wearing is an action applying to one carried thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'wearing'
                            UNPARSED_NOUN_NT'applying to one carried thing'
                        SENTENCE_NT'the wearing action translates into inter as Wear' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'wearing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Wear'
                        SENTENCE_NT'the specification of the wearing action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the wearing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'wearing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'wearing action' {kind: action name} {action name: wearing}{meaning: {wearing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules give Inform
                            only a simple model of clothi' {refined} {eval: CONSTANT_NT'The Standard Rules give Inform
                            only a simple model of clothi' {kind: text}}
                        RULE_NT'check an actor wearing ( this is the can't wear what's not c' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not a thing or the noun is not wearable' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not a thing or the noun is not wearable' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not a thing or the noun is not wearable' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'noun is not a thing or the noun is not wearable'
                                                    TEST_PROPOSITION_NT'noun is not a thing' {proposition: << NOT< kind=thing('noun') NOT> >>} {term: 'noun'}
                                                    TEST_PROPOSITION_NT'the noun is not wearable' {proposition: << NOT< wearable('the noun') NOT> >>} {term: 'the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't wear] [regarding the noun][those]!" ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )'
                                                        INVOCATION_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor wearing ( this is the can't wear what's not h' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the holder of the noun is not the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the holder of the noun is not the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'holder of the noun is not the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'holder of the noun is not the actor' {proposition: << NOT< ('holder of the noun' == 'the actor') NOT> >>} {term: 'holder of the noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [regarding the noun][those]!" ( a' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor wearing ( this is the can't wear what's alrea' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] already wearing [regarding the noun][those]!"' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a'
                                                        INVOCATION_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor wearing ( this is the standard wearing ru' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor wears the noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the actor wears the noun'
                        RULE_NT'report an actor wearing ( this is the standard report wearin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [put] on [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [put] on [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [put] on [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [put] on [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [put] on [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [put] on [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] on [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [put] on [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] on [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [put] on [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'taking off is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'taking off'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the taking off action translates into inter as Disrobe' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'taking off action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Disrobe'
                        RULE_NT'does the player mean taking off something worn' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it is very likely'
                        SENTENCE_NT'the specification of the taking off action is The Standard R' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the taking off action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'taking off action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'taking off action' {kind: action name} {action name: taking off}{meaning: {taking off action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules give Inform
                            only a simple model of clothi' {refined} {eval: CONSTANT_NT'The Standard Rules give Inform
                            only a simple model of clothi' {kind: text}}
                        RULE_NT'check an actor taking off ( this is the can't take off what'' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not wearing the noun' {proposition: << NOT< ('actor' == <WearerOf(*1) : 'the noun'>) NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] wearing [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] wearing [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] wearing [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] wearing [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [aren't] wearing [the noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor taking off ( this is the can't exceed carryin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the number of things carried by the actor is at least the' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carryi' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carryi' {proposition: << at-least('number of things carried by the actor', 'the carrying capacity of the actor') >>} {term: 'number of things carried by the actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] carrying too many things already." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] carrying too many things already." ( a )'
                                                        INVOCATION_NT'"[We]['re] carrying too many things already." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We]['re] carrying too many things already." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We]['re] carrying too many things already." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor taking off ( this is the standard taking ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor carries the noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the actor carries the noun'
                        RULE_NT'report an actor taking off ( this is the standard report tak' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [take] off [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [take] off [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [take] off [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [take] off [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [take] off [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [take] off [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [take] off [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [take] off [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [take] off [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [take] off [the noun]." ( b )' {kind: text}
                    HEADING_NT'section 6 - standard actions concerning other people' {heading 5} {under: H5'section 6 - standard actions concerning other people'} {unit: 2}
                        SENTENCE_NT'giving it to is an action applying to one carried thing and ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'giving it to'
                            UNPARSED_NOUN_NT'applying to one carried thing and one thing'
                        SENTENCE_NT'the giving it to action translates into inter as Give' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'giving it to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Give'
                        SENTENCE_NT'the specification of the giving it to action is This action ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the giving it to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'giving it to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'giving it to action' {kind: action name} {action name: giving it to}{meaning: {giving it to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'This action is indexed by
                            Inform under 'Actions concerning o' {refined} {eval: CONSTANT_NT'This action is indexed by
                            Inform under 'Actions concerning o' {kind: text}}
                        RULE_NT'check an actor giving something to ( this is the can't give ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the holder of the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun' {proposition: << NOT< ('actor' == 'the holder of the noun') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [aren't] holding [the noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor giving something to ( this is the can't give ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the second noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the second noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the second noun' {proposition: << ('actor' == 'the second noun') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't give] [the noun] to [ourselves]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )'
                                                        INVOCATION_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor giving something to ( this is the can't give ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a person' {proposition: << NOT< kind=person('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [aren't] able to receive things." ( a' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [aren't] able to receive things." ( a )'
                                                        INVOCATION_NT'"[The second noun] [aren't] able to receive things." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The second noun] [aren't] able to receive things." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The second noun] [aren't] able to receive things." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor giving something to ( this is the can't give ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification bre' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]"'
                                                INVOCATION_NT'"(first taking [the noun] off)[command clarification break]"' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]"' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first taking [the noun] off)[command clarification break]"' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor giving something to ( this is the block givin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The second noun] [don't] seem interested." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The second noun] [don't] seem interested." ( a )'
                                                INVOCATION_NT'"[The second noun] [don't] seem interested." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The second noun] [don't] seem interested." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The second noun] [don't] seem interested." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor giving something to ( this is the can't excee' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the number of things carried by the second noun is at lea' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the number of things carried by the second noun is at lea' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'number of things carried by the second noun is at least the ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'number of things carried by the second noun is at least the ' {proposition: << at-least('number of things carried by the second noun', 'the carrying capacity of the second noun') >>} {term: 'number of things carried by the second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [are] carrying too many things alread' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [are] carrying too many things already." '
                                                        INVOCATION_NT'"[The second noun] [are] carrying too many things already." ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The second noun] [are] carrying too many things already." ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The second noun] [are] carrying too many things already." ' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'carry out an actor giving something to ( this is the standar' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'move the noun to the second noun'
                                    INVOCATION_NT'move the noun to the second noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                        RULE_NT'report an actor giving something to ( this is the standard r' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [give] [the noun] to [the second noun]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [give] [the noun] to [the second noun]." ( a )'
                                                INVOCATION_NT'"[We] [give] [the noun] to [the second noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [give] [the noun] to [the second noun]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [give] [the noun] to [the second noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {control structure: O}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the second noun is the player' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the second noun is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'second noun is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'second noun is the player' {proposition: << ('second noun' == 'the player') >>} {term: 'second noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [give] [the noun] to [us]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [give] [the noun] to [us]." ( b )'
                                                        INVOCATION_NT'"[The actor] [give] [the noun] to [us]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [give] [the noun] to [us]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [give] [the noun] to [us]." ( b )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [give] [the noun] to [the second noun]." ( ' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )'
                                                        INVOCATION_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )' {kind: text}
                        SENTENCE_NT'showing it to is an action applying to one carried thing and' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'showing it to'
                            UNPARSED_NOUN_NT'applying to one carried thing and one visible thing'
                        SENTENCE_NT'the showing it to action translates into inter as Show' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'showing it to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Show'
                        SENTENCE_NT'the specification of the showing it to action is Anyone can ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the showing it to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'showing it to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'showing it to action' {kind: action name} {action name: showing it to}{meaning: {showing it to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Anyone can show anyone
                            else something which they are carryin' {refined} {eval: CONSTANT_NT'Anyone can show anyone
                            else something which they are carryin' {kind: text}}
                        RULE_NT'check an actor showing something to ( this is the can't show' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the holder of the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun' {proposition: << NOT< ('actor' == 'the holder of the noun') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [aren't] holding [the noun]." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor showing something to ( this is the convert sh' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the second noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the second noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the second noun' {proposition: << ('actor' == 'the second noun') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the examining action on the noun' {indent: 2}
                                            INVOCATION_NT'convert to the examining action on the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'examining action' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an action name'} {required: action name}
                                                    CONSTANT_NT'examining action' {kind: action name} {action name: examining}{meaning: {examining action = MISCELLANEOUS_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'check an actor showing something to ( this is the block show' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The second noun] [are] unimpressed." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The second noun] [are] unimpressed." ( a )'
                                                INVOCATION_NT'"[The second noun] [are] unimpressed." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The second noun] [are] unimpressed." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The second noun] [are] unimpressed." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'waking is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'waking'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the waking action translates into inter as WakeOther' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'waking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'WakeOther'
                        SENTENCE_NT'the specification of the waking action is This is the act of' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the waking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'waking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'waking action' {kind: action name} {action name: waking}{meaning: {waking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'This is the act of jostling
                            a sleeping person to wake him or' {refined} {eval: CONSTANT_NT'This is the act of jostling
                            a sleeping person to wake him or' {kind: text}}
                        RULE_NT'check an actor waking ( this is the block waking rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "That [seem] unnecessary." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"That [seem] unnecessary." ( a )'
                                                INVOCATION_NT'"That [seem] unnecessary." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"That [seem] unnecessary." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"That [seem] unnecessary." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'throwing it at is an action applying to one carried thing an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'throwing it at'
                            UNPARSED_NOUN_NT'applying to one carried thing and one visible thing'
                        SENTENCE_NT'the throwing it at action translates into inter as ThrowAt' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'throwing it at action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ThrowAt'
                        SENTENCE_NT'the specification of the throwing it at action is Throwing s' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the throwing it at action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'throwing it at action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'throwing it at action' {kind: action name} {action name: throwing it at}{meaning: {throwing it at action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Throwing something at
                            someone or something is difficult for ' {refined} {eval: CONSTANT_NT'Throwing something at
                            someone or something is difficult for ' {kind: text}}
                        RULE_NT'check an actor throwing something at ( this is the implicitl' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is wearing the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification bre' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]"'
                                                INVOCATION_NT'"(first taking [the noun] off)[command clarification break]"' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]"' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first taking [the noun] off)[command clarification break]"' {kind: text}
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun' {indent: 2}
                                            INVOCATION_NT'silently try the actor trying taking off the noun' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'actor trying taking off the noun' {kind: action} {action pattern: <action: taking off /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is wearing the noun' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the actor is wearing the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is wearing the noun' {proposition: << ('actor' == <WearerOf(*1) : 'the noun'>) >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 3}
                                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor throwing something at ( this is the futile to' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a person' {proposition: << NOT< kind=person('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Futile." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Futile." ( a )'
                                                        INVOCATION_NT'"Futile." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Futile." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Futile." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor throwing something at ( this is the block thr' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [lack] the nerve when it [if story tense is the pa' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [lack] the nerve when it [if story tense is the past
                                            t'
                                                INVOCATION_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                t' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                    t' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                        t' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'attacking is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'attacking'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the attacking action translates into inter as Attack' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'attacking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Attack'
                        SENTENCE_NT'the specification of the attacking action is Violence is sel' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the attacking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'attacking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'attacking action' {kind: action name} {action name: attacking}{meaning: {attacking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Violence is seldom the answer,
                            and attempts to attack anothe' {refined} {eval: CONSTANT_NT'Violence is seldom the answer,
                            and attempts to attack anothe' {kind: text}}
                        RULE_NT'check an actor attacking ( this is the block attacking rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "Violence [aren't] the answer to this one." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Violence [aren't] the answer to this one." ( a )'
                                                INVOCATION_NT'"Violence [aren't] the answer to this one." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Violence [aren't] the answer to this one." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Violence [aren't] the answer to this one." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'kissing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'kissing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the kissing action translates into inter as Kiss' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'kissing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Kiss'
                        SENTENCE_NT'the specification of the kissing action is Possibly because ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the kissing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'kissing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'kissing action' {kind: action name} {action name: kissing}{meaning: {kissing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Possibly because Inform was
                            originally written by an English' {refined} {eval: CONSTANT_NT'Possibly because Inform was
                            originally written by an English' {kind: text}}
                        RULE_NT'check an actor kissing ( this is the kissing yourself rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is the actor' {proposition: << ('noun' == 'the actor') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [don't] get much from that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [don't] get much from that." ( a )'
                                                        INVOCATION_NT'"[We] [don't] get much from that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [don't] get much from that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [don't] get much from that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor kissing ( this is the block kissing rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [might not] like that." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The noun] [might not] like that." ( a )'
                                                INVOCATION_NT'"[The noun] [might not] like that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The noun] [might not] like that." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The noun] [might not] like that." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'answering it that is an action applying to one thing and one' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'answering it that'
                            UNPARSED_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the answering it that action translates into inter as Answer' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'answering it that action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Answer'
                        SENTENCE_NT'the specification of the answering it that action is The Sta' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the answering it that action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'answering it that action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'answering it that action' {kind: action name} {action name: answering it that}{meaning: {answering it that action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to hand' {refined} {eval: CONSTANT_NT'The Standard Rules do
                            not include any systematic way to hand' {kind: text}}
                        RULE_NT'report an actor answering something that ( this is the block' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] no reply." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[There] [are] no reply." ( a )'
                                                INVOCATION_NT'"[There] [are] no reply." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[There] [are] no reply." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[There] [are] no reply." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'telling it about is an action applying to one thing and one ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'telling it about'
                            UNPARSED_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the telling it about action translates into inter as Tell' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'telling it about action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Tell'
                        SENTENCE_NT'the specification of the telling it about action is The Stan' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the telling it about action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'telling it about action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'telling it about action' {kind: action name} {action name: telling it about}{meaning: {telling it about action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to hand' {refined} {eval: CONSTANT_NT'The Standard Rules do
                            not include any systematic way to hand' {kind: text}}
                        RULE_NT'check an actor telling something about ( this is the telling' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the noun' {proposition: << ('actor' == 'the noun') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [talk] to [ourselves] a while." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [talk] to [ourselves] a while." ( a )'
                                                        INVOCATION_NT'"[We] [talk] to [ourselves] a while." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [talk] to [ourselves] a while." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [talk] to [ourselves] a while." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor telling something about ( this is the block ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "This [provoke] no reaction." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"This [provoke] no reaction." ( a )'
                                                INVOCATION_NT'"This [provoke] no reaction." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"This [provoke] no reaction." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"This [provoke] no reaction." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'asking it about is an action applying to one thing and one t' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'asking it about'
                            UNPARSED_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the asking it about action translates into inter as Ask' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'asking it about action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Ask'
                        SENTENCE_NT'the specification of the asking it about action is The Stand' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the asking it about action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'asking it about action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'asking it about action' {kind: action name} {action name: asking it about}{meaning: {asking it about action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to hand' {refined} {eval: CONSTANT_NT'The Standard Rules do
                            not include any systematic way to hand' {kind: text}}
                        RULE_NT'report an actor asking something about ( this is the block a' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] no reply." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[There] [are] no reply." ( a )'
                                                INVOCATION_NT'"[There] [are] no reply." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[There] [are] no reply." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[There] [are] no reply." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'asking it for is an action applying to two things' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'asking it for'
                            UNPARSED_NOUN_NT'applying to two things'
                        SENTENCE_NT'the asking it for action translates into inter as AskFor' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'asking it for action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'AskFor'
                        SENTENCE_NT'the specification of the asking it for action is The Standar' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the asking it for action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'asking it for action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'asking it for action' {kind: action name} {action name: asking it for}{meaning: {asking it for action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to hand' {refined} {eval: CONSTANT_NT'The Standard Rules do
                            not include any systematic way to hand' {kind: text}}
                        RULE_NT'check an actor asking something for ( this is the asking you' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the noun and the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the noun and the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the noun and the actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_AND_NT'actor is the noun and the actor is the player'
                                                    TEST_PROPOSITION_NT'actor is the noun' {proposition: << ('actor' == 'the noun') >>} {term: 'actor'}
                                                    TEST_PROPOSITION_NT'the actor is the player' {proposition: << ('the actor' == 'the player') >>} {term: 'the actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try taking inventory' {indent: 2}
                                            INVOCATION_NT'try taking inventory' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'taking inventory' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'taking inventory' {kind: action} {action pattern: <action: taking inventory / >}
                                        CODE_BLOCK_NT {control structure: INS}
                        RULE_NT'check an actor asking something for ( this is the translate ' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to request of the noun to perform giving it to actio'
                                    INVOCATION_NT'convert to request of the noun to perform giving it to actio' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                        RVALUE_CONTEXT_NT'giving it to action' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action name'} {required: action name}
                                            CONSTANT_NT'giving it to action' {kind: action name} {action name: giving it to}{meaning: {giving it to action = MISCELLANEOUS_MC}}
                                        RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                                        RVALUE_CONTEXT_NT'actor' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'actor' {nonlocal: 'actor'(var)person}
                    HEADING_NT'section 7 - standard actions which are checked but then do n' {heading 5} {under: H5'section 7 - standard actions which are checked but then do nothing unless rules intervene'} {unit: 2}
                        SENTENCE_NT'waiting is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'waiting'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waiting action translates into inter as Wait' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'waiting action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Wait'
                        SENTENCE_NT'the specification of the waiting action is The inaction acti' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the waiting action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'waiting action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'waiting action' {kind: action name} {action name: waiting}{meaning: {waiting action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The inaction action: where would
                            we be without waiting? Wait' {refined} {eval: CONSTANT_NT'The inaction action: where would
                            we be without waiting? Wait' {kind: text}}
                        RULE_NT'report an actor waiting ( this is the standard report waitin' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Time [pass]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Time [pass]." ( a )'
                                                        INVOCATION_NT'"Time [pass]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Time [pass]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Time [pass]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [wait]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wait]." ( b )'
                                                INVOCATION_NT'"[The actor] [wait]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [wait]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [wait]." ( b )' {kind: text}
                        SENTENCE_NT'touching is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'touching'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the touching action translates into inter as Touch' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'touching action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Touch'
                        SENTENCE_NT'the specification of the touching action is Touching is just' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the touching action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'touching action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'touching action' {kind: action name} {action name: touching}{meaning: {touching action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Touching is just that, touching
                            something without applying p' {refined} {eval: CONSTANT_NT'Touching is just that, touching
                            something without applying p' {kind: text}}
                        RULE_NT'report an actor touching ( this is the report touching yours' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is the actor' {proposition: << ('noun' == 'the actor') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_VALUE_NT'action is not silent'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                        INVOCATION_LIST_NT'action is not silent'
                                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [achieve] nothing by this." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[We] [achieve] nothing by this." ( a )'
                                                                INVOCATION_NT'"[We] [achieve] nothing by this." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[We] [achieve] nothing by this." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[We] [achieve] nothing by this." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                CODE_BLOCK_NT'say "[The actor] [touch] [themselves]." ( b )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [touch] [themselves]." ( b )'
                                                        INVOCATION_NT'"[The actor] [touch] [themselves]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The actor] [touch] [themselves]." ( b )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The actor] [touch] [themselves]." ( b )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor touching ( this is the report touching other' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 3}
                                                        INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_VALUE_NT'action is not silent'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                        INVOCATION_LIST_NT'action is not silent'
                                                                            INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                                INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the noun is the player' {colon_block_command} {indent: 2}
                                                        INVOCATION_NT'if the noun is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'noun is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'noun is the player' {proposition: << ('noun' == 'the player') >>} {term: 'noun'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The actor] [touch] [us]." ( b )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [us]." ( b )'
                                                                INVOCATION_NT'"[The actor] [touch] [us]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [us]." ( b )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[The actor] [touch] [us]." ( b )' {kind: text}
                                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                        CODE_BLOCK_NT'say "[The actor] [touch] [the noun]." ( c )' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [the noun]." ( c )'
                                                                INVOCATION_NT'"[The actor] [touch] [the noun]." ( c )' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [the noun]." ( c )' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"[The actor] [touch] [the noun]." ( c )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'continue the action' {indent: 1}
                                    INVOCATION_NT'continue the action' {phrase invoked: call}
                        RULE_NT'report an actor touching ( this is the report touching thing' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [feel] nothing unexpected." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [feel] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [feel] nothing unexpected." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [feel] nothing unexpected." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [feel] nothing unexpected." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [touch] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [touch] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [touch] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'waving is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'waving'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the waving action translates into inter as Wave' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'waving action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Wave'
                        SENTENCE_NT'the specification of the waving action is Waving in this sen' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the waving action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'waving action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'waving action' {kind: action name} {action name: waving}{meaning: {waving action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Waving in this sense is like
                            waving a sceptre: the item to b' {refined} {eval: CONSTANT_NT'Waving in this sense is like
                            waving a sceptre: the item to b' {kind: text}}
                        RULE_NT'check an actor waving ( this is the can't wave what's not he' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is not the holder of the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun' {proposition: << NOT< ('actor' == 'the holder of the noun') NOT> >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [we] [aren't] holding [regarding the noun][those]."' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a'
                                                        INVOCATION_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor waving ( this is the report waving things ru' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [wave] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [wave] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [wave] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [wave] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [wave] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [wave] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wave] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [wave] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [wave] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [wave] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'pulling is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'pulling'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the pulling action translates into inter as Pull' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'pulling action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Pull'
                        SENTENCE_NT'the specification of the pulling action is Pulling is the ac' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the pulling action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'pulling action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'pulling action' {kind: action name} {action name: pulling}{meaning: {pulling action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Pulling is the act of pulling
                            something not grossly larger t' {refined} {eval: CONSTANT_NT'Pulling is the act of pulling
                            something not grossly larger t' {kind: text}}
                        RULE_NT'check an actor pulling ( this is the can't pull what's fixed' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is fixed in place' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is fixed in place' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is fixed in place' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is fixed in place' {proposition: << fixed in place('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pulling ( this is the can't pull scenery rule' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is scenery' {proposition: << scenery('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pulling ( this is the can't pull people rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor pulling ( this is the report pulling rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [pull] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [pull] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [pull] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [pull] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [pull] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'pushing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'pushing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the pushing action translates into inter as Push' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'pushing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Push'
                        SENTENCE_NT'the specification of the pushing action is Pushing is the ac' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the pushing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'pushing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'pushing action' {kind: action name} {action name: pushing}{meaning: {pushing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Pushing is the act of pushing
                            something not grossly larger t' {refined} {eval: CONSTANT_NT'Pushing is the act of pushing
                            something not grossly larger t' {kind: text}}
                        RULE_NT'check an actor pushing something ( this is the can't push wh' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is fixed in place' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is fixed in place' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is fixed in place' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is fixed in place' {proposition: << fixed in place('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something ( this is the can't push sc' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is scenery' {proposition: << scenery('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something ( this is the can't push pe' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor pushing something ( this is the report pushi' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [push] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [push] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [push] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [push] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [push] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'turning is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'turning'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the turning action translates into inter as Turn' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'turning action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Turn'
                        SENTENCE_NT'the specification of the turning action is Turning is the ac' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the turning action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'turning action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'turning action' {kind: action name} {action name: turning}{meaning: {turning action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Turning is the act of rotating
                            something - say, a dial.In ' {refined} {eval: CONSTANT_NT'Turning is the act of rotating
                            something - say, a dial.In ' {kind: text}}
                        RULE_NT'check an actor turning ( this is the can't turn what's fixed' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is fixed in place' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is fixed in place' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is fixed in place' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is fixed in place' {proposition: << fixed in place('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor turning ( this is the can't turn scenery rule' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is scenery' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is scenery' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is scenery' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is scenery' {proposition: << scenery('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor turning ( this is the can't turn people rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor turning ( this is the report turning rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [turn] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [turn] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [turn] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [turn] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [turn] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'pushing it to is an action applying to one thing and one vis' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'pushing it to'
                            UNPARSED_NOUN_NT'applying to one thing and one visible thing'
                        SENTENCE_NT'the pushing it to action translates into inter as PushDir' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'pushing it to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PushDir'
                        SENTENCE_NT'the specification of the pushing it to action is This action' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the pushing it to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'pushing it to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'pushing it to action' {kind: action name} {action name: pushing it to}{meaning: {pushing it to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'This action covers pushing
                            a large object, not being carried' {refined} {eval: CONSTANT_NT'This action covers pushing
                            a large object, not being carried' {kind: text}}
                        RULE_NT'check an actor pushing something to ( this is the can't push' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not pushable between rooms' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not pushable between rooms' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not pushable between rooms' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not pushable between rooms' {proposition: << NOT< pushable between rooms('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from place to place." ( a' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something to ( this is the can't push' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a direction' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not a direction' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a direction' {proposition: << NOT< kind=direction('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] a direction." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] a direction." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [aren't] a direction." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] a direction." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[regarding the noun][They] [aren't] a direction." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something to ( this is the can't push' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is up or the second noun is down' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is up or the second noun is down' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is up or the second noun is down' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'second noun is up or the second noun is down'
                                                    TEST_PROPOSITION_NT'second noun is up' {proposition: << ('second noun' == 'up') >>} {term: 'second noun'}
                                                    TEST_PROPOSITION_NT'the second noun is down' {proposition: << ('the second noun' == 'down') >>} {term: 'the second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed up or down." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed up or down." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed up or down." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed up or down." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed up or down." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something to ( this is the can't push' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun encloses the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun encloses the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun encloses the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun encloses the actor' {proposition: << encloses('noun', 'the actor') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from here." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from here." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed from here." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from here." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed from here." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something to ( this is the standard p' {unit: 2}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to special going-with-push action'
                                    INVOCATION_NT'convert to special going-with-push action' {phrase invoked: call}
                        RULE_NT'check an actor pushing something to ( this is the block push' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from place to place." ( a' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                INVOCATION_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The noun] [cannot] be pushed from place to place." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'squeezing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'squeezing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the squeezing action translates into inter as Squeeze' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'squeezing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Squeeze'
                        SENTENCE_NT'the specification of the squeezing action is Squeezing is an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the squeezing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'squeezing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'squeezing action' {kind: action name} {action name: squeezing}{meaning: {squeezing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'Squeezing is an action which
                            can conveniently vary from sque' {refined} {eval: CONSTANT_NT'Squeezing is an action which
                            can conveniently vary from sque' {kind: text}}
                        RULE_NT'check an actor squeezing ( this is the innuendo about squeez' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person' {proposition: << kind=person('noun') >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor squeezing ( this is the report squeezing rul' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [achieve] nothing by this." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [achieve] nothing by this." ( a )'
                                                        INVOCATION_NT'"[We] [achieve] nothing by this." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [achieve] nothing by this." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [achieve] nothing by this." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [squeeze] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [squeeze] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [squeeze] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [squeeze] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [squeeze] [the noun]." ( b )' {kind: text}
                    HEADING_NT'section 8 - standard actions which always do nothing unless ' {heading 5} {under: H5'section 8 - standard actions which always do nothing unless rules intervene'} {unit: 2}
                        SENTENCE_NT'saying yes is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'saying yes'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying yes action translates into inter as Yes' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'saying yes action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Yes'
                        SENTENCE_NT'the specification of the saying yes action is The Standard R' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the saying yes action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'saying yes action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'saying yes action' {kind: action name} {action name: saying yes}{meaning: {saying yes action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor saying yes ( this is the block saying yes rul' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "That was a rhetorical question." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"That was a rhetorical question." ( a )'
                                                INVOCATION_NT'"That was a rhetorical question." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"That was a rhetorical question." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"That was a rhetorical question." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'saying no is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'saying no'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying no action translates into inter as No' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'saying no action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'No'
                        SENTENCE_NT'the specification of the saying no action is The Standard Ru' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the saying no action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'saying no action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'saying no action' {kind: action name} {action name: saying no}{meaning: {saying no action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor saying no ( this is the block saying no rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "That was a rhetorical question." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"That was a rhetorical question." ( a )'
                                                INVOCATION_NT'"That was a rhetorical question." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"That was a rhetorical question." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"That was a rhetorical question." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'burning is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'burning'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the burning action translates into inter as Burn' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'burning action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Burn'
                        SENTENCE_NT'the specification of the burning action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the burning action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'burning action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'burning action' {kind: action name} {action name: burning}{meaning: {burning action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor burning ( this is the block burning rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "This dangerous act [would achieve] little." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"This dangerous act [would achieve] little." ( a )'
                                                INVOCATION_NT'"This dangerous act [would achieve] little." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"This dangerous act [would achieve] little." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"This dangerous act [would achieve] little." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'waking up is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'waking up'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waking up action translates into inter as Wake' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'waking up action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Wake'
                        SENTENCE_NT'the specification of the waking up action is The Standard Ru' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the waking up action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'waking up action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'waking up action' {kind: action name} {action name: waking up}{meaning: {waking up action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor waking up ( this is the block waking up rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "The dreadful truth [are], this [are not] a dream." ( a ' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"The dreadful truth [are], this [are not] a dream." ( a )'
                                                INVOCATION_NT'"The dreadful truth [are], this [are not] a dream." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"The dreadful truth [are], this [are not] a dream." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"The dreadful truth [are], this [are not] a dream." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'thinking is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'thinking'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the thinking action translates into inter as Think' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'thinking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Think'
                        SENTENCE_NT'the specification of the thinking action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the thinking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'thinking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'thinking action' {kind: action name} {action name: thinking}{meaning: {thinking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor thinking ( this is the block thinking rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "What a good idea." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"What a good idea." ( a )'
                                                INVOCATION_NT'"What a good idea." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"What a good idea." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"What a good idea." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'smelling is an action applying to nothing or one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'smelling'
                            UNPARSED_NOUN_NT'applying to nothing or one thing'
                        SENTENCE_NT'the smelling action translates into inter as Smell' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'smelling action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Smell'
                        SENTENCE_NT'the specification of the smelling action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the smelling action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'smelling action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'smelling action' {kind: action name} {action name: smelling}{meaning: {smelling action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'report an actor smelling ( this is the report smelling rule ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [smell] nothing unexpected." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [smell] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [smell] nothing unexpected." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [smell] nothing unexpected." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [smell] nothing unexpected." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [sniff]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [sniff]." ( b )'
                                                INVOCATION_NT'"[The actor] [sniff]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [sniff]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [sniff]." ( b )' {kind: text}
                        SENTENCE_NT'listening to is an action applying to nothing or one thing a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'listening to'
                            UNPARSED_NOUN_NT'applying to nothing or one thing and abbreviable'
                        SENTENCE_NT'the listening to action translates into inter as Listen' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'listening to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Listen'
                        SENTENCE_NT'the specification of the listening to action is The Standard' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the listening to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'listening to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'listening to action' {kind: action name} {action name: listening to}{meaning: {listening to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'report an actor listening to ( this is the report listening ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [hear] nothing unexpected." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [hear] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [hear] nothing unexpected." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [hear] nothing unexpected." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [hear] nothing unexpected." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [listen]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [listen]." ( b )'
                                                INVOCATION_NT'"[The actor] [listen]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [listen]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [listen]." ( b )' {kind: text}
                        SENTENCE_NT'tasting is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'tasting'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the tasting action translates into inter as Taste' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'tasting action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Taste'
                        SENTENCE_NT'the specification of the tasting action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the tasting action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'tasting action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'tasting action' {kind: action name} {action name: tasting}{meaning: {tasting action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'report an actor tasting ( this is the report tasting rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [taste] nothing unexpected." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [taste] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [taste] nothing unexpected." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [taste] nothing unexpected." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [taste] nothing unexpected." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [taste] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [taste] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [taste] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [taste] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [taste] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'cutting is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'cutting'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the cutting action translates into inter as Cut' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'cutting action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Cut'
                        SENTENCE_NT'the specification of the cutting action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the cutting action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'cutting action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'cutting action' {kind: action name} {action name: cutting}{meaning: {cutting action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor cutting ( this is the block cutting rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Cutting [regarding the noun][them] up [would achieve] l' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Cutting [regarding the noun][them] up [would achieve] littl'
                                                INVOCATION_NT'"Cutting [regarding the noun][them] up [would achieve] littl' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Cutting [regarding the noun][them] up [would achieve] littl' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Cutting [regarding the noun][them] up [would achieve] littl' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'jumping is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'jumping'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the jumping action translates into inter as Jump' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'jumping action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Jump'
                        SENTENCE_NT'the specification of the jumping action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the jumping action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'jumping action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'jumping action' {kind: action name} {action name: jumping}{meaning: {jumping action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'report an actor jumping ( this is the report jumping rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [jump] on the spot." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [jump] on the spot." ( a )'
                                                        INVOCATION_NT'"[We] [jump] on the spot." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [jump] on the spot." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [jump] on the spot." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [jump] on the spot." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [jump] on the spot." ( b )'
                                                INVOCATION_NT'"[The actor] [jump] on the spot." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [jump] on the spot." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [jump] on the spot." ( b )' {kind: text}
                        SENTENCE_NT'tying it to is an action applying to two things' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'tying it to'
                            UNPARSED_NOUN_NT'applying to two things'
                        SENTENCE_NT'the tying it to action translates into inter as Tie' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'tying it to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Tie'
                        SENTENCE_NT'the specification of the tying it to action is The Standard ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the tying it to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'tying it to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'tying it to action' {kind: action name} {action name: tying it to}{meaning: {tying it to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor tying something to ( this is the block tying ' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [would achieve] nothing by this." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [would achieve] nothing by this." ( a )'
                                                INVOCATION_NT'"[We] [would achieve] nothing by this." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [would achieve] nothing by this." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [would achieve] nothing by this." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'drinking is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'drinking'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the drinking action translates into inter as Drink' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'drinking action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Drink'
                        SENTENCE_NT'the specification of the drinking action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the drinking action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'drinking action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'drinking action' {kind: action name} {action name: drinking}{meaning: {drinking action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor drinking ( this is the block drinking rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There's] nothing suitable to drink here." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[There's] nothing suitable to drink here." ( a )'
                                                INVOCATION_NT'"[There's] nothing suitable to drink here." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[There's] nothing suitable to drink here." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[There's] nothing suitable to drink here." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'saying sorry is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'saying sorry'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying sorry action translates into inter as Sorry' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'saying sorry action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Sorry'
                        SENTENCE_NT'the specification of the saying sorry action is The Standard' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the saying sorry action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'saying sorry action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'saying sorry action' {kind: action name} {action name: saying sorry}{meaning: {saying sorry action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor saying sorry ( this is the block saying sorry' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Oh, don't [if American dialect option is
                                        active]apologi' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Oh, don't [if American dialect option is
                                            active]apologize[o'
                                                INVOCATION_NT'"Oh, don't [if American dialect option is
                                                active]apologize[o' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Oh, don't [if American dialect option is
                                                    active]apologize[o' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Oh, don't [if American dialect option is
                                                        active]apologize[o' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'swinging is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'swinging'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the swinging action translates into inter as Swing' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'swinging action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Swing'
                        SENTENCE_NT'the specification of the swinging action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the swinging action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'swinging action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'swinging action' {kind: action name} {action name: swinging}{meaning: {swinging action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor swinging ( this is the block swinging rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There's] nothing sensible to swing here." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[There's] nothing sensible to swing here." ( a )'
                                                INVOCATION_NT'"[There's] nothing sensible to swing here." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[There's] nothing sensible to swing here." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[There's] nothing sensible to swing here." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'rubbing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'rubbing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the rubbing action translates into inter as Rub' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'rubbing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Rub'
                        SENTENCE_NT'the specification of the rubbing action is The Standard Rule' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the rubbing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'rubbing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'rubbing action' {kind: action name} {action name: rubbing}{meaning: {rubbing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor rubbing ( this is the can't rub another perso' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is a person who is not the actor' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is a person who is not the actor' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is a person who is not the actor' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is a person who is not the actor' {proposition: << kind=person('noun') ^ NOT< ('noun' == 'the actor') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'report an actor rubbing ( this is the report rubbing rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [rub] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [rub] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [rub] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [rub] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [rub] [the noun]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [rub] [the noun]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [rub] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [rub] [the noun]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [rub] [the noun]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [rub] [the noun]." ( b )' {kind: text}
                        SENTENCE_NT'setting it to is an action applying to one thing and one top' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'setting it to'
                            UNPARSED_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the setting it to action translates into inter as SetTo' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'setting it to action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SetTo'
                        SENTENCE_NT'the specification of the setting it to action is The Standar' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the setting it to action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'setting it to action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'setting it to action' {kind: action name} {action name: setting it to}{meaning: {setting it to action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor setting something to ( this is the block sett' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "No, [we] [can't set] [regarding the noun][those] to any' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"No, [we] [can't set] [regarding the noun][those] to anythin'
                                                INVOCATION_NT'"No, [we] [can't set] [regarding the noun][those] to anythin' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"No, [we] [can't set] [regarding the noun][those] to anythin' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"No, [we] [can't set] [regarding the noun][those] to anythin' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'waving hands is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'waving hands'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waving hands action translates into inter as WaveHands' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'waving hands action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'WaveHands'
                        SENTENCE_NT'the specification of the waving hands action is The Standard' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the waving hands action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'waving hands action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'waving hands action' {kind: action name} {action name: waving hands}{meaning: {waving hands action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'report an actor waving hands ( this is the report waving han' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the action is not silent' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the action is not silent' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'action is not silent' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent' {phrase invoked: call} {resulting: truth state}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [wave]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[We] [wave]." ( a )'
                                                        INVOCATION_NT'"[We] [wave]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[We] [wave]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[We] [wave]." ( a )' {kind: text}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "[The actor] [wave]." ( b )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wave]." ( b )'
                                                INVOCATION_NT'"[The actor] [wave]." ( b )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[The actor] [wave]." ( b )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[The actor] [wave]." ( b )' {kind: text}
                        SENTENCE_NT'buying is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'buying'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the buying action translates into inter as Buy' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'buying action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Buy'
                        SENTENCE_NT'the specification of the buying action is The Standard Rules' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the buying action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'buying action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'buying action' {kind: action name} {action name: buying}{meaning: {buying action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor buying ( this is the block buying rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "Nothing [are] on sale." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Nothing [are] on sale." ( a )'
                                                INVOCATION_NT'"Nothing [are] on sale." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Nothing [are] on sale." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Nothing [are] on sale." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'climbing is an action applying to one thing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'climbing'
                            UNPARSED_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the climbing action translates into inter as Climb' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'climbing action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Climb'
                        SENTENCE_NT'the specification of the climbing action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the climbing action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'climbing action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'climbing action' {kind: action name} {action name: climbing}{meaning: {climbing action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor climbing ( this is the block climbing rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Little [are] to be achieved by that." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Little [are] to be achieved by that." ( a )'
                                                INVOCATION_NT'"Little [are] to be achieved by that." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Little [are] to be achieved by that." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Little [are] to be achieved by that." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                        SENTENCE_NT'sleeping is an action applying to nothing' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'sleeping'
                            UNPARSED_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the sleeping action translates into inter as Sleep' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'sleeping action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Sleep'
                        SENTENCE_NT'the specification of the sleeping action is The Standard Rul' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of the sleeping action' {definite 'the' n/m/f s/p nom/acc} {refined}
                                PROPER_NOUN_NT'sleeping action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'sleeping action' {kind: action name} {action name: sleeping}{meaning: {sleeping action = MISCELLANEOUS_MC}}}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way,' {refined} {eval: CONSTANT_NT'The Standard Rules define this action in only a minimal way,' {kind: text}}
                        RULE_NT'check an actor sleeping ( this is the block sleeping rule )' {unit: 2}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the actor is the player' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the actor is the player' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'actor is the player' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'actor is the player' {proposition: << ('actor' == 'the player') >>} {term: 'actor'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [aren't] feeling especially drowsy." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"[We] [aren't] feeling especially drowsy." ( a )'
                                                INVOCATION_NT'"[We] [aren't] feeling especially drowsy." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"[We] [aren't] feeling especially drowsy." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"[We] [aren't] feeling especially drowsy." ( a )' {kind: text}
                                INVOCATION_LIST_NT'stop the action' {indent: 1}
                                    INVOCATION_NT'stop the action' {phrase invoked: call}
                    HEADING_NT'section 9 - standard actions which happen out of world' {heading 5} {under: H5'section 9 - standard actions which happen out of world'} {unit: 2}
                        SENTENCE_NT'quitting the game is an action out of world and applying to ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'quitting the game'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the quitting the game action translates into inter as Quit' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'quitting the game action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Quit'
                        SENTENCE_NT'the quit the game rule is listed in the carry out quitting t' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the quit the game rule'
                            UNPARSED_NOUN_NT'in the carry out quitting the game rulebook'
                        SENTENCE_NT'the quit the game rule translates into inter as QUIT_THE_GAM' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'quit the game rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'QUIT_THE_GAME_R'
                                UNPARSED_NOUN_NT'"Are you sure you want to quit? " ( a )'
                        SENTENCE_NT'saving the game is an action out of world and applying to no' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'saving the game'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the saving the game action translates into inter as Save' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'saving the game action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Save'
                        SENTENCE_NT'the save the game rule is listed in the carry out saving the' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the save the game rule'
                            UNPARSED_NOUN_NT'in the carry out saving the game rulebook'
                        SENTENCE_NT'the save the game rule translates into inter as SAVE_THE_GAM' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'save the game rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SAVE_THE_GAME_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"Save failed." ( a )'
                                    UNPARSED_NOUN_NT'"Ok." ( b )'
                        SENTENCE_NT'restoring the game is an action out of world and applying to' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'restoring the game'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the restoring the game action translates into inter as Resto' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'restoring the game action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Restore'
                        SENTENCE_NT'the restore the game rule is listed in the carry out restori' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the restore the game rule'
                            UNPARSED_NOUN_NT'in the carry out restoring the game rulebook'
                        SENTENCE_NT'the restore the game rule translates into inter as RESTORE_T' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'restore the game rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'RESTORE_THE_GAME_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"Restore failed." ( a )'
                                    UNPARSED_NOUN_NT'"Ok." ( b )'
                        SENTENCE_NT'restarting the game is an action out of world and applying t' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'restarting the game'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the restarting the game action translates into inter as Rest' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'restarting the game action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Restart'
                        SENTENCE_NT'the restart the game rule is listed in the carry out restart' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the restart the game rule'
                            UNPARSED_NOUN_NT'in the carry out restarting the game rulebook'
                        SENTENCE_NT'the restart the game rule translates into inter as RESTART_T' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'restart the game rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'RESTART_THE_GAME_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"Are you sure you want to restart? " ( a )'
                                    UNPARSED_NOUN_NT'"Failed." ( b )'
                        SENTENCE_NT'verifying the story file is an action out of world and apply' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'verifying the story file'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the verifying the story file action translates into inter as' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'verifying the story file action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Verify'
                        SENTENCE_NT'the verify the story file rule is listed in the carry out ve' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the verify the story file rule'
                            UNPARSED_NOUN_NT'in the carry out verifying the story file rulebook'
                        SENTENCE_NT'the verify the story file rule translates into inter as VERI' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'verify the story file rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'VERIFY_THE_STORY_FILE_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"The game file has verified as intact." ( a )'
                                    UNPARSED_NOUN_NT'"The game file did not verify as intact, and may be corrupt.'
                        SENTENCE_NT'switching the story transcript on is an action out of world ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching the story transcript on'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching the story transcript on action translates into' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching the story transcript on action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ScriptOn'
                        SENTENCE_NT'the switch the story transcript on rule is listed in the car' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the switch the story transcript on rule'
                            UNPARSED_NOUN_NT'in the carry out switching the story transcript on rulebook'
                        SENTENCE_NT'the switch the story transcript on rule translates into inte' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'switch the story transcript on rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SWITCH_TRANSCRIPT_ON_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"Transcripting is already on." ( a )'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"Start of a transcript of" ( b )'
                                        UNPARSED_NOUN_NT'"Attempt to begin transcript failed." ( c )'
                        SENTENCE_NT'switching the story transcript off is an action out of world' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching the story transcript off'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching the story transcript off action translates int' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching the story transcript off action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ScriptOff'
                        SENTENCE_NT'the switch the story transcript off rule is listed in the ca' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the switch the story transcript off rule'
                            UNPARSED_NOUN_NT'in the carry out switching the story transcript off rulebook'
                        SENTENCE_NT'the switch the story transcript off rule translates into int' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'switch the story transcript off rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SWITCH_TRANSCRIPT_OFF_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"Transcripting is already off." ( a )'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"[line break]End of transcript." ( b )'
                                        UNPARSED_NOUN_NT'"Attempt to end transcript failed." ( c )'
                        SENTENCE_NT'requesting the story file version is an action out of world ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'requesting the story file version'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the story file version action translates into' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'requesting the story file version action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Version'
                        SENTENCE_NT'the announce the story file version rule is listed in the ca' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the announce the story file version rule'
                            UNPARSED_NOUN_NT'in the carry out requesting the story file version rulebook'
                        SENTENCE_NT'the announce the story file version rule translates into int' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'announce the story file version rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ANNOUNCE_STORY_FILE_VERSION_R'
                        SENTENCE_NT'requesting the score is an action out of world and applying ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'requesting the score'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the score action translates into inter as Sco' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'requesting the score action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Score'
                        SENTENCE_NT'the announce the score rule is listed in the carry out reque' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the announce the score rule'
                            UNPARSED_NOUN_NT'in the carry out requesting the score rulebook'
                        SENTENCE_NT'the announce the score rule translates into inter as ANNOUNC' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'announce the score rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ANNOUNCE_SCORE_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"[if the story has ended]In that game you scored[otherwise]Y'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'", earning you the rank of " ( b )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"[There] [are] no score in this story." ( c )'
                                            AND_NT','
                                                UNPARSED_NOUN_NT'"[bracket]Your score has just gone up by [number understood '
                                                UNPARSED_NOUN_NT'"[bracket]Your score has just gone down by [number understoo'
                        SENTENCE_NT'preferring abbreviated room descriptions is an action out of' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'preferring abbreviated room descriptions'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring abbreviated room descriptions action translat' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'preferring abbreviated room descriptions action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'LMode3'
                        SENTENCE_NT'the prefer abbreviated room descriptions rule is listed in t' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the prefer abbreviated room descriptions rule'
                            UNPARSED_NOUN_NT'in the carry out preferring abbreviated room descriptions ru'
                        SENTENCE_NT'the prefer abbreviated room descriptions rule translates int' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'prefer abbreviated room descriptions rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PREFER_ABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring abbreviated room descriptions' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard report preferring abbreviated room descriptions'
                            UNPARSED_NOUN_NT'in the report preferring abbreviated room descriptions ruleb'
                        SENTENCE_NT'the standard report preferring abbreviated room descriptions' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard report preferring abbreviated room descriptions rul' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'REP_PREFER_ABBREVIATED_R'
                                UNPARSED_NOUN_NT'" is now in its 'superbrief' mode, which always gives short '
                        SENTENCE_NT'preferring unabbreviated room descriptions is an action out ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'preferring unabbreviated room descriptions'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring unabbreviated room descriptions action transl' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'preferring unabbreviated room descriptions action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'LMode2'
                        SENTENCE_NT'the prefer unabbreviated room descriptions rule is listed in' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the prefer unabbreviated room descriptions rule'
                            UNPARSED_NOUN_NT'in the carry out preferring unabbreviated room descriptions '
                        SENTENCE_NT'the prefer unabbreviated room descriptions rule translates i' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'prefer unabbreviated room descriptions rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PREFER_UNABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring unabbreviated room descriptio' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard report preferring unabbreviated room descriptio'
                            UNPARSED_NOUN_NT'in the report preferring unabbreviated room descriptions rul'
                        SENTENCE_NT'the standard report preferring unabbreviated room descriptio' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard report preferring unabbreviated room descriptions r' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'REP_PREFER_UNABBREVIATED_R'
                                UNPARSED_NOUN_NT'" is now in its 'verbose' mode, which always gives long desc'
                        SENTENCE_NT'preferring sometimes abbreviated room descriptions is an act' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'preferring sometimes abbreviated room descriptions'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring sometimes abbreviated room descriptions actio' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'preferring sometimes abbreviated room descriptions action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'LMode1'
                        SENTENCE_NT'the prefer sometimes abbreviated room descriptions rule is l' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the prefer sometimes abbreviated room descriptions rule'
                            UNPARSED_NOUN_NT'in the carry out preferring sometimes abbreviated room descr'
                        SENTENCE_NT'the prefer sometimes abbreviated room descriptions rule tran' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'prefer sometimes abbreviated room descriptions rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'PREFER_SOMETIMES_ABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring sometimes abbreviated room de' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard report preferring sometimes abbreviated room de'
                            UNPARSED_NOUN_NT'in the report preferring sometimes abbreviated room descript'
                        SENTENCE_NT'the standard report preferring sometimes abbreviated room de' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard report preferring sometimes abbreviated room descri' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'REP_PREFER_SOMETIMES_ABBR_R'
                                UNPARSED_NOUN_NT'" is now in its 'brief' printing mode, which gives long desc'
                        SENTENCE_NT'switching score notification on is an action out of world an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching score notification on'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching score notification on action translates into i' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching score notification on action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'NotifyOn'
                        SENTENCE_NT'the switch score notification on rule is listed in the carry' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the switch score notification on rule'
                            UNPARSED_NOUN_NT'in the carry out switching score notification on rulebook'
                        SENTENCE_NT'the switch score notification on rule translates into inter ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'switch score notification on rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SWITCH_SCORE_NOTIFY_ON_R'
                        SENTENCE_NT'the standard report switching score notification on rule is ' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard report switching score notification on rule'
                            UNPARSED_NOUN_NT'in the report switching score notification on rulebook'
                        SENTENCE_NT'the standard report switching score notification on rule tra' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard report switching score notification on rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'REP_SWITCH_NOTIFY_ON_R'
                                UNPARSED_NOUN_NT'"Score notification on." ( a )'
                        SENTENCE_NT'switching score notification off is an action out of world a' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'switching score notification off'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching score notification off action translates into ' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'switching score notification off action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'NotifyOff'
                        SENTENCE_NT'the switch score notification off rule is listed in the carr' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the switch score notification off rule'
                            UNPARSED_NOUN_NT'in the carry out switching score notification off rulebook'
                        SENTENCE_NT'the switch score notification off rule translates into inter' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'switch score notification off rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'SWITCH_SCORE_NOTIFY_OFF_R'
                        SENTENCE_NT'the standard report switching score notification off rule is' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the standard report switching score notification off rule'
                            UNPARSED_NOUN_NT'in the report switching score notification off rulebook'
                        SENTENCE_NT'the standard report switching score notification off rule tr' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'standard report switching score notification off rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'REP_SWITCH_NOTIFY_OFF_R'
                                UNPARSED_NOUN_NT'"Score notification off." ( a )'
                        SENTENCE_NT'requesting the pronoun meanings is an action out of world an' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'requesting the pronoun meanings'
                            UNPARSED_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the pronoun meanings action translates into i' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 4}
                            UNPARSED_NOUN_NT'requesting the pronoun meanings action' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'Pronouns'
                        SENTENCE_NT'the announce the pronoun meanings rule is listed in the carr' {unit: 2} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the announce the pronoun meanings rule'
                            UNPARSED_NOUN_NT'in the carry out requesting the pronoun meanings rulebook'
                        SENTENCE_NT'the announce the pronoun meanings rule translates into inter' {unit: 2} {classified}
                            VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 2}
                            UNPARSED_NOUN_NT'announce the pronoun meanings rule' {definite 'the' n/m/f s/p nom/acc}
                            UNPARSED_NOUN_NT'ANNOUNCE_PRONOUN_MEANINGS_R'
                                AND_NT','
                                    UNPARSED_NOUN_NT'"At the moment, " ( a )'
                                    AND_NT','
                                        UNPARSED_NOUN_NT'"means " ( b )'
                                        AND_NT','
                                            UNPARSED_NOUN_NT'"is unset" ( c )'
                                            UNPARSED_NOUN_NT'"no pronouns are known to the game." ( d )'
                HEADING_NT'part six - grammar' {heading 3} {under: H3'part six - grammar'} {unit: 2}
                    SENTENCE_NT'understand "take [things]" as taking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take [things]"'
                        UNPARSED_NOUN_NT'taking'
                    SENTENCE_NT'understand "take off [something]" as taking off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take off [something]"'
                        UNPARSED_NOUN_NT'taking off'
                    SENTENCE_NT'understand "take [something] off" as taking off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take [something] off"'
                        UNPARSED_NOUN_NT'taking off'
                    SENTENCE_NT'understand "take [things inside] from [something]" as removi' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take [things inside] from [something]"'
                        UNPARSED_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "take [things inside] off [something]" as removin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take [things inside] off [something]"'
                        UNPARSED_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "take inventory" as taking inventory' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"take inventory"'
                        UNPARSED_NOUN_NT'taking inventory'
                    SENTENCE_NT'understand the commands carry and hold as take' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands carry and hold'
                        UNPARSED_NOUN_NT'take'
                    SENTENCE_NT'understand "get in/on" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get in/on"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "get out/off/down/up" as exiting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get out/off/down/up"'
                        UNPARSED_NOUN_NT'exiting'
                    SENTENCE_NT'understand "get [things]" as taking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get [things]"'
                        UNPARSED_NOUN_NT'taking'
                    SENTENCE_NT'understand "get in/into/on/onto [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get in/into/on/onto [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "get off/down [something]" as getting off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get off/down [something]"'
                        UNPARSED_NOUN_NT'getting off'
                    SENTENCE_NT'understand "get [things inside] from [something]" as removin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"get [things inside] from [something]"'
                        UNPARSED_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "pick up [things]" or "pick [things] up" as takin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"pick up [things]" or "pick [things] up"'
                        UNPARSED_NOUN_NT'taking'
                    SENTENCE_NT'understand "stand" or "stand up" as exiting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"stand" or "stand up"'
                        UNPARSED_NOUN_NT'exiting'
                    SENTENCE_NT'understand "stand on [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"stand on [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "remove [something preferably held]" as taking of' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"remove [something preferably held]"'
                        UNPARSED_NOUN_NT'taking off'
                    SENTENCE_NT'understand "remove [things inside] from [something]" as remo' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"remove [things inside] from [something]"'
                        UNPARSED_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "shed [something preferably held]" as taking off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"shed [something preferably held]"'
                        UNPARSED_NOUN_NT'taking off'
                    SENTENCE_NT'understand the commands doff and disrobe as shed' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands doff and disrobe'
                        UNPARSED_NOUN_NT'shed'
                    SENTENCE_NT'understand "wear [something preferably held]" as wearing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wear [something preferably held]"'
                        UNPARSED_NOUN_NT'wearing'
                    SENTENCE_NT'understand the command don as wear' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command don'
                        UNPARSED_NOUN_NT'wear'
                    SENTENCE_NT'understand "put [other things] in/inside/into [something]" a' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"put [other things] in/inside/into [something]"'
                        UNPARSED_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "put [other things] on/onto [something]" as putti' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"put [other things] on/onto [something]"'
                        UNPARSED_NOUN_NT'putting it on'
                    SENTENCE_NT'understand "put on [something preferably held]" as wearing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"put on [something preferably held]"'
                        UNPARSED_NOUN_NT'wearing'
                    SENTENCE_NT'understand "put [something preferably held] on" as wearing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"put [something preferably held] on"'
                        UNPARSED_NOUN_NT'wearing'
                    SENTENCE_NT'understand "put down [things preferably held]" or "put [thin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"put down [things preferably held]" or "put [things preferab'
                        UNPARSED_NOUN_NT'dropping'
                    SENTENCE_NT'understand "insert [other things] in/into [something]" as in' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"insert [other things] in/into [something]"'
                        UNPARSED_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "drop [things preferably held]" as dropping' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"drop [things preferably held]"'
                        UNPARSED_NOUN_NT'dropping'
                    SENTENCE_NT'understand "drop [other things] in/into/down [something]" as' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"drop [other things] in/into/down [something]"'
                        UNPARSED_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "drop [other things] on/onto [something]" as putt' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"drop [other things] on/onto [something]"'
                        UNPARSED_NOUN_NT'putting it on'
                    SENTENCE_NT'understand "drop [something preferably held] at/against [som' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"drop [something preferably held] at/against [something]"'
                        UNPARSED_NOUN_NT'throwing it at'
                    SENTENCE_NT'understand the commands throw and discard as drop' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands throw and discard'
                        UNPARSED_NOUN_NT'drop'
                    SENTENCE_NT'understand "give [something preferably held] to [someone]" a' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"give [something preferably held] to [someone]"'
                        UNPARSED_NOUN_NT'giving it to'
                    SENTENCE_NT'understand "give [someone] [something preferably held]" as g' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"give [someone] [something preferably held]"'
                        UNPARSED_NOUN_NT'giving it to ( with nouns reversed )'
                    SENTENCE_NT'understand the commands pay and offer and feed as give' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands pay and offer and feed'
                        UNPARSED_NOUN_NT'give'
                    SENTENCE_NT'understand "show [someone] [something preferably held]" as s' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"show [someone] [something preferably held]"'
                        UNPARSED_NOUN_NT'showing it to ( with nouns reversed )'
                    SENTENCE_NT'understand "show [something preferably held] to [someone]" a' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"show [something preferably held] to [someone]"'
                        UNPARSED_NOUN_NT'showing it to'
                    SENTENCE_NT'understand the commands present and display as show' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands present and display'
                        UNPARSED_NOUN_NT'show'
                    SENTENCE_NT'understand "go" as going' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"go"'
                        UNPARSED_NOUN_NT'going'
                    SENTENCE_NT'understand "go [direction]" as going' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"go [direction]"'
                        UNPARSED_NOUN_NT'going'
                    SENTENCE_NT'understand "go [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"go [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "go into/in/inside/through [something]" as enteri' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"go into/in/inside/through [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand the commands walk and run as go' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands walk and run'
                        UNPARSED_NOUN_NT'go'
                    SENTENCE_NT'understand "inventory" as taking inventory' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"inventory"'
                        UNPARSED_NOUN_NT'taking inventory'
                    SENTENCE_NT'understand the commands i and inv as inventory' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands i and inv'
                        UNPARSED_NOUN_NT'inventory'
                    SENTENCE_NT'understand "look" as looking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look"'
                        UNPARSED_NOUN_NT'looking'
                    SENTENCE_NT'understand "look at [something]" as examining' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look at [something]"'
                        UNPARSED_NOUN_NT'examining'
                    SENTENCE_NT'understand "look [something]" as examining' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look [something]"'
                        UNPARSED_NOUN_NT'examining'
                    SENTENCE_NT'understand "look inside/in/into/through [something]" as sear' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look inside/in/into/through [something]"'
                        UNPARSED_NOUN_NT'searching'
                    SENTENCE_NT'understand "look under [something]" as looking under' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look under [something]"'
                        UNPARSED_NOUN_NT'looking under'
                    SENTENCE_NT'understand "look up [text] in [something]" as consulting it ' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"look up [text] in [something]"'
                        UNPARSED_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand the command l as look' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command l'
                        UNPARSED_NOUN_NT'look'
                    SENTENCE_NT'understand "consult [something] on/about [text]" as consulti' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"consult [something] on/about [text]"'
                        UNPARSED_NOUN_NT'consulting it about'
                    SENTENCE_NT'understand "open [something]" as opening' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"open [something]"'
                        UNPARSED_NOUN_NT'opening'
                    SENTENCE_NT'understand "open [something] with [something preferably held' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"open [something] with [something preferably held]"'
                        UNPARSED_NOUN_NT'unlocking it with'
                    SENTENCE_NT'understand the commands unwrap , uncover as open' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands unwrap , uncover'
                        UNPARSED_NOUN_NT'open'
                    SENTENCE_NT'understand "close [something]" as closing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"close [something]"'
                        UNPARSED_NOUN_NT'closing'
                    SENTENCE_NT'understand "close up [something]" as closing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"close up [something]"'
                        UNPARSED_NOUN_NT'closing'
                    SENTENCE_NT'understand "close off [something]" as switching off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"close off [something]"'
                        UNPARSED_NOUN_NT'switching off'
                    SENTENCE_NT'understand the commands shut and cover as close' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands shut and cover'
                        UNPARSED_NOUN_NT'close'
                    SENTENCE_NT'understand "enter" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"enter"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "enter [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"enter [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand the command cross as enter' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command cross'
                        UNPARSED_NOUN_NT'enter'
                    SENTENCE_NT'understand "sit on top of [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"sit on top of [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "sit on/in/inside [something]" as entering' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"sit on/in/inside [something]"'
                        UNPARSED_NOUN_NT'entering'
                    SENTENCE_NT'understand "exit" as exiting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"exit"'
                        UNPARSED_NOUN_NT'exiting'
                    SENTENCE_NT'understand the commands leave and out as exit' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands leave and out'
                        UNPARSED_NOUN_NT'exit'
                    SENTENCE_NT'understand "examine [something]" as examining' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"examine [something]"'
                        UNPARSED_NOUN_NT'examining'
                    SENTENCE_NT'understand the commands x , watch , describe and check as ex' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands x , watch , describe and check'
                        UNPARSED_NOUN_NT'examine'
                    SENTENCE_NT'understand "read [something]" as examining' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"read [something]"'
                        UNPARSED_NOUN_NT'examining'
                    SENTENCE_NT'understand "read about [text] in [something]" as consulting ' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"read about [text] in [something]"'
                        UNPARSED_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand "read [text] in [something]" as consulting it abo' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"read [text] in [something]"'
                        UNPARSED_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand "yes" as saying yes' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"yes"'
                        UNPARSED_NOUN_NT'saying yes'
                    SENTENCE_NT'understand the command y as yes' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command y'
                        UNPARSED_NOUN_NT'yes'
                    SENTENCE_NT'understand "no" as saying no' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"no"'
                        UNPARSED_NOUN_NT'saying no'
                    SENTENCE_NT'understand "sorry" as saying sorry' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"sorry"'
                        UNPARSED_NOUN_NT'saying sorry'
                    SENTENCE_NT'understand "search [something]" as searching' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"search [something]"'
                        UNPARSED_NOUN_NT'searching'
                    SENTENCE_NT'understand "wave" as waving hands' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wave"'
                        UNPARSED_NOUN_NT'waving hands'
                    SENTENCE_NT'understand "wave [something]" as waving' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wave [something]"'
                        UNPARSED_NOUN_NT'waving'
                    SENTENCE_NT'understand "set [something] to [text]" as setting it to' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"set [something] to [text]"'
                        UNPARSED_NOUN_NT'setting it to'
                    SENTENCE_NT'understand the command adjust as set' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command adjust'
                        UNPARSED_NOUN_NT'set'
                    SENTENCE_NT'understand "pull [something]" as pulling' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"pull [something]"'
                        UNPARSED_NOUN_NT'pulling'
                    SENTENCE_NT'understand the command drag as pull' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command drag'
                        UNPARSED_NOUN_NT'pull'
                    SENTENCE_NT'understand "push [something]" as pushing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"push [something]"'
                        UNPARSED_NOUN_NT'pushing'
                    SENTENCE_NT'understand "push [something] [direction]" or "push [somethin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"push [something] [direction]" or "push [something] to [dire'
                        UNPARSED_NOUN_NT'pushing it to'
                    SENTENCE_NT'understand the commands move , shift , clear and press as pu' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands move , shift , clear and press'
                        UNPARSED_NOUN_NT'push'
                    SENTENCE_NT'understand "turn [something]" as turning' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"turn [something]"'
                        UNPARSED_NOUN_NT'turning'
                    SENTENCE_NT'understand "turn [something] on" or "turn on [something]" as' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"turn [something] on" or "turn on [something]"'
                        UNPARSED_NOUN_NT'switching on'
                    SENTENCE_NT'understand "turn [something] off" or "turn off [something]" ' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"turn [something] off" or "turn off [something]"'
                        UNPARSED_NOUN_NT'switching off'
                    SENTENCE_NT'understand the commands rotate , twist , unscrew and screw a' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands rotate , twist , unscrew and screw'
                        UNPARSED_NOUN_NT'turn'
                    SENTENCE_NT'understand "switch [something switched on]" as switching off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"switch [something switched on]"'
                        UNPARSED_NOUN_NT'switching off'
                    SENTENCE_NT'understand "switch [something]" or "switch on [something]" o' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"switch [something]" or "switch on [something]" or "switch ['
                        UNPARSED_NOUN_NT'switching on'
                    SENTENCE_NT'understand "switch [something] off" or "switch off [somethin' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"switch [something] off" or "switch off [something]"'
                        UNPARSED_NOUN_NT'switching off'
                    SENTENCE_NT'understand "lock [something] with [something preferably held' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"lock [something] with [something preferably held]"'
                        UNPARSED_NOUN_NT'locking it with'
                    SENTENCE_NT'understand "unlock [something] with [something preferably he' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"unlock [something] with [something preferably held]"'
                        UNPARSED_NOUN_NT'unlocking it with'
                    SENTENCE_NT'understand "attack [something]" as attacking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"attack [something]"'
                        UNPARSED_NOUN_NT'attacking'
                    SENTENCE_NT'understand the commands break , smash , hit , fight , tortur' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands break , smash , hit , fight , torture , wreck ,'
                        UNPARSED_NOUN_NT'attack'
                    SENTENCE_NT'understand "wait" as waiting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wait"'
                        UNPARSED_NOUN_NT'waiting'
                    SENTENCE_NT'understand the command z as wait' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command z'
                        UNPARSED_NOUN_NT'wait'
                    SENTENCE_NT'understand "answer [text] to [someone]" as answering it that' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"answer [text] to [someone]"'
                        UNPARSED_NOUN_NT'answering it that ( with nouns reversed )'
                    SENTENCE_NT'understand the commands say , shout and speak as answer' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands say , shout and speak'
                        UNPARSED_NOUN_NT'answer'
                    SENTENCE_NT'understand "tell [someone] about [text]" as telling it about' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"tell [someone] about [text]"'
                        UNPARSED_NOUN_NT'telling it about'
                    SENTENCE_NT'understand "ask [someone] about [text]" as asking it about' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"ask [someone] about [text]"'
                        UNPARSED_NOUN_NT'asking it about'
                    SENTENCE_NT'understand "ask [someone] for [something]" as asking it for' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"ask [someone] for [something]"'
                        UNPARSED_NOUN_NT'asking it for'
                    SENTENCE_NT'understand "eat [something preferably held]" as eating' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"eat [something preferably held]"'
                        UNPARSED_NOUN_NT'eating'
                    SENTENCE_NT'understand "sleep" as sleeping' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"sleep"'
                        UNPARSED_NOUN_NT'sleeping'
                    SENTENCE_NT'understand the command nap as sleep' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command nap'
                        UNPARSED_NOUN_NT'sleep'
                    SENTENCE_NT'understand "climb [something]" or "climb up/over [something]' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"climb [something]" or "climb up/over [something]"'
                        UNPARSED_NOUN_NT'climbing'
                    SENTENCE_NT'understand the command scale as climb' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command scale'
                        UNPARSED_NOUN_NT'climb'
                    SENTENCE_NT'understand "buy [something]" as buying' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"buy [something]"'
                        UNPARSED_NOUN_NT'buying'
                    SENTENCE_NT'understand the command purchase as buy' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command purchase'
                        UNPARSED_NOUN_NT'buy'
                    SENTENCE_NT'understand "squeeze [something]" as squeezing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"squeeze [something]"'
                        UNPARSED_NOUN_NT'squeezing'
                    SENTENCE_NT'understand the command squash as squeeze' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command squash'
                        UNPARSED_NOUN_NT'squeeze'
                    SENTENCE_NT'understand "swing [something]" or "swing on [something]" as ' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"swing [something]" or "swing on [something]"'
                        UNPARSED_NOUN_NT'swinging'
                    SENTENCE_NT'understand "wake" or "wake up" as waking up' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wake" or "wake up"'
                        UNPARSED_NOUN_NT'waking up'
                    SENTENCE_NT'understand "wake [someone]" or "wake [someone] up" or "wake ' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"wake [someone]" or "wake [someone] up" or "wake up [someone'
                        UNPARSED_NOUN_NT'waking'
                    SENTENCE_NT'understand the commands awake and awaken as wake' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands awake and awaken'
                        UNPARSED_NOUN_NT'wake'
                    SENTENCE_NT'understand "kiss [someone]" as kissing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"kiss [someone]"'
                        UNPARSED_NOUN_NT'kissing'
                    SENTENCE_NT'understand the commands embrace and hug as kiss' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands embrace and hug'
                        UNPARSED_NOUN_NT'kiss'
                    SENTENCE_NT'understand "think" as thinking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"think"'
                        UNPARSED_NOUN_NT'thinking'
                    SENTENCE_NT'understand "smell" as smelling' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"smell"'
                        UNPARSED_NOUN_NT'smelling'
                    SENTENCE_NT'understand "smell [something]" as smelling' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"smell [something]"'
                        UNPARSED_NOUN_NT'smelling'
                    SENTENCE_NT'understand the command sniff as smell' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command sniff'
                        UNPARSED_NOUN_NT'smell'
                    SENTENCE_NT'understand "listen" as listening to' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"listen"'
                        UNPARSED_NOUN_NT'listening to'
                    SENTENCE_NT'understand "hear [something]" as listening to' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"hear [something]"'
                        UNPARSED_NOUN_NT'listening to'
                    SENTENCE_NT'understand "listen to [something]" as listening to' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"listen to [something]"'
                        UNPARSED_NOUN_NT'listening to'
                    SENTENCE_NT'understand "taste [something]" as tasting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"taste [something]"'
                        UNPARSED_NOUN_NT'tasting'
                    SENTENCE_NT'understand "touch [something]" as touching' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"touch [something]"'
                        UNPARSED_NOUN_NT'touching'
                    SENTENCE_NT'understand the command feel as touch' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command feel'
                        UNPARSED_NOUN_NT'touch'
                    SENTENCE_NT'understand "rub [something]" as rubbing' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"rub [something]"'
                        UNPARSED_NOUN_NT'rubbing'
                    SENTENCE_NT'understand the commands shine , polish , sweep , clean , dus' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands shine , polish , sweep , clean , dust , wipe an'
                        UNPARSED_NOUN_NT'rub'
                    SENTENCE_NT'understand "tie [something] to [something]" as tying it to' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"tie [something] to [something]"'
                        UNPARSED_NOUN_NT'tying it to'
                    SENTENCE_NT'understand the commands attach and fasten as tie' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands attach and fasten'
                        UNPARSED_NOUN_NT'tie'
                    SENTENCE_NT'understand "burn [something]" as burning' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"burn [something]"'
                        UNPARSED_NOUN_NT'burning'
                    SENTENCE_NT'understand the command light as burn' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the command light'
                        UNPARSED_NOUN_NT'burn'
                    SENTENCE_NT'understand "drink [something]" as drinking' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"drink [something]"'
                        UNPARSED_NOUN_NT'drinking'
                    SENTENCE_NT'understand the commands swallow and sip as drink' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands swallow and sip'
                        UNPARSED_NOUN_NT'drink'
                    SENTENCE_NT'understand "cut [something]" as cutting' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"cut [something]"'
                        UNPARSED_NOUN_NT'cutting'
                    SENTENCE_NT'understand the commands slice , prune and chop as cut' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands slice , prune and chop'
                        UNPARSED_NOUN_NT'cut'
                    SENTENCE_NT'understand "jump" as jumping' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"jump"'
                        UNPARSED_NOUN_NT'jumping'
                    SENTENCE_NT'understand the commands skip and hop as jump' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'the commands skip and hop'
                        UNPARSED_NOUN_NT'jump'
                    SENTENCE_NT'understand "score" as requesting the score' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"score"'
                        UNPARSED_NOUN_NT'requesting the score'
                    SENTENCE_NT'understand "quit" or "q" as quitting the game' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"quit" or "q"'
                        UNPARSED_NOUN_NT'quitting the game'
                    SENTENCE_NT'understand "save" as saving the game' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"save"'
                        UNPARSED_NOUN_NT'saving the game'
                    SENTENCE_NT'understand "restart" as restarting the game' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"restart"'
                        UNPARSED_NOUN_NT'restarting the game'
                    SENTENCE_NT'understand "restore" as restoring the game' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"restore"'
                        UNPARSED_NOUN_NT'restoring the game'
                    SENTENCE_NT'understand "verify" as verifying the story file' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"verify"'
                        UNPARSED_NOUN_NT'verifying the story file'
                    SENTENCE_NT'understand "version" as requesting the story file version' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"version"'
                        UNPARSED_NOUN_NT'requesting the story file version'
                    SENTENCE_NT'understand "script" or "script on" or "transcript" or "trans' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"script" or "script on" or "transcript" or "transcript on"'
                        UNPARSED_NOUN_NT'switching the story transcript on'
                    SENTENCE_NT'understand "script off" or "transcript off" as switching the' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"script off" or "transcript off"'
                        UNPARSED_NOUN_NT'switching the story transcript off'
                    SENTENCE_NT'understand "superbrief" or "short" as preferring abbreviated' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"superbrief" or "short"'
                        UNPARSED_NOUN_NT'preferring abbreviated room descriptions'
                    SENTENCE_NT'understand "verbose" or "long" as preferring unabbreviated r' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"verbose" or "long"'
                        UNPARSED_NOUN_NT'preferring unabbreviated room descriptions'
                    SENTENCE_NT'understand "brief" or "normal" as preferring sometimes abbre' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"brief" or "normal"'
                        UNPARSED_NOUN_NT'preferring sometimes abbreviated room descriptions'
                    SENTENCE_NT'understand "nouns" or "pronouns" as requesting the pronoun m' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"nouns" or "pronouns"'
                        UNPARSED_NOUN_NT'requesting the pronoun meanings'
                    SENTENCE_NT'understand "notify" or "notify on" as switching score notifi' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"notify" or "notify on"'
                        UNPARSED_NOUN_NT'switching score notification on'
                    SENTENCE_NT'understand "notify off" as switching score notification off' {unit: 2} {classified}
                        VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                        UNPARSED_NOUN_NT'"notify off"'
                        UNPARSED_NOUN_NT'switching score notification off'
                    SENTENCE_NT'the understand token a time period translates into inter as ' {unit: 2} {classified}
                        VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 5}
                        UNPARSED_NOUN_NT'understand token a time period' {definite 'the' n/m/f s/p nom/acc}
                        UNPARSED_NOUN_NT'RELATIVE_TIME_TOKEN'
                HEADING_NT'part seven - phrasebook' {heading 3} {under: H3'part seven - phrasebook'} {unit: 2}
                    HEADING_NT'chapter 1 - saying' {heading 4} {under: H4'chapter 1 - saying'} {unit: 2}
                        HEADING_NT'section 1 - time values' {heading 5} {under: H5'section 1 - time values'} {unit: 2}
                            RULE_NT'to say ( something - time ) in words ( documented at phs_tim' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (PrintTimeOfDayEnglish) {something}; '
                            RULE_NT'to say here ( documented at phs_here )' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[if story tense is present tense]here[otherwise]there"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'if story tense is present tense'
                                            INVOCATION_NT'if story tense is present tense' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'story tense is present tense' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'story tense is present tense' {proposition: << ('story tense' == 'present tense') >>} {term: 'story tense'}
                                        INVOCATION_LIST_SAY_NT'"here"'
                                            INVOCATION_NT'"here"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"here"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"here"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'otherwise'
                                            INVOCATION_NT'otherwise' {phrase invoked: call}
                                        INVOCATION_LIST_SAY_NT'"there"'
                                            INVOCATION_NT'"there"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"there"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"there"' {kind: text}
                            RULE_NT'to say now ( documented at phs_now )' {unit: 2}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[if story tense is present tense]now[otherwise]then"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'if story tense is present tense'
                                            INVOCATION_NT'if story tense is present tense' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'story tense is present tense' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'story tense is present tense' {proposition: << ('story tense' == 'present tense') >>} {term: 'story tense'}
                                        INVOCATION_LIST_SAY_NT'"now"'
                                            INVOCATION_NT'"now"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"now"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"now"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'otherwise'
                                            INVOCATION_NT'otherwise' {phrase invoked: call}
                                        INVOCATION_LIST_SAY_NT'"then"'
                                            INVOCATION_NT'"then"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"then"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"then"' {kind: text}
                        HEADING_NT'section 2 - boxed quotations' {heading 5} {under: H5'section 2 - boxed quotations'} {unit: 2}
                            RULE_NT'to display the boxed quotation ( q - text ) ( documented at ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DisplayBoxedQuotation({-box-quotation-text:Q}); '
                        HEADING_NT'section 3 - some built-in texts' {heading 5} {under: H5'section 3 - some built-in texts'} {unit: 2}
                            RULE_NT'to say the/-- banner text ( documented at phs_banner )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  Banner(); '
                            RULE_NT'to say the/-- list of extension credits ( documented at phs_' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ShowExtensionVersions(); '
                            RULE_NT'to say the/-- complete list of extension credits ( documente' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ShowFullExtensionVersions(); '
                            RULE_NT'to say the/-- player's surroundings ( documented at phs_surr' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SL_Location(true); '
                            RULE_NT'to say run paragraph on with special look spacing -- running' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpecialLookSpacingBreak(); '
                            RULE_NT'to say command clarification break -- running on ( documente' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CommandClarificationBreak(); '
                        HEADING_NT'section 4 - responses' {heading 5} {under: H5'section 4 - responses'} {unit: 2}
                            RULE_NT'to say text of ( r - response ) ( documented at phs_response' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the issuing the response text activity with r'
                                        INVOCATION_NT'carry out the issuing the response text activity with r' {phrase invoked: call} {kind variable declarations: K=response}
                                            RVALUE_CONTEXT_NT'issuing the response text' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                CONSTANT_NT'issuing the response text' {kind: activity on responses} {activity: issuing the response text}{meaning: {issuing the response text = ACTIVITY_MC}}
                                            RVALUE_CONTEXT_NT'r' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                LOCAL_VARIABLE_NT'r' {local: LV"r"-response response}
                        HEADING_NT'section 5 - saying lists of things' {heading 5} {under: H5'section 5 - saying lists of things'} {unit: 2}
                            RULE_NT'to list the contents of ( o - an object ) , with newlines , ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  WriteListFrom(child({O}), {phrase options}); '
                            RULE_NT'to say a list of ( os - description of objects ) ( documente' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	objectloop({-my:1} ofclass Object)
                                    			if ({-matches-d'
                            RULE_NT'to say a list of ( os - description of objects ) ( documente' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say list of ( os - description of objects ) ( documented ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say the list of ( os - description of objects ) ( documen' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say the list of ( os - description of objects ) ( documen' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say is-are a list of ( os - description of objects ) ( do' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say is-are list of ( os - description of objects ) ( docu' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say is-are the list of ( os - description of objects ) ( ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                            RULE_NT'to say a list of ( os - description of objects ) including c' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-de'
                        HEADING_NT'section 6 - group in and omit from lists' {heading 5} {under: H5'section 6 - group in and omit from lists'} {unit: 2}
                            RULE_NT'to group ( os - description of objects ) together ( document' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} provides list_together)
                                    			if ({-ma'
                            RULE_NT'to group ( os - description of objects ) together giving art' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} provides list_together)
                                    			if ({-ma'
                            RULE_NT'to group ( os - description of objects ) together as ( t - t' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-my:2} = BlkValueCreate(TEXT_TY);
                                    		{-my:2} = TEXT_TY'
                            RULE_NT'to omit contents in listing ( documented at ph_omit )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BI'
                        HEADING_NT'section 7 - filtering contents of lists - unindexed' {heading 5} {under: H5'section 7 - filtering contents of lists - unindexed'} {unit: 2}
                            RULE_NT'to filter list recursion to ( d - description of objects )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  list_filter_routine = {D}; '
                            RULE_NT'to unfilter list recursion' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  list_filter_routine = 0; '
                    HEADING_NT'chapter 2 - multimedia' {heading 4} {under: H4'chapter 2 - multimedia'} {unit: 2}
                        HEADING_NT'section 1 - figures ( for figures language element only )' {heading 5} {under: H5'section 1 - figures ( for figures language element only )'} {unit: 2}
                            RULE_NT'to display ( f - figure name ) , one time only ( documented ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DisplayFigure(ResourceIDsOfFigures-->{F}, {phrase option'
                            RULE_NT'to decide which number is the glulx resource id of ( f - fig' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResourceIDsOfFigures-->{F} '
                        HEADING_NT'section 2 - sound effects ( for sounds language element only' {heading 5} {under: H5'section 2 - sound effects ( for sounds language element only )'} {unit: 2}
                            RULE_NT'to play ( sfx - sound name ) , one time only ( documented at' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PlaySound(ResourceIDsOfSounds-->{SFX}, {phrase options})'
                            RULE_NT'to decide which number is the glulx resource id of ( sfx - s' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResourceIDsOfSounds-->{SFX} '
                    HEADING_NT'chapter 3 - actions , activities and rules' {heading 4} {under: H4'chapter 3 - actions , activities and rules'} {unit: 2}
                        HEADING_NT'section 1 - trying actions' {heading 5} {under: H5'section 1 - trying actions'} {unit: 2}
                            RULE_NT'to try ( s - action ) ( documented at ph_try )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action:S} '
                            RULE_NT'to silently try ( s - action ) ( documented at ph_trysilentl' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action-silently:S} '
                            RULE_NT'to try silently ( s - action ) ( documented at ph_trysilentl' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action-silently:S} '
                            RULE_NT'to decide whether the action is not silent' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (keep_silent == false) '
                        HEADING_NT'section 2 - action requirements' {heading 5} {under: H5'section 2 - action requirements'} {unit: 2}
                            RULE_NT'to decide whether the action requires a touchable noun ( doc' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToTouchNoun()) '
                            RULE_NT'to decide whether the action requires a touchable second nou' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToTouchSecondNoun()) '
                            RULE_NT'to decide whether the action requires a carried noun ( docum' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToCarryNoun()) '
                            RULE_NT'to decide whether the action requires a carried second noun ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToCarrySecondNoun()) '
                            RULE_NT'to decide whether the action requires light ( documented at ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedLightForAction()) '
                            RULE_NT'to anonymously abide by ( rl - a rule ) ( documented at ph_a' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL})) {
                                    		if (Rule'
                            RULE_NT'to anonymously abide by ( rl - value of kind k based rule pr' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL}, {V}, true)) {'
                            RULE_NT'to anonymously abide by ( rl - a nothing based rule ) ( docu' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL})) {
                                    		if (Rule'
                        HEADING_NT'section 3 - stop or continue' {heading 5} {under: H5'section 3 - stop or continue'} {unit: 2}
                            RULE_NT'to stop the action ( documented at ph_stopaction )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to only'
                            RULE_NT'to continue the action ( documented at ph_continueaction )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                        HEADING_NT'section 4 - actions as values' {heading 5} {under: H5'section 4 - actions as values'} {unit: 2}
                            RULE_NT'to decide what action is the current action ( documented at ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  STORED_ACTION_TY_Current({-new:action}) '
                            RULE_NT'to decide what action is the action of ( a - action ) ( docu' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {A} '
                            RULE_NT'to decide if ( act - a action ) involves ( x - an object ) (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Involves({-by-reference:act}, {X})) '
                            RULE_NT'to decide what action name is the action name part of ( act ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTION'
                            RULE_NT'to decide what object is the noun part of ( act - a action )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_NOUN_F'
                            RULE_NT'to decide what object is the second noun part of ( act - a a' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_SECOND'
                            RULE_NT'to decide what object is the actor part of ( act - a action ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTOR_'
                    HEADING_NT'chapter 4 - the model world' {heading 4} {under: H4'chapter 4 - the model world'} {unit: 2}
                        HEADING_NT'section 1 - ending the story' {heading 5} {under: H5'section 1 - ending the story'} {unit: 2}
                            RULE_NT'to end the story ( documented at ph_end )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag=3; story_complete=false; '
                            RULE_NT'to end the story finally ( documented at ph_endfinally )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag=3; story_complete=true; '
                            RULE_NT'to end the story saying ( finale - text ) ( documented at ph' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag={-by-reference:finale}; story_complete=false; '
                            RULE_NT'to end the story finally saying ( finale - text ) ( document' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag={-by-reference:finale}; story_complete=true; '
                            RULE_NT'to decide whether the story has ended ( documented at ph_end' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (deadflag~=0) '
                            RULE_NT'to decide whether the story has ended finally ( documented a' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (story_complete) '
                            RULE_NT'to decide whether the story has not ended ( documented at ph' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (deadflag==0) '
                            RULE_NT'to decide whether the story has not ended finally ( document' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (story_complete==false) '
                            RULE_NT'to resume the story ( documented at ph_resume )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  resurrect_please = true; '
                        HEADING_NT'section 2 - times of day' {heading 5} {under: H5'section 2 - times of day'} {unit: 2}
                            RULE_NT'to decide which number is the minutes part of ( t - time ) (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({t}%ONE_HOUR) '
                            RULE_NT'to decide which number is the hours part of ( t - time ) ( d' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({t}/ONE_HOUR) '
                            RULE_NT'to decide if ( t - time ) is before ( t2 - time ) ( document' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))<(({t2}+20*ONE_H'
                            RULE_NT'to decide if ( t - time ) is after ( t2 - time ) ( documente' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))>(({t2}+20*ONE_H'
                            RULE_NT'to decide which time is ( t - time ) before ( t2 - time ) ( ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({t2}-{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS)) '
                            RULE_NT'to decide which time is ( t - time ) after ( t2 - time ) ( d' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({t2}+{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS)) '
                        HEADING_NT'section 3 - durations' {heading 5} {under: H5'section 3 - durations'} {unit: 2}
                            RULE_NT'to decide which time is ( n - number ) minutes ( documented ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({n})%(TWENTY_FOUR_HOURS)) '
                            RULE_NT'to decide which time is ( n - number ) hours ( documented at' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({n}*ONE_HOUR)%(TWENTY_FOUR_HOURS)) '
                        HEADING_NT'section 4 - timed events' {heading 5} {under: H5'section 4 - timed events'} {unit: 2}
                            RULE_NT'to ( r - rule ) in ( t - number ) turn/turns from now ( docu' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, {t}+1, 0); '
                            RULE_NT'to ( r - rule ) at ( t - time ) ( documented at ph_attime )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, {t}, 1); '
                            RULE_NT'to ( r - rule ) in ( t - time ) from now ( documented at ph_' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, (the_time+{t})%(TWEN'
                        HEADING_NT'section 5 - scenes' {heading 5} {under: H5'section 5 - scenes'} {unit: 2}
                            RULE_NT'to decide if ( sc - scene ) has happened ( documented at ph_' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1)) '
                            RULE_NT'to decide if ( sc - scene ) has not happened ( documented at' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) == 0) '
                            RULE_NT'to decide if ( sc - scene ) has ended ( documented at ph_has' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) > 1) '
                            RULE_NT'to decide if ( sc - scene ) has not ended ( documented at ph' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) <= 1) '
                        HEADING_NT'section 6 - timing of scenes' {heading 5} {under: H5'section 6 - timing of scenes'} {unit: 2}
                            RULE_NT'to decide which time is the time since ( sc - scene ) began ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 1)) '
                            RULE_NT'to decide which time is the time when ( sc - scene ) began (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 2)) '
                            RULE_NT'to decide which time is the time since ( sc - scene ) ended ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 3)) '
                            RULE_NT'to decide which time is the time when ( sc - scene ) ended (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 4)) '
                        HEADING_NT'section 7 - player's identity and location' {heading 5} {under: H5'section 7 - player's identity and location'} {unit: 2}
                            RULE_NT'to decide whether in darkness ( documented at ph_indarkness ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (location==thedark) '
                        HEADING_NT'section 8 - moving and removing things' {heading 5} {under: H5'section 8 - moving and removing things'} {unit: 2}
                            RULE_NT'to move ( something - object ) to ( something else - object ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveObject({something}, {something else}, {phrase option'
                            RULE_NT'to remove ( something - object ) from play ( deprecated ) ( ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RemoveFromPlay({something}); '
                            RULE_NT'to move ( o - object ) backdrop to all ( d - description of ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveBackdrop({O}, {D}); '
                            RULE_NT'to update backdrop positions ( documented at ph_updatebackdr' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveFloatingObjects(); '
                        HEADING_NT'section 9 - the map' {heading 5} {under: H5'section 9 - the map'} {unit: 2}
                            RULE_NT'to decide which room is location of ( o - object ) ( documen' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LocationOf({O}) '
                            RULE_NT'to decide which room is room ( d - direction ) from/of ( r1 ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapConnection({R1},{D}) '
                            RULE_NT'to decide which door is door ( d - direction ) from/of ( r1 ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DoorFrom({R1},{D}) '
                            RULE_NT'to decide which object is the other side of ( d - door ) fro' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  OtherSideOfDoor({D},{R1}) '
                            RULE_NT'to decide which object is the direction of ( d - door ) from' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DirectionDoorLeadsIn({D},{R1}) '
                            RULE_NT'to decide which object is room-or-door ( d - direction ) fro' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RoomOrDoorFrom({R1},{D}) '
                            RULE_NT'to change ( d - direction ) exit of ( r1 - room ) to ( r2 - ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AssertMapConnection({R1},{D},{R2}); '
                            RULE_NT'to change ( d - direction ) exit of ( r1 - room ) to nothing' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AssertMapConnection({R1},{D},nothing); '
                            RULE_NT'to decide which room is the front side of ( d - object ) ( d' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FrontSideOfDoor({D}) '
                            RULE_NT'to decide which room is the back side of ( d - object ) ( do' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BackSideOfDoor({D}) '
                        HEADING_NT'section 10 - route-finding' {heading 5} {under: H5'section 10 - route-finding'} {unit: 2}
                            RULE_NT'to decide which object is best route from ( r1 - object ) to' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},0,{phrase options}) '
                            RULE_NT'to decide which number is number of moves from ( r1 - object' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},0,{phrase options},true) '
                            RULE_NT'to decide which object is best route from ( r1 - object ) to' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},{RS},{phrase options}) '
                            RULE_NT'to decide which number is number of moves from ( r1 - object' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},{RS},{phrase options},true) '
                        HEADING_NT'section 11 - the object tree' {heading 5} {under: H5'section 11 - the object tree'} {unit: 2}
                            RULE_NT'to decide which object is holder of ( something - object ) (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (HolderOf({something})) '
                            RULE_NT'to decide which object is next thing held after ( something ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (sibling({something})) '
                            RULE_NT'to decide which object is first thing held by ( something - ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (child({something})) '
                    HEADING_NT'chapter 5 - understanding' {heading 4} {under: H4'chapter 5 - understanding'} {unit: 2}
                        HEADING_NT'section 1 - asking yes/no questions' {heading 5} {under: H5'section 1 - asking yes/no questions'} {unit: 2}
                            RULE_NT'to decide whether player consents ( documented at ph_consent' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  YesOrNo() '
                        HEADING_NT'section 2 - the player's command' {heading 5} {under: H5'section 2 - the player's command'} {unit: 2}
                            RULE_NT'to decide if ( s - a snippet ) matches ( t - a topic ) ( doc' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetMatches({S}, {T})) '
                            RULE_NT'to decide if ( s - a snippet ) does not match ( t - a topic ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetMatches({S}, {T}) == false) '
                            RULE_NT'to decide if ( s - a snippet ) includes ( t - a topic ) ( do' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (matched_text=SnippetIncludes({T},{S})) '
                            RULE_NT'to decide if ( s - a snippet ) does not include ( t - a topi' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetIncludes({T},{S})==0) '
                        HEADING_NT'section 3 - changing the player's command' {heading 5} {under: H5'section 3 - changing the player's command'} {unit: 2}
                            RULE_NT'to change the text of the player's command to ( t - text ) (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetPlayersCommand({-by-reference:T}); '
                            RULE_NT'to replace ( s - a snippet ) with ( t - text ) ( documented ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpliceSnippet({S}, {-by-reference:T}); '
                            RULE_NT'to cut ( s - a snippet ) ( documented at ph_cutsnippet )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpliceSnippet({S}, 0); '
                            RULE_NT'to reject the player's command ( documented at ph_rejectcomm' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookFails(); rtrue;  - in to only'
                        HEADING_NT'section 4 - scope and pronouns' {heading 5} {under: H5'section 4 - scope and pronouns'} {unit: 2}
                            RULE_NT'to place ( o - an object ) in scope , but not its contents (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PlaceInScope({O}, {phrase options}); '
                            RULE_NT'to place the/-- contents of ( o - an object ) in scope ( doc' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ScopeWithin({O}); '
                            RULE_NT'to set pronouns from ( o - an object ) ( documented at ph_se' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PronounNotice({O}); '
                        HEADING_NT'section 5 - the multiple object list' {heading 5} {under: H5'section 5 - the multiple object list'} {unit: 2}
                            RULE_NT'to decide what list of objects is the multiple object list (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Mol({-new:list of objects}) '
                            RULE_NT'to alter the multiple object list to ( l - list of objects )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Set_Mol({-by-reference:L}); '
                        HEADING_NT'section sr5/8/1 - message support - issuance - unindexed' {heading 5} {under: H5'section sr5/8/1 - message support - issuance - unindexed'} {unit: 2}
                            RULE_NT'to issue score notification message' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  NotifyTheScore(); '
                            RULE_NT'to say pronoun dictionary word' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (address) pronoun_word; '
                            RULE_NT'to say recap of command' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintCommand(); '
                            SENTENCE_NT'the pronoun reference object is an object that varies' {unit: 2} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                                PROPER_NOUN_NT'pronoun reference object' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'pronoun reference object' {nonlocal: 'pronoun reference object'(var)object}} {created here}
                                COMMON_NOUN_NT'object that varies' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=objects variable-pointer(x) >>} {eval: TEST_VALUE_NT}
                            SENTENCE_NT'the pronoun reference object variable translates into inter ' {unit: 2} {classified}
                                VERB_NT'translates into' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: into} {prep2: as} {special meaning: translates-into-i6} {category: 3}
                                UNPARSED_NOUN_NT'pronoun reference object variable' {definite 'the' n/m/f s/p nom/acc}
                                UNPARSED_NOUN_NT'pronoun_obj'
                            RULE_NT'to say pronoun i6 dictionary word' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (address) pronoun_word; '
                            RULE_NT'to say parser command so far' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintCommand(); '
                    HEADING_NT'chapter 6 - deprecated or private phrases - unindexed' {heading 4} {under: H4'chapter 6 - deprecated or private phrases - unindexed'} {unit: 2}
                        HEADING_NT'section 1 - spatial modelling - unindexed' {heading 5} {under: H5'section 1 - spatial modelling - unindexed'} {unit: 2}
                            RULE_NT'to decide which object is the component parts core of ( x - ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CoreOf({X}) '
                            RULE_NT'to decide which object is the common ancestor of ( o - an ob' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (CommonAncestor({O}, {P})) '
                            RULE_NT'to decide which object is the not-counting-parts holder of (' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (CoreOfParentOfCoreOf({O})) '
                            RULE_NT'to decide which object is the visibility-holder of ( o - obj' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  VisibilityParent({O}) '
                            RULE_NT'to calculate visibility ceiling at low level' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FindVisibilityLevels(); '
                            RULE_NT'to decide which object is the touchability ceiling of ( o - ' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TouchabilityCeiling({O}) '
                            RULE_NT'to decide which number is the visibility ceiling count calcu' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  visibility_levels '
                            RULE_NT'to decide which object is the visibility ceiling calculated' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  visibility_ceiling '
                        HEADING_NT'section 2 - room descriptions - unindexed' {heading 5} {under: H5'section 2 - room descriptions - unindexed'} {unit: 2}
                            RULE_NT'to produce a room description with going spacing conventions' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LookAfterGoing(); '
                            RULE_NT'to print the location's description' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintOrRun(location, description); '
                            RULE_NT'to decide if set to sometimes abbreviated room descriptions' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 1) '
                            RULE_NT'to decide if set to unabbreviated room descriptions' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 2) '
                            RULE_NT'to decide if set to abbreviated room descriptions' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 3) '
                        HEADING_NT'section 3 - action conversion - unindexed' {heading 5} {under: H5'section 3 - action conversion - unindexed'} {unit: 2}
                            RULE_NT'to convert to ( an - an action name ) on ( o - an object )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return GVS_Convert({AN},{O},0);  - in to only'
                            RULE_NT'to convert to request of ( x - object ) to perform ( an - ac' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return ConvertToRequest({X}, {AN}, {Y}, {Z}); '
                            RULE_NT'to convert to special going-with-push action' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return ConvertToGoingWithPush(); '
                        HEADING_NT'section 4 - surreptitious violation of invariants - unindexe' {heading 5} {under: H5'section 4 - surreptitious violation of invariants - unindexed'} {unit: 2}
                            RULE_NT'to surreptitiously move ( something - object ) to ( somethin' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  move {something} to {something else}; '
                            RULE_NT'to surreptitiously move ( something - object ) to ( somethin' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveDuringGoing({something}, {something else}); '
                            RULE_NT'to surreptitiously reckon darkness' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SilentlyConsiderLight(); '
                        HEADING_NT'section 5 - capitalised list-writing - unindexed' {heading 5} {under: H5'section 5 - capitalised list-writing - unindexed'} {unit: 2}
                            RULE_NT'to say list-writer list of marked objects' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	WriteListOfMarkedObjects(ENGLISH_BIT);
                                    	'
                            RULE_NT'to say list-writer articled list of marked objects' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+CFIRS'
                        HEADING_NT'section 6 - printing names - unindexed' {heading 5} {under: H5'section 6 - printing names - unindexed'} {unit: 2}
                            RULE_NT'to decide if expanding text for comparison purposes' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  say__comp '
                        HEADING_NT'section 7 - command parsing - unindexed' {heading 5} {under: H5'section 7 - command parsing - unindexed'} {unit: 2}
                            RULE_NT'to decide whether the i6 parser is running multiple actions' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (multiflag==1) '
                        HEADING_NT'section 8 - deprecated inform - unindexed' {heading 5} {under: H5'section 8 - deprecated inform - unindexed'} {unit: 2}
                            RULE_NT'to yes ( documented at ph_yes )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to decide if only'
                            RULE_NT'to no ( documented at ph_no )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to decide if only'
                        HEADING_NT'section 9 - debugging inform - unindexed' {heading 5} {under: H5'section 9 - debugging inform - unindexed'} {unit: 2}
                            RULE_NT'to ***' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:verbose-checking} '
                            RULE_NT'to *** ( t - text )' {unit: 2}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:verbose-checking} '
                            ENDHERE_NT'the standard rules' {unit: 2}
        INCLUSION_NT'include standard rules by graham nelson'
    HEADING_NT'use the serial comma and no scoring' {heading 0} {under: H0'use the serial comma and no scoring'} {unit: 4}
        SENTENCE_NT'use the serial comma and no scoring' {unit: 4} {classified}
            VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
            AND_NT'and'
                UNPARSED_NOUN_NT'serial comma' {definite 'the' n/m/f s/p nom/acc}
                UNPARSED_NOUN_NT'no scoring'
        SENTENCE_NT'understand "about" as asking for information' {unit: 4} {classified}
            VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
            UNPARSED_NOUN_NT'"about"'
            UNPARSED_NOUN_NT'asking for information'
        SENTENCE_NT'asking for information is an action out of world' {unit: 4} {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
            UNPARSED_NOUN_NT'asking for information'
            UNPARSED_NOUN_NT'out of world'
        RULE_NT'carry out asking for information' {unit: 4}
            CODE_BLOCK_NT
                CODE_BLOCK_NT'say "An implementation of the following creative brief:Peo' {control structure: SAY}
                    INVOCATION_LIST_SAY_NT'"An implementation of the following creative brief:People '
                        INVOCATION_NT'"An implementation of the following creative brief:People ' {phrase invoked: call} {kind variable declarations: K=text}
                            RVALUE_CONTEXT_NT'"An implementation of the following creative brief:People ' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                CONSTANT_NT'"An implementation of the following creative brief:People ' {kind: text}
        RULE_NT'when play begins' {unit: 4}
            CODE_BLOCK_NT
                CODE_BLOCK_NT'say "Gelato's Syndrome. It's struck, and it's struck hard. I' {control structure: SAY}
                    INVOCATION_LIST_SAY_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In th'
                        INVOCATION_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In th' {phrase invoked: call} {kind variable declarations: K=text}
                            RVALUE_CONTEXT_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In th' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                CONSTANT_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In th' {kind: text}
                INVOCATION_LIST_NT'now the command prompt is "[if the destination of the player' {control structure: NOW}
                    CONDITION_CONTEXT_NT'the command prompt is "[if the destination of the player is '
        HEADING_NT'section 1 - errands' {heading 5} {under: H5'section 1 - errands'} {unit: 4}
            SENTENCE_NT'the current actor is a person which varies' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'current actor' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'current actor' {nonlocal: 'current actor'(var)person}} {created here}
                COMMON_NOUN_NT'person which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=people variable-pointer(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'the current owner is a person which varies' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'current owner' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'current owner' {nonlocal: 'current owner'(var)person}} {created here}
                COMMON_NOUN_NT'person which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=people variable-pointer(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'every turn' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if player is active' {colon_block_command}
                            INVOCATION_NT'if player is active' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player is active' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player is active' {proposition: << active('player') >>} {term: 'player'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'follow the character movement rules' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'follow the character movement rules' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'character movement rules' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                        CONSTANT_NT'character movement rules' {kind: rulebook} {rulebook: character movement}{meaning: {character movement rules = RULEBOOK_MC}}
            RULE_NT'every turn' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last person named is the player' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last person named is the player'
                    INVOCATION_LIST_NT'now the last thing named is the player' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last thing named is the player'
                    INVOCATION_LIST_NT'now every person is active' {control structure: NOW}
                        CONDITION_CONTEXT_NT'every person is active'
            SENTENCE_NT'a person can be active or passive' {unit: 4} {classified}
                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                COMMON_NOUN_NT'a person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                UNPARSED_NOUN_NT'active or passive'
                    AND_NT'or'
                        UNPARSED_NOUN_NT'active'
                        UNPARSED_NOUN_NT'passive'
            SENTENCE_NT'the player is passive' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'player' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: person} {instance: I34'yourself'} {enumeration: 0}} {turned already}
                ADJECTIVE_NT'passive' {refined} {predicate: passive} {creation: << passive(x) ^ passive(x) >>}
            SENTENCE_NT'the character movement rules are a rulebook' {unit: 4} {classified} {clears pronouns} {interpretation of subject: infs'yourself'}
                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                PROPER_NOUN_NT'character movement rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: character movement}} {created here}
                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'the first character movement rule' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now group size is 1' {control structure: NOW}
                        CONDITION_CONTEXT_NT'group size is 1'
                    INVOCATION_LIST_NT'now the last person named is the player' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last person named is the player'
                    INVOCATION_LIST_NT'now the last thing named is the player' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last thing named is the player'
                    INVOCATION_LIST_NT'now the player is passive' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the player is passive'
            RULE_NT'a character movement rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with mover running through innocent people' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with mover running through innocent people' {phrase invoked: call} {kind variable declarations: K=person}
                                NEW_LOCAL_CONTEXT_NT'mover' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: person} {required: K}
                                    UNKNOWN_NT'mover'
                                RVALUE_CONTEXT_NT'innocent people' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'innocent people' {kind: description of people} {proposition: << kind=person(x) ^ innocent(x) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the current actor is the mover' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the current actor is the mover'
                            INVOCATION_LIST_NT'follow the shopper rules' {indent: 2}
                                INVOCATION_NT'follow the shopper rules' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'shopper rules' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                        CONSTANT_NT'shopper rules' {kind: rulebook} {rulebook: shopper}{meaning: {shopper rules = RULEBOOK_MC}}
                            INVOCATION_LIST_NT'now the current actor is passive' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the current actor is passive'
                    INVOCATION_LIST_NT'follow the movement reporting rule' {indent: 1}
                        INVOCATION_NT'follow the movement reporting rule' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'movement reporting rule' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                CONSTANT_NT'movement reporting rule' {kind: rule} {rule: movement reporting rule}{meaning: {movement reporting rule = MISCELLANEOUS_MC}}
            RULE_NT'a character movement rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with next mover running through mercantile people' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with next mover running through mercantile people' {phrase invoked: call} {kind variable declarations: K=person}
                                NEW_LOCAL_CONTEXT_NT'next mover' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: person} {required: K}
                                    UNKNOWN_NT'next mover'
                                RVALUE_CONTEXT_NT'mercantile people' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'mercantile people' {kind: description of people} {proposition: << kind=person(x) ^ mercantile(x) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the current owner is the next mover' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the current owner is the next mover'
                            INVOCATION_LIST_NT'follow the shopowner rules' {indent: 2}
                                INVOCATION_NT'follow the shopowner rules' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'shopowner rules' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                        CONSTANT_NT'shopowner rules' {kind: rulebook} {rulebook: shopowner}{meaning: {shopowner rules = RULEBOOK_MC}}
                            INVOCATION_LIST_NT'now the current owner is passive' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the current owner is passive'
                    INVOCATION_LIST_NT'follow the infection rule' {indent: 1}
                        INVOCATION_NT'follow the infection rule' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'infection rule' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                CONSTANT_NT'infection rule' {kind: rule} {rule: infection rule}{meaning: {infection rule = MISCELLANEOUS_MC}}
            RULE_NT'to decide whether movement has not yet occurred' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the player is passive' {colon_block_command}
                            INVOCATION_NT'if the player is passive' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player is passive' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player is passive' {proposition: << passive('player') >>} {term: 'player'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'no' {phrase invoked: call}
                    INVOCATION_LIST_NT'yes'
                        INVOCATION_NT'yes' {phrase invoked: call}
            RULE_NT'definition' {unit: 4}
            RULE_NT'definition' {unit: 4}
            SENTENCE_NT'the shopowner rules is a rulebook' {unit: 4} {classified} {clears pronouns}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shopowner rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: shopowner}} {created here}
                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'a shopowner rule' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the shop be a random room owned by the current owner'
                        INVOCATION_NT'let the shop be a random room owned by the current owner' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'shop' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                UNKNOWN_NT'shop'
                            RVALUE_CONTEXT_NT'a random room owned by the current owner' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'a random room owned by the current owner'
                                    INVOCATION_LIST_NT'a random room owned by the current owner'
                                        INVOCATION_NT'a random room owned by the current owner' {phrase invoked: call} {resulting: room} {kind variable declarations: K=room}
                                            RVALUE_CONTEXT_NT'room owned by the current owner' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'room owned by the current owner' {kind: description of rooms} {proposition: << kind=room(x) ^ ('the current owner' == <(QUOTED_INAME_0_0000005d(*1)) : x>) >>}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the shop is air-conditioned and an open door ( called the' {colon_block_command}
                            INVOCATION_NT'if the shop is air-conditioned and an open door ( called the' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'shop is air-conditioned and an open door ( called the escape' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'shop is air-conditioned and an open door ( called the escape'
                                        TEST_PROPOSITION_NT'shop is air-conditioned' {proposition: << air-conditioned('shop') >>} {term: 'shop'}
                                        TEST_PROPOSITION_NT'an open door ( called the escape ) protects the shop' {proposition: << Exists x : kind=door(x) ^ open(x) ^ called='escape':door(x) ^ protection(x, 'the shop') >>} {term: x}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current owner closing the escape' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'try the current owner closing the escape' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'current owner closing the escape' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'current owner closing the escape' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the escape' {local: LV"escape"-door door}>}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'report someone closing a door when the person asked owns the' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked], muttering darkly about air-conditio' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'", muttering darkly about air-conditioning and electricity, '
                            INVOCATION_NT'", muttering darkly about air-conditioning and electricity, ' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'", muttering darkly about air-conditioning and electricity, ' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'", muttering darkly about air-conditioning and electricity, ' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'report vanessa closing the metal door when the metal door is' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if vanessa is visible' {colon_block_command}
                            INVOCATION_NT'if vanessa is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'vanessa is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'vanessa is visible' {proposition: << visible('vanessa') >>} {term: 'vanessa'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "Vanessa watches serenely as the metal door slides autom' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"Vanessa watches serenely as the metal door slides automatic'
                                    INVOCATION_NT'"Vanessa watches serenely as the metal door slides automatic' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"Vanessa watches serenely as the metal door slides automatic' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"Vanessa watches serenely as the metal door slides automatic' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            CODE_BLOCK_NT'say "The metal door slides heavily back into place."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"The metal door slides heavily back into place."'
                                    INVOCATION_NT'"The metal door slides heavily back into place."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"The metal door slides heavily back into place."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"The metal door slides heavily back into place."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'a shopowner rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the location of the current owner encloses a submitted ar' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the location of the current owner encloses a submitted ar' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'location of the current owner encloses a submitted artwork (' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'location of the current owner encloses a submitted artwork (' {proposition: << Exists x : kind=artwork(x) ^ submitted(x) ^ called='target':artwork(x) ^ encloses('location of the current owner', x) >>} {term: 'location of the current owner'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current owner filing the target' {indent: 2}
                                INVOCATION_NT'try the current owner filing the target' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'current owner filing the target' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'current owner filing the target' {kind: action} {action pattern: <action: filing /  noun: LOCAL_VARIABLE_NT'the target' {local: LV"target"-artwork artwork}>}
            SENTENCE_NT'filing is an action applying to one thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'filing'
                UNPARSED_NOUN_NT'applying to one thing'
            RULE_NT'before someone filing something which is not carried by the ' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked taking the noun'
                        INVOCATION_NT'try the person asked taking the noun' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked taking the noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked taking the noun' {kind: action} {action pattern: <action: taking /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out someone filing' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked does not carry the noun and the person a' {colon_block_command}
                            INVOCATION_NT'if the person asked does not carry the noun and the person a' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked does not carry the noun and the person asked is' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'person asked does not carry the noun and the person asked is'
                                        TEST_PROPOSITION_NT'person asked does not carry the noun' {proposition: << NOT< ('person asked' == <CarrierOf(*1) : 'the noun'>) NOT> >>} {term: 'person asked'}
                                        TEST_PROPOSITION_NT'the person asked is visible' {proposition: << visible('the person asked') >>} {term: 'the person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] tries unsuccessfully to get [the nou' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" tries unsuccessfully to get "'
                                    INVOCATION_NT'" tries unsuccessfully to get "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" tries unsuccessfully to get "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" tries unsuccessfully to get "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                    INVOCATION_LIST_NT'now the noun is nowhere' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            RULE_NT'report someone filing' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] registers [the noun] and files it aw' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" registers "'
                            INVOCATION_NT'" registers "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" registers "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" registers "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" and files it away."'
                            INVOCATION_NT'" and files it away."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" and files it away."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" and files it away."' {kind: text}
            SENTENCE_NT'the shopper rules is a rulebook' {unit: 4} {classified} {clears pronouns}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shopper rules' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: rulebook} {rulebook: shopper}} {created here}
                COMMON_NOUN_NT'rulebook' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values based rulebook producing values'-k} {creation: << kind=rulebook(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'a shopper rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the current actor carries something ( called the problem ' {colon_block_command}
                            INVOCATION_NT'if the current actor carries something ( called the problem ' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'current actor carries something ( called the problem )' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'current actor carries something ( called the problem )' {proposition: << Exists x : kind=thing_c(x) ^ called='problem':thing(x) ^ ('current actor' == <CarrierOf(*1) : x>) >>} {term: 'current actor'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current actor resolving the problem' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'try the current actor resolving the problem' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'current actor resolving the problem' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'current actor resolving the problem' {kind: action} {action pattern: <action: resolving /  noun: LOCAL_VARIABLE_NT'the problem' {local: LV"problem"-thing thing}>}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'a shopper rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the current actor is not in the pool hall and the air con' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the current actor is not in the pool hall and the air con' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'current actor is not in the pool hall and the air conditione' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'current actor is not in the pool hall and the air conditione'
                                        TEST_PROPOSITION_NT'current actor is not in the pool hall' {proposition: << NOT< ('the pool hall' == <ContainerOf(*1) : 'current actor'>) NOT> >>} {term: 'current actor'}
                                        TEST_PROPOSITION_NT'the air conditioner is switched on' {proposition: << switched on('the air conditioner') >>} {term: 'the air conditioner'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current actor approaching the pool hall' {indent: 2}
                                INVOCATION_NT'try the current actor approaching the pool hall' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'current actor approaching the pool hall' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'current actor approaching the pool hall' {kind: action} {action pattern: <action: approaching /  noun: CONSTANT_NT'the pool hall' {kind: room} {instance: I88'alfred cralle pool hall'} {enumeration: 0}>}
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            INVOCATION_LIST_NT'let way be a random direction' {indent: 2}
                                INVOCATION_NT'let way be a random direction' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'way' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: direction} {required: value}
                                        UNKNOWN_NT'way'
                                    RVALUE_CONTEXT_NT'a random direction' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PHRASE_TO_DECIDE_VALUE_NT'a random direction'
                                            INVOCATION_LIST_NT'a random direction'
                                                INVOCATION_NT'a random direction' {phrase invoked: call} {resulting: direction} {kind variable declarations: K=direction}
                                                    RVALUE_CONTEXT_NT'direction' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                        CONSTANT_NT'direction' {kind: description of directions} {proposition: << kind=direction(x) >>}
                            INVOCATION_LIST_NT'try the current actor going the way' {indent: 2}
                                INVOCATION_NT'try the current actor going the way' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'current actor going the way' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'current actor going the way' {kind: action} {action pattern: <action: going /  noun: LOCAL_VARIABLE_NT'the way' {local: LV<unallocated> direction}>}
            RULE_NT'definition' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if it is outdoors' {colon_block_command}
                            INVOCATION_NT'if it is outdoors' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'it is outdoors' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'it is outdoors' {proposition: << outdoors('it') >>} {term: 'it'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'no' {phrase invoked: call}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if it is the pool hall and the air conditioner is switched o' {colon_block_command}
                            INVOCATION_NT'if it is the pool hall and the air conditioner is switched o' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'it is the pool hall and the air conditioner is switched off' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'it is the pool hall and the air conditioner is switched off'
                                        TEST_PROPOSITION_NT'it is the pool hall' {proposition: << ('it' == 'the pool hall') >>} {term: 'it'}
                                        TEST_PROPOSITION_NT'the air conditioner is switched off' {proposition: << switched off('the air conditioner') >>} {term: 'the air conditioner'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'no' {phrase invoked: call}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if it is protected by a door' {colon_block_command}
                            INVOCATION_NT'if it is protected by a door' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'it is protected by a door' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'it is protected by a door' {proposition: << Exists x : kind=door(x) ^ protection(x, 'it') >>} {term: 'it'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'yes' {phrase invoked: call}
                    INVOCATION_LIST_NT'no'
                        INVOCATION_NT'no' {phrase invoked: call}
            SENTENCE_NT'protection relates a door ( called x ) to a room ( called y ' {unit: 4} {classified}
                VERB_NT'relates' {verb 'relate' 3p s act IS_TENSE +ve} {special meaning: new-relation}
                UNPARSED_NOUN_NT'protection' {new relation: protection}
                UNPARSED_NOUN_NT'a door ( called x )'
                UNPARSED_NOUN_NT'a room ( called y ) when the front side of x is y or the bac'
            SENTENCE_NT'the verb to protect means the protection relation' {unit: 4} {classified}
                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                UNPARSED_NOUN_NT'to protect'
                UNPARSED_NOUN_NT'protection relation' {definite 'the' n/m/f s/p nom/acc}
            SENTENCE_NT'ownership relates one person to various rooms' {unit: 4} {classified}
                VERB_NT'relates' {verb 'relate' 3p s act IS_TENSE +ve} {special meaning: new-relation}
                UNPARSED_NOUN_NT'ownership' {new relation: ownership}
                UNPARSED_NOUN_NT'one person'
                UNPARSED_NOUN_NT'various rooms'
            SENTENCE_NT'the verb to own means the ownership relation' {unit: 4} {classified}
                VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                UNPARSED_NOUN_NT'to own'
                UNPARSED_NOUN_NT'ownership relation' {definite 'the' n/m/f s/p nom/acc}
            SENTENCE_NT'resolving is an action applying to one thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'resolving'
                UNPARSED_NOUN_NT'applying to one thing'
            SENTENCE_NT'an artwork is a kind of thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'artwork' {indefinite 'an' n/m/f nom/acc s} {refined} {creation: << kind=artwork(x) >>} {refers: infs'artwork'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before printing the name of an artwork' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say italic type' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'italic type'
                            INVOCATION_NT'italic type' {phrase invoked: call}
            RULE_NT'after printing the name of an artwork' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say roman type' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'roman type'
                            INVOCATION_NT'roman type' {phrase invoked: call}
            SENTENCE_NT'an artwork can be submitted or reserved' {unit: 4} {classified}
                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                COMMON_NOUN_NT'an artwork' {refined} {refers: infs'artwork'} {creation: << kind=artwork(x) >>} {eval: TEST_VALUE_NT}
                UNPARSED_NOUN_NT'submitted or reserved'
                    AND_NT'or'
                        UNPARSED_NOUN_NT'submitted'
                        UNPARSED_NOUN_NT'reserved'
            SENTENCE_NT'a book is a kind of artwork' {unit: 4} {classified} {interpretation of subject: infs'artwork'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'book' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=book(x) >>} {refers: infs'book'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of artwork' {refined} {refers: infs'artwork'}
                    COMMON_NOUN_NT'artwork' {refined} {refers: infs'artwork'} {creation: << kind=artwork(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before someone resolving a book when the person asked is not' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the public library'
                        INVOCATION_NT'try the person asked approaching the public library' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked approaching the public library' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked approaching the public library' {kind: action} {action pattern: <action: approaching /  noun: CONSTANT_NT'the public library' {kind: room} {instance: I110'public library'} {enumeration: 0}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out someone resolving a book' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'move the noun to the public library'
                        INVOCATION_NT'move the noun to the public library' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                            RVALUE_CONTEXT_NT'public library' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                CONSTANT_NT'public library' {kind: room} {instance: I110'public library'} {enumeration: 0}
                    INVOCATION_LIST_NT'now the noun is submitted' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is submitted'
            RULE_NT'report someone resolving a book' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] turns in [the noun]."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" turns in "'
                            INVOCATION_NT'" turns in "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" turns in "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" turns in "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
            RULE_NT'before listing contents' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'group books together'
                        INVOCATION_NT'group books together' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'books' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                CONSTANT_NT'books' {kind: description of books} {proposition: << kind=book(x) >>}
            RULE_NT'before grouping together books' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "books entitled "' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"books entitled "'
                            INVOCATION_NT'"books entitled "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"books entitled "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"books entitled "' {kind: text}
            SENTENCE_NT'a stamped envelope is a kind of thing' {unit: 4} {classified} {interpretation of subject: infs'book'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'stamped envelope' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=stamped envelope(x) >>} {refers: infs'stamped envelope'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before someone resolving a stamped envelope when the person ' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the post office'
                        INVOCATION_NT'try the person asked approaching the post office' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked approaching the post office' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked approaching the post office' {kind: action} {action pattern: <action: approaching /  noun: CONSTANT_NT'the post office' {kind: room} {instance: I96'post office'} {enumeration: 0}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out someone resolving a stamped envelope' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is nowhere' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            RULE_NT'report someone resolving a stamped envelope' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] slips [a noun] into the outgoing mai' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" slips "'
                            INVOCATION_NT'" slips "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" slips "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" slips "' {kind: text}
                        INVOCATION_LIST_SAY_NT'a noun'
                            INVOCATION_NT'a noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" into the outgoing mail slot."'
                            INVOCATION_NT'" into the outgoing mail slot."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" into the outgoing mail slot."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" into the outgoing mail slot."' {kind: text}
            RULE_NT'instead of someone resolving a stamped envelope when the per' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is visible' {indent: 1} {colon_block_command}
                            INVOCATION_NT'if the person asked is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is visible' {proposition: << visible('person asked') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] shoves into the mail slot [a list of' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" shoves into the mail slot "'
                                    INVOCATION_NT'" shoves into the mail slot "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" shoves into the mail slot "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" shoves into the mail slot "' {kind: text}
                                INVOCATION_LIST_SAY_NT'a list of stamped envelopes carried by the person asked'
                                    INVOCATION_NT'a list of stamped envelopes carried by the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'stamped envelopes carried by the person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                            CONSTANT_NT'stamped envelopes carried by the person asked' {kind: description of stamped envelopes} {proposition: << kind=stamped envelope(x) ^ ('the person asked' == <CarrierOf(*1) : x>) >>}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with item running through stamped envelopes carried b' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with item running through stamped envelopes carried b' {phrase invoked: call} {kind variable declarations: K=stamped envelope}
                                NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: stamped envelope} {required: K}
                                    UNKNOWN_NT'item'
                                RVALUE_CONTEXT_NT'stamped envelopes carried by the person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'stamped envelopes carried by the person asked' {kind: description of stamped envelopes} {proposition: << kind=stamped envelope(x) ^ ('the person asked' == <CarrierOf(*1) : x>) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the item is nowhere' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the item is nowhere'
            SENTENCE_NT'a dvd is a kind of artwork' {unit: 4} {classified} {interpretation of subject: infs'stamped envelope'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'dvd' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=dvd(x) >>} {refers: infs'dvd'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of artwork' {refined} {refers: infs'artwork'}
                    COMMON_NOUN_NT'artwork' {refined} {refers: infs'artwork'} {creation: << kind=artwork(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before someone resolving a dvd when the person asked is not ' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the rental store'
                        INVOCATION_NT'try the person asked approaching the rental store' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked approaching the rental store' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked approaching the rental store' {kind: action} {action pattern: <action: approaching /  noun: CONSTANT_NT'the rental store' {kind: room} {instance: I104'movie rental store'} {enumeration: 0}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out someone resolving a dvd' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is submitted' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is submitted'
                    INVOCATION_LIST_NT'move the noun to the movie rental store'
                        INVOCATION_NT'move the noun to the movie rental store' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                            RVALUE_CONTEXT_NT'movie rental store' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                CONSTANT_NT'movie rental store' {kind: room} {instance: I104'movie rental store'} {enumeration: 0}
            RULE_NT'report someone resolving a dvd' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] returns [the noun]."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" returns "'
                            INVOCATION_NT'" returns "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" returns "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" returns "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
            RULE_NT'instead of someone resolving a dvd when the person asked car' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is visible' {colon_block_command}
                            INVOCATION_NT'if the person asked is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is visible' {proposition: << visible('person asked') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] turns in [a list of DVDs carried by ' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" turns in "'
                                    INVOCATION_NT'" turns in "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" turns in "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" turns in "' {kind: text}
                                INVOCATION_LIST_SAY_NT'a list of dvds carried by the person asked'
                                    INVOCATION_NT'a list of dvds carried by the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'dvds carried by the person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                            CONSTANT_NT'dvds carried by the person asked' {kind: description of dvds} {proposition: << kind=dvd(x) ^ ('the person asked' == <CarrierOf(*1) : x>) >>}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
                    INVOCATION_LIST_NT'now every dvd carried by the person asked is submitted' {control structure: NOW}
                        CONDITION_CONTEXT_NT'every dvd carried by the person asked is submitted'
                    INVOCATION_LIST_NT'now every dvd carried by the person asked is in the location' {control structure: NOW}
                        CONDITION_CONTEXT_NT'every dvd carried by the person asked is in the location of '
            RULE_NT'before listing contents' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'group dvds together'
                        INVOCATION_NT'group dvds together' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'dvds' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                CONSTANT_NT'dvds' {kind: description of dvds} {proposition: << kind=dvd(x) >>}
            RULE_NT'before grouping together dvds' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "DVDs of "' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"DVDs of "'
                            INVOCATION_NT'"DVDs of "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"DVDs of "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"DVDs of "' {kind: text}
            SENTENCE_NT'approaching is an action applying to one thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'approaching'
                UNPARSED_NOUN_NT'applying to one thing'
            RULE_NT'carry out someone approaching' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the way be the best route from the location of the perso'
                        INVOCATION_NT'let the way be the best route from the location of the perso' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'way' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                UNKNOWN_NT'way'
                            RVALUE_CONTEXT_NT'best route from the location of the person asked to the noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location of the person asked to the noun'
                                    INVOCATION_LIST_NT'best route from the location of the person asked to the noun'
                                        INVOCATION_NT'best route from the location of the person asked to the noun' {phrase invoked: call} {resulting: object} {phrase options invoked: using doors}
                                            RVALUE_CONTEXT_NT'location of the person asked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                PHRASE_TO_DECIDE_VALUE_NT'location of the person asked'
                                                    INVOCATION_LIST_NT'location of the person asked'
                                                        INVOCATION_NT'location of the person asked' {phrase invoked: call} {resulting: room}
                                                            RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                            RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the way is a direction' {colon_block_command}
                            INVOCATION_NT'if the way is a direction' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'way is a direction' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'way is a direction' {proposition: << kind=direction('way') >>} {term: 'way'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the person asked going the way' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'try the person asked going the way' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'person asked going the way' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'person asked going the way' {kind: action} {action pattern: <action: going /  noun: LOCAL_VARIABLE_NT'the way' {local: LV"way"-object object}>}
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            INVOCATION_LIST_NT'stop the action' {indent: 1}
                                INVOCATION_NT'stop the action' {phrase invoked: call}
            SENTENCE_NT'a coupon is a kind of thing' {unit: 4} {classified} {interpretation of subject: infs'dvd'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'coupon' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=coupon(x) >>} {refers: infs'coupon'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'carry out someone resolving a coupon' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked giving the noun to vanessa'
                        INVOCATION_NT'try the person asked giving the noun to vanessa' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked giving the noun to vanessa' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked giving the noun to vanessa' {kind: action} {action pattern: <action: giving it to /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}} second: CONSTANT_NT'vanessa' {kind: woman} {instance: I129'vanessa'} {enumeration: 0}>}
            SENTENCE_NT'the block giving rule is not listed in any rulebook' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: negative} {special meaning: rule-listed-in}
                UNPARSED_NOUN_NT'the block giving rule'
                UNPARSED_NOUN_NT'in any rulebook'
            RULE_NT'check giving something to someone ( this is the block player' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'abide by the block giving rule'
                        INVOCATION_NT'abide by the block giving rule' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'block giving rule' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                CONSTANT_NT'block giving rule' {kind: rule} {rule: block giving rule}{meaning: {block giving rule = MISCELLANEOUS_MC}}
            RULE_NT'before someone resolving a coupon when the person asked is n' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching cold comfort'
                        INVOCATION_NT'try the person asked approaching cold comfort' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked approaching cold comfort' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked approaching cold comfort' {kind: action} {action pattern: <action: approaching /  noun: CONSTANT_NT'cold comfort' {kind: room} {instance: I100'cold comfort ice cream'} {enumeration: 0}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'after someone giving a coupon to vanessa' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the reward be a random ice cream cone'
                        INVOCATION_NT'let the reward be a random ice cream cone' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'reward' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: value}
                                UNKNOWN_NT'reward'
                            RVALUE_CONTEXT_NT'a random ice cream cone' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'a random ice cream cone'
                                    INVOCATION_LIST_NT'a random ice cream cone'
                                        INVOCATION_NT'a random ice cream cone' {phrase invoked: call} {resulting: ice cream cone} {kind variable declarations: K=ice cream cone}
                                            RVALUE_CONTEXT_NT'ice cream cone' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'ice cream cone' {kind: description of ice cream cones} {proposition: << kind=ice cream cone(x) >>}
                    INVOCATION_LIST_NT'let the new flavor be a random infection color'
                        INVOCATION_NT'let the new flavor be a random infection color' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'new flavor' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: infection color} {required: value}
                                UNKNOWN_NT'new flavor'
                            RVALUE_CONTEXT_NT'a random infection color' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'a random infection color'
                                    INVOCATION_LIST_NT'a random infection color'
                                        INVOCATION_NT'a random infection color' {phrase invoked: call} {resulting: infection color} {kind variable declarations: K=infection color}
                                            RVALUE_CONTEXT_NT'infection color' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'infection color' {kind: description of infection colors} {proposition: << kind=infection color(x) >>}
                    INVOCATION_LIST_NT'now the infection color of the reward is the new flavor' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the infection color of the reward is the new flavor'
                    INVOCATION_LIST_NT'move the reward to the person asked'
                        INVOCATION_NT'move the reward to the person asked' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'reward' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                LOCAL_VARIABLE_NT'reward' {local: LV"reward"-thing thing}
                            RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                    INVOCATION_LIST_NT'now the noun is nowhere' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is nowhere'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if vanessa is visible' {colon_block_command}
                            INVOCATION_NT'if vanessa is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'vanessa is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'vanessa is visible' {proposition: << visible('vanessa') >>} {term: 'vanessa'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] trades in [the noun] and receives [a' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" trades in "'
                                    INVOCATION_NT'" trades in "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" trades in "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" trades in "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" and receives "'
                                    INVOCATION_NT'" and receives "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" and receives "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" and receives "' {kind: text}
                                INVOCATION_LIST_SAY_NT'a reward'
                                    INVOCATION_NT'a reward' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'reward' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            LOCAL_VARIABLE_NT'reward' {local: LV"reward"-thing thing}
                                INVOCATION_LIST_SAY_NT'" from Vanessa."'
                                    INVOCATION_NT'" from Vanessa."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" from Vanessa."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" from Vanessa."' {kind: text}
            SENTENCE_NT'infection color is a kind of value' {unit: 4} {classified} {interpretation of subject: infs'coupon'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'infection color' {refined} {creation: << kind=infection color(x) >>} {refers: infs'object'-k} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of value' {refined} {refers: infs'value'-k}
                    COMMON_NOUN_NT'value' {refined} {refers: infs'value'-k} {creation: << kind=value(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'the infection colors are french vanilla , whole-bean vanilla' {unit: 4} {classified} {interpretation of subject: infs'object'-k}
                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                COMMON_NOUN_NT'infection colors' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'infection color'-k} {creation: << kind=infection color(x) >>} {eval: TEST_VALUE_NT}
                AND_NT',' {refined}
                    PROPER_NOUN_NT'french vanilla' {refined} {refers: infs'french vanilla'} {eval: CONSTANT_NT'french vanilla' {kind: infection color} {instance: I62'french vanilla'[infection color]} {enumeration: 1}} {created here}
                    AND_NT',' {refined}
                        PROPER_NOUN_NT'whole-bean vanilla' {refined} {refers: infs'whole-bean vanilla'} {eval: CONSTANT_NT'whole-bean vanilla' {kind: infection color} {instance: I63'whole-bean vanilla'[infection color]} {enumeration: 2}} {created here}
                        AND_NT',' {refined}
                            PROPER_NOUN_NT'mint' {refined} {refers: infs'mint'} {eval: CONSTANT_NT'mint' {kind: infection color} {instance: I64'mint'[infection color]} {enumeration: 3}} {created here}
                            AND_NT',' {refined}
                                PROPER_NOUN_NT'chocolate' {refined} {refers: infs'chocolate'} {eval: CONSTANT_NT'chocolate' {kind: infection color} {instance: I65'chocolate'[infection color]} {enumeration: 4}} {created here}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'dark chocolate' {refined} {refers: infs'dark chocolate'} {eval: CONSTANT_NT'dark chocolate' {kind: infection color} {instance: I66'dark chocolate'[infection color]} {enumeration: 5}} {created here}
                                    AND_NT',' {refined}
                                        PROPER_NOUN_NT'chocolate chip' {refined} {refers: infs'chocolate chip'} {eval: CONSTANT_NT'chocolate chip' {kind: infection color} {instance: I67'chocolate chip'[infection color]} {enumeration: 6}} {created here}
                                        AND_NT',' {refined}
                                            PROPER_NOUN_NT'chocolate fudge' {refined} {refers: infs'chocolate fudge'} {eval: CONSTANT_NT'chocolate fudge' {kind: infection color} {instance: I68'chocolate fudge'[infection color]} {enumeration: 7}} {created here}
                                            AND_NT',' {refined}
                                                PROPER_NOUN_NT'mint chocolate chip' {refined} {refers: infs'mint chocolate chip'} {eval: CONSTANT_NT'mint chocolate chip' {kind: infection color} {instance: I69'mint chocolate chip'[infection color]} {enumeration: 8}} {created here}
                                                AND_NT',' {refined}
                                                    PROPER_NOUN_NT'chocolate chocolate chip' {refined} {refers: infs'chocolate chocolate chip'} {eval: CONSTANT_NT'chocolate chocolate chip' {kind: infection color} {instance: I70'chocolate chocolate chip'[infection color]} {enumeration: 9}} {created here}
                                                    AND_NT',' {refined}
                                                        PROPER_NOUN_NT'triple chocolate' {refined} {refers: infs'triple chocolate'} {eval: CONSTANT_NT'triple chocolate' {kind: infection color} {instance: I71'triple chocolate'[infection color]} {enumeration: 10}} {created here}
                                                        AND_NT',' {refined}
                                                            PROPER_NOUN_NT'white chocolate' {refined} {refers: infs'white chocolate'} {eval: CONSTANT_NT'white chocolate' {kind: infection color} {instance: I72'white chocolate'[infection color]} {enumeration: 11}} {created here}
                                                            AND_NT',' {refined}
                                                                PROPER_NOUN_NT'white chocolate chip' {refined} {refers: infs'white chocolate chip'} {eval: CONSTANT_NT'white chocolate chip' {kind: infection color} {instance: I73'white chocolate chip'[infection color]} {enumeration: 12}} {created here}
                                                                AND_NT',' {refined}
                                                                    PROPER_NOUN_NT'aztec cocoa-chili' {refined} {refers: infs'aztec cocoa-chili'} {eval: CONSTANT_NT'aztec cocoa-chili' {kind: infection color} {instance: I74'aztec cocoa-chili'[infection color]} {enumeration: 13}} {created here}
                                                                    AND_NT',' {refined}
                                                                        PROPER_NOUN_NT'raspberry ripple' {refined} {refers: infs'raspberry ripple'} {eval: CONSTANT_NT'raspberry ripple' {kind: infection color} {instance: I75'raspberry ripple'[infection color]} {enumeration: 14}} {created here}
                                                                        AND_NT',' {refined}
                                                                            PROPER_NOUN_NT'neapolitan' {refined} {refers: infs'neapolitan'} {eval: CONSTANT_NT'neapolitan' {kind: infection color} {instance: I76'neapolitan'[infection color]} {enumeration: 15}} {created here}
                                                                            AND_NT',' {refined}
                                                                                PROPER_NOUN_NT'rum raisin' {refined} {refers: infs'rum raisin'} {eval: CONSTANT_NT'rum raisin' {kind: infection color} {instance: I77'rum raisin'[infection color]} {enumeration: 16}} {created here}
                                                                                AND_NT',' {refined}
                                                                                    PROPER_NOUN_NT'dulce de leche' {refined} {refers: infs'dulce de leche'} {eval: CONSTANT_NT'dulce de leche' {kind: infection color} {instance: I78'dulce de leche'[infection color]} {enumeration: 17}} {created here}
                                                                                    AND_NT',' {refined}
                                                                                        PROPER_NOUN_NT'strawberry chunk' {refined} {refers: infs'strawberry chunk'} {eval: CONSTANT_NT'strawberry chunk' {kind: infection color} {instance: I79'strawberry chunk'[infection color]} {enumeration: 18}} {created here}
                                                                                        AND_NT',' {refined}
                                                                                            PROPER_NOUN_NT'rocky road' {refined} {refers: infs'rocky road'} {eval: CONSTANT_NT'rocky road' {kind: infection color} {instance: I80'rocky road'[infection color]} {enumeration: 19}} {created here}
                                                                                            AND_NT',' {refined}
                                                                                                PROPER_NOUN_NT'blackberry sorbet' {refined} {refers: infs'blackberry sorbet'} {eval: CONSTANT_NT'blackberry sorbet' {kind: infection color} {instance: I81'blackberry sorbet'[infection color]} {enumeration: 20}} {created here}
                                                                                                AND_NT',' {refined}
                                                                                                    PROPER_NOUN_NT'lemon sherbet' {refined} {refers: infs'lemon sherbet'} {eval: CONSTANT_NT'lemon sherbet' {kind: infection color} {instance: I82'lemon sherbet'[infection color]} {enumeration: 21}} {created here}
                                                                                                    AND_NT',' {refined}
                                                                                                        PROPER_NOUN_NT'lime ice' {refined} {refers: infs'lime ice'} {eval: CONSTANT_NT'lime ice' {kind: infection color} {instance: I83'lime ice'[infection color]} {enumeration: 22}} {created here}
                                                                                                        AND_NT',' {refined}
                                                                                                            PROPER_NOUN_NT'caramel swirl' {refined} {refers: infs'caramel swirl'} {eval: CONSTANT_NT'caramel swirl' {kind: infection color} {instance: I84'caramel swirl'[infection color]} {enumeration: 23}} {created here}
                                                                                                            AND_NT',' {refined}
                                                                                                                PROPER_NOUN_NT'mango' {refined} {refers: infs'mango'} {eval: CONSTANT_NT'mango' {kind: infection color} {instance: I85'mango'[infection color]} {enumeration: 24}} {created here}
                                                                                                                AND_NT',' {refined}
                                                                                                                    PROPER_NOUN_NT'saffron silk' {refined} {refers: infs'saffron silk'} {eval: CONSTANT_NT'saffron silk' {kind: infection color} {instance: I86'saffron silk'[infection color]} {enumeration: 25}} {created here}
                                                                                                                    PROPER_NOUN_NT'cookie dough cream' {refined} {refers: infs'cookie dough cream'} {eval: CONSTANT_NT'cookie dough cream' {kind: infection color} {instance: I87'cookie dough cream'[infection color]} {enumeration: 26}} {created here}
            RULE_NT'to say list of flavors' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let current color be french vanilla' {indent: 1}
                        INVOCATION_NT'let current color be french vanilla' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'current color' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: infection color} {required: value}
                                UNKNOWN_NT'current color'
                            RVALUE_CONTEXT_NT'french vanilla' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                CONSTANT_NT'french vanilla' {kind: infection color} {instance: I62'french vanilla'[infection color]} {enumeration: 0}{meaning: {french vanilla = NAMED_CONSTANT_MC}}
                    CODE_BLOCK_NT {control structure: WHI}
                        INVOCATION_LIST_NT'while current color is not cookie dough cream' {colon_block_command} {indent: 1}
                            INVOCATION_NT'while current color is not cookie dough cream' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'current color is not cookie dough cream' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'current color is not cookie dough cream' {proposition: << NOT< ('current color' == 'cookie dough cream') NOT> >>} {term: 'current color'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[current color], "' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'current color'
                                    INVOCATION_NT'current color' {phrase invoked: call} {kind variable declarations: K=infection color}
                                        RVALUE_CONTEXT_NT'current color' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            LOCAL_VARIABLE_NT'current color' {local: LV"current color"-infection color infection color}
                                INVOCATION_LIST_SAY_NT'", "'
                                    INVOCATION_NT'", "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'", "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'", "' {kind: text}
                            INVOCATION_LIST_NT'now current color is the infection color after the current c' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'current color is the infection color after the current color'
                    CODE_BLOCK_NT'say "and [current color]"' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"and "'
                            INVOCATION_NT'"and "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"and "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"and "' {kind: text}
                        INVOCATION_LIST_SAY_NT'current color'
                            INVOCATION_NT'current color' {phrase invoked: call} {kind variable declarations: K=infection color}
                                RVALUE_CONTEXT_NT'current color' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    LOCAL_VARIABLE_NT'current color' {local: LV"current color"-infection color infection color}
            SENTENCE_NT'understand "ask vanessa for [flavored ice cream]" as buying ' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"ask vanessa for [flavored ice cream]"'
                UNPARSED_NOUN_NT'buying the flavor'
            SENTENCE_NT'understand "buy [flavored ice cream]" as buying the flavor' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"buy [flavored ice cream]"'
                UNPARSED_NOUN_NT'buying the flavor'
            SENTENCE_NT'buying the flavor is an action applying to one infection col' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'buying the flavor'
                UNPARSED_NOUN_NT'applying to one infection color'
            RULE_NT'check buying the flavor' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'unless the player can see vanessa' {colon_block_command} {indent: 1}
                            INVOCATION_NT'unless the player can see vanessa' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player can see vanessa' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player can see vanessa' {proposition: << can-see('player', 'vanessa') >>} {term: 'player'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "It would help if you were in the presence of an ice cre' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"It would help if you were in the presence of an ice cream s'
                                    INVOCATION_NT'"It would help if you were in the presence of an ice cream s' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"It would help if you were in the presence of an ice cream s' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"It would help if you were in the presence of an ice cream s' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out buying the flavor' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "'Do you have a coupon?' Vanessa demands. You admit you ' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"'Do you have a coupon?' Vanessa demands. You admit you do n'
                            INVOCATION_NT'"'Do you have a coupon?' Vanessa demands. You admit you do n' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"'Do you have a coupon?' Vanessa demands. You admit you do n' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"'Do you have a coupon?' Vanessa demands. You admit you do n' {kind: text}
                        INVOCATION_LIST_SAY_NT'infection color understood'
                            INVOCATION_NT'infection color understood' {phrase invoked: call} {kind variable declarations: K=infection color}
                                RVALUE_CONTEXT_NT'infection color understood' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    NONLOCAL_VARIABLE_NT'infection color understood' {nonlocal: 'infection color understood'(var)infection color}{meaning: {infection color understood = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" for you!'"'
                            INVOCATION_NT'" for you!'"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" for you!'"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" for you!'"' {kind: text}
            SENTENCE_NT'understand "ice cream" or "cream" or "ice" or "sherbet" or "' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"ice cream" or "cream" or "ice" or "sherbet" or "sorbet"'
                UNPARSED_NOUN_NT'"[ice cream]"'
            SENTENCE_NT'understand "[infection color]" or "[infection color] [ice cr' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"[infection color]" or "[infection color] [ice cream]"'
                UNPARSED_NOUN_NT'"[flavored ice cream]"'
            SENTENCE_NT'an ice cream cone is a kind of thing' {unit: 4} {classified} {interpretation of subject: infs'infection color'-k}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'ice cream cone' {indefinite 'an' n/m/f nom/acc s} {refined} {creation: << kind=ice cream cone(x) >>} {refers: infs'ice cream cone'} {eval: TEST_VALUE_NT} {created here}
                KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                    COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'an ice cream cone is always edible' {unit: 4} {classified} {interpretation of subject: infs'ice cream cone'}
                VERB_NT'is always' {certainty:certain} {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'ice cream cone' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'ice cream cone'} {creation: << kind=ice cream cone(x) >>} {eval: TEST_VALUE_NT}
                ADJECTIVE_NT'edible' {refined} {predicate: edible} {creation: << edible(x) ^ edible(x) >>}
            SENTENCE_NT'an ice cream cone has an infection color' {unit: 4} {classified} {interpretation of subject: infs'ice cream cone'}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'ice cream cone' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'ice cream cone'} {creation: << kind=ice cream cone(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT'has' {refined}
                    UNPARSED_NOUN_NT'infection color' {indefinite 'an' n/m/f nom/acc s} {refined}
            SENTENCE_NT'an ice cream cone can be half-eaten or fresh' {unit: 4} {classified}
                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                COMMON_NOUN_NT'an ice cream cone' {refined} {refers: infs'ice cream cone'} {creation: << kind=ice cream cone(x) >>} {eval: TEST_VALUE_NT}
                UNPARSED_NOUN_NT'half-eaten or fresh'
                    AND_NT'or'
                        UNPARSED_NOUN_NT'half-eaten'
                        UNPARSED_NOUN_NT'fresh'
            SENTENCE_NT'understand the infection color property as referring to an i' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'the infection color property'
                UNPARSED_NOUN_NT'referring to an ice cream cone'
            RULE_NT'carry out someone resolving an ice cream cone' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked eating the noun'
                        INVOCATION_NT'try the person asked eating the noun' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'person asked eating the noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'person asked eating the noun' {kind: action} {action pattern: <action: eating /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'instead of someone eating a fresh ice cream cone' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is half-eaten' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is half-eaten'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is visible' {colon_block_command}
                            INVOCATION_NT'if the person asked is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is visible' {proposition: << visible('person asked') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] licks [the noun]."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" licks "'
                                    INVOCATION_NT'" licks "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" licks "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" licks "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
            RULE_NT'report someone eating an ice cream cone' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] pops the end of [the noun] into [if ' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" pops the end of "'
                            INVOCATION_NT'" pops the end of "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" pops the end of "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" pops the end of "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" into "'
                            INVOCATION_NT'" into "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" into "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" into "' {kind: text}
                        INVOCATION_LIST_SAY_NT'if the person asked is female'
                            INVOCATION_NT'if the person asked is female' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is female' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is female' {proposition: << female('person asked') >>} {term: 'person asked'}
                        INVOCATION_LIST_SAY_NT'"her"'
                            INVOCATION_NT'"her"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"her"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"her"' {kind: text}
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'"his"'
                            INVOCATION_NT'"his"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"his"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"his"' {kind: text}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'" mouth and swallows."'
                            INVOCATION_NT'" mouth and swallows."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" mouth and swallows."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" mouth and swallows."' {kind: text}
                    CODE_BLOCK_NT {control structure: INS}
            RULE_NT'before printing the name of an ice cream cone' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[if half-eaten]half-eaten [end if][infection color] "' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'if half-eaten'
                            INVOCATION_NT'if half-eaten' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'half-eaten' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'half-eaten' {proposition: << half-eaten(CONSTANT_NT {kind: object} {self}) >>} {term: CONSTANT_NT {kind: object} {self}}
                        INVOCATION_LIST_SAY_NT'"half-eaten "'
                            INVOCATION_NT'"half-eaten "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"half-eaten "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"half-eaten "' {kind: text}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'infection color'
                            INVOCATION_NT'infection color' {phrase invoked: call} {kind variable declarations: K=infection color} {save self}
                                RVALUE_CONTEXT_NT'infection color' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    PROPERTY_VALUE_NT'infection color' {record as self}
                                        CONSTANT_NT'infection color' {kind: infection colors valued property} {property: 'infection color'=infection color}{meaning: {infection color = PROPERTY_MC}}
                                        CONSTANT_NT {kind: object} {self}
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" "' {kind: text}
        HEADING_NT'section 2 - infection rules' {heading 5} {under: H5'section 2 - infection rules'} {unit: 4}
            RULE_NT'this is the infection rule' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if an infected person ( called typhoid mary ) can see a clea' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if an infected person ( called typhoid mary ) can see a clea' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'an infected person ( called typhoid mary ) can see a clean p' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'an infected person ( called typhoid mary ) can see a clean p'
                                        TEST_PROPOSITION_NT'an infected person ( called typhoid mary ) can see a clean p' {proposition: << Exists x : kind=person(x) ^ infected(x) ^ called='typhoid mary':person(x) ^ Exists y : kind=person(y) ^ clean(y) ^ called='random bystander':person(y) ^ can-see(x, y) >>} {term: x}
                                        TEST_VALUE_NT'a random chance of 1 in 3 succeeds'
                                            PHRASE_TO_DECIDE_VALUE_NT'a random chance of 1 in 3 succeeds'
                                                INVOCATION_LIST_NT'a random chance of 1 in 3 succeeds'
                                                    INVOCATION_NT'a random chance of 1 in 3 succeeds' {phrase invoked: call} {resulting: truth state}
                                                        RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'number'} {required: number}
                                                            CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                                        RVALUE_CONTEXT_NT'3' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'number'} {required: number}
                                                            CONSTANT_NT'3' {kind: number} {explicit literal} {number: 3}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try typhoid mary sneezing on the random bystander' {indent: 2}
                                INVOCATION_NT'try typhoid mary sneezing on the random bystander' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'typhoid mary sneezing on the random bystander' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'typhoid mary sneezing on the random bystander' {kind: action} {action pattern: <action: sneezing on /  noun: LOCAL_VARIABLE_NT'the random bystander' {local: LV"random bystander"-person person}>}
            SENTENCE_NT'a person can be infected or clean' {unit: 4} {classified}
                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                COMMON_NOUN_NT'a person' {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                UNPARSED_NOUN_NT'infected or clean'
                    AND_NT'or'
                        UNPARSED_NOUN_NT'infected'
                        UNPARSED_NOUN_NT'clean'
            SENTENCE_NT'a person has an infection color' {unit: 4} {classified}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT'has' {refined}
                    UNPARSED_NOUN_NT'infection color' {indefinite 'an' n/m/f nom/acc s} {refined}
            RULE_NT'every turn' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the player is infected' {colon_block_command}
                            INVOCATION_NT'if the player is infected' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player is infected' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player is infected' {proposition: << infected('player') >>} {term: 'player'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You feel itchy."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"You feel itchy."'
                                    INVOCATION_NT'"You feel itchy."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"You feel itchy."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"You feel itchy."' {kind: text}
            RULE_NT'definition' {unit: 4}
            RULE_NT'definition' {unit: 4}
            RULE_NT'when play begins' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now right hand status line is "Sick: [number of infected peo' {control structure: NOW}
                        CONDITION_CONTEXT_NT'right hand status line is "Sick: [number of infected people]'
            RULE_NT'every turn' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if every person is infected' {colon_block_command}
                            INVOCATION_NT'if every person is infected' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'every person is infected' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'every person is infected' {proposition: << ForAll x IN< kind=person(x) IN> : infected(x) >>} {term: x}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'end the story saying "Everyone succumbs"' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'end the story saying "Everyone succumbs"' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'"Everyone succumbs"' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'text'} {required: text}
                                        CONSTANT_NT'"Everyone succumbs"' {kind: text}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if every person is clean' {colon_block_command}
                            INVOCATION_NT'if every person is clean' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'every person is clean' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'every person is clean' {proposition: << ForAll x IN< kind=person(x) IN> : clean(x) >>} {term: x}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'end the story finally saying "The Syndrome is eradicated"' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'end the story finally saying "The Syndrome is eradicated"' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'"The Syndrome is eradicated"' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'text'} {required: text}
                                        CONSTANT_NT'"The Syndrome is eradicated"' {kind: text}
            SENTENCE_NT'understand "sneeze on [something]" as sneezing on' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"sneeze on [something]"'
                UNPARSED_NOUN_NT'sneezing on'
            SENTENCE_NT'sneezing on is an action applying to one thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'sneezing on'
                UNPARSED_NOUN_NT'applying to one thing'
            RULE_NT'check sneezing on' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the player is clean' {colon_block_command}
                            INVOCATION_NT'if the player is clean' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player is clean' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player is clean' {proposition: << clean('player') >>} {term: 'player'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You're not sickly."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"You're not sickly."'
                                    INVOCATION_NT'"You're not sickly."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"You're not sickly."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"You're not sickly."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the noun is the player' {colon_block_command}
                            INVOCATION_NT'if the noun is the player' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is the player' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is the player' {proposition: << ('noun' == 'the player') >>} {term: 'noun'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "Ew."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"Ew."'
                                    INVOCATION_NT'"Ew."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"Ew."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"Ew."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the noun is not a person' {colon_block_command}
                            INVOCATION_NT'if the noun is not a person' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is not a person' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is not a person' {proposition: << NOT< kind=person('noun') NOT> >>} {term: 'noun'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The noun] cannot be infected."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" cannot be infected."'
                                    INVOCATION_NT'" cannot be infected."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" cannot be infected."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" cannot be infected."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out sneezing on' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is infected' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is infected'
                    INVOCATION_LIST_NT'now the infection color of the noun is a random infection co' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the infection color of the noun is a random infection color'
            RULE_NT'carry out someone sneezing on' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is infected' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is infected'
                    INVOCATION_LIST_NT'now the infection color of the noun is a random infection co' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the infection color of the noun is a random infection color'
            RULE_NT'report sneezing on' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "Unable to control yourself, you sneeze on [noun]."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"Unable to control yourself, you sneeze on "'
                            INVOCATION_NT'"Unable to control yourself, you sneeze on "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"Unable to control yourself, you sneeze on "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"Unable to control yourself, you sneeze on "' {kind: text}
                        INVOCATION_LIST_SAY_NT'noun'
                            INVOCATION_NT'noun' {phrase invoked: call} {kind variable declarations: K=object}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
            RULE_NT'report someone sneezing on' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] sneezes on [if the noun is the playe' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" sneezes on "'
                            INVOCATION_NT'" sneezes on "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" sneezes on "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" sneezes on "' {kind: text}
                        INVOCATION_LIST_SAY_NT'if the noun is the player'
                            INVOCATION_NT'if the noun is the player' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is the player' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is the player' {proposition: << ('noun' == 'the player') >>} {term: 'noun'}
                        INVOCATION_LIST_SAY_NT'"you"'
                            INVOCATION_NT'"you"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"you"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"you"' {kind: text}
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'noun'
                            INVOCATION_NT'noun' {phrase invoked: call} {kind variable declarations: K=object}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'"!"'
                            INVOCATION_NT'"!"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"!"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"!"' {kind: text}
            SENTENCE_NT'understand "inject [someone] with [something]" as injecting ' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"inject [someone] with [something]"'
                UNPARSED_NOUN_NT'injecting it with'
            SENTENCE_NT'understand "inject [someone] with [syringe]" as injecting it' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"inject [someone] with [syringe]"'
                UNPARSED_NOUN_NT'injecting it with'
            SENTENCE_NT'understand "use [syringe] on [someone]" as injecting it with' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"use [syringe] on [someone]"'
                UNPARSED_NOUN_NT'injecting it with'
            SENTENCE_NT'understand the commands innoculate and vaccinate as inject' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'the commands innoculate and vaccinate'
                UNPARSED_NOUN_NT'inject'
            SENTENCE_NT'injecting it with is an action applying to two things' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'injecting it with'
                UNPARSED_NOUN_NT'applying to two things'
            RULE_NT'check injecting it with' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the second noun is not the syringe' {indent: 1} {colon_block_command}
                            INVOCATION_NT'if the second noun is not the syringe' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'second noun is not the syringe' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'second noun is not the syringe' {proposition: << NOT< ('second noun' == 'the syringe') NOT> >>} {term: 'second noun'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The second noun] cannot inject anything."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the second noun'
                                    INVOCATION_NT'the second noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" cannot inject anything."'
                                    INVOCATION_NT'" cannot inject anything."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" cannot inject anything."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" cannot inject anything."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the noun is clean' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the noun is clean' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is clean' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is clean' {proposition: << clean('noun') >>} {term: 'noun'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the noun is the player' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if the noun is the player' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'noun is the player' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'noun is the player' {proposition: << ('noun' == 'the player') >>} {term: 'noun'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You're not infected yet."' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You're not infected yet."'
                                            INVOCATION_NT'"You're not infected yet."' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You're not infected yet."' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You're not infected yet."' {kind: text}
                                    CODE_BLOCK_NT {control structure: INS}
                            CODE_BLOCK_NT'say "[The noun] is not infected, and the syringe contains a ' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" is not infected, and the syringe contains a cure, not a va'
                                    INVOCATION_NT'" is not infected, and the syringe contains a cure, not a va' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" is not infected, and the syringe contains a cure, not a va' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" is not infected, and the syringe contains a cure, not a va' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out injecting it with' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is clean' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is clean'
            RULE_NT'after injecting the player with something' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You inject yourself, wincing at the sting. But the itch' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You inject yourself, wincing at the sting. But the itching '
                            INVOCATION_NT'"You inject yourself, wincing at the sting. But the itching ' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You inject yourself, wincing at the sting. But the itching ' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You inject yourself, wincing at the sting. But the itching ' {kind: text}
            RULE_NT'report injecting it with' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You inject [the noun], who is now cured (but could easi' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You inject "'
                            INVOCATION_NT'"You inject "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You inject "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You inject "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'", who is now cured (but could easily be reinfected)."'
                            INVOCATION_NT'", who is now cured (but could easily be reinfected)."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'", who is now cured (but could easily be reinfected)."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'", who is now cured (but could easily be reinfected)."' {kind: text}
        HEADING_NT'section 3 - geography' {heading 5} {under: H5'section 3 - geography'} {unit: 4}
            INCLUSION_NT'include locksmith by emily short' {unit: 4}
                HEADING_NT'version 12 of locksmith by emily short begins here' {heading 0} {under: H0'version 12 of locksmith by emily short begins here'}{includes: Locksmith by Emily Short v12 } {unit: 4}
                    BEGINHERE_NT'version 12 of locksmith by emily short' {unit: 4}
                    SENTENCE_NT'Implicit handling of doors and containers so that lock manip' {unit: 4} {classified}
                    SENTENCE_NT'use authorial modesty' {unit: 4} {classified}
                        VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                        UNPARSED_NOUN_NT'authorial modesty'
                    SENTENCE_NT'to open is a verb' {unit: 4} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to open'
                    SENTENCE_NT'to lack is a verb' {unit: 4} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to lack'
                    SENTENCE_NT'to fit is a verb' {unit: 4} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to fit'
                    SENTENCE_NT'to lock is a verb' {unit: 4} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to lock'
                    SENTENCE_NT'to unlock is a verb' {unit: 4} {classified}
                        VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-verb}
                        UNPARSED_NOUN_NT'to unlock'
                    HEADING_NT'volume 1 - automatic locking and unlocking with necessary ac' {heading 1} {under: H1'volume 1 - automatic locking and unlocking with necessary actions'} {unit: 4}
                        SENTENCE_NT'use sequential action translates as (-  Constant SEQUENTIAL_' {unit: 4} {classified}
                            VERB_NT'translates as' {verb 'translate' 3p s act IS_TENSE +ve} {prep1: as} {special meaning: use-translates}
                            UNPARSED_NOUN_NT'sequential action'
                            UNPARSED_NOUN_NT'(-  Constant SEQUENTIAL_ACTION; '
                        RULE_NT'before going through a closed door ( called the blocking doo' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try opening the blocking door' {indent: 2}
                                            INVOCATION_NT'try opening the blocking door' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'opening the blocking door' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'opening the blocking door' {kind: action} {action pattern: <action: opening /  noun: LOCAL_VARIABLE_NT'the blocking door' {local: LV"blocking door"-door door}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "(first opening [the blocking door])[command clarificati' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first opening [the blocking door])[command clarification b'
                                                INVOCATION_NT'"(first opening [the blocking door])[command clarification b' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first opening [the blocking door])[command clarification b' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first opening [the blocking door])[command clarification b' {kind: text}
                                        INVOCATION_LIST_NT'silently try opening the blocking door' {indent: 2}
                                            INVOCATION_NT'silently try opening the blocking door' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'opening the blocking door' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'opening the blocking door' {kind: action} {action pattern: <action: opening /  noun: LOCAL_VARIABLE_NT'the blocking door' {local: LV"blocking door"-door door}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the blocking door is closed' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the blocking door is closed' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'blocking door is closed' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'blocking door is closed' {proposition: << closed('blocking door') >>} {term: 'blocking door'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before locking an open thing ( called the door ajar ) with s' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try closing the door ajar' {indent: 2}
                                            INVOCATION_NT'try closing the door ajar' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'closing the door ajar' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "(first closing [the door ajar])[command clarification b' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first closing [the door ajar])[command clarification break'
                                                INVOCATION_NT'"(first closing [the door ajar])[command clarification break' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first closing [the door ajar])[command clarification break' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first closing [the door ajar])[command clarification break' {kind: text}
                                        INVOCATION_LIST_NT'silently try closing the door ajar' {indent: 2}
                                            INVOCATION_NT'silently try closing the door ajar' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'closing the door ajar' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door ajar is open' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the door ajar is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door ajar is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'door ajar is open' {proposition: << open('door ajar') >>} {term: 'door ajar'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before locking keylessly an open thing ( called the door aja' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try closing the door ajar' {indent: 2}
                                            INVOCATION_NT'try closing the door ajar' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'closing the door ajar' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "(first closing [the door ajar])[command clarification b' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first closing [the door ajar])[command clarification break'
                                                INVOCATION_NT'"(first closing [the door ajar])[command clarification break' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first closing [the door ajar])[command clarification break' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first closing [the door ajar])[command clarification break' {kind: text}
                                        INVOCATION_LIST_NT'silently try closing the door ajar' {indent: 2}
                                            INVOCATION_NT'silently try closing the door ajar' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'closing the door ajar' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door ajar is open' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the door ajar is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door ajar is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'door ajar is open' {proposition: << open('door ajar') >>} {term: 'door ajar'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before opening a locked thing ( called the sealed chest ) ( ' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try unlocking keylessly the sealed chest' {indent: 2}
                                            INVOCATION_NT'try unlocking keylessly the sealed chest' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'unlocking keylessly the sealed chest' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'unlocking keylessly the sealed chest' {kind: action} {action pattern: <action: unlocking keylessly /  noun: LOCAL_VARIABLE_NT'the sealed chest' {local: LV"sealed chest"-thing thing}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        CODE_BLOCK_NT'say "(first unlocking [the sealed chest])[command clarificat' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"(first unlocking [the sealed chest])[command clarification '
                                                INVOCATION_NT'"(first unlocking [the sealed chest])[command clarification ' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"(first unlocking [the sealed chest])[command clarification ' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"(first unlocking [the sealed chest])[command clarification ' {kind: text}
                                        INVOCATION_LIST_NT'silently try unlocking keylessly the sealed chest' {indent: 2}
                                            INVOCATION_NT'silently try unlocking keylessly the sealed chest' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'unlocking keylessly the sealed chest' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'unlocking keylessly the sealed chest' {kind: action} {action pattern: <action: unlocking keylessly /  noun: LOCAL_VARIABLE_NT'the sealed chest' {local: LV"sealed chest"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the sealed chest is locked' {indent: 1} {colon_block_command}
                                        INVOCATION_NT'if the sealed chest is locked' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sealed chest is locked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sealed chest is locked' {proposition: << locked('sealed chest') >>} {term: 'sealed chest'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before someone trying going through a closed door ( called t' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying opening the blocking door'
                                    INVOCATION_NT'try the person asked trying opening the blocking door' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked trying opening the blocking door' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'person asked trying opening the blocking door' {kind: action} {action pattern: <action: opening /  noun: LOCAL_VARIABLE_NT'the blocking door' {local: LV"blocking door"-door door}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the blocking door is closed' {colon_block_command}
                                        INVOCATION_NT'if the blocking door is closed' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'blocking door is closed' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'blocking door is closed' {proposition: << closed('blocking door') >>} {term: 'blocking door'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before someone trying locking an open thing ( called the doo' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying closing the door ajar'
                                    INVOCATION_NT'try the person asked trying closing the door ajar' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked trying closing the door ajar' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'person asked trying closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door ajar is open' {colon_block_command}
                                        INVOCATION_NT'if the door ajar is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door ajar is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'door ajar is open' {proposition: << open('door ajar') >>} {term: 'door ajar'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before someone trying locking keylessly an open thing ( call' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying closing the door ajar'
                                    INVOCATION_NT'try the person asked trying closing the door ajar' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked trying closing the door ajar' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'person asked trying closing the door ajar' {kind: action} {action pattern: <action: closing /  noun: LOCAL_VARIABLE_NT'the door ajar' {local: LV"door ajar"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the door ajar is open' {colon_block_command}
                                        INVOCATION_NT'if the door ajar is open' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'door ajar is open' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'door ajar is open' {proposition: << open('door ajar') >>} {term: 'door ajar'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                        RULE_NT'before someone trying opening a locked thing ( called the se' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying unlocking keylessly the sealed c'
                                    INVOCATION_NT'try the person asked trying unlocking keylessly the sealed c' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked trying unlocking keylessly the sealed chest' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                            CONSTANT_NT'person asked trying unlocking keylessly the sealed chest' {kind: action} {action pattern: <action: unlocking keylessly /  noun: LOCAL_VARIABLE_NT'the sealed chest' {local: LV"sealed chest"-thing thing}>}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the sealed chest is locked' {colon_block_command}
                                        INVOCATION_NT'if the sealed chest is locked' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sealed chest is locked' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sealed chest is locked' {proposition: << locked('sealed chest') >>} {term: 'sealed chest'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                    HEADING_NT'volume 2 - default locking and unlocking' {heading 1} {under: H1'volume 2 - default locking and unlocking'} {unit: 4}
                        HEADING_NT'part 1 - the matching key rule' {heading 3} {under: H3'part 1 - the matching key rule'} {unit: 4}
                            RULE_NT'this is the need a matching key rule' {unit: 4}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the person asked encloses something ( called item ) which' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the person asked encloses something ( called item ) which' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'person asked encloses something ( called item ) which unlock' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'person asked encloses something ( called item ) which unlock' {proposition: << kind=thing_c(<(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) ^ called='item':thing(<(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) ^ encloses('person asked', <(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) >>} {term: 'person asked'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now the second noun is the item' {indent: 2} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'the second noun is the item'
                                            INVOCATION_LIST_NT'abide by the must have accessible the second noun rule' {indent: 2}
                                                INVOCATION_NT'abide by the must have accessible the second noun rule' {phrase invoked: call}
                                                    RVALUE_CONTEXT_NT'must have accessible the second noun rule' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                        CONSTANT_NT'must have accessible the second noun rule' {kind: rule} {rule: must have accessible the second noun rule}{meaning: {must have accessible the second noun rule = MISCELLANEOUS_MC}}
                                        CODE_BLOCK_NT'otherwise' {control structure: O}
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'if a visible passkey ( called item ) unbolts the noun' {colon_block_command} {indent: 1}
                                                    INVOCATION_NT'if a visible passkey ( called item ) unbolts the noun' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'a visible passkey ( called item ) unbolts the noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'a visible passkey ( called item ) unbolts the noun' {proposition: << kind=passkey(<(QUOTED_INAME_0_00000103(*1)) : 'the noun'>) ^ visible(<(QUOTED_INAME_0_00000103(*1)) : 'the noun'>) ^ called='item':passkey(<(QUOTED_INAME_0_00000103(*1)) : 'the noun'>) >>} {term: x}
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now the second noun is the item' {indent: 2} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'the second noun is the item'
                                                    INVOCATION_LIST_NT'abide by the must have accessible the second noun rule' {indent: 2}
                                                        INVOCATION_NT'abide by the must have accessible the second noun rule' {phrase invoked: call}
                                                            RVALUE_CONTEXT_NT'must have accessible the second noun rule' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                                CONSTANT_NT'must have accessible the second noun rule' {kind: rule} {rule: must have accessible the second noun rule}{meaning: {must have accessible the second noun rule = MISCELLANEOUS_MC}}
                                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                                    CODE_BLOCK_NT {control structure: IF}
                                                        INVOCATION_LIST_NT'if the player is the person asked' {indent: 2} {colon_block_command}
                                                            INVOCATION_NT'if the player is the person asked' {phrase invoked: call}
                                                                CONDITION_CONTEXT_NT'player is the person asked' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: <null-parse-node>
                                                                }
                                                                    TEST_PROPOSITION_NT'player is the person asked' {proposition: << ('player' == 'the person asked') >>} {term: 'player'}
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "[key-refusal for noun]"' {control structure: SAY}
                                                                INVOCATION_LIST_SAY_NT'key-refusal for noun'
                                                                    INVOCATION_NT'key-refusal for noun' {phrase invoked: call}
                                                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'an object'} {required: object}
                                                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                                    INVOCATION_LIST_NT'stop the action' {indent: 2}
                                                        INVOCATION_NT'stop the action' {phrase invoked: call}
                            RULE_NT'to say key-refusal for ( locked-thing - an object )' {unit: 4}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the refusing keys activity with the locked-thing'
                                        INVOCATION_NT'carry out the refusing keys activity with the locked-thing' {phrase invoked: call} {kind variable declarations: K=object}
                                            RVALUE_CONTEXT_NT'refusing keys' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                CONSTANT_NT'refusing keys' {kind: activity on objects} {activity: refusing keys}{meaning: {refusing keys = ACTIVITY_MC}}
                                            RVALUE_CONTEXT_NT'locked-thing' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                LOCAL_VARIABLE_NT'locked-thing' {local: LV"locked-thing"-object object}
                            SENTENCE_NT'refusing keys of something is an activity' {unit: 4} {classified}
                                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-activity}
                                UNPARSED_NOUN_NT'refusing keys of something'
                                UNPARSED_NOUN_NT'an activity'
                            RULE_NT'rule for refusing keys of something ( called locked-thing ) ' {unit: 4}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[We] [lack] a key that fits [the locked-thing]." ( a )' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )'
                                            INVOCATION_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )' {kind: text}
                            RULE_NT'definition' {unit: 4}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the person asked carries it' {colon_block_command}
                                            INVOCATION_NT'if the person asked carries it' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'person asked carries it' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'person asked carries it' {proposition: << ('person asked' == <CarrierOf(*1) : 'it'>) >>} {term: 'person asked'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'yes' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'yes' {phrase invoked: call}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if it is on a keychain which is carried by the person asked' {colon_block_command}
                                            INVOCATION_NT'if it is on a keychain which is carried by the person asked' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'it is on a keychain which is carried by the person asked' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'it is on a keychain which is carried by the person asked' {proposition: << kind=keychain(<SupporterOf(*1) : 'it'>) ^ ('the person asked' == <CarrierOf(*1) : <SupporterOf(*1) : 'it'>>) >>} {term: 'it'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'yes' {results_from_splitting} {indent: 1}
                                                INVOCATION_NT'yes' {phrase invoked: call}
                                    INVOCATION_LIST_NT'no'
                                        INVOCATION_NT'no' {phrase invoked: call}
                        HEADING_NT'part 2 - unlocking' {heading 3} {under: H3'part 2 - unlocking'} {unit: 4}
                            HEADING_NT'section 1 - regular unlocking' {heading 5} {under: H5'section 1 - regular unlocking'} {unit: 4}
                                SENTENCE_NT'understand the command unlock as something new' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'the command unlock'
                                    UNPARSED_NOUN_NT'something new'
                                SENTENCE_NT'understand "unlock
                                [something] with [something]" as unlockin' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock
                                    [something] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "unlock [a
                                locked lockable thing] with [something' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock [a
                                    locked lockable thing] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "unlock [a lockable thing] with [something]" as u' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock [a lockable thing] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand the commands open and uncover and unwrap as somet' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'the commands open and uncover and unwrap'
                                    UNPARSED_NOUN_NT'something new'
                                SENTENCE_NT'understand "open [something]" or "uncover [something]" or "u' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"open [something]" or "uncover [something]" or "unwrap [some'
                                    UNPARSED_NOUN_NT'opening'
                                SENTENCE_NT'understand "open [something] with [something]" as unlocking ' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"open [something] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "open [a locked lockable thing] with [something]"' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"open [a locked lockable thing] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "open [a lockable thing] with [something]" as unl' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"open [a lockable thing] with [something]"'
                                    UNPARSED_NOUN_NT'unlocking it with'
                                RULE_NT'check unlocking it with ( this is the must be able to reach ' {unit: 4}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                            INVOCATION_NT'abide by the must have accessible the second noun rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'must have accessible the second noun rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'must have accessible the second noun rule' {kind: rule} {rule: must have accessible the second noun rule}{meaning: {must have accessible the second noun rule = MISCELLANEOUS_MC}}
                                SENTENCE_NT'the right second rule is listed instead of the can't unlock ' {unit: 4} {classified}
                                    VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                    UNPARSED_NOUN_NT'the right second rule'
                                    UNPARSED_NOUN_NT'instead of the can't unlock without the correct key rule in '
                                RULE_NT'this is the right second rule' {unit: 4}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the second noun does not unlock the noun' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if the second noun does not unlock the noun' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'second noun does not unlock the noun' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'second noun does not unlock the noun' {proposition: << NOT< ('second noun' == <(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) NOT> >>} {term: 'second noun'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [do not fit] [the noun]." ( a )' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [do not fit] [the noun]." ( a )'
                                                        INVOCATION_NT'"[The second noun] [do not fit] [the noun]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"[The second noun] [do not fit] [the noun]." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"[The second noun] [do not fit] [the noun]." ( a )' {kind: text}
                                                CODE_BLOCK_NT {control structure: INS}
                            HEADING_NT'section 2 - keylessly' {heading 5} {under: H5'section 2 - keylessly'} {unit: 4}
                                SENTENCE_NT'understand "unlock [something]" as unlocking keylessly' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock [something]"'
                                    UNPARSED_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'understand "unlock [a
                                locked lockable thing]" as unlocking k' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock [a
                                    locked lockable thing]"'
                                    UNPARSED_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'understand "unlock [a lockable
                                thing]" as unlocking keylessl' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"unlock [a lockable
                                    thing]"'
                                    UNPARSED_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'unlocking keylessly is an action applying to one thing' {unit: 4} {classified}
                                    VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                                    UNPARSED_NOUN_NT'unlocking keylessly'
                                    UNPARSED_NOUN_NT'applying to one thing'
                                SENTENCE_NT'the unlocking keylessly action has an object called the key ' {unit: 4} {classified}
                                    VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                    PROPER_NOUN_NT'unlocking keylessly action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'unlocking keylessly action' {kind: action name} {action name: unlocking keylessly}{meaning: {unlocking keylessly action = MISCELLANEOUS_MC}}}
                                    ALLOWED_NT {refined}
                                        PROPERTYCALLED_NT'called'
                                            UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                            UNPARSED_NOUN_NT'key unlocked with' {definite 'the' n/m/f s/p nom/acc}
                                RULE_NT'check an actor unlocking keylessly ( this is the check keyle' {unit: 4}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the can't unlock without a lock rule'
                                            INVOCATION_NT'abide by the can't unlock without a lock rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'can't unlock without a lock rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'can't unlock without a lock rule' {kind: rule} {rule: can't unlock without a lock rule}{meaning: {can't unlock without a lock rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'abide by the can't unlock what's already unlocked rule'
                                            INVOCATION_NT'abide by the can't unlock what's already unlocked rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'can't unlock what's already unlocked rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'can't unlock what's already unlocked rule' {kind: rule} {rule: can't unlock what's already unlocked rule}{meaning: {can't unlock what's already unlocked rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'abide by the need a matching key rule'
                                            INVOCATION_NT'abide by the need a matching key rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'need a matching key rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'need a matching key rule' {kind: rule} {rule: need a matching key rule}{meaning: {need a matching key rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'now the key unlocked with is the second noun' {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the key unlocked with is the second noun'
                                RULE_NT'carry out an actor unlocking keylessly ( this is the standar' {unit: 4}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'do nothing' {indent: 2}
                                                    INVOCATION_NT'do nothing' {phrase invoked: call}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the person asked is the player' {colon_block_command} {indent: 1}
                                                        INVOCATION_NT'if the person asked is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'person asked is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'person asked is the player' {proposition: << ('person asked' == 'the player') >>} {term: 'person asked'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(with [the key unlocked with])[command clarification br' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"(with [the key unlocked with])[command clarification break]'
                                                                INVOCATION_NT'"(with [the key unlocked with])[command clarification break]' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"(with [the key unlocked with])[command clarification break]' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"(with [the key unlocked with])[command clarification break]' {kind: text}
                                        INVOCATION_LIST_NT'try the person asked unlocking the noun with the key unlocke' {indent: 1}
                                            INVOCATION_NT'try the person asked unlocking the noun with the key unlocke' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'person asked unlocking the noun with the key unlocked with' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'person asked unlocking the noun with the key unlocked with' {kind: action} {action pattern: <action: unlocking it with /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}} second: NONLOCAL_VARIABLE_NT'the key unlocked with' {nonlocal: 'key unlocked with'(var)object}>}
                        HEADING_NT'part 3 - locking' {heading 3} {under: H3'part 3 - locking'} {unit: 4}
                            HEADING_NT'section 1 - regular locking' {heading 5} {under: H5'section 1 - regular locking'} {unit: 4}
                                SENTENCE_NT'understand the command lock as something new' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'the command lock'
                                    UNPARSED_NOUN_NT'something new'
                                SENTENCE_NT'understand "lock [something]
                                with [something]" as locking it' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [something]
                                    with [something]"'
                                    UNPARSED_NOUN_NT'locking it with'
                                SENTENCE_NT'understand "lock [an unlocked lockable
                                thing] with [somethin' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [an unlocked lockable
                                    thing] with [something]"'
                                    UNPARSED_NOUN_NT'locking it with'
                                SENTENCE_NT'understand "lock [a lockable
                                thing] with [something]" as loc' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [a lockable
                                    thing] with [something]"'
                                    UNPARSED_NOUN_NT'locking it with'
                                RULE_NT'check locking it with' {unit: 4}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                            INVOCATION_NT'abide by the must have accessible the second noun rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'must have accessible the second noun rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'must have accessible the second noun rule' {kind: rule} {rule: must have accessible the second noun rule}{meaning: {must have accessible the second noun rule = MISCELLANEOUS_MC}}
                                SENTENCE_NT'the right second rule is listed instead of the can't lock wi' {unit: 4} {classified}
                                    VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                                    UNPARSED_NOUN_NT'the right second rule'
                                    UNPARSED_NOUN_NT'instead of the can't lock without the correct key rule in th'
                            HEADING_NT'section 2 - keylessly' {heading 5} {under: H5'section 2 - keylessly'} {unit: 4}
                                SENTENCE_NT'understand "lock [something]" as locking keylessly' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [something]"'
                                    UNPARSED_NOUN_NT'locking keylessly'
                                SENTENCE_NT'understand "lock [an
                                unlocked lockable thing]" as locking ke' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [an
                                    unlocked lockable thing]"'
                                    UNPARSED_NOUN_NT'locking keylessly'
                                SENTENCE_NT'understand "lock [a lockable
                                thing]" as locking keylessly' {unit: 4} {classified}
                                    VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                                    UNPARSED_NOUN_NT'"lock [a lockable
                                    thing]"'
                                    UNPARSED_NOUN_NT'locking keylessly'
                                SENTENCE_NT'locking keylessly is an action applying to one thing' {unit: 4} {classified}
                                    VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                                    UNPARSED_NOUN_NT'locking keylessly'
                                    UNPARSED_NOUN_NT'applying to one thing'
                                SENTENCE_NT'the locking keylessly action has an object called the key lo' {unit: 4} {classified}
                                    VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                                    PROPER_NOUN_NT'locking keylessly action' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'locking keylessly action' {kind: action name} {action name: locking keylessly}{meaning: {locking keylessly action = MISCELLANEOUS_MC}}}
                                    ALLOWED_NT {refined}
                                        PROPERTYCALLED_NT'called'
                                            UNPARSED_NOUN_NT'object' {indefinite 'an' n/m/f nom/acc s}
                                            UNPARSED_NOUN_NT'key locked with' {definite 'the' n/m/f s/p nom/acc}
                                RULE_NT'check an actor locking keylessly ( this is the check keyless' {unit: 4}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the can't lock without a lock rule'
                                            INVOCATION_NT'abide by the can't lock without a lock rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'can't lock without a lock rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'can't lock without a lock rule' {kind: rule} {rule: can't lock without a lock rule}{meaning: {can't lock without a lock rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'abide by the can't lock what's already locked rule'
                                            INVOCATION_NT'abide by the can't lock what's already locked rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'can't lock what's already locked rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'can't lock what's already locked rule' {kind: rule} {rule: can't lock what's already locked rule}{meaning: {can't lock what's already locked rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'abide by the can't lock what's open rule'
                                            INVOCATION_NT'abide by the can't lock what's open rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'can't lock what's open rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'can't lock what's open rule' {kind: rule} {rule: can't lock what's open rule}{meaning: {can't lock what's open rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'abide by the need a matching key rule'
                                            INVOCATION_NT'abide by the need a matching key rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'need a matching key rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'need a matching key rule' {kind: rule} {rule: need a matching key rule}{meaning: {need a matching key rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'now the key locked with is the second noun' {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the key locked with is the second noun'
                                RULE_NT'carry out an actor locking keylessly ( this is the standard ' {unit: 4}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                                INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'do nothing' {indent: 2}
                                                    INVOCATION_NT'do nothing' {phrase invoked: call}
                                            CODE_BLOCK_NT'otherwise' {control structure: O}
                                                CODE_BLOCK_NT {control structure: IF}
                                                    INVOCATION_LIST_NT'if the person asked is the player' {colon_block_command} {indent: 1}
                                                        INVOCATION_NT'if the person asked is the player' {phrase invoked: call}
                                                            CONDITION_CONTEXT_NT'person asked is the player' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: <null-parse-node>
                                                            }
                                                                TEST_PROPOSITION_NT'person asked is the player' {proposition: << ('person asked' == 'the player') >>} {term: 'person asked'}
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(with [the key locked with])[command clarification brea' {control structure: SAY}
                                                            INVOCATION_LIST_SAY_NT'"(with [the key locked with])[command clarification break]" '
                                                                INVOCATION_NT'"(with [the key locked with])[command clarification break]" ' {phrase invoked: call} {kind variable declarations: K=text}
                                                                    RVALUE_CONTEXT_NT'"(with [the key locked with])[command clarification break]" ' {token check to do: <null-parse-node>
                                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                        CONSTANT_NT'"(with [the key locked with])[command clarification break]" ' {kind: text}
                                        INVOCATION_LIST_NT'try the person asked locking the noun with the key locked wi' {indent: 1}
                                            INVOCATION_NT'try the person asked locking the noun with the key locked wi' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'person asked locking the noun with the key locked with' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                    CONSTANT_NT'person asked locking the noun with the key locked with' {kind: action} {action pattern: <action: locking it with /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}} second: NONLOCAL_VARIABLE_NT'the key locked with' {nonlocal: 'key locked with'(var)object}>}
                    HEADING_NT'volume 3 - the passkey kind , needed only if you want keys t' {heading 1} {under: H1'volume 3 - the passkey kind , needed only if you want keys to name themselves'} {unit: 4}
                        SENTENCE_NT'a passkey is a kind of thing' {unit: 4} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            COMMON_NOUN_NT'passkey' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=passkey(x) >>} {refers: infs'passkey'} {eval: TEST_VALUE_NT} {created here}
                            KIND_NT'kind of thing' {refined} {refers: infs'thing'}
                                COMMON_NOUN_NT'thing' {refined} {refers: infs'thing'} {creation: << kind=thing(x) >>} {eval: TEST_VALUE_NT}
                        SENTENCE_NT'the specification of a passkey is A kind of key
                        whose invent' {unit: 4} {classified} {interpretation of subject: infs'passkey'}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of a passkey' {definite 'the' n/m/f s/p nom/acc} {refined}
                                COMMON_NOUN_NT'passkey' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'passkey'} {creation: << kind=passkey(x) >>} {eval: TEST_VALUE_NT}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'A kind of key
                            whose inventory listing changes to reflect the' {refined} {eval: CONSTANT_NT'A kind of key
                            whose inventory listing changes to reflect the' {kind: text}}
                        RULE_NT'definition' {unit: 4}
                        SENTENCE_NT'unbolting relates one passkey to various things' {unit: 4} {classified}
                            VERB_NT'relates' {verb 'relate' 3p s act IS_TENSE +ve} {special meaning: new-relation}
                            UNPARSED_NOUN_NT'unbolting' {new relation: unbolting}
                            UNPARSED_NOUN_NT'one passkey'
                            UNPARSED_NOUN_NT'various things'
                        SENTENCE_NT'the verb to unbolt means the unbolting relation' {unit: 4} {classified}
                            VERB_NT'means' {verb 'mean' 3p s act IS_TENSE +ve} {special meaning: verb-means}
                            UNPARSED_NOUN_NT'to unbolt'
                            UNPARSED_NOUN_NT'unbolting relation' {definite 'the' n/m/f s/p nom/acc}
                        RULE_NT'after printing the name of an identified passkey ( called th' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the prior named object is the item' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the prior named object is the item'
                                CODE_BLOCK_NT'say " (which [open] [the list of things unbolted by the item' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'" (which [open] [the list of things unbolted by the item])" '
                                        INVOCATION_NT'" (which [open] [the list of things unbolted by the item])" ' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'" (which [open] [the list of things unbolted by the item])" ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'" (which [open] [the list of things unbolted by the item])" ' {kind: text}
                        RULE_NT'after examining an identified passkey ( this is the passkey ' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[The noun] [unlock] [the list of things unbolted by the' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"[The noun] [unlock] [the list of things unbolted by the nou'
                                        INVOCATION_NT'"[The noun] [unlock] [the list of things unbolted by the nou' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"[The noun] [unlock] [the list of things unbolted by the nou' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"[The noun] [unlock] [the list of things unbolted by the nou' {kind: text}
                        RULE_NT'carry out unlocking something with a passkey ( this is the s' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun unlocks the noun' {colon_block_command}
                                        INVOCATION_NT'if the second noun unlocks the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun unlocks the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun unlocks the noun' {proposition: << ('second noun' == <(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the second noun unbolts the noun' {results_from_splitting} {indent: 1} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        RULE_NT'report someone trying unlocking something with a passkey ( t' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the second noun unbolts the noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        RULE_NT'carry out locking something with a passkey ( this is the sta' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun unlocks the noun' {colon_block_command}
                                        INVOCATION_NT'if the second noun unlocks the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun unlocks the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun unlocks the noun' {proposition: << ('second noun' == <(QUOTED_INAME_0_00000053(*1)) : 'the noun'>) >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the second noun unbolts the noun' {results_from_splitting} {indent: 1} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        RULE_NT'report someone trying locking something with a passkey ( thi' {unit: 4}
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the second noun unbolts the noun' {control structure: NOW}
                                    CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                    HEADING_NT'volume 4 - the keychain kind , needed only if you want a key' {heading 1} {under: H1'volume 4 - the keychain kind , needed only if you want a keychain'} {unit: 4}
                        SENTENCE_NT'a keychain is a kind of supporter that is portable' {unit: 4} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            COMMON_NOUN_NT'keychain' {indefinite 'a' n/m/f nom/acc s} {refined} {creation: << kind=keychain(x) >>} {refers: infs'keychain'} {eval: TEST_VALUE_NT} {created here}
                            KIND_NT'kind of supporter that is portable' {refined} {refers: infs'supporter'}
                                WITH_NT'supporter that is portable' {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) ^ portable(x) >>} {eval: TEST_VALUE_NT}
                                    COMMON_NOUN_NT'supporter that is portable' {refined} {refers: infs'supporter'} {creation: << kind=supporter(x) ^ portable(x) >>} {eval: TEST_VALUE_NT}
                                    ADJECTIVE_NT {predicate: portable} {creation: << kind=supporter(x) ^ portable(x) >>}
                        SENTENCE_NT'the specification of a keychain is A keychain which can hold' {unit: 4} {classified} {interpretation of subject: infs'keychain'}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                            X_OF_Y_NT'specification of a keychain' {definite 'the' n/m/f s/p nom/acc} {refined}
                                COMMON_NOUN_NT'keychain' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'keychain'} {creation: << kind=keychain(x) >>} {eval: TEST_VALUE_NT}
                                PROPER_NOUN_NT'specification' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'specification'=text}}
                            PROPER_NOUN_NT'A keychain which can hold the player's keys without forcing ' {refined} {eval: CONSTANT_NT'A keychain which can hold the player's keys without forcing ' {kind: text}}
                        RULE_NT'instead of putting something which is not a passkey on a key' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[The noun] [are] not a key." ( a )' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] not a key." ( a )'
                                        INVOCATION_NT'"[The noun] [are] not a key." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"[The noun] [are] not a key." ( a )' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"[The noun] [are] not a key." ( a )' {kind: text}
                        SENTENCE_NT'the keychain-aware carrying requirements rule is listed inst' {unit: 4} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {rule placement sense: positive} {special meaning: rule-listed-in}
                            UNPARSED_NOUN_NT'the keychain-aware carrying requirements rule'
                            UNPARSED_NOUN_NT'instead of the carrying requirements rule in the action-proc'
                        RULE_NT'this is the keychain-aware carrying requirements rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if locking or unlocking something with something which is on' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if locking or unlocking something with something which is on' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'locking or unlocking something with something which is on a ' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                LOGICAL_OR_NT'locking or unlocking something with something which is on a '
                                                    TEST_VALUE_NT'locking'
                                                        CONSTANT_NT'locking' {kind: described action} {action pattern: <action: locking it with / >}
                                                    TEST_VALUE_NT'unlocking something with something which is on a keychain wh'
                                                        CONSTANT_NT'unlocking something with something which is on a keychain wh' {kind: described action} {action pattern: <action: unlocking it with /  noun: TEST_VALUE_NT'something' second: TEST_VALUE_NT'something which is on a keychain which is carried by the act' {term: x} {converted SN}>}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action' {indent: 2}
                                            INVOCATION_NT'continue the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'abide by the carrying requirements rule' {indent: 1}
                                    INVOCATION_NT'abide by the carrying requirements rule' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'carrying requirements rule' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                            CONSTANT_NT'carrying requirements rule' {kind: rule} {rule: carrying requirements rule}{meaning: {carrying requirements rule = MISCELLANEOUS_MC}}
                        SENTENCE_NT'understand "put [passkey] on [keychain]" as putting it on' {unit: 4} {classified}
                            VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                            UNPARSED_NOUN_NT'"put [passkey] on [keychain]"'
                            UNPARSED_NOUN_NT'putting it on'
                        RULE_NT'rule for deciding whether all includes passkeys which are on' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not a keychain' {colon_block_command}
                                        INVOCATION_NT'if the second noun is not a keychain' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not a keychain' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not a keychain' {proposition: << NOT< kind=keychain('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'it does not' {results_from_splitting} {indent: 1}
                    HEADING_NT'volume 5 - support materials' {heading 1} {under: H1'volume 5 - support materials'} {unit: 4}
                        RULE_NT'this is the noun autotaking rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the person asked' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the person asked' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the person asked' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the person asked' {proposition: << ('player' == 'the person asked') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'try taking the noun' {indent: 3}
                                                    INVOCATION_NT'try taking the noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'taking the noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'taking the noun' {kind: action} {action pattern: <action: taking /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                INVOCATION_LIST_NT'try the person asked trying taking the noun' {indent: 3}
                                                    INVOCATION_NT'try the person asked trying taking the noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'person asked trying taking the noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'person asked trying taking the noun' {kind: action} {action pattern: <action: taking /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun' {indent: 2}
                                            INVOCATION_NT'carry out the implicitly taking activity with the noun' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'implicitly taking' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'implicitly taking' {kind: activity on objects} {activity: implicitly taking}{meaning: {implicitly taking = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        RULE_NT'this is the second noun autotaking rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if sequential action option is active' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if sequential action option is active' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'sequential action option is active' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'sequential action option is active' {proposition: << active('sequential action option') >>} {term: 'sequential action option'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the person asked' {colon_block_command} {indent: 2}
                                                INVOCATION_NT'if the player is the person asked' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the person asked' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the person asked' {proposition: << ('player' == 'the person asked') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'try taking the second noun' {indent: 3}
                                                    INVOCATION_NT'try taking the second noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'taking the second noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'taking the second noun' {kind: action} {action pattern: <action: taking /  noun: NONLOCAL_VARIABLE_NT'the second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}>}
                                            CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                                INVOCATION_LIST_NT'try the person asked trying taking the second noun' {indent: 3}
                                                    INVOCATION_NT'try the person asked trying taking the second noun' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'person asked trying taking the second noun' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                            CONSTANT_NT'person asked trying taking the second noun' {kind: action} {action pattern: <action: taking /  noun: NONLOCAL_VARIABLE_NT'the second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}>}
                                    CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the second nou' {indent: 2}
                                            INVOCATION_NT'carry out the implicitly taking activity with the second nou' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'implicitly taking' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: activity}
                                                    CONSTANT_NT'implicitly taking' {kind: activity on objects} {activity: implicitly taking}{meaning: {implicitly taking = ACTIVITY_MC}}
                                                RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                    NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                        RULE_NT'this is the must hold the noun rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the person asked does not have the noun' {colon_block_command}
                                        INVOCATION_NT'if the person asked does not have the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'person asked does not have the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'person asked does not have the noun' {proposition: << NOT< ('person asked' == <OwnerOf(*1) : 'the noun'>) NOT> >>} {term: 'person asked'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'follow the noun autotaking rule' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'follow the noun autotaking rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'noun autotaking rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'noun autotaking rule' {kind: rule} {rule: noun autotaking rule}{meaning: {noun autotaking rule = MISCELLANEOUS_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the person asked does not have the noun' {colon_block_command}
                                        INVOCATION_NT'if the person asked does not have the noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'person asked does not have the noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'person asked does not have the noun' {proposition: << NOT< ('person asked' == <OwnerOf(*1) : 'the noun'>) NOT> >>} {term: 'person asked'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision' {phrase invoked: call}
                        RULE_NT'this is the must hold the second noun rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the person asked does not have the second noun' {colon_block_command}
                                        INVOCATION_NT'if the person asked does not have the second noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'person asked does not have the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'person asked does not have the second noun' {proposition: << NOT< ('person asked' == <OwnerOf(*1) : 'the second noun'>) NOT> >>} {term: 'person asked'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'follow the second noun autotaking rule' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'follow the second noun autotaking rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'second noun autotaking rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'second noun autotaking rule' {kind: rule} {rule: second noun autotaking rule}{meaning: {second noun autotaking rule = MISCELLANEOUS_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the person asked does not have the second noun' {colon_block_command}
                                        INVOCATION_NT'if the person asked does not have the second noun' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'person asked does not have the second noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'person asked does not have the second noun' {proposition: << NOT< ('person asked' == <OwnerOf(*1) : 'the second noun'>) NOT> >>} {term: 'person asked'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action' {results_from_splitting} {indent: 1}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision' {phrase invoked: call}
                        RULE_NT'this is the must have accessible the noun rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not key-accessible' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not key-accessible' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not key-accessible' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not key-accessible' {proposition: << NOT< key-accessible('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the noun is on a keychain ( called the containing keychai' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the noun is on a keychain ( called the containing keychai' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'noun is on a keychain ( called the containing keychain )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'noun is on a keychain ( called the containing keychain )' {proposition: << kind=keychain(<SupporterOf(*1) : 'noun'>) ^ called='containing keychain':keychain(<SupporterOf(*1) : 'noun'>) >>} {term: 'noun'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the noun is the containing keychain' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the noun is the containing keychain'
                                        INVOCATION_LIST_NT'follow the noun autotaking rule' {indent: 2}
                                            INVOCATION_NT'follow the noun autotaking rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'noun autotaking rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'noun autotaking rule' {kind: rule} {rule: noun autotaking rule}{meaning: {noun autotaking rule = MISCELLANEOUS_MC}}
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the noun is not key-accessible' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the noun is not key-accessible' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'noun is not key-accessible' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'noun is not key-accessible' {proposition: << NOT< key-accessible('noun') NOT> >>} {term: 'noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the person asked' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the player is the person asked' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the person asked' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the person asked' {proposition: << ('player' == 'the person asked') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Without holding [the noun], [we] [can] do nothing." ( a' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Without holding [the noun], [we] [can] do nothing." ( a )'
                                                        INVOCATION_NT'"Without holding [the noun], [we] [can] do nothing." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Without holding [the noun], [we] [can] do nothing." ( a )' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Without holding [the noun], [we] [can] do nothing." ( a )' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'make no decision' {indent: 1}
                                    INVOCATION_NT'make no decision' {phrase invoked: call}
                        RULE_NT'this is the must have accessible the second noun rule' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not key-accessible' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not key-accessible' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not key-accessible' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not key-accessible' {proposition: << NOT< key-accessible('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the held second noun be the second noun' {indent: 2}
                                            INVOCATION_NT'let the held second noun be the second noun' {phrase invoked: call}
                                                NEW_LOCAL_CONTEXT_NT'held second noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                    UNKNOWN_NT'held second noun'
                                                RVALUE_CONTEXT_NT'second noun' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                    NONLOCAL_VARIABLE_NT'second noun' {nonlocal: 'second noun'(var)object}{meaning: {second noun = VARIABLE_MC}}
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the second noun is on a keychain ( called the containing ' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the second noun is on a keychain ( called the containing ' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'second noun is on a keychain ( called the containing keychai' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'second noun is on a keychain ( called the containing keychai' {proposition: << kind=keychain(<SupporterOf(*1) : 'second noun'>) ^ called='containing keychain':keychain(<SupporterOf(*1) : 'second noun'>) >>} {term: 'second noun'}
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the second noun is the containing keychain' {results_from_splitting} {indent: 3} {control structure: NOW}
                                                    CONDITION_CONTEXT_NT'the second noun is the containing keychain'
                                        INVOCATION_LIST_NT'follow the second noun autotaking rule' {indent: 2}
                                            INVOCATION_NT'follow the second noun autotaking rule' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'second noun autotaking rule' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'a rule'} {required: rule}
                                                    CONSTANT_NT'second noun autotaking rule' {kind: rule} {rule: second noun autotaking rule}{meaning: {second noun autotaking rule = MISCELLANEOUS_MC}}
                                        INVOCATION_LIST_NT'now the second noun is the held second noun' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the second noun is the held second noun'
                                CODE_BLOCK_NT {control structure: IF}
                                    INVOCATION_LIST_NT'if the second noun is not key-accessible' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'if the second noun is not key-accessible' {phrase invoked: call}
                                            CONDITION_CONTEXT_NT'second noun is not key-accessible' {token check to do: <null-parse-node>
                                            } {token to be parsed against: <null-parse-node>
                                            }
                                                TEST_PROPOSITION_NT'second noun is not key-accessible' {proposition: << NOT< key-accessible('second noun') NOT> >>} {term: 'second noun'}
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT {control structure: IF}
                                            INVOCATION_LIST_NT'if the player is the person asked' {indent: 2} {colon_block_command}
                                                INVOCATION_NT'if the player is the person asked' {phrase invoked: call}
                                                    CONDITION_CONTEXT_NT'player is the person asked' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: <null-parse-node>
                                                    }
                                                        TEST_PROPOSITION_NT'player is the person asked' {proposition: << ('player' == 'the person asked') >>} {term: 'player'}
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Without holding [the second noun], [we] [can] do nothin' {control structure: SAY}
                                                    INVOCATION_LIST_SAY_NT'"Without holding [the second noun], [we] [can] do nothing." '
                                                        INVOCATION_NT'"Without holding [the second noun], [we] [can] do nothing." ' {phrase invoked: call} {kind variable declarations: K=text}
                                                            RVALUE_CONTEXT_NT'"Without holding [the second noun], [we] [can] do nothing." ' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                                CONSTANT_NT'"Without holding [the second noun], [we] [can] do nothing." ' {kind: text}
                                        INVOCATION_LIST_NT'stop the action' {indent: 2}
                                            INVOCATION_NT'stop the action' {phrase invoked: call}
                                INVOCATION_LIST_NT'make no decision' {indent: 1}
                                    INVOCATION_NT'make no decision' {phrase invoked: call}
                    HEADING_NT'volume 6 - unlocking all - not for release' {heading 1} {under: H1'volume 6 - unlocking all - not for release'} {unit: 4}
                        SENTENCE_NT'understand "unlockall" as universal unlocking' {unit: 4} {classified}
                            VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                            UNPARSED_NOUN_NT'"unlockall"'
                            UNPARSED_NOUN_NT'universal unlocking'
                        SENTENCE_NT'universal unlocking is an action applying to nothing' {unit: 4} {classified}
                            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                            UNPARSED_NOUN_NT'universal unlocking'
                            UNPARSED_NOUN_NT'applying to nothing'
                        RULE_NT'carry out universal unlocking ( this is the lock debugging r' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT {control structure: RPT}
                                    INVOCATION_LIST_NT'repeat with item running through locked things' {colon_block_command} {indent: 1}
                                        INVOCATION_NT'repeat with item running through locked things' {phrase invoked: call} {kind variable declarations: K=thing}
                                            NEW_LOCAL_CONTEXT_NT'item' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: K}
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'locked things' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'locked things' {kind: description of things} {proposition: << kind=thing(x) ^ locked(x) >>}
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is unlocked' {indent: 2} {control structure: NOW}
                                            CONDITION_CONTEXT_NT'the item is unlocked'
                                        CODE_BLOCK_NT'say "Unlocking [the item]." ( a )' {control structure: SAY}
                                            INVOCATION_LIST_SAY_NT'"Unlocking [the item]." ( a )'
                                                INVOCATION_NT'"Unlocking [the item]." ( a )' {phrase invoked: call} {kind variable declarations: K=text}
                                                    RVALUE_CONTEXT_NT'"Unlocking [the item]." ( a )' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                        CONSTANT_NT'"Unlocking [the item]." ( a )' {kind: text}
                        RULE_NT'report universal unlocking ( this is the report universal un' {unit: 4}
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "A loud stereophonic click assures you that everything i' {control structure: SAY}
                                    INVOCATION_LIST_SAY_NT'"A loud stereophonic click assures you that everything in th'
                                        INVOCATION_NT'"A loud stereophonic click assures you that everything in th' {phrase invoked: call} {kind variable declarations: K=text}
                                            RVALUE_CONTEXT_NT'"A loud stereophonic click assures you that everything in th' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                CONSTANT_NT'"A loud stereophonic click assures you that everything in th' {kind: text}
                        ENDHERE_NT'locksmith' {unit: 4}
            SENTENCE_NT'understand "go to/toward/into [any room]" as going toward' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"go to/toward/into [any room]"'
                UNPARSED_NOUN_NT'going toward'
            SENTENCE_NT'understand "enter [any room]" as going toward' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"enter [any room]"'
                UNPARSED_NOUN_NT'going toward'
            SENTENCE_NT'a person has a room called the destination' {unit: 4} {classified}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT {refined}
                    PROPERTYCALLED_NT'called'
                        UNPARSED_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s}
                        UNPARSED_NOUN_NT'destination'
            SENTENCE_NT'going toward is an action applying to one thing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'going toward'
                UNPARSED_NOUN_NT'applying to one thing'
            RULE_NT'check going toward' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the noun is the location' {colon_block_command}
                            INVOCATION_NT'if the noun is the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is the location' {proposition: << ('noun' == 'the location') >>} {term: 'noun'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You're already in [the location]."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"You're already in "'
                                    INVOCATION_NT'"You're already in "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"You're already in "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"You're already in "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the location'
                                    INVOCATION_NT'the location' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'location' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'carry out going toward' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the destination of the player is the noun' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the destination of the player is the noun'
                    INVOCATION_LIST_NT'let heading be the best route from the location to the noun '
                        INVOCATION_NT'let heading be the best route from the location to the noun ' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'heading' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                UNKNOWN_NT'heading'
                            RVALUE_CONTEXT_NT'best route from the location to the noun , using even locked' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location to the noun , using even locked'
                                    INVOCATION_LIST_NT'best route from the location to the noun , using even locked'
                                        INVOCATION_NT'best route from the location to the noun' {phrase invoked: call} {resulting: object} {phrase options invoked: using even locked doors}
                                            RVALUE_CONTEXT_NT'location' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                                            RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if heading is not a direction' {colon_block_command}
                            INVOCATION_NT'if heading is not a direction' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'heading is not a direction' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'heading is not a direction' {proposition: << NOT< kind=direction('heading') NOT> >>} {term: 'heading'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You can't think how to get there from here."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"You can't think how to get there from here."'
                                    INVOCATION_NT'"You can't think how to get there from here."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"You can't think how to get there from here."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"You can't think how to get there from here."' {kind: text}
                            CODE_BLOCK_NT {control structure: INS}
                    INVOCATION_LIST_NT'try going heading'
                        INVOCATION_NT'try going heading' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'going heading' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'going heading' {kind: action} {action pattern: <action: going /  noun: LOCAL_VARIABLE_NT'heading' {local: LV"heading"-object object}>}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the location is the destination of the player' {colon_block_command}
                            INVOCATION_NT'if the location is the destination of the player' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'location is the destination of the player' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'location is the destination of the player' {proposition: << ('location' == 'the destination of the player') >>} {term: 'location'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the destination of the player is blank' {results_from_splitting} {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the destination of the player is blank'
            RULE_NT'instead of waiting when the destination of the player is not' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the destination of the player is the location' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the destination of the player is the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'destination of the player is the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'destination of the player is the location' {proposition: << ('destination of the player' == 'the location') >>} {term: 'destination of the player'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the destination of the player is blank' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the destination of the player is blank'
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            INVOCATION_LIST_NT'try going toward destination of the player' {indent: 2}
                                INVOCATION_NT'try going toward destination of the player' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'going toward destination of the player' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'going toward destination of the player' {kind: action} {action pattern: <action: going toward /  noun: PROPERTY_VALUE_NT'destination of the player'>}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the location is the destination of the player' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if the location is the destination of the player' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'location is the destination of the player' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'location is the destination of the player' {proposition: << ('location' == 'the destination of the player') >>} {term: 'location'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now the destination of the player is blank' {results_from_splitting} {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'the destination of the player is blank'
            SENTENCE_NT'understand "stop" or "cease" as stopping' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"stop" or "cease"'
                UNPARSED_NOUN_NT'stopping'
            SENTENCE_NT'stopping is an action applying to nothing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'stopping'
                UNPARSED_NOUN_NT'applying to nothing'
            RULE_NT'carry out stopping' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the destination of the player is blank' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the destination of the player is blank'
            RULE_NT'report stopping' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You stop in your tracks."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You stop in your tracks."'
                            INVOCATION_NT'"You stop in your tracks."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You stop in your tracks."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You stop in your tracks."' {kind: text}
            RULE_NT'after going to an air-conditioned room' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You step into the mercifully air-conditioned surroundin' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You step into the mercifully air-conditioned surroundings o'
                            INVOCATION_NT'"You step into the mercifully air-conditioned surroundings o' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You step into the mercifully air-conditioned surroundings o' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You step into the mercifully air-conditioned surroundings o' {kind: text}
                    INVOCATION_LIST_NT'continue the action'
                        INVOCATION_NT'continue the action' {phrase invoked: call}
            RULE_NT'after going from an air-conditioned room' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You emerge from the air-conditioning into heat like a w' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You emerge from the air-conditioning into heat like a wall.'
                            INVOCATION_NT'"You emerge from the air-conditioning into heat like a wall.' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You emerge from the air-conditioning into heat like a wall.' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You emerge from the air-conditioning into heat like a wall.' {kind: text}
                    INVOCATION_LIST_NT'continue the action'
                        INVOCATION_NT'continue the action' {phrase invoked: call}
            RULE_NT'instead of listening to an air-conditioned room' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "The air-conditioning hums softly."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"The air-conditioning hums softly."'
                            INVOCATION_NT'"The air-conditioning hums softly."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"The air-conditioning hums softly."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"The air-conditioning hums softly."' {kind: text}
            SENTENCE_NT'the alfred cralle pool hall is a room' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'alfred cralle pool hall' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'alfred cralle pool hall'} {eval: CONSTANT_NT'alfred cralle pool hall' {kind: object} {instance: I88'alfred cralle pool hall'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'"The town's most popular gathering-place, the pool hall is d' {unit: 4} {classified}
            SENTENCE_NT'the air conditioner is a device in the pool hall' {unit: 4} {classified} {interpretation of subject: infs'alfred cralle pool hall'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'air conditioner' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'air conditioner'} {eval: CONSTANT_NT'air conditioner' {kind: object} {instance: I89'air conditioner'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'device in the pool hall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'device'} {creation: << kind=device(x) ^ ('the pool hall' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'device in the pool hall' {term: x} {converted SN}}
            SENTENCE_NT'"[if switched off]An air conditioner sits in the corner, unh' {unit: 4} {classified}
            SENTENCE_NT'the felt door is west of the pool hall' {unit: 4} {classified} {interpretation of subject: infs'air conditioner'}
                VERB_NT'is west of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: west of}
                PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: object} {instance: I90'felt door'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is west of' {meaning: west-map-r} {refined}
                    PROPER_NOUN_NT'pool hall' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'alfred cralle pool hall'} {eval: CONSTANT_NT'alfred cralle pool hall' {kind: room} {instance: I88'alfred cralle pool hall'} {enumeration: 0}}
                    PROPER_NOUN_NT'west' {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: direction} {instance: I29'west'} {enumeration: 0}} {refined}
            SENTENCE_NT'the felt door is a door' {unit: 4} {classified} {interpretation of subject: infs'felt door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: object} {instance: I90'felt door'} {enumeration: 0}}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'the felt door is open' {unit: 4} {classified} {interpretation of subject: infs'felt door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: door} {instance: I90'felt door'} {enumeration: 0}}
                ADJECTIVE_NT'open' {refined} {predicate: open} {creation: << open(x) ^ open(x) >>}
            SENTENCE_NT'the felt door is lockable and unlocked' {unit: 4} {classified} {interpretation of subject: infs'felt door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: door} {instance: I90'felt door'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) ^ lockable(x) >>}
                    ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
            SENTENCE_NT'the key to the city unlocks the felt door' {unit: 4} {classified} {interpretation of subject: infs'felt door'}
                VERB_NT'unlocks' {verb 'unlock' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'key to the city' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'unlocks' {meaning: lock-fitting-r} {refined}
                    PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: door} {instance: I90'felt door'} {enumeration: 0}}
            SENTENCE_NT'the description of the felt door is "It has a prominent lock' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the felt door' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: door} {instance: I90'felt door'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"It has a prominent lock, designed for an old-fashioned key.' {refined} {eval: CONSTANT_NT'"It has a prominent lock, designed for an old-fashioned key.' {kind: text}}
            RULE_NT'after locking a door with something in the presence of an ot' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The audience] looks a little non-plussed when you lock' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the audience'
                            INVOCATION_NT'the audience' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'audience' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    LOCAL_VARIABLE_NT'audience' {local: LV"audience"-person person}
                        INVOCATION_LIST_SAY_NT'" looks a little non-plussed when you lock "'
                            INVOCATION_NT'" looks a little non-plussed when you lock "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" looks a little non-plussed when you lock "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" looks a little non-plussed when you lock "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'", but shrugs."'
                            INVOCATION_NT'", but shrugs."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'", but shrugs."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'", but shrugs."' {kind: text}
            SENTENCE_NT'nancy johnson memorial square is west of the felt door' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is west of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: west of}
                PROPER_NOUN_NT'nancy johnson memorial square' {refined} {refers: infs'nancy johnson memorial square'} {eval: CONSTANT_NT'nancy johnson memorial square' {kind: object} {instance: I92'nancy johnson memorial square'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is west of' {meaning: west-map-r} {refined}
                    PROPER_NOUN_NT'felt door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'felt door'} {eval: CONSTANT_NT'felt door' {kind: door} {instance: I90'felt door'} {enumeration: 0}}
                    PROPER_NOUN_NT'west' {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: direction} {instance: I29'west'} {enumeration: 0}} {refined}
            SENTENCE_NT'the description of nancy johnson memorial square is "Waves o' {unit: 4} {classified} {interpretation of subject: infs'nancy johnson memorial square'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of nancy johnson memorial square' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'nancy johnson memorial square' {refined} {refers: infs'nancy johnson memorial square'} {eval: CONSTANT_NT'nancy johnson memorial square' {kind: object} {instance: I92'nancy johnson memorial square'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"Waves of August heat rise from the pavement: more than once' {refined} {eval: CONSTANT_NT'"Waves of August heat rise from the pavement: more than once' {kind: text}}
            SENTENCE_NT'the statue is scenery in memorial square' {unit: 4} {classified} {interpretation of subject: infs'nancy johnson memorial square'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'statue' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'statue'} {eval: CONSTANT_NT'statue' {kind: object} {instance: I93'statue'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'scenery in memorial square' {refined} {refers: infs'object'-k} {creation: << scenery(x) ^ ('memorial square' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'scenery in memorial square' {term: x} {converted SN}}
            SENTENCE_NT'understand "nancy" or "johnson" or "mrs" as the statue' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"nancy" or "johnson" or "mrs"'
                UNPARSED_NOUN_NT'the statue'
            SENTENCE_NT'the description of the statue is "Mrs. Johnson is pictured w' {unit: 4} {classified} {interpretation of subject: infs'statue'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the statue' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'statue' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'statue'} {eval: CONSTANT_NT'statue' {kind: object} {instance: I93'statue'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"Mrs. Johnson is pictured with a hand-cranked ice cream free' {refined} {eval: CONSTANT_NT'"Mrs. Johnson is pictured with a hand-cranked ice cream free' {kind: text}}
            SENTENCE_NT'a hand-cranked ice cream freezer is part of the statue' {unit: 4} {classified} {interpretation of subject: infs'statue'}
                VERB_NT'is part of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: part of}
                PROPER_NOUN_NT'hand-cranked ice cream freezer' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'hand-cranked ice cream freezer'} {eval: CONSTANT_NT'hand-cranked ice cream freezer' {kind: object} {instance: I94'hand-cranked ice cream freezer'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is part of' {meaning: incorporates} {refined}
                    PROPER_NOUN_NT'statue' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'statue'} {eval: CONSTANT_NT'statue' {kind: object} {instance: I93'statue'} {enumeration: 0}}
            SENTENCE_NT'the description is "The hand-cranked ice cream freezer was M' {unit: 4} {classified} {interpretation of subject: infs'hand-cranked ice cream freezer'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'description' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"The hand-cranked ice cream freezer was Mrs. Johnson's inven' {refined} {eval: CONSTANT_NT'"The hand-cranked ice cream freezer was Mrs. Johnson's inven' {kind: text}}
            SENTENCE_NT'the scoop is part of the statue' {unit: 4} {classified} {interpretation of subject: infs'hand-cranked ice cream freezer'}
                VERB_NT'is part of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: part of}
                PROPER_NOUN_NT'scoop' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'scoop'} {eval: CONSTANT_NT'scoop' {kind: object} {instance: I95'scoop'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is part of' {meaning: incorporates} {refined}
                    PROPER_NOUN_NT'statue' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'statue'} {eval: CONSTANT_NT'statue' {kind: object} {instance: I93'statue'} {enumeration: 0}}
            SENTENCE_NT'the description of the scoop is "An anachronism: Alfred Cral' {unit: 4} {classified} {interpretation of subject: infs'scoop'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the scoop' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'scoop' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'scoop'} {eval: CONSTANT_NT'scoop' {kind: object} {instance: I95'scoop'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"An anachronism: Alfred Cralle would not invent the tool unt' {refined} {eval: CONSTANT_NT'"An anachronism: Alfred Cralle would not invent the tool unt' {kind: text}}
            SENTENCE_NT'the post office is northwest of nancy johnson memorial squar' {unit: 4} {classified} {interpretation of subject: infs'scoop'}
                VERB_NT'is northwest of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: northwest of}
                PROPER_NOUN_NT'post office' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'post office'} {eval: CONSTANT_NT'post office' {kind: object} {instance: I96'post office'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is northwest of' {meaning: northwest-map-r} {refined}
                    PROPER_NOUN_NT'nancy johnson memorial square' {refined} {refers: infs'nancy johnson memorial square'} {eval: CONSTANT_NT'nancy johnson memorial square' {kind: object} {instance: I92'nancy johnson memorial square'} {enumeration: 0}}
                    PROPER_NOUN_NT'northwest' {refers: infs'northwest'} {eval: CONSTANT_NT'northwest' {kind: direction} {instance: I24'northwest'} {enumeration: 0}} {refined}
            SENTENCE_NT'"Service at the post office is on the slow side since everyt' {unit: 4} {classified}
            SENTENCE_NT'the slot is scenery in the post office' {unit: 4} {classified} {interpretation of subject: infs'post office'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'slot' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'slot'} {eval: CONSTANT_NT'slot' {kind: object} {instance: I97'slot'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'scenery in the post office' {refined} {refers: infs'object'-k} {creation: << scenery(x) ^ ('the post office' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'scenery in the post office' {term: x} {converted SN}}
            SENTENCE_NT'the slot is a container' {unit: 4} {classified} {interpretation of subject: infs'slot'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'slot' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'slot'} {eval: CONSTANT_NT'slot' {kind: object} {instance: I97'slot'} {enumeration: 0}}
                COMMON_NOUN_NT'container' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'container'} {creation: << kind=container(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'carry out inserting something into the slot' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is nowhere' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            RULE_NT'report inserting something into the slot' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The noun] falls out of sight, and you know you will ne' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                        INVOCATION_LIST_SAY_NT'" falls out of sight, and you know you will never see it aga'
                            INVOCATION_NT'" falls out of sight, and you know you will never see it aga' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" falls out of sight, and you know you will never see it aga' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" falls out of sight, and you know you will never see it aga' {kind: text}
            SENTENCE_NT'hamwi street is northeast of an iron gate' {unit: 4} {classified} {interpretation of subject: infs'slot'}
                VERB_NT'is northeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: northeast of}
                PROPER_NOUN_NT'hamwi street' {refined} {refers: infs'hamwi street'} {eval: CONSTANT_NT'hamwi street' {kind: object} {instance: I98'hamwi street'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is northeast of' {meaning: northeast-map-r} {refined}
                    PROPER_NOUN_NT'iron gate' {indefinite 'an' n/m/f nom/acc s} {refined} {refers: infs'iron gate'} {eval: CONSTANT_NT'iron gate' {kind: object} {instance: I99'iron gate'} {enumeration: 0}} {created here}
                    PROPER_NOUN_NT'northeast' {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: direction} {instance: I23'northeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'"A U-shaped street running from Main Street around to the Me' {unit: 4} {classified}
            SENTENCE_NT'the iron gate is northeast of nancy johnson memorial square' {unit: 4} {classified} {interpretation of subject: infs'hamwi street'}
                VERB_NT'is northeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: northeast of}
                PROPER_NOUN_NT'iron gate' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'iron gate'} {eval: CONSTANT_NT'iron gate' {kind: object} {instance: I99'iron gate'} {enumeration: 0}}
                RELATIONSHIP_NT'is northeast of' {meaning: northeast-map-r} {refined}
                    PROPER_NOUN_NT'nancy johnson memorial square' {refined} {refers: infs'nancy johnson memorial square'} {eval: CONSTANT_NT'nancy johnson memorial square' {kind: object} {instance: I92'nancy johnson memorial square'} {enumeration: 0}}
                    PROPER_NOUN_NT'northeast' {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: direction} {instance: I23'northeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'the iron gate is a door' {unit: 4} {classified} {interpretation of subject: infs'iron gate'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'iron gate' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'iron gate'} {eval: CONSTANT_NT'iron gate' {kind: object} {instance: I99'iron gate'} {enumeration: 0}}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'it is lockable and unlocked' {unit: 4} {classified} {interpretation of subject: infs'iron gate'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'it' {refined} {refers: infs'iron gate'} {eval: CONSTANT_NT'iron gate' {kind: door} {instance: I99'iron gate'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) ^ lockable(x) >>}
                    ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
            RULE_NT'before printing the name of the iron gate while not opening ' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is the player' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the person asked is the player' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is the player' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is the player' {proposition: << ('person asked' == 'the player') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the gate is open' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if the gate is open' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'gate is open' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'gate is open' {proposition: << open('gate') >>} {term: 'gate'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "open "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"open "'
                                            INVOCATION_NT'"open "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"open "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"open "' {kind: text}
                        CODE_BLOCK_NT'otherwise' {control structure: O}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the gate is locked' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if the gate is locked' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'gate is locked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'gate is locked' {proposition: << locked('gate') >>} {term: 'gate'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "locked "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"locked "'
                                            INVOCATION_NT'"locked "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"locked "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"locked "' {kind: text}
                                CODE_BLOCK_NT'otherwise' {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the gate is closed' {colon_block_command} {indent: 1}
                                            INVOCATION_NT'if the gate is closed' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'gate is closed' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'gate is closed' {proposition: << closed('gate') >>} {term: 'gate'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "closed "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"closed "'
                                                    INVOCATION_NT'"closed "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"closed "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"closed "' {kind: text}
            SENTENCE_NT'cold comfort ice cream is north of a metal door' {unit: 4} {classified} {interpretation of subject: infs'iron gate'}
                VERB_NT'is north of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: north of}
                PROPER_NOUN_NT'cold comfort ice cream' {refined} {refers: infs'cold comfort ice cream'} {eval: CONSTANT_NT'cold comfort ice cream' {kind: object} {instance: I100'cold comfort ice cream'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is north of' {meaning: north-map-r} {refined}
                    PROPER_NOUN_NT'metal door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'metal door'} {eval: CONSTANT_NT'metal door' {kind: object} {instance: I101'metal door'} {enumeration: 0}} {created here}
                    PROPER_NOUN_NT'north' {refers: infs'north'} {eval: CONSTANT_NT'north' {kind: direction} {instance: I22'north'} {enumeration: 0}} {refined}
            SENTENCE_NT'the metal door is north of hamwi street' {unit: 4} {classified} {interpretation of subject: infs'cold comfort ice cream'}
                VERB_NT'is north of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: north of}
                PROPER_NOUN_NT'metal door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'metal door'} {eval: CONSTANT_NT'metal door' {kind: object} {instance: I101'metal door'} {enumeration: 0}}
                RELATIONSHIP_NT'is north of' {meaning: north-map-r} {refined}
                    PROPER_NOUN_NT'hamwi street' {refined} {refers: infs'hamwi street'} {eval: CONSTANT_NT'hamwi street' {kind: object} {instance: I98'hamwi street'} {enumeration: 0}}
                    PROPER_NOUN_NT'north' {refers: infs'north'} {eval: CONSTANT_NT'north' {kind: direction} {instance: I22'north'} {enumeration: 0}} {refined}
            SENTENCE_NT'a poster is fixed in place in cold comfort' {unit: 4} {classified} {interpretation of subject: infs'metal door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'poster' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'poster'} {eval: CONSTANT_NT'poster' {kind: object} {instance: I102'poster'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'fixed in place in cold comfort' {refined} {refers: infs'object'-k} {creation: << fixed in place(x) ^ ('cold comfort' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'fixed in place in cold comfort' {term: x} {converted SN}}
            SENTENCE_NT'"A poster fills one wall with the blazing promise of treats ' {unit: 4} {classified}
            SENTENCE_NT'the description of the poster is "Coming soon! Thai ice crea' {unit: 4} {classified} {interpretation of subject: infs'poster'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the poster' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'poster' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'poster'} {eval: CONSTANT_NT'poster' {kind: object} {instance: I102'poster'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"Coming soon! Thai ice creams! Durian, jackfruit, taro, and ' {refined} {eval: CONSTANT_NT'"Coming soon! Thai ice creams! Durian, jackfruit, taro, and ' {kind: text}}
            SENTENCE_NT'the metal door is a door' {unit: 4} {classified} {interpretation of subject: infs'poster'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'metal door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'metal door'} {eval: CONSTANT_NT'metal door' {kind: object} {instance: I101'metal door'} {enumeration: 0}}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'"A frosty metallic door separates [the location] from [the o' {unit: 4} {classified}
            SENTENCE_NT'the metal door is lockable and unlocked' {unit: 4} {classified} {interpretation of subject: infs'metal door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'metal door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'metal door'} {eval: CONSTANT_NT'metal door' {kind: door} {instance: I101'metal door'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) ^ lockable(x) >>}
                    ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
            SENTENCE_NT'the key to the city unlocks the metal door' {unit: 4} {classified} {interpretation of subject: infs'metal door'}
                VERB_NT'unlocks' {verb 'unlock' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'key to the city' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                RELATIONSHIP_NT'unlocks' {meaning: lock-fitting-r} {refined}
                    PROPER_NOUN_NT'metal door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'metal door'} {eval: CONSTANT_NT'metal door' {kind: door} {instance: I101'metal door'} {enumeration: 0}}
            SENTENCE_NT'marciony street is southeast of nancy johnson memorial squar' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is southeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: southeast of}
                PROPER_NOUN_NT'marciony street' {refined} {refers: infs'marciony street'} {eval: CONSTANT_NT'marciony street' {kind: object} {instance: I103'marciony street'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is southeast of' {meaning: southeast-map-r} {refined}
                    PROPER_NOUN_NT'nancy johnson memorial square' {refined} {refers: infs'nancy johnson memorial square'} {eval: CONSTANT_NT'nancy johnson memorial square' {kind: object} {instance: I92'nancy johnson memorial square'} {enumeration: 0}}
                    PROPER_NOUN_NT'southeast' {refers: infs'southeast'} {eval: CONSTANT_NT'southeast' {kind: direction} {instance: I26'southeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'"A semi-circular terrace, named somewhat fancifully after on' {unit: 4} {classified}
            SENTENCE_NT'the movie rental store is west of a glass door' {unit: 4} {classified} {interpretation of subject: infs'marciony street'}
                VERB_NT'is west of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: west of}
                PROPER_NOUN_NT'movie rental store' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'movie rental store'} {eval: CONSTANT_NT'movie rental store' {kind: object} {instance: I104'movie rental store'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is west of' {meaning: west-map-r} {refined}
                    PROPER_NOUN_NT'glass door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'glass door'} {eval: CONSTANT_NT'glass door' {kind: object} {instance: I105'glass door'} {enumeration: 0}} {created here}
                    PROPER_NOUN_NT'west' {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: direction} {instance: I29'west'} {enumeration: 0}} {refined}
            SENTENCE_NT'the glass door is a door' {unit: 4} {classified} {interpretation of subject: infs'movie rental store'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'glass door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'glass door'} {eval: CONSTANT_NT'glass door' {kind: object} {instance: I105'glass door'} {enumeration: 0}}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'it is west of marciony street' {unit: 4} {classified} {interpretation of subject: infs'glass door'}
                VERB_NT'is west of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: west of}
                PROPER_NOUN_NT'it' {refined} {refers: infs'glass door'} {eval: CONSTANT_NT'glass door' {kind: door} {instance: I105'glass door'} {enumeration: 0}}
                RELATIONSHIP_NT'is west of' {meaning: west-map-r} {refined}
                    PROPER_NOUN_NT'marciony street' {refined} {refers: infs'marciony street'} {eval: CONSTANT_NT'marciony street' {kind: object} {instance: I103'marciony street'} {enumeration: 0}}
                    PROPER_NOUN_NT'west' {refers: infs'west'} {eval: CONSTANT_NT'west' {kind: direction} {instance: I29'west'} {enumeration: 0}} {refined}
            SENTENCE_NT'the glass door is lockable and unlocked' {unit: 4} {classified} {interpretation of subject: infs'glass door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'glass door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'glass door'} {eval: CONSTANT_NT'glass door' {kind: door} {instance: I105'glass door'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) ^ lockable(x) >>}
                    ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
            SENTENCE_NT'the key to the city unlocks the glass door' {unit: 4} {classified} {interpretation of subject: infs'glass door'}
                VERB_NT'unlocks' {verb 'unlock' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'key to the city' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                RELATIONSHIP_NT'unlocks' {meaning: lock-fitting-r} {refined}
                    PROPER_NOUN_NT'glass door' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'glass door'} {eval: CONSTANT_NT'glass door' {kind: door} {instance: I105'glass door'} {enumeration: 0}}
            SENTENCE_NT'main street is southeast of hamwi street' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is southeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: southeast of}
                PROPER_NOUN_NT'main street' {refined} {refers: infs'main street'} {eval: CONSTANT_NT'main street' {kind: object} {instance: I106'main street'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is southeast of' {meaning: southeast-map-r} {refined}
                    PROPER_NOUN_NT'hamwi street' {refined} {refers: infs'hamwi street'} {eval: CONSTANT_NT'hamwi street' {kind: object} {instance: I98'hamwi street'} {enumeration: 0}}
                    PROPER_NOUN_NT'southeast' {refers: infs'southeast'} {eval: CONSTANT_NT'southeast' {kind: direction} {instance: I26'southeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'main street is northeast of some bronze gates' {unit: 4} {classified} {interpretation of subject: infs'main street'}
                VERB_NT'is northeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: northeast of}
                PROPER_NOUN_NT'main street' {refined} {refers: infs'main street'} {eval: CONSTANT_NT'main street' {kind: object} {instance: I106'main street'} {enumeration: 0}}
                RELATIONSHIP_NT'is northeast of' {meaning: northeast-map-r} {refined}
                    PROPER_NOUN_NT'bronze gates' {indefinite 'some' n/m/f nom/acc p} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: object} {instance: I107'bronze gates'} {enumeration: 0}} {created here}
                    PROPER_NOUN_NT'northeast' {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: direction} {instance: I23'northeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'the emergency box is in main street' {unit: 4} {classified} {interpretation of subject: infs'main street'}
                VERB_NT'is in' {verb 'be' 3p s act IS_TENSE +ve} {prep1: in}
                PROPER_NOUN_NT'emergency box' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'emergency box'} {eval: CONSTANT_NT'emergency box' {kind: object} {instance: I108'emergency box'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is in' {meaning: contains} {refined}
                    PROPER_NOUN_NT'main street' {refined} {refers: infs'main street'} {eval: CONSTANT_NT'main street' {kind: object} {instance: I106'main street'} {enumeration: 0}}
            SENTENCE_NT'the emergency box is fixed in place' {unit: 4} {classified} {interpretation of subject: infs'emergency box'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'emergency box' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'emergency box'} {eval: CONSTANT_NT'emergency box' {kind: object} {instance: I108'emergency box'} {enumeration: 0}}
                ADJECTIVE_NT'fixed in place' {refined} {predicate: fixed in place} {creation: << fixed in place(x) ^ fixed in place(x) >>}
            SENTENCE_NT'"A fire-red box with a glass front faces the sidewalk, with ' {unit: 4} {classified}
            SENTENCE_NT'the emergency box is closed and transparent' {unit: 4} {classified} {interpretation of subject: infs'emergency box'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'emergency box' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'emergency box'} {eval: CONSTANT_NT'emergency box' {kind: object} {instance: I108'emergency box'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'closed' {refined} {predicate: closed} {creation: << closed(x) ^ closed(x) >>}
                    ADJECTIVE_NT'transparent' {refined} {predicate: transparent} {creation: << transparent(x) ^ transparent(x) >>}
            SENTENCE_NT'understand "glass" as the box' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"glass"'
                UNPARSED_NOUN_NT'the box'
            RULE_NT'instead of attacking the closed emergency box' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You hit the emergency box, which shatters open."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You hit the emergency box, which shatters open."'
                            INVOCATION_NT'"You hit the emergency box, which shatters open."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You hit the emergency box, which shatters open."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You hit the emergency box, which shatters open."' {kind: text}
                    INVOCATION_LIST_NT'now the emergency box is open' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the emergency box is open'
            RULE_NT'instead of attacking the open emergency box' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "The glass has already been thoroughly broken."' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"The glass has already been thoroughly broken."'
                            INVOCATION_NT'"The glass has already been thoroughly broken."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"The glass has already been thoroughly broken."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"The glass has already been thoroughly broken."' {kind: text}
            SENTENCE_NT'the syringe is in the emergency box' {unit: 4} {classified} {interpretation of subject: infs'emergency box'}
                VERB_NT'is in' {verb 'be' 3p s act IS_TENSE +ve} {prep1: in}
                PROPER_NOUN_NT'syringe' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'syringe'} {eval: CONSTANT_NT'syringe' {kind: object} {instance: I109'syringe'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is in' {meaning: contains} {refined}
                    PROPER_NOUN_NT'emergency box' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'emergency box'} {eval: CONSTANT_NT'emergency box' {kind: object} {instance: I108'emergency box'} {enumeration: 0}}
            SENTENCE_NT'the description of the syringe is "It contains the cure for ' {unit: 4} {classified} {interpretation of subject: infs'syringe'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the syringe' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'syringe' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'syringe'} {eval: CONSTANT_NT'syringe' {kind: object} {instance: I109'syringe'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"It contains the cure for Gelato's Syndrome. You can inject ' {refined} {eval: CONSTANT_NT'"It contains the cure for Gelato's Syndrome. You can inject ' {kind: text}}
            SENTENCE_NT'the bronze gates are northeast of marciony street' {unit: 4} {classified} {interpretation of subject: infs'syringe'}
                VERB_NT'are northeast of' {verb 'be' 3p p act IS_TENSE +ve} {prep1: northeast of}
                PROPER_NOUN_NT'bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: object} {instance: I107'bronze gates'} {enumeration: 0}}
                RELATIONSHIP_NT'are northeast of' {meaning: northeast-map-r} {refined}
                    PROPER_NOUN_NT'marciony street' {refined} {refers: infs'marciony street'} {eval: CONSTANT_NT'marciony street' {kind: object} {instance: I103'marciony street'} {enumeration: 0}}
                    PROPER_NOUN_NT'northeast' {refers: infs'northeast'} {eval: CONSTANT_NT'northeast' {kind: direction} {instance: I23'northeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'the bronze gates are a door' {unit: 4} {classified} {interpretation of subject: infs'bronze gates'}
                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                PROPER_NOUN_NT'bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: object} {instance: I107'bronze gates'} {enumeration: 0}}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'the bronze gates are lockable and unlocked' {unit: 4} {classified} {interpretation of subject: infs'bronze gates'}
                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                PROPER_NOUN_NT'bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: door} {instance: I107'bronze gates'} {enumeration: 0}}
                AND_NT'and' {refined}
                    ADJECTIVE_NT'lockable' {refined} {predicate: lockable} {creation: << lockable(x) ^ lockable(x) >>}
                    ADJECTIVE_NT'unlocked' {refined} {predicate: unlocked} {creation: << unlocked(x) ^ unlocked(x) >>}
            SENTENCE_NT'the description of the bronze gates is "Erected during the m' {unit: 4} {classified} {interpretation of subject: infs'bronze gates'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: door} {instance: I107'bronze gates'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"Erected during the milk-taint revolution of 1937, they were' {refined} {eval: CONSTANT_NT'"Erected during the milk-taint revolution of 1937, they were' {kind: text}}
            SENTENCE_NT'the public library is east of main street' {unit: 4} {classified} {interpretation of subject: infs'bronze gates'}
                VERB_NT'is east of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: east of}
                PROPER_NOUN_NT'public library' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'public library'} {eval: CONSTANT_NT'public library' {kind: object} {instance: I110'public library'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is east of' {meaning: east-map-r} {refined}
                    PROPER_NOUN_NT'main street' {refined} {refers: infs'main street'} {eval: CONSTANT_NT'main street' {kind: object} {instance: I106'main street'} {enumeration: 0}}
                    PROPER_NOUN_NT'east' {refers: infs'east'} {eval: CONSTANT_NT'east' {kind: direction} {instance: I28'east'} {enumeration: 0}} {refined}
            SENTENCE_NT'"Built in the 1920s during the height of the dairy boom, the' {unit: 4} {classified}
            SENTENCE_NT'the incongruous sign is scenery in the public library' {unit: 4} {classified} {interpretation of subject: infs'public library'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'incongruous sign' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'incongruous sign'} {eval: CONSTANT_NT'incongruous sign' {kind: object} {instance: I111'incongruous sign'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'scenery in the public library' {refined} {refers: infs'object'-k} {creation: << scenery(x) ^ ('the public library' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'scenery in the public library' {term: x} {converted SN}}
            SENTENCE_NT'the description of the incongruous sign is "Eating and drink' {unit: 4} {classified} {interpretation of subject: infs'incongruous sign'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the incongruous sign' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'incongruous sign' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'incongruous sign'} {eval: CONSTANT_NT'incongruous sign' {kind: object} {instance: I111'incongruous sign'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"Eating and drinking in the library is STRICTLY PROHIBITED."' {refined} {eval: CONSTANT_NT'"Eating and drinking in the library is STRICTLY PROHIBITED."' {kind: text}}
            SENTENCE_NT'town hall is southeast of main street' {unit: 4} {classified} {interpretation of subject: infs'incongruous sign'}
                VERB_NT'is southeast of' {verb 'be' 3p s act IS_TENSE +ve} {prep1: southeast of}
                PROPER_NOUN_NT'town hall' {refined} {refers: infs'town hall'} {eval: CONSTANT_NT'town hall' {kind: object} {instance: I112'town hall'} {enumeration: 0}} {created here}
                RELATIONSHIP_NT'is southeast of' {meaning: southeast-map-r} {refined}
                    PROPER_NOUN_NT'main street' {refined} {refers: infs'main street'} {eval: CONSTANT_NT'main street' {kind: object} {instance: I106'main street'} {enumeration: 0}}
                    PROPER_NOUN_NT'southeast' {refers: infs'southeast'} {eval: CONSTANT_NT'southeast' {kind: direction} {instance: I26'southeast'} {enumeration: 0}} {refined}
            SENTENCE_NT'"Town Hall was built during the slow days of the ice-cream b' {unit: 4} {classified}
            SENTENCE_NT'the key to the city is in town hall' {unit: 4} {classified} {interpretation of subject: infs'town hall'}
                VERB_NT'is in' {verb 'be' 3p s act IS_TENSE +ve} {prep1: in}
                PROPER_NOUN_NT'key to the city' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                RELATIONSHIP_NT'is in' {meaning: contains} {refined}
                    PROPER_NOUN_NT'town hall' {refined} {refers: infs'town hall'} {eval: CONSTANT_NT'town hall' {kind: object} {instance: I112'town hall'} {enumeration: 0}}
            SENTENCE_NT'it unlocks the iron gate' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'unlocks' {verb 'unlock' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'it' {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                RELATIONSHIP_NT'unlocks' {meaning: lock-fitting-r} {refined}
                    PROPER_NOUN_NT'iron gate' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'iron gate'} {eval: CONSTANT_NT'iron gate' {kind: door} {instance: I99'iron gate'} {enumeration: 0}}
            SENTENCE_NT'it unlocks the bronze gates' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'unlocks' {verb 'unlock' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'it' {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                RELATIONSHIP_NT'unlocks' {meaning: lock-fitting-r} {refined}
                    PROPER_NOUN_NT'bronze gates' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'bronze gates'} {eval: CONSTANT_NT'bronze gates' {kind: door} {instance: I107'bronze gates'} {enumeration: 0}}
            SENTENCE_NT'the description of the key to the city is "A skeleton key."' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of the key to the city' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'key to the city' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'key to the city'} {eval: CONSTANT_NT'key to the city' {kind: object} {instance: I91'key to the city'} {enumeration: 0}}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"A skeleton key."' {refined} {eval: CONSTANT_NT'"A skeleton key."' {kind: text}}
            SENTENCE_NT'a room can be indoors or outdoors' {unit: 4} {classified}
                VERB_NT'can be' {verb 'be able to be' s/p 3p act IS_TENSE +ve} {special meaning: can-be}
                COMMON_NOUN_NT'a room' {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
                UNPARSED_NOUN_NT'indoors or outdoors'
                    AND_NT'or'
                        UNPARSED_NOUN_NT'indoors'
                        UNPARSED_NOUN_NT'outdoors'
            SENTENCE_NT'the post office , the alfred cralle pool hall , the store , ' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'are' {verb 'be' 3p p act IS_TENSE +ve}
                AND_NT',' {refined}
                    PROPER_NOUN_NT'post office' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'post office'} {eval: CONSTANT_NT'post office' {kind: object} {instance: I96'post office'} {enumeration: 0}}
                    AND_NT',' {refined}
                        PROPER_NOUN_NT'alfred cralle pool hall' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'alfred cralle pool hall'} {eval: CONSTANT_NT'alfred cralle pool hall' {kind: room} {instance: I88'alfred cralle pool hall'} {enumeration: 0}}
                        AND_NT',' {refined}
                            PROPER_NOUN_NT'store' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'movie rental store'} {eval: CONSTANT_NT'movie rental store' {kind: object} {instance: I104'movie rental store'} {enumeration: 0}}
                            AND_NT',' {refined}
                                PROPER_NOUN_NT'cold comfort' {refined} {refers: infs'cold comfort ice cream'} {eval: CONSTANT_NT'cold comfort ice cream' {kind: object} {instance: I100'cold comfort ice cream'} {enumeration: 0}}
                                AND_NT',' {refined}
                                    PROPER_NOUN_NT'town hall' {refined} {refers: infs'town hall'} {eval: CONSTANT_NT'town hall' {kind: object} {instance: I112'town hall'} {enumeration: 0}}
                                    PROPER_NOUN_NT'library' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'public library'} {eval: CONSTANT_NT'public library' {kind: object} {instance: I110'public library'} {enumeration: 0}}
                ADJECTIVE_NT'indoors' {refined} {predicate: indoors} {creation: << indoors(x) ^ indoors(x) ^ indoors(x) ^ indoors(x) ^ indoors(x) ^ indoors(x) ^ indoors(x) >>}
            SENTENCE_NT'use full-length room descriptions' {unit: 4} {classified}
                VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                UNPARSED_NOUN_NT'full-length room descriptions'
            RULE_NT'after looking in an outdoors room' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let started printing be false' {indent: 1}
                        INVOCATION_NT'let started printing be false' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'started printing' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: truth state} {required: value}
                                UNKNOWN_NT'started printing'
                            RVALUE_CONTEXT_NT'false' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                CONSTANT_NT'false' {kind: truth state} {explicit literal} {number: 0}
                    INVOCATION_LIST_NT'now every proximate door is not mentioned' {indent: 1} {control structure: NOW}
                        CONDITION_CONTEXT_NT'every proximate door is not mentioned'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if an indoors room is adjacent' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if an indoors room is adjacent' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'an indoors room is adjacent' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'an indoors room is adjacent' {proposition: << Exists x : kind=room(x) ^ indoors(x) ^ adjacent(x) >>} {term: x}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let started printing be true' {indent: 2}
                                INVOCATION_NT'let started printing be true' {phrase invoked: call}
                                    LVALUE_LOCAL_CONTEXT_NT'started printing' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                        LOCAL_VARIABLE_NT'started printing' {local: LV"started printing"-truth state truth state}
                                    RVALUE_CONTEXT_NT'true' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        CONSTANT_NT'true' {kind: truth state} {explicit literal} {number: 1}
                            CODE_BLOCK_NT'say "From here you can head into [the list of adjacent indoo' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"From here you can head into "'
                                    INVOCATION_NT'"From here you can head into "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"From here you can head into "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"From here you can head into "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the list of adjacent indoors rooms'
                                    INVOCATION_NT'the list of adjacent indoors rooms' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'adjacent indoors rooms' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                            CONSTANT_NT'adjacent indoors rooms' {kind: description of rooms} {proposition: << kind=room(x) ^ adjacent(x) ^ indoors(x) >>}
                                INVOCATION_LIST_SAY_NT'if a proximate door is not mentioned'
                                    INVOCATION_NT'if a proximate door is not mentioned' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'a proximate door is not mentioned' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'a proximate door is not mentioned' {proposition: << Exists x : kind=door(x) ^ proximate(x) ^ NOT< mentioned(x) NOT> >>} {term: x}
                                INVOCATION_LIST_SAY_NT'", or go through "'
                                    INVOCATION_NT'", or go through "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'", or go through "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'", or go through "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the list of proximate doors which are not mentioned'
                                    INVOCATION_NT'the list of proximate doors which are not mentioned' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'proximate doors which are not mentioned' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                            CONSTANT_NT'proximate doors which are not mentioned' {kind: description of doors} {proposition: << kind=door(x) ^ proximate(x) ^ NOT< mentioned(x) NOT> >>}
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if' {phrase invoked: call}
                                INVOCATION_LIST_SAY_NT'". "' {suppress_newlines}
                                    INVOCATION_NT'". "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'". "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'". "' {kind: text}
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on' {phrase invoked: call}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if an outdoors room is adjacent' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if an outdoors room is adjacent' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'an outdoors room is adjacent' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'an outdoors room is adjacent' {proposition: << Exists x : kind=room(x) ^ outdoors(x) ^ adjacent(x) >>} {term: x}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You could[if started printing is true] also[end if] go ' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"You could"'
                                    INVOCATION_NT'"You could"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"You could"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"You could"' {kind: text}
                                INVOCATION_LIST_SAY_NT'if started printing is true'
                                    INVOCATION_NT'if started printing is true' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'started printing is true' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'started printing is true' {proposition: << ('started printing' == 'true') >>} {term: 'started printing'}
                                INVOCATION_LIST_SAY_NT'" also"'
                                    INVOCATION_NT'" also"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" also"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" also"' {kind: text}
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if' {phrase invoked: call}
                                INVOCATION_LIST_SAY_NT'" go "'
                                    INVOCATION_NT'" go "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" go "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" go "' {kind: text}
                            INVOCATION_LIST_NT'let count be the number of adjacent outdoors rooms' {indent: 2}
                                INVOCATION_NT'let count be the number of adjacent outdoors rooms' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'count' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                        UNKNOWN_NT'count'
                                    RVALUE_CONTEXT_NT'number of adjacent outdoors rooms' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PHRASE_TO_DECIDE_VALUE_NT'number of adjacent outdoors rooms'
                                            INVOCATION_LIST_NT'number of adjacent outdoors rooms'
                                                INVOCATION_NT'number of adjacent outdoors rooms' {phrase invoked: call} {resulting: number}
                                                    RVALUE_CONTEXT_NT'adjacent outdoors rooms' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'description of values'} {required: description of values}
                                                        CONSTANT_NT'adjacent outdoors rooms' {kind: description of rooms} {proposition: << kind=room(x) ^ adjacent(x) ^ outdoors(x) >>}
                            INVOCATION_LIST_NT'let index be count' {indent: 2}
                                INVOCATION_NT'let index be count' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                        UNKNOWN_NT'index'
                                    RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        LOCAL_VARIABLE_NT'count' {local: LV<unallocated> object}
                            CODE_BLOCK_NT {control structure: RPT}
                                INVOCATION_LIST_NT'repeat with next room running through adjacent outdoors room' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'repeat with next room running through adjacent outdoors room' {phrase invoked: call} {kind variable declarations: K=room}
                                        NEW_LOCAL_CONTEXT_NT'next room' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: K}
                                            UNKNOWN_NT'next room'
                                        RVALUE_CONTEXT_NT'adjacent outdoors rooms' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                            CONSTANT_NT'adjacent outdoors rooms' {kind: description of rooms} {proposition: << kind=room(x) ^ adjacent(x) ^ outdoors(x) >>}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let way be the best route from the location to the next room' {indent: 3}
                                        INVOCATION_NT'let way be the best route from the location to the next room' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'way' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: object} {required: value}
                                                UNKNOWN_NT'way'
                                            RVALUE_CONTEXT_NT'best route from the location to the next room' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location to the next room'
                                                    INVOCATION_LIST_NT'best route from the location to the next room'
                                                        INVOCATION_NT'best route from the location to the next room' {phrase invoked: call} {resulting: object}
                                                            RVALUE_CONTEXT_NT'location' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                                                            RVALUE_CONTEXT_NT'next room' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                                LOCAL_VARIABLE_NT'next room' {local: LV<unallocated> room}
                                    CODE_BLOCK_NT'say "[way] to [the next room]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'way'
                                            INVOCATION_NT'way' {phrase invoked: call} {kind variable declarations: K=object}
                                                RVALUE_CONTEXT_NT'way' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    LOCAL_VARIABLE_NT'way' {local: LV<unallocated> object}
                                        INVOCATION_LIST_SAY_NT'" to "'
                                            INVOCATION_NT'" to "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" to "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" to "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'the next room'
                                            INVOCATION_NT'the next room' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'next room' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    LOCAL_VARIABLE_NT'next room' {local: LV<unallocated> room}
                                    INVOCATION_LIST_NT'decrement index' {indent: 3}
                                        INVOCATION_NT'decrement index' {phrase invoked: call}
                                            LVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'equation'}
                                                LOCAL_VARIABLE_NT'index' {local: LV<unallocated> number}
                            INVOCATION_LIST_NT'make delimiter index of count , continuing' {indent: 2}
                                INVOCATION_NT'make delimiter index of count' {phrase invoked: call} {phrase options invoked: continuing}
                                    RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'index' {local: LV<unallocated> number}
                                    RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'count' {local: LV<unallocated> object}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if a proximate door is not mentioned' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if a proximate door is not mentioned' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'a proximate door is not mentioned' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'a proximate door is not mentioned' {proposition: << Exists x : kind=door(x) ^ proximate(x) ^ NOT< mentioned(x) NOT> >>} {term: x}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let started printing be true' {indent: 2}
                                INVOCATION_NT'let started printing be true' {phrase invoked: call}
                                    LVALUE_LOCAL_CONTEXT_NT'started printing' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                        LOCAL_VARIABLE_NT'started printing' {local: LV"started printing"-truth state truth state}
                                    RVALUE_CONTEXT_NT'true' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        CONSTANT_NT'true' {kind: truth state} {explicit literal} {number: 1}
                            CODE_BLOCK_NT'say "[if started printing is true]Also available[otherwise]Y' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'if started printing is true'
                                    INVOCATION_NT'if started printing is true' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'started printing is true' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'started printing is true' {proposition: << ('started printing' == 'true') >>} {term: 'started printing'}
                                INVOCATION_LIST_SAY_NT'"Also available"'
                                    INVOCATION_NT'"Also available"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"Also available"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"Also available"' {kind: text}
                                INVOCATION_LIST_SAY_NT'otherwise'
                                    INVOCATION_NT'otherwise' {phrase invoked: call}
                                INVOCATION_LIST_SAY_NT'"Your available exits"'
                                    INVOCATION_NT'"Your available exits"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"Your available exits"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"Your available exits"' {kind: text}
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if' {phrase invoked: call}
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" "' {kind: text}
                                INVOCATION_LIST_SAY_NT'is-are the list of proximate doors which are not mentioned'
                                    INVOCATION_NT'is-are the list of proximate doors which are not mentioned' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'proximate doors which are not mentioned' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                            CONSTANT_NT'proximate doors which are not mentioned' {kind: description of doors} {proposition: << kind=door(x) ^ proximate(x) ^ NOT< mentioned(x) NOT> >>}
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"."' {kind: text}
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if started printing is true' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if started printing is true' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'started printing is true' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'started printing is true' {proposition: << ('started printing' == 'true') >>} {term: 'started printing'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say paragraph break' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break' {phrase invoked: call}
            RULE_NT'definition' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the front side of it is the location' {colon_block_command}
                            INVOCATION_NT'if the front side of it is the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'front side of it is the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'front side of it is the location' {proposition: << ('front side of it' == 'the location') >>} {term: 'front side of it'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'yes' {phrase invoked: call}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the back side of it is the location' {colon_block_command}
                            INVOCATION_NT'if the back side of it is the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'back side of it is the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'back side of it is the location' {proposition: << ('back side of it' == 'the location') >>} {term: 'back side of it'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'yes' {phrase invoked: call}
                    INVOCATION_LIST_NT'no'
                        INVOCATION_NT'no' {phrase invoked: call}
            RULE_NT'before exiting when the player is in an indoors room' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the player can see a door ( called nearest exit )' {indent: 1} {colon_block_command}
                            INVOCATION_NT'if the player can see a door ( called nearest exit )' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player can see a door ( called nearest exit )' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'player can see a door ( called nearest exit )' {proposition: << Exists x : kind=door(x) ^ called='nearest exit':door(x) ^ can-see('player', x) >>} {term: 'player'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try entering the nearest exit' {results_from_splitting} {indent: 2}
                                INVOCATION_NT'try entering the nearest exit' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'entering the nearest exit' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                        CONSTANT_NT'entering the nearest exit' {kind: action} {action pattern: <action: entering /  noun: LOCAL_VARIABLE_NT'the nearest exit' {local: LV"nearest exit"-door door}>}
                            CODE_BLOCK_NT {control structure: INS}
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with way running through directions' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with way running through directions' {phrase invoked: call} {kind variable declarations: K=direction}
                                NEW_LOCAL_CONTEXT_NT'way' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: direction} {required: K}
                                    UNKNOWN_NT'way'
                                RVALUE_CONTEXT_NT'directions' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'directions' {kind: description of directions} {proposition: << kind=direction(x) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let next room be the room way from the location' {indent: 2}
                                INVOCATION_NT'let next room be the room way from the location' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'next room' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                        UNKNOWN_NT'next room'
                                    RVALUE_CONTEXT_NT'room way from the location' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PHRASE_TO_DECIDE_VALUE_NT'room way from the location'
                                            INVOCATION_LIST_NT'room way from the location'
                                                INVOCATION_NT'room way from the location' {phrase invoked: call} {resulting: room} {unproven}
                                                    RVALUE_CONTEXT_NT'way' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                        LOCAL_VARIABLE_NT'way' {local: LV<unallocated> direction}
                                                    RVALUE_CONTEXT_NT'location' {token check to do: TEST_VALUE_NT'room'} {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                        NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the next room is a room' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if the next room is a room' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'next room is a room' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'next room is a room' {proposition: << kind=room('next room') >>} {term: 'next room'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'try going way' {results_from_splitting} {indent: 3}
                                        INVOCATION_NT'try going way' {phrase invoked: call}
                                            RVALUE_CONTEXT_NT'going way' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                                CONSTANT_NT'going way' {kind: action} {action pattern: <action: going /  noun: LOCAL_VARIABLE_NT'way' {local: LV<unallocated> direction}>}
                                    CODE_BLOCK_NT {control structure: INS}
            SENTENCE_NT'blank is a room' {unit: 4} {classified} {interpretation of subject: infs'key to the city'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'blank' {refined} {refers: infs'blank'} {eval: CONSTANT_NT'blank' {kind: object} {instance: I113'blank'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'room' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'room'} {creation: << kind=room(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'the destination of the player is blank' {unit: 4} {classified} {interpretation of subject: infs'blank'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'destination of the player' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'player' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'yourself'} {eval: CONSTANT_NT'yourself' {kind: person} {instance: I34'yourself'} {enumeration: 0}} {turned already}
                    PROPER_NOUN_NT'destination' {refined} {eval: CONSTANT_NT {kind: rooms valued property} {property: 'destination'=room}}
                PROPER_NOUN_NT'blank' {refined} {refers: infs'blank'} {eval: CONSTANT_NT'blank' {kind: room} {instance: I113'blank'} {enumeration: 0}}
            SENTENCE_NT'blank contains 15 ice cream cones' {unit: 4} {classified} {interpretation of subject: infs'blank'}
                VERB_NT'contains' {verb 'contain' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'blank' {refined} {refers: infs'blank'} {eval: CONSTANT_NT'blank' {kind: room} {instance: I113'blank'} {enumeration: 0}}
                RELATIONSHIP_NT'contains' {meaning: is-in} {refined}
                    AND_NT
                        PROPER_NOUN_NT {refers: infs410} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I114} {enumeration: 0}} {created here}
                        AND_NT
                            PROPER_NOUN_NT {refers: infs411} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I115} {enumeration: 0}} {created here}
                            AND_NT
                                PROPER_NOUN_NT {refers: infs412} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I116} {enumeration: 0}} {created here}
                                AND_NT
                                    PROPER_NOUN_NT {refers: infs413} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I117} {enumeration: 0}} {created here}
                                    AND_NT
                                        PROPER_NOUN_NT {refers: infs414} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I118} {enumeration: 0}} {created here}
                                        AND_NT
                                            PROPER_NOUN_NT {refers: infs415} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I119} {enumeration: 0}} {created here}
                                            AND_NT
                                                PROPER_NOUN_NT {refers: infs416} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I120} {enumeration: 0}} {created here}
                                                AND_NT
                                                    PROPER_NOUN_NT {refers: infs417} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I121} {enumeration: 0}} {created here}
                                                    AND_NT
                                                        PROPER_NOUN_NT {refers: infs418} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I122} {enumeration: 0}} {created here}
                                                        AND_NT
                                                            PROPER_NOUN_NT {refers: infs419} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I123} {enumeration: 0}} {created here}
                                                            AND_NT
                                                                PROPER_NOUN_NT {refers: infs420} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I124} {enumeration: 0}} {created here}
                                                                AND_NT
                                                                    PROPER_NOUN_NT {refers: infs421} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I125} {enumeration: 0}} {created here}
                                                                    AND_NT
                                                                        PROPER_NOUN_NT {refers: infs422} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I126} {enumeration: 0}} {created here}
                                                                        AND_NT
                                                                            PROPER_NOUN_NT {refers: infs423} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I127} {enumeration: 0}} {created here}
                                                                            PROPER_NOUN_NT {refers: infs424} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I128} {enumeration: 0}} {created here}
        HEADING_NT'section 4 - other players' {heading 5} {under: H5'section 4 - other players'} {unit: 4}
            SENTENCE_NT'vanessa is a woman in cold comfort' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'vanessa' {refined} {refers: infs'vanessa'} {eval: CONSTANT_NT'vanessa' {kind: object} {instance: I129'vanessa'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'woman in cold comfort' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) ^ ('cold comfort' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'woman in cold comfort' {term: x} {converted SN}}
            SENTENCE_NT'vanessa owns cold comfort' {unit: 4} {classified} {interpretation of subject: infs'vanessa'}
                VERB_NT'owns' {verb 'own' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'vanessa' {refined} {refers: infs'vanessa'} {eval: CONSTANT_NT'vanessa' {kind: woman} {instance: I129'vanessa'} {enumeration: 0}}
                RELATIONSHIP_NT'owns' {meaning: ownership-r} {refined}
                    PROPER_NOUN_NT'cold comfort' {refined} {refers: infs'cold comfort ice cream'} {eval: CONSTANT_NT'cold comfort ice cream' {kind: object} {instance: I100'cold comfort ice cream'} {enumeration: 0}}
            SENTENCE_NT'francine is a woman in the public library' {unit: 4} {classified} {interpretation of subject: infs'vanessa'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'francine' {refined} {refers: infs'francine'} {eval: CONSTANT_NT'francine' {kind: object} {instance: I130'francine'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'woman in the public library' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) ^ ('the public library' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'woman in the public library' {term: x} {converted SN}}
            SENTENCE_NT'francine carries a book called phlox for phyllis' {unit: 4} {classified} {interpretation of subject: infs'francine'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'francine' {refined} {refers: infs'francine'} {eval: CONSTANT_NT'francine' {kind: woman} {instance: I130'francine'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'phlox for phyllis' {refined} {refers: infs'phlox for phyllis'} {eval: CONSTANT_NT'phlox for phyllis' {kind: object} {instance: I131'phlox for phyllis'} {enumeration: 0}} {created here}
            SENTENCE_NT'francine carries a stamped envelope called a pink stamped en' {unit: 4} {classified} {interpretation of subject: infs'francine'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'francine' {refined} {refers: infs'francine'} {eval: CONSTANT_NT'francine' {kind: woman} {instance: I130'francine'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'pink stamped envelope' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'pink stamped envelope'} {eval: CONSTANT_NT'pink stamped envelope' {kind: object} {instance: I132'pink stamped envelope'} {enumeration: 0}} {created here}
            SENTENCE_NT'lewis is a man in the alfred cralle pool hall' {unit: 4} {classified} {interpretation of subject: infs'francine'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: object} {instance: I133'lewis'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in the alfred cralle pool hall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('the alfred cralle pool hall' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in the alfred cralle pool hall' {term: x} {converted SN}}
            SENTENCE_NT'lewis carries 3 stamped envelopes' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: man} {instance: I133'lewis'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    AND_NT
                        PROPER_NOUN_NT {refers: infs430} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I134} {enumeration: 0}} {created here}
                        AND_NT
                            PROPER_NOUN_NT {refers: infs431} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I135} {enumeration: 0}} {created here}
                            PROPER_NOUN_NT {refers: infs432} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I136} {enumeration: 0}} {created here}
            SENTENCE_NT'lewis carries a book called idiot's guide to dating' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: man} {instance: I133'lewis'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'idiot's guide to dating' {refined} {refers: infs'idiot's guide to dating'} {eval: CONSTANT_NT'idiot's guide to dating' {kind: object} {instance: I137'idiot's guide to dating'} {enumeration: 0}} {created here}
            SENTENCE_NT'lewis carries a book called how to meet women' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: man} {instance: I133'lewis'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'how to meet women' {refined} {refers: infs'how to meet women'} {eval: CONSTANT_NT'how to meet women' {kind: object} {instance: I138'how to meet women'} {enumeration: 0}} {created here}
            SENTENCE_NT'lewis carries a book called seduction in three easy steps' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: man} {instance: I133'lewis'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'seduction in three easy steps' {refined} {refers: infs'seduction in three easy steps'} {eval: CONSTANT_NT'seduction in three easy steps' {kind: object} {instance: I139'seduction in three easy steps'} {enumeration: 0}} {created here}
            SENTENCE_NT'lewis carries a dvd called sleepless in seattle' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'lewis' {refined} {refers: infs'lewis'} {eval: CONSTANT_NT'lewis' {kind: man} {instance: I133'lewis'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'sleepless in seattle' {refined} {refers: infs'sleepless in seattle'} {eval: CONSTANT_NT'sleepless in seattle' {kind: object} {instance: I140'sleepless in seattle'} {enumeration: 0}} {created here}
            SENTENCE_NT'gene is a man in nancy johnson memorial square' {unit: 4} {classified} {interpretation of subject: infs'lewis'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'gene' {refined} {refers: infs'gene'} {eval: CONSTANT_NT'gene' {kind: object} {instance: I141'gene'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in nancy johnson memorial square' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('nancy johnson memorial square' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in nancy johnson memorial square' {term: x} {converted SN}}
            SENTENCE_NT'gene carries a stamped envelope' {unit: 4} {classified} {interpretation of subject: infs'gene'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'gene' {refined} {refers: infs'gene'} {eval: CONSTANT_NT'gene' {kind: man} {instance: I141'gene'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs438} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I142} {enumeration: 0}} {created here}
            SENTENCE_NT'gene carries a dvd called casablanca' {unit: 4} {classified} {interpretation of subject: infs'gene'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'gene' {refined} {refers: infs'gene'} {eval: CONSTANT_NT'gene' {kind: man} {instance: I141'gene'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'casablanca' {refined} {refers: infs'casablanca'} {eval: CONSTANT_NT'casablanca' {kind: object} {instance: I143'casablanca'} {enumeration: 0}} {created here}
            SENTENCE_NT'gene carries a coupon' {unit: 4} {classified} {interpretation of subject: infs'gene'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'gene' {refined} {refers: infs'gene'} {eval: CONSTANT_NT'gene' {kind: man} {instance: I141'gene'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs440} {eval: CONSTANT_NT {kind: coupon} {instance: I144} {enumeration: 0}} {created here}
            SENTENCE_NT'rhoda is a woman in marciony street' {unit: 4} {classified} {interpretation of subject: infs'gene'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'rhoda' {refined} {refers: infs'rhoda'} {eval: CONSTANT_NT'rhoda' {kind: object} {instance: I145'rhoda'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'woman in marciony street' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) ^ ('marciony street' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'woman in marciony street' {term: x} {converted SN}}
            SENTENCE_NT'rhoda carries a book called the marciony street murders' {unit: 4} {classified} {interpretation of subject: infs'rhoda'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'rhoda' {refined} {refers: infs'rhoda'} {eval: CONSTANT_NT'rhoda' {kind: woman} {instance: I145'rhoda'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'the marciony street murders' {refined} {refers: infs'the marciony street murders'} {eval: CONSTANT_NT'the marciony street murders' {kind: object} {instance: I146'the marciony street murders'} {enumeration: 0}} {created here}
            SENTENCE_NT'rhoda carries a dvd called unsolved serial killings xviii' {unit: 4} {classified} {interpretation of subject: infs'rhoda'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'rhoda' {refined} {refers: infs'rhoda'} {eval: CONSTANT_NT'rhoda' {kind: woman} {instance: I145'rhoda'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'unsolved serial killings xviii' {refined} {refers: infs'unsolved serial killings xviii'} {eval: CONSTANT_NT'unsolved serial killings xviii' {kind: object} {instance: I147'unsolved serial killings xviii'} {enumeration: 0}} {created here}
            SENTENCE_NT'rhoda carries a stamped envelope called a squashy package' {unit: 4} {classified} {interpretation of subject: infs'rhoda'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'rhoda' {refined} {refers: infs'rhoda'} {eval: CONSTANT_NT'rhoda' {kind: woman} {instance: I145'rhoda'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'squashy package' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'squashy package'} {eval: CONSTANT_NT'squashy package' {kind: object} {instance: I148'squashy package'} {enumeration: 0}} {created here}
            SENTENCE_NT'martin is a man in main street' {unit: 4} {classified} {interpretation of subject: infs'rhoda'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'martin' {refined} {refers: infs'martin'} {eval: CONSTANT_NT'martin' {kind: object} {instance: I149'martin'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in main street' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('main street' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in main street' {term: x} {converted SN}}
            SENTENCE_NT'martin carries a dvd called the lifecycle of the south sea t' {unit: 4} {classified} {interpretation of subject: infs'martin'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'martin' {refined} {refers: infs'martin'} {eval: CONSTANT_NT'martin' {kind: man} {instance: I149'martin'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'the lifecycle of the south sea tortoise' {refined} {refers: infs'the lifecycle of the south sea tortoise'} {eval: CONSTANT_NT'the lifecycle of the south sea tortoise' {kind: object} {instance: I150'the lifecycle of the south sea tortoise'} {enumeration: 0}} {created here}
            SENTENCE_NT'martin carries a coupon' {unit: 4} {classified} {interpretation of subject: infs'martin'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'martin' {refined} {refers: infs'martin'} {eval: CONSTANT_NT'martin' {kind: man} {instance: I149'martin'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs447} {eval: CONSTANT_NT {kind: coupon} {instance: I151} {enumeration: 0}} {created here}
            SENTENCE_NT'antony is a man in movie rental' {unit: 4} {classified} {interpretation of subject: infs'martin'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'antony' {refined} {refers: infs'antony'} {eval: CONSTANT_NT'antony' {kind: object} {instance: I152'antony'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in movie rental' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('movie rental' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in movie rental' {term: x} {converted SN}}
            SENTENCE_NT'antony carries a coupon' {unit: 4} {classified} {interpretation of subject: infs'antony'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'antony' {refined} {refers: infs'antony'} {eval: CONSTANT_NT'antony' {kind: man} {instance: I152'antony'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs449} {eval: CONSTANT_NT {kind: coupon} {instance: I153} {enumeration: 0}} {created here}
            SENTENCE_NT'antony carries a stamped envelope called a postcard' {unit: 4} {classified} {interpretation of subject: infs'antony'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'antony' {refined} {refers: infs'antony'} {eval: CONSTANT_NT'antony' {kind: man} {instance: I152'antony'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'postcard' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'postcard'} {eval: CONSTANT_NT'postcard' {kind: object} {instance: I154'postcard'} {enumeration: 0}} {created here}
            SENTENCE_NT'shelby is a man in the town hall' {unit: 4} {classified} {interpretation of subject: infs'antony'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shelby' {refined} {refers: infs'shelby'} {eval: CONSTANT_NT'shelby' {kind: object} {instance: I155'shelby'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in the town hall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('the town hall' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in the town hall' {term: x} {converted SN}}
            SENTENCE_NT'shelby carries a dvd called conducting an orderly meeting' {unit: 4} {classified} {interpretation of subject: infs'shelby'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shelby' {refined} {refers: infs'shelby'} {eval: CONSTANT_NT'shelby' {kind: man} {instance: I155'shelby'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT'conducting an orderly meeting' {refined} {refers: infs'conducting an orderly meeting'} {eval: CONSTANT_NT'conducting an orderly meeting' {kind: object} {instance: I156'conducting an orderly meeting'} {enumeration: 0}} {created here}
            SENTENCE_NT'shelby carries 5 stamped envelopes' {unit: 4} {classified} {interpretation of subject: infs'shelby'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shelby' {refined} {refers: infs'shelby'} {eval: CONSTANT_NT'shelby' {kind: man} {instance: I155'shelby'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    AND_NT
                        PROPER_NOUN_NT {refers: infs453} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I157} {enumeration: 0}} {created here}
                        AND_NT
                            PROPER_NOUN_NT {refers: infs454} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I158} {enumeration: 0}} {created here}
                            AND_NT
                                PROPER_NOUN_NT {refers: infs455} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I159} {enumeration: 0}} {created here}
                                AND_NT
                                    PROPER_NOUN_NT {refers: infs456} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I160} {enumeration: 0}} {created here}
                                    PROPER_NOUN_NT {refers: infs457} {eval: CONSTANT_NT {kind: stamped envelope} {instance: I161} {enumeration: 0}} {created here}
            SENTENCE_NT'shelby carries an ice cream cone' {unit: 4} {classified} {interpretation of subject: infs'shelby'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shelby' {refined} {refers: infs'shelby'} {eval: CONSTANT_NT'shelby' {kind: man} {instance: I155'shelby'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs458} {eval: CONSTANT_NT {kind: ice cream cone} {instance: I162} {enumeration: 0}} {created here}
            SENTENCE_NT'shelby carries a coupon' {unit: 4} {classified} {interpretation of subject: infs'shelby'}
                VERB_NT'carries' {verb 'carry' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'shelby' {refined} {refers: infs'shelby'} {eval: CONSTANT_NT'shelby' {kind: man} {instance: I155'shelby'} {enumeration: 0}}
                RELATIONSHIP_NT'carries' {meaning: is-carried-by} {refined}
                    PROPER_NOUN_NT {refers: infs459} {eval: CONSTANT_NT {kind: coupon} {instance: I163} {enumeration: 0}} {created here}
            SENTENCE_NT'christopher is a man in the library' {unit: 4} {classified} {interpretation of subject: infs'shelby'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'christopher' {refined} {refers: infs'christopher'} {eval: CONSTANT_NT'christopher' {kind: object} {instance: I164'christopher'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in the library' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('the library' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in the library' {term: x} {converted SN}}
            SENTENCE_NT'christopher owns the library' {unit: 4} {classified} {interpretation of subject: infs'christopher'}
                VERB_NT'owns' {verb 'own' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'christopher' {refined} {refers: infs'christopher'} {eval: CONSTANT_NT'christopher' {kind: man} {instance: I164'christopher'} {enumeration: 0}}
                RELATIONSHIP_NT'owns' {meaning: ownership-r} {refined}
                    PROPER_NOUN_NT'library' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'public library'} {eval: CONSTANT_NT'public library' {kind: object} {instance: I110'public library'} {enumeration: 0}}
            SENTENCE_NT'linnea is a woman in the alfred cralle pool hall' {unit: 4} {classified} {interpretation of subject: infs'christopher'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'linnea' {refined} {refers: infs'linnea'} {eval: CONSTANT_NT'linnea' {kind: object} {instance: I165'linnea'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'woman in the alfred cralle pool hall' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) ^ ('the alfred cralle pool hall' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'woman in the alfred cralle pool hall' {term: x} {converted SN}}
            SENTENCE_NT'linnea owns the alfred cralle pool hall' {unit: 4} {classified} {interpretation of subject: infs'linnea'}
                VERB_NT'owns' {verb 'own' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'linnea' {refined} {refers: infs'linnea'} {eval: CONSTANT_NT'linnea' {kind: woman} {instance: I165'linnea'} {enumeration: 0}}
                RELATIONSHIP_NT'owns' {meaning: ownership-r} {refined}
                    PROPER_NOUN_NT'alfred cralle pool hall' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'alfred cralle pool hall'} {eval: CONSTANT_NT'alfred cralle pool hall' {kind: room} {instance: I88'alfred cralle pool hall'} {enumeration: 0}}
            SENTENCE_NT'ned is a man in the movie rental store' {unit: 4} {classified} {interpretation of subject: infs'linnea'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'ned' {refined} {refers: infs'ned'} {eval: CONSTANT_NT'ned' {kind: object} {instance: I166'ned'} {enumeration: 0}} {created here}
                COMMON_NOUN_NT'man in the movie rental store' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) ^ ('the movie rental store' == <ContainerOf(*1) : x>) >>} {eval: TEST_VALUE_NT'man in the movie rental store' {term: x} {converted SN}}
            SENTENCE_NT'ned owns the movie rental' {unit: 4} {classified} {interpretation of subject: infs'ned'}
                VERB_NT'owns' {verb 'own' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'ned' {refined} {refers: infs'ned'} {eval: CONSTANT_NT'ned' {kind: man} {instance: I166'ned'} {enumeration: 0}}
                RELATIONSHIP_NT'owns' {meaning: ownership-r} {refined}
                    PROPER_NOUN_NT'movie rental' {definite 'the' n/m/f s/p nom/acc} {refined} {refers: infs'movie rental store'} {eval: CONSTANT_NT'movie rental store' {kind: object} {instance: I104'movie rental store'} {enumeration: 0}}
            RULE_NT'after printing the name of someone ( called target ) while l' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the target owns the location of the target' {colon_block_command}
                            INVOCATION_NT'if the target owns the location of the target' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'target owns the location of the target' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'target owns the location of the target' {proposition: << ('target' == <(QUOTED_INAME_0_0000005d(*1)) : 'the location of the target'>) >>} {term: 'target'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say " (the owner)"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'" (the owner)"'
                                    INVOCATION_NT'" (the owner)"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" (the owner)"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" (the owner)"' {kind: text}
            SENTENCE_NT'the description of a person is usually "[The noun] [if the n' {unit: 4} {classified} {interpretation of subject: infs'ned'}
                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'description of a person' {definite 'the' n/m/f s/p nom/acc} {refined}
                    COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                    PROPER_NOUN_NT'description' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'description'=text}}
                PROPER_NOUN_NT'"[The noun] [if the noun is clean]looks healthy[otherwise]is' {refined} {eval: CONSTANT_NT'"[The noun] [if the noun is clean]looks healthy[otherwise]is' {kind: text}}
            RULE_NT'after examining another person who is carrying something' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[if the noun is female]She[otherwise]He[end if] is carr' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'if the noun is female'
                            INVOCATION_NT'if the noun is female' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'noun is female' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'noun is female' {proposition: << female('noun') >>} {term: 'noun'}
                        INVOCATION_LIST_SAY_NT'"She"'
                            INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"She"' {kind: text}
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'"He"'
                            INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"He"' {kind: text}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'" is carrying "'
                            INVOCATION_NT'" is carrying "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" is carrying "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" is carrying "' {kind: text}
                        INVOCATION_LIST_SAY_NT'a list of things carried by the noun'
                            INVOCATION_NT'a list of things carried by the noun' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'things carried by the noun' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                    CONSTANT_NT'things carried by the noun' {kind: description of things} {proposition: << kind=thing(x) ^ ('the noun' == <CarrierOf(*1) : x>) >>}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
            RULE_NT'when play begins' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let patient zero be a random other person'
                        INVOCATION_NT'let patient zero be a random other person' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'patient zero' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: value}
                                UNKNOWN_NT'patient zero'
                            RVALUE_CONTEXT_NT'a random other person' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'a random other person'
                                    INVOCATION_LIST_NT'a random other person'
                                        INVOCATION_NT'a random other person' {phrase invoked: call} {resulting: person} {kind variable declarations: K=person}
                                            RVALUE_CONTEXT_NT'other person' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                CONSTANT_NT'other person' {kind: description of people} {proposition: << kind=person(x) ^ other(x) >>}
                    INVOCATION_LIST_NT'now patient zero is infected' {control structure: NOW}
                        CONDITION_CONTEXT_NT'patient zero is infected'
        HEADING_NT'section 5 - conversation' {heading 5} {under: H5'section 5 - conversation'} {unit: 4}
            SENTENCE_NT'a person has a table name called conversation' {unit: 4} {classified}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT {refined}
                    PROPERTYCALLED_NT'called'
                        UNPARSED_NOUN_NT'table name' {indefinite 'a' n/m/f nom/acc s}
                        UNPARSED_NOUN_NT'conversation'
            RULE_NT'instead of asking someone about something' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the source be the conversation of the noun' {indent: 1}
                        INVOCATION_NT'let the source be the conversation of the noun' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'source' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: table name} {required: value}
                                UNKNOWN_NT'source'
                            RVALUE_CONTEXT_NT'conversation of the noun' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PROPERTY_VALUE_NT'conversation of the noun'
                                    CONSTANT_NT {kind: nothing valued property} {property: 'conversation'=table name}{meaning: {conversation = PROPERTY_MC}}
                                    NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if topic understood is a topic listed in source' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if topic understood is a topic listed in source' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'topic understood is a topic listed in source' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'topic understood is a topic listed in source' {proposition: << kind=snippet('topic understood') ^ listed_in('topic understood', 'source') >>} {term: 'topic understood'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if there is a turn stamp entry' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if there is a turn stamp entry' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'there is a turn stamp entry' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_VALUE_NT'there is a turn stamp entry'
                                                PHRASE_TO_DECIDE_VALUE_NT'there is a turn stamp entry'
                                                    INVOCATION_LIST_NT'there is a turn stamp entry'
                                                        INVOCATION_NT'there is a turn stamp entry' {phrase invoked: call} {resulting: truth state}
                                                            LVALUE_TR_CONTEXT_NT'a turn stamp entry' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                TABLE_ENTRY_NT'a turn stamp entry'
                                                                    CONSTANT_NT {kind: nothing valued table column} {table column: 'turn stamp'}{meaning: {turn stamp = TABLE_COLUMN_MC}}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You have already heard that [summary entry]."' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"You have already heard that "'
                                            INVOCATION_NT'"You have already heard that "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"You have already heard that "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"You have already heard that "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'summary entry'
                                            INVOCATION_NT'summary entry' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'summary entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    TABLE_ENTRY_NT'summary entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'summary'}{meaning: {summary = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'"."'
                                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"."' {kind: text}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                    INVOCATION_LIST_NT'now turn stamp entry is the turn count' {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'turn stamp entry is the turn count'
                                    INVOCATION_LIST_NT'now the character entry is the noun' {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'the character entry is the noun'
                                    CODE_BLOCK_NT'say "[reply entry][paragraph break]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'reply entry' {suppress_newlines}
                                            INVOCATION_NT'reply entry' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'reply entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    TABLE_ENTRY_NT'reply entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'reply'}{meaning: {reply = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break' {phrase invoked: call}
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            CODE_BLOCK_NT'say "[The noun] stares at you blankly."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" stares at you blankly."'
                                    INVOCATION_NT'" stares at you blankly."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" stares at you blankly."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" stares at you blankly."' {kind: text}
            RULE_NT'instead of telling someone about something' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try asking the noun about it'
                        INVOCATION_NT'try asking the noun about it' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'asking the noun about it' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'action'} {required: action}
                                CONSTANT_NT'asking the noun about it' {kind: action} {action pattern: <action: asking it about /  noun: NONLOCAL_VARIABLE_NT'the noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}} second: CONSTANT_NT'it' {kind: topic}>}
            SENTENCE_NT'understand "recap" or "recall" or "review" as recalling conv' {unit: 4} {classified}
                VERB_NT'understand' {verb 'understand' 3p p act IS_TENSE +ve} {prep2: as} {special meaning: understand-as}
                UNPARSED_NOUN_NT'"recap" or "recall" or "review"'
                UNPARSED_NOUN_NT'recalling conversations'
            SENTENCE_NT'recalling conversations is an action applying to nothing' {unit: 4} {classified}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve} {special meaning: new-action}
                UNPARSED_NOUN_NT'recalling conversations'
                UNPARSED_NOUN_NT'applying to nothing'
            RULE_NT'carry out recalling conversations' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with speaker running through other people' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with speaker running through other people' {phrase invoked: call} {kind variable declarations: K=person}
                                NEW_LOCAL_CONTEXT_NT'speaker' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: person} {required: K}
                                    UNKNOWN_NT'speaker'
                                RVALUE_CONTEXT_NT'other people' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'other people' {kind: description of people} {proposition: << kind=person(x) ^ other(x) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let source be the conversation of the speaker' {indent: 2}
                                INVOCATION_NT'let source be the conversation of the speaker' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'source' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: table name} {required: value}
                                        UNKNOWN_NT'source'
                                    RVALUE_CONTEXT_NT'conversation of the speaker' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PROPERTY_VALUE_NT'conversation of the speaker'
                                            CONSTANT_NT {kind: nothing valued property} {property: 'conversation'=table name}{meaning: {conversation = PROPERTY_MC}}
                                            LOCAL_VARIABLE_NT'the speaker' {local: LV<unallocated> person}
                            INVOCATION_LIST_NT'sort source in turn stamp order' {indent: 2}
                                INVOCATION_NT'sort source in turn stamp order' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'source' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                        LOCAL_VARIABLE_NT'source' {local: LV<unallocated> table name}
                                    RVALUE_CONTEXT_NT'turn stamp' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'table column'} {required: table column}
                                        CONSTANT_NT'turn stamp' {kind: nothing valued table column} {table column: 'turn stamp'}{meaning: {turn stamp = TABLE_COLUMN_MC}}
                            CODE_BLOCK_NT'say "[The speaker] has so far told you: [line break]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the speaker'
                                    INVOCATION_NT'the speaker' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'speaker' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            LOCAL_VARIABLE_NT'speaker' {local: LV<unallocated> person}
                                INVOCATION_LIST_SAY_NT'" has so far told you: "' {suppress_newlines}
                                    INVOCATION_NT'" has so far told you: "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" has so far told you: "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" has so far told you: "' {kind: text}
                                INVOCATION_LIST_SAY_NT'line break'
                                    INVOCATION_NT'line break' {phrase invoked: call}
                            INVOCATION_LIST_NT'let index be 0' {indent: 2}
                                INVOCATION_NT'let index be 0' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                        UNKNOWN_NT'index'
                                    RVALUE_CONTEXT_NT'0' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        CONSTANT_NT'0' {kind: number} {explicit literal} {number: 0}
                            CODE_BLOCK_NT {control structure: RPT}
                                INVOCATION_LIST_NT'repeat through source' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'repeat through source' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'source' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                            LOCAL_VARIABLE_NT'source' {local: LV<unallocated> table name}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if there is a turn stamp entry and the speaker is character ' {colon_block_command} {indent: 3}
                                            INVOCATION_NT'if there is a turn stamp entry and the speaker is character ' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'there is a turn stamp entry and the speaker is character ent' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'there is a turn stamp entry and the speaker is character ent'
                                                        TEST_VALUE_NT'there is a turn stamp entry'
                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a turn stamp entry'
                                                                INVOCATION_LIST_NT'there is a turn stamp entry'
                                                                    INVOCATION_NT'there is a turn stamp entry' {phrase invoked: call} {resulting: truth state}
                                                                        LVALUE_TR_CONTEXT_NT'a turn stamp entry' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                            TABLE_ENTRY_NT'a turn stamp entry'
                                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'turn stamp'}{meaning: {turn stamp = TABLE_COLUMN_MC}}
                                                        TEST_PROPOSITION_NT'the speaker is character entry' {proposition: << ('the speaker' == 'character entry') >>} {term: 'the speaker'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'let index be 1' {indent: 4}
                                                INVOCATION_NT'let index be 1' {phrase invoked: call}
                                                    LVALUE_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                        LOCAL_VARIABLE_NT'index' {local: LV<unallocated> number}
                                                    RVALUE_CONTEXT_NT'1' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                        CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}
                                            CODE_BLOCK_NT'say "  [summary entry][line break]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"  "'
                                                    INVOCATION_NT'"  "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"  "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"  "' {kind: text}
                                                INVOCATION_LIST_SAY_NT'summary entry' {suppress_newlines}
                                                    INVOCATION_NT'summary entry' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'summary entry' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            TABLE_ENTRY_NT'summary entry'
                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'summary'}{meaning: {summary = TABLE_COLUMN_MC}}
                                                INVOCATION_LIST_SAY_NT'line break'
                                                    INVOCATION_NT'line break' {phrase invoked: call}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if index is 0' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if index is 0' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'index is 0' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'index is 0' {proposition: << ('index' == '0') >>} {term: 'index'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "  absolutely nothing[line break]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"  absolutely nothing"' {suppress_newlines}
                                            INVOCATION_NT'"  absolutely nothing"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"  absolutely nothing"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"  absolutely nothing"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'line break'
                                            INVOCATION_NT'line break' {phrase invoked: call}
                            CODE_BLOCK_NT'say line break' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'line break'
                                    INVOCATION_NT'line break' {phrase invoked: call}
            SENTENCE_NT'the conversation of a person is usually table of general chi' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'conversation of a person' {definite 'the' n/m/f s/p nom/acc} {refined}
                    COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                    PROPER_NOUN_NT'conversation' {refined} {eval: CONSTANT_NT {kind: table names valued property} {property: 'conversation'=table name}}
                PROPER_NOUN_NT'table of general chitchat' {refined} {eval: CONSTANT_NT'table of general chitchat' {kind: table name} {table: table_data}{meaning: {table of general chitchat = TABLE_MC}}}
            TABLE_NT'table of general chitchat topic reply summary turn stamp cha' {unit: 4}
            SENTENCE_NT'the conversation of vanessa is the table of vanessa chatter' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'conversation of vanessa' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'vanessa' {refined} {refers: infs'vanessa'} {eval: CONSTANT_NT'vanessa' {kind: woman} {instance: I129'vanessa'} {enumeration: 0}}
                    PROPER_NOUN_NT'conversation' {refined} {eval: CONSTANT_NT {kind: table names valued property} {property: 'conversation'=table name}}
                PROPER_NOUN_NT'table of vanessa chatter' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: CONSTANT_NT'table of vanessa chatter' {kind: table name} {table: table_data}{meaning: {table of vanessa chatter = TABLE_MC}}}
            TABLE_NT'table of vanessa chatter topic reply summary turn stamp char' {unit: 4}
            RULE_NT'after reading a command' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: WHI}
                        INVOCATION_LIST_NT'while player's command includes "the"' {colon_block_command} {indent: 1}
                            INVOCATION_NT'while player's command includes "the"' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'player's command includes "the"' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_VALUE_NT'player's command includes "the"'
                                        PHRASE_TO_DECIDE_VALUE_NT'player's command includes "the"'
                                            INVOCATION_LIST_NT'player's command includes "the"'
                                                INVOCATION_NT'player's command includes "the"' {phrase invoked: call} {resulting: truth state}
                                                    RVALUE_CONTEXT_NT'player's command' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                                        NONLOCAL_VARIABLE_NT'player's command' {nonlocal: 'player's command'(var)snippet}{meaning: {player's command = VARIABLE_MC}}
                                                    RVALUE_CONTEXT_NT'"the"' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'a topic'} {required: topic}
                                                        CONSTANT_NT'"the"' {kind: topic}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'cut the matched text' {indent: 2}
                                INVOCATION_NT'cut the matched text' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'matched text' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a snippet'} {required: snippet}
                                        NONLOCAL_VARIABLE_NT'matched text' {nonlocal: 'matched text'(var)snippet}{meaning: {matched text = VARIABLE_MC}}
        HEADING_NT'section 6 - movement description' {heading 5} {under: H5'section 6 - movement description'} {unit: 4}
            SENTENCE_NT'a person has some text called walk style' {unit: 4} {classified}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'person'} {creation: << kind=person(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT {refined}
                    PROPERTYCALLED_NT'called'
                        UNPARSED_NOUN_NT'text' {indefinite 'some' n/m/f nom/acc p}
                        UNPARSED_NOUN_NT'walk style'
            SENTENCE_NT'the walk style of a man is usually "stride"' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of a man' {definite 'the' n/m/f s/p nom/acc} {refined}
                    COMMON_NOUN_NT'man' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'man'} {creation: << kind=man(x) >>} {eval: TEST_VALUE_NT}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"stride"' {refined} {eval: CONSTANT_NT'"stride"' {kind: text}}
            SENTENCE_NT'the walk style of a woman is usually "strut"' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of a woman' {definite 'the' n/m/f s/p nom/acc} {refined}
                    COMMON_NOUN_NT'woman' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'woman'} {creation: << kind=woman(x) >>} {eval: TEST_VALUE_NT}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"strut"' {refined} {eval: CONSTANT_NT'"strut"' {kind: text}}
            SENTENCE_NT'the walk style of gene is "[one of]wander[or]stroll[purely a' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of gene' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'gene' {refined} {refers: infs'gene'} {eval: CONSTANT_NT'gene' {kind: man} {instance: I141'gene'} {enumeration: 0}}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"[one of]wander[or]stroll[purely at random]"' {refined} {eval: CONSTANT_NT'"[one of]wander[or]stroll[purely at random]"' {kind: text}}
            SENTENCE_NT'the walk style of francine is "waddle"' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of francine' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'francine' {refined} {refers: infs'francine'} {eval: CONSTANT_NT'francine' {kind: woman} {instance: I130'francine'} {enumeration: 0}}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"waddle"' {refined} {eval: CONSTANT_NT'"waddle"' {kind: text}}
            SENTENCE_NT'the walk style of antony is "scamper"' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of antony' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'antony' {refined} {refers: infs'antony'} {eval: CONSTANT_NT'antony' {kind: man} {instance: I152'antony'} {enumeration: 0}}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"scamper"' {refined} {eval: CONSTANT_NT'"scamper"' {kind: text}}
            SENTENCE_NT'the walk style of rhoda is "sashay"' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                X_OF_Y_NT'walk style of rhoda' {definite 'the' n/m/f s/p nom/acc} {refined}
                    PROPER_NOUN_NT'rhoda' {refined} {refers: infs'rhoda'} {eval: CONSTANT_NT'rhoda' {kind: woman} {instance: I145'rhoda'} {enumeration: 0}}
                    PROPER_NOUN_NT'walk style' {refined} {eval: CONSTANT_NT {kind: texts valued property} {property: 'walk style'=text}}
                PROPER_NOUN_NT'"sashay"' {refined} {eval: CONSTANT_NT'"sashay"' {kind: text}}
            TABLE_NT'table of visible exits character second third heading chosen' {unit: 4}
            TABLE_NT'table of visible entrances character second third heading ch' {unit: 4}
            RULE_NT'to clear ( current table - a table name )' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat through current table' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat through current table' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                    LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'blank out the whole row' {indent: 2}
                                INVOCATION_NT'blank out the whole row' {phrase invoked: call}
            RULE_NT'to tidy departures of ( current table - a table name )' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let next direction be up' {indent: 1}
                        INVOCATION_NT'let next direction be up' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'next direction' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: direction} {required: value}
                                UNKNOWN_NT'next direction'
                            RVALUE_CONTEXT_NT'up' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                CONSTANT_NT'up' {kind: direction} {instance: I30'up'} {enumeration: 0}
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat through current table' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat through current table' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                    LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if heading chosen entry is next direction' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if heading chosen entry is next direction' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'heading chosen entry is next direction' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'heading chosen entry is next direction' {proposition: << ('heading chosen entry' == 'next direction') >>} {term: 'heading chosen entry'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let accomplice be character entry' {indent: 3}
                                        INVOCATION_NT'let accomplice be character entry' {phrase invoked: call}
                                            NEW_LOCAL_CONTEXT_NT'accomplice' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: value}
                                                UNKNOWN_NT'accomplice'
                                            RVALUE_CONTEXT_NT'character entry' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                TABLE_ENTRY_NT'character entry'
                                                    CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                    INVOCATION_LIST_NT'choose row with heading chosen of next direction in the curr' {indent: 3}
                                        INVOCATION_NT'choose row with heading chosen of next direction in the curr' {phrase invoked: call} {kind variable declarations: K=direction}
                                            RVALUE_CONTEXT_NT'heading chosen' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: table column}
                                                CONSTANT_NT'heading chosen' {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
                                            RVALUE_CONTEXT_NT'next direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                LOCAL_VARIABLE_NT'next direction' {local: LV"next direction"-direction direction}
                                            RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if total entry is 1' {colon_block_command} {indent: 3}
                                            INVOCATION_NT'if total entry is 1' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'total entry is 1' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'total entry is 1' {proposition: << ('total entry' == '1') >>} {term: 'total entry'}
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now second entry is accomplice' {indent: 4} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'second entry is accomplice'
                                            INVOCATION_LIST_NT'now total entry is 2' {indent: 4} {control structure: NOW}
                                                CONDITION_CONTEXT_NT'total entry is 2'
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if total entry is 2' {colon_block_command} {indent: 3}
                                            INVOCATION_NT'if total entry is 2' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'total entry is 2' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'total entry is 2' {proposition: << ('total entry' == '2') >>} {term: 'total entry'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT {control structure: IF}
                                                INVOCATION_LIST_NT'unless the second entry is accomplice' {colon_block_command} {indent: 4}
                                                    INVOCATION_NT'unless the second entry is accomplice' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'second entry is accomplice' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'second entry is accomplice' {proposition: << ('second entry' == 'accomplice') >>} {term: 'second entry'}
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now third entry is accomplice' {indent: 5} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'third entry is accomplice'
                                                    INVOCATION_LIST_NT'now total entry is 3' {indent: 5} {control structure: NOW}
                                                        CONDITION_CONTEXT_NT'total entry is 3'
                                    INVOCATION_LIST_NT'choose row with character of accomplice in the current table' {indent: 3}
                                        INVOCATION_NT'choose row with character of accomplice in the current table' {phrase invoked: call} {kind variable declarations: K=thing}
                                            RVALUE_CONTEXT_NT'character' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: table column}
                                                CONSTANT_NT'character' {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                            RVALUE_CONTEXT_NT'accomplice' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                LOCAL_VARIABLE_NT'accomplice' {local: LV<unallocated> thing}
                                            RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                                    INVOCATION_LIST_NT'blank out the whole row' {indent: 3}
                                        INVOCATION_NT'blank out the whole row' {phrase invoked: call}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                    INVOCATION_LIST_NT'let next direction be heading chosen entry' {indent: 3}
                                        INVOCATION_NT'let next direction be heading chosen entry' {phrase invoked: call}
                                            LVALUE_LOCAL_CONTEXT_NT'next direction' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                                LOCAL_VARIABLE_NT'next direction' {local: LV"next direction"-direction direction}
                                            RVALUE_CONTEXT_NT'heading chosen entry' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                                TABLE_ENTRY_NT'heading chosen entry'
                                                    CONSTANT_NT {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
            SENTENCE_NT'a door has a person called last opener' {unit: 4} {classified} {interpretation of subject: infs'person'}
                VERB_NT'has' {verb 'have' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                ALLOWED_NT {refined}
                    PROPERTYCALLED_NT'called'
                        UNPARSED_NOUN_NT'person' {indefinite 'a' n/m/f nom/acc s}
                        UNPARSED_NOUN_NT'last opener'
            RULE_NT'report someone opening a door' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now group size is 1' {control structure: NOW}
                        CONDITION_CONTEXT_NT'group size is 1'
                    INVOCATION_LIST_NT'now the last opener of the noun is the person asked' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last opener of the noun is the person asked'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is visible' {colon_block_command}
                            INVOCATION_NT'if the person asked is visible' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is visible' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is visible' {proposition: << visible('person asked') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] opens [the noun]. [run paragraph on]' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" opens "'
                                    INVOCATION_NT'" opens "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" opens "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" opens "' {kind: text}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'". "' {suppress_newlines}
                                    INVOCATION_NT'". "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'". "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'". "' {kind: text}
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on' {phrase invoked: call}
                            CODE_BLOCK_NT {control structure: INS}
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            CODE_BLOCK_NT'say "[The noun] opens from the other side. [run paragraph on' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'noun' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'noun' {nonlocal: 'noun'(var)object}{meaning: {noun = VARIABLE_MC}}
                                INVOCATION_LIST_SAY_NT'" opens from the other side. "' {suppress_newlines}
                                    INVOCATION_NT'" opens from the other side. "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" opens from the other side. "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" opens from the other side. "' {kind: text}
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on' {phrase invoked: call}
                            CODE_BLOCK_NT {control structure: INS}
            RULE_NT'report someone going through a door ( called route )' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is not the last opener of the route' {colon_block_command}
                            INVOCATION_NT'if the person asked is not the last opener of the route' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is not the last opener of the route' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is not the last opener of the route' {proposition: << NOT< ('person asked' == 'the last opener of the route') NOT> >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'continue the action' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'continue the action' {phrase invoked: call}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is the last person named' {colon_block_command}
                            INVOCATION_NT'if the person asked is the last person named' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is the last person named' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is the last person named' {proposition: << ('person asked' == 'the last person named') >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked as pronoun]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked as pronoun'
                                    [1/2] INVOCATION_NT'the person asked as pronoun' {phrase invoked: call} {unproven}/1
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: TEST_VALUE_NT'a man'} {token to be parsed against: TEST_VALUE_NT'a man'} {required: man}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                                    [2/2] INVOCATION_NT'the person asked as pronoun' {phrase invoked: call} {unproven}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: TEST_VALUE_NT'a woman'} {token to be parsed against: TEST_VALUE_NT'a woman'} {required: woman}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            CODE_BLOCK_NT'say "[The person asked]"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'person asked' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                            NONLOCAL_VARIABLE_NT'person asked' {nonlocal: 'person asked'(var)object}{meaning: {person asked = VARIABLE_MC}}
                    CODE_BLOCK_NT'say " [if the person asked is in the location]comes[otherwis' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" "' {kind: text}
                        INVOCATION_LIST_SAY_NT'if the person asked is in the location'
                            INVOCATION_NT'if the person asked is in the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is in the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is in the location' {proposition: << ('the location' == <ContainerOf(*1) : 'person asked'>) >>} {term: 'person asked'}
                        INVOCATION_LIST_SAY_NT'"comes"'
                            INVOCATION_NT'"comes"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"comes"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"comes"' {kind: text}
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'"goes"'
                            INVOCATION_NT'"goes"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"goes"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"goes"' {kind: text}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'" through"'
                            INVOCATION_NT'" through"' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" through"' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" through"' {kind: text}
                        INVOCATION_LIST_SAY_NT'if the last thing named is not the route'
                            INVOCATION_NT'if the last thing named is not the route' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'last thing named is not the route' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'last thing named is not the route' {proposition: << NOT< ('last thing named' == 'the route') NOT> >>} {term: 'last thing named'}
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" "' {kind: text}
                        INVOCATION_LIST_SAY_NT'the route'
                            INVOCATION_NT'the route' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'route' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                    LOCAL_VARIABLE_NT'route' {local: LV"route"-door door}
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if' {phrase invoked: call}
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"."' {kind: text}
                    CODE_BLOCK_NT {control structure: INS}
            SENTENCE_NT'the last thing named is a thing that varies' {unit: 4} {classified} {interpretation of subject: infs'door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'last thing named' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'last thing named' {nonlocal: 'last thing named'(var)thing}} {created here}
                COMMON_NOUN_NT'thing that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=things variable-pointer(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before printing the name of something ( called target ) whic' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last thing named is the target' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last thing named is the target'
            RULE_NT'report someone going a direction' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is in the location' {colon_block_command}
                            INVOCATION_NT'if the person asked is in the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is in the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is in the location' {proposition: << ('the location' == <ContainerOf(*1) : 'person asked'>) >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'choose a blank row in the table of visible entrances' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'choose a blank row in the table of visible entrances' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                        CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            INVOCATION_LIST_NT'choose a blank row in the table of visible exits' {indent: 1}
                                INVOCATION_NT'choose a blank row in the table of visible exits' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                        CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
                    INVOCATION_LIST_NT'now character entry is the person asked' {control structure: NOW}
                        CONDITION_CONTEXT_NT'character entry is the person asked'
                    INVOCATION_LIST_NT'now total entry is 1' {control structure: NOW}
                        CONDITION_CONTEXT_NT'total entry is 1'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the person asked is in the location' {colon_block_command}
                            INVOCATION_NT'if the person asked is in the location' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'person asked is in the location' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'person asked is in the location' {proposition: << ('the location' == <ContainerOf(*1) : 'person asked'>) >>} {term: 'person asked'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now heading chosen entry is the opposite of the noun' {results_from_splitting} {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'heading chosen entry is the opposite of the noun'
                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {control structure: O}
                            INVOCATION_LIST_NT'now heading chosen entry is the noun' {indent: 1} {control structure: NOW}
                                CONDITION_CONTEXT_NT'heading chosen entry is the noun'
                    INVOCATION_LIST_NT'stop the action'
                        INVOCATION_NT'stop the action' {phrase invoked: call}
            RULE_NT'this is the movement reporting rule' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'sort the table of visible entrances in heading chosen order'
                        INVOCATION_NT'sort the table of visible entrances in heading chosen order' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                            RVALUE_CONTEXT_NT'heading chosen' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'table column'} {required: table column}
                                CONSTANT_NT'heading chosen' {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
                    INVOCATION_LIST_NT'tidy departures of the table of visible entrances'
                        INVOCATION_NT'tidy departures of the table of visible entrances' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                    INVOCATION_LIST_NT'sort the table of visible exits in heading chosen order'
                        INVOCATION_NT'sort the table of visible exits in heading chosen order' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
                            RVALUE_CONTEXT_NT'heading chosen' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'table column'} {required: table column}
                                CONSTANT_NT'heading chosen' {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
                    INVOCATION_LIST_NT'tidy departures of the table of visible exits'
                        INVOCATION_NT'tidy departures of the table of visible exits' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
                    INVOCATION_LIST_NT'let total row count be the number of filled rows in the tabl'
                        INVOCATION_NT'let total row count be the number of filled rows in the tabl' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'total row count' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'total row count'
                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible entrances plus' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible entrances plus'
                                    INVOCATION_LIST_NT'number of filled rows in the table of visible entrances plus'
                                        INVOCATION_NT'number of filled rows in the table of visible entrances plus' {phrase invoked: call} {resulting: number}
                                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible entrances' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'arithmetic value'} {required: arithmetic value}
                                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible entrances'
                                                    INVOCATION_LIST_NT'number of filled rows in the table of visible entrances'
                                                        INVOCATION_NT'number of filled rows in the table of visible entrances' {phrase invoked: call} {resulting: number}
                                                            RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                                CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible exits' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'arithmetic value'} {required: arithmetic value}
                                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible exits'
                                                    INVOCATION_LIST_NT'number of filled rows in the table of visible exits'
                                                        INVOCATION_NT'number of filled rows in the table of visible exits' {phrase invoked: call} {resulting: number}
                                                            RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                                CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if total row count is 0' {colon_block_command}
                            INVOCATION_NT'if total row count is 0' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'total row count is 0' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'total row count is 0' {proposition: << ('total row count' == '0') >>} {term: 'total row count'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                    INVOCATION_LIST_NT'generate descriptions from the table of visible entrances'
                        INVOCATION_NT'generate descriptions from the table of visible entrances' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                    INVOCATION_LIST_NT'generate descriptions from the table of visible exits'
                        INVOCATION_NT'generate descriptions from the table of visible exits' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
                    INVOCATION_LIST_NT'clear the table of visible entrances'
                        INVOCATION_NT'clear the table of visible entrances' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible entrances' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible entrances' {kind: table name} {table: table_data}{meaning: {table of visible entrances = TABLE_MC}}
                    INVOCATION_LIST_NT'clear the table of visible exits'
                        INVOCATION_NT'clear the table of visible exits' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'table of visible exits' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'a table name'} {required: table name}
                                CONSTANT_NT'table of visible exits' {kind: table name} {table: table_data}{meaning: {table of visible exits = TABLE_MC}}
            RULE_NT'to generate descriptions from ( current table - a table name' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let count be the number of filled rows in the current table' {indent: 1}
                        INVOCATION_NT'let count be the number of filled rows in the current table' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'count' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'count'
                            RVALUE_CONTEXT_NT'number of filled rows in the current table' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the current table'
                                    INVOCATION_LIST_NT'number of filled rows in the current table'
                                        INVOCATION_NT'number of filled rows in the current table' {phrase invoked: call} {resulting: number}
                                            RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if count is 0' {indent: 1} {colon_block_command}
                            INVOCATION_NT'if count is 0' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'count is 0' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'count is 0' {proposition: << ('count' == '0') >>} {term: 'count'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'rule succeeds' {results_from_splitting} {indent: 2}
                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                    INVOCATION_LIST_NT'let index be count' {indent: 1}
                        INVOCATION_NT'let index be count' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'index'
                            RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                LOCAL_VARIABLE_NT'count' {local: LV"count"-number number}
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat through the current table' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat through the current table' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'current table' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                    LOCAL_VARIABLE_NT'current table' {local: LV"current table"-table name table name}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let accomplice be character entry' {indent: 2}
                                INVOCATION_NT'let accomplice be character entry' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'accomplice' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: thing} {required: value}
                                        UNKNOWN_NT'accomplice'
                                    RVALUE_CONTEXT_NT'character entry' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        TABLE_ENTRY_NT'character entry'
                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if character entry is a person' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if character entry is a person' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'character entry is a person' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'character entry is a person' {proposition: << kind=person('character entry') >>} {term: 'character entry'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now character entry is marked for listing' {results_from_splitting} {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'character entry is marked for listing'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if there is a second entry and second entry is a person' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if there is a second entry and second entry is a person' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'there is a second entry and second entry is a person' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            LOGICAL_AND_NT'there is a second entry and second entry is a person'
                                                TEST_VALUE_NT'there is a second entry'
                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a second entry'
                                                        INVOCATION_LIST_NT'there is a second entry'
                                                            INVOCATION_NT'there is a second entry' {phrase invoked: call} {resulting: truth state}
                                                                LVALUE_TR_CONTEXT_NT'a second entry' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                    TABLE_ENTRY_NT'a second entry'
                                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'second'}{meaning: {second = TABLE_COLUMN_MC}}
                                                TEST_PROPOSITION_NT'second entry is a person' {proposition: << kind=person('second entry') >>} {term: 'second entry'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now second entry is marked for listing' {results_from_splitting} {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'second entry is marked for listing'
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if there is a third entry and third entry is a person' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if there is a third entry and third entry is a person' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'there is a third entry and third entry is a person' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            LOGICAL_AND_NT'there is a third entry and third entry is a person'
                                                TEST_VALUE_NT'there is a third entry'
                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a third entry'
                                                        INVOCATION_LIST_NT'there is a third entry'
                                                            INVOCATION_NT'there is a third entry' {phrase invoked: call} {resulting: truth state}
                                                                LVALUE_TR_CONTEXT_NT'a third entry' {token check to do: <null-parse-node>
                                                                } {token to be parsed against: TEST_VALUE_NT'table'}
                                                                    TABLE_ENTRY_NT'a third entry'
                                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'third'}{meaning: {third = TABLE_COLUMN_MC}}
                                                TEST_PROPOSITION_NT'third entry is a person' {proposition: << kind=person('third entry') >>} {term: 'third entry'}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now third entry is marked for listing' {results_from_splitting} {indent: 3} {control structure: NOW}
                                        CONDITION_CONTEXT_NT'third entry is marked for listing'
                            INVOCATION_LIST_NT'let target be the room the heading chosen entry from the loc' {indent: 2}
                                INVOCATION_NT'let target be the room the heading chosen entry from the loc' {phrase invoked: call}
                                    NEW_LOCAL_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {new var: room} {required: value}
                                        UNKNOWN_NT'target'
                                    RVALUE_CONTEXT_NT'room the heading chosen entry from the location' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PHRASE_TO_DECIDE_VALUE_NT'room the heading chosen entry from the location'
                                            INVOCATION_LIST_NT'room the heading chosen entry from the location'
                                                INVOCATION_NT'room the heading chosen entry from the location' {phrase invoked: call} {resulting: room} {unproven}
                                                    RVALUE_CONTEXT_NT'heading chosen entry' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'direction'} {required: direction}
                                                        TABLE_ENTRY_NT'heading chosen entry'
                                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
                                                    RVALUE_CONTEXT_NT'location' {token check to do: TEST_VALUE_NT'room'} {token to be parsed against: TEST_VALUE_NT'room'} {required: room}
                                                        NONLOCAL_VARIABLE_NT'location' {nonlocal: 'location'(var)object}{meaning: {location = VARIABLE_MC}}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if total entry is 3' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if total entry is 3' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'total entry is 3' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'total entry is 3' {proposition: << ('total entry' == '3') >>} {term: 'total entry'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[The character entry], [the second entry][optional comm' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'the character entry'
                                            INVOCATION_NT'the character entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'character entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'character entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'", "'
                                            INVOCATION_NT'", "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'", "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'", "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'the second entry'
                                            INVOCATION_NT'the second entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'second entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'second entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'second'}{meaning: {second = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'optional comma'
                                            INVOCATION_NT'optional comma' {phrase invoked: call}
                                        INVOCATION_LIST_SAY_NT'" and "'
                                            INVOCATION_NT'" and "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" and "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" and "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'the third entry'
                                            INVOCATION_NT'the third entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'third entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'third entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'third'}{meaning: {third = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" "' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if total entry is 2' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if total entry is 2' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'total entry is 2' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'total entry is 2' {proposition: << ('total entry' == '2') >>} {term: 'total entry'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[The character entry] and [the second entry] "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'the character entry'
                                            INVOCATION_NT'the character entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'character entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'character entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'" and "'
                                            INVOCATION_NT'" and "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" and "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" and "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'the second entry'
                                            INVOCATION_NT'the second entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'second entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'second entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'second'}{meaning: {second = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" "' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if total entry is 1' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if total entry is 1' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'total entry is 1' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'total entry is 1' {proposition: << ('total entry' == '1') >>} {term: 'total entry'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if the character entry is the last person named' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if the character entry is the last person named' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'character entry is the last person named' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'character entry is the last person named' {proposition: << ('character entry' == 'the last person named') >>} {term: 'character entry'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The character entry as pronoun] "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the character entry as pronoun'
                                                    [1/2] INVOCATION_NT'the character entry as pronoun' {phrase invoked: call} {unproven}/1
                                                        RVALUE_CONTEXT_NT'character entry' {token check to do: TEST_VALUE_NT'a man'} {token to be parsed against: TEST_VALUE_NT'a man'} {required: man}
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                                    [2/2] INVOCATION_NT'the character entry as pronoun' {phrase invoked: call} {unproven}
                                                        RVALUE_CONTEXT_NT'character entry' {token check to do: TEST_VALUE_NT'a woman'} {token to be parsed against: TEST_VALUE_NT'a woman'} {required: woman}
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                                INVOCATION_LIST_SAY_NT'" "'
                                                    INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'" "' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 3} {control structure: O}
                                            CODE_BLOCK_NT'say "[The character entry] "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the character entry'
                                                    INVOCATION_NT'the character entry' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'character entry' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                                INVOCATION_LIST_SAY_NT'" "'
                                                    INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'" "' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if total entry is 1' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if total entry is 1' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'total entry is 1' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'total entry is 1' {proposition: << ('total entry' == '1') >>} {term: 'total entry'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[walk style of the character entry]s "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'walk style of the character entry'
                                            INVOCATION_NT'walk style of the character entry' {phrase invoked: call} {kind variable declarations: K=text} {save self}
                                                RVALUE_CONTEXT_NT'walk style of the character entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    PROPERTY_VALUE_NT'walk style of the character entry' {record as self}
                                                        CONSTANT_NT {kind: nothing valued property} {property: 'walk style'=text}{meaning: {walk style = PROPERTY_MC}}
                                                        TABLE_ENTRY_NT'the character entry'
                                                            CONSTANT_NT {kind: nothing valued table column} {table column: 'character'}{meaning: {character = TABLE_COLUMN_MC}}
                                        INVOCATION_LIST_SAY_NT'"s "'
                                            INVOCATION_NT'"s "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"s "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"s "' {kind: text}
                                CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 2} {control structure: O}
                                    CODE_BLOCK_NT'say "walk[if total entry is 1]s[end if] "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"walk"'
                                            INVOCATION_NT'"walk"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"walk"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"walk"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'if total entry is 1'
                                            INVOCATION_NT'if total entry is 1' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'total entry is 1' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'total entry is 1' {proposition: << ('total entry' == '1') >>} {term: 'total entry'}
                                        INVOCATION_LIST_SAY_NT'"s"'
                                            INVOCATION_NT'"s"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"s"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"s"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'end if'
                                            INVOCATION_NT'end if' {phrase invoked: call}
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" "' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the character entry is in the location' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if the character entry is in the location' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'character entry is in the location' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'character entry is in the location' {proposition: << ('the location' == <ContainerOf(*1) : 'character entry'>) >>} {term: 'character entry'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is indoors and target is indoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is indoors and target is indoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is indoors and target is indoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is indoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is indoors' {proposition: << indoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is indoors' {proposition: << indoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over from "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"over from "'
                                                    INVOCATION_NT'"over from "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"over from "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"over from "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is outdoors and target is indoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is outdoors and target is indoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is outdoors and target is indoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is outdoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is outdoors' {proposition: << outdoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is indoors' {proposition: << indoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "out of "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"out of "'
                                                    INVOCATION_NT'"out of "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"out of "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"out of "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is indoors and target is outdoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is indoors and target is outdoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is indoors and target is outdoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is indoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is indoors' {proposition: << indoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is outdoors' {proposition: << outdoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "in from "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"in from "'
                                                    INVOCATION_NT'"in from "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"in from "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"in from "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is outdoors and target is outdoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is outdoors and target is outdoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is outdoors and target is outdoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is outdoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is outdoors' {proposition: << outdoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is outdoors' {proposition: << outdoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over from "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"over from "'
                                                    INVOCATION_NT'"over from "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"over from "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"over from "' {kind: text}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is indoors and target is indoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is indoors and target is indoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is indoors and target is indoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is indoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is indoors' {proposition: << indoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is indoors' {proposition: << indoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over to "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"over to "'
                                                    INVOCATION_NT'"over to "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"over to "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"over to "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is outdoors and target is indoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is outdoors and target is indoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is outdoors and target is indoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is outdoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is outdoors' {proposition: << outdoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is indoors' {proposition: << indoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "into "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"into "'
                                                    INVOCATION_NT'"into "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"into "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"into "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is indoors and target is outdoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is indoors and target is outdoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is indoors and target is outdoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is indoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is indoors' {proposition: << indoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is outdoors' {proposition: << outdoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "out [if a door is visible][the random visible door][end' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"out "'
                                                    INVOCATION_NT'"out "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"out "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"out "' {kind: text}
                                                INVOCATION_LIST_SAY_NT'if a door is visible'
                                                    INVOCATION_NT'if a door is visible' {phrase invoked: call}
                                                        CONDITION_CONTEXT_NT'a door is visible' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: <null-parse-node>
                                                        }
                                                            TEST_PROPOSITION_NT'a door is visible' {proposition: << Exists x : kind=door(x) ^ visible(x) >>} {term: x}
                                                INVOCATION_LIST_SAY_NT'the random visible door'
                                                    INVOCATION_NT'the random visible door' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'random visible door' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            PHRASE_TO_DECIDE_VALUE_NT'random visible door'
                                                                INVOCATION_LIST_NT'random visible door'
                                                                    INVOCATION_NT'random visible door' {phrase invoked: call} {resulting: door} {kind variable declarations: K=door}
                                                                        RVALUE_CONTEXT_NT'visible door' {token check to do: <null-parse-node>
                                                                        } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                                                            CONSTANT_NT'visible door' {kind: description of doors} {proposition: << kind=door(x) ^ visible(x) >>}
                                                INVOCATION_LIST_SAY_NT'end if'
                                                    INVOCATION_NT'end if' {phrase invoked: call}
                                                INVOCATION_LIST_SAY_NT'" to "'
                                                    INVOCATION_NT'" to "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'" to "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'" to "' {kind: text}
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if location is outdoors and target is outdoors' {indent: 3} {colon_block_command}
                                            INVOCATION_NT'if location is outdoors and target is outdoors' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'location is outdoors and target is outdoors' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'location is outdoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is outdoors' {proposition: << outdoors('location') >>} {term: 'location'}
                                                        TEST_PROPOSITION_NT'target is outdoors' {proposition: << outdoors('target') >>} {term: 'target'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over to "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'"over to "'
                                                    INVOCATION_NT'"over to "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'"over to "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'"over to "' {kind: text}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if target is outdoors' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if target is outdoors' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'target is outdoors' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'target is outdoors' {proposition: << outdoors('target') >>} {term: 'target'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[the heading chosen entry]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'the heading chosen entry'
                                            INVOCATION_NT'the heading chosen entry' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'heading chosen entry' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    TABLE_ENTRY_NT'heading chosen entry'
                                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'heading chosen'}{meaning: {heading chosen = TABLE_COLUMN_MC}}
                                CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 2} {control structure: O}
                                    CODE_BLOCK_NT'say "[the target]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'the target'
                                            INVOCATION_NT'the target' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'target' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    LOCAL_VARIABLE_NT'target' {local: LV<unallocated> room}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the total entry is 1 and count is 1 and accomplice carrie' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if the total entry is 1 and count is 1 and accomplice carrie' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'total entry is 1 and count is 1 and accomplice carries somet' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            LOGICAL_AND_NT'total entry is 1 and count is 1 and accomplice carries somet'
                                                TEST_PROPOSITION_NT'total entry is 1' {proposition: << ('total entry' == '1') >>} {term: 'total entry'}
                                                LOGICAL_AND_NT
                                                    TEST_PROPOSITION_NT'count is 1' {proposition: << ('count' == '1') >>} {term: 'count'}
                                                    TEST_PROPOSITION_NT'accomplice carries something' {proposition: << Exists x : kind=thing_c(x) ^ ('accomplice' == <CarrierOf(*1) : x>) >>} {term: 'accomplice'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say ", carrying [a list of things carried by the accomplice]' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'", carrying "'
                                            INVOCATION_NT'", carrying "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'", carrying "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'", carrying "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'a list of things carried by the accomplice'
                                            INVOCATION_NT'a list of things carried by the accomplice' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'things carried by the accomplice' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                                    CONSTANT_NT'things carried by the accomplice' {kind: description of things} {proposition: << kind=thing(x) ^ ('the accomplice' == <CarrierOf(*1) : x>) >>}
                            INVOCATION_LIST_NT'decrement index' {indent: 2}
                                INVOCATION_NT'decrement index' {phrase invoked: call}
                                    LVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'equation'}
                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                            INVOCATION_LIST_NT'make delimiter index of count , continuing' {indent: 2}
                                INVOCATION_NT'make delimiter index of count' {phrase invoked: call} {phrase options invoked: continuing}
                                    RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                                    RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'count' {local: LV"count"-number number}
                            INVOCATION_LIST_NT'now group size is total entry' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'group size is total entry'
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if a marked for listing person is infected' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if a marked for listing person is infected' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'a marked for listing person is infected' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'a marked for listing person is infected' {proposition: << Exists x : kind=person(x) ^ marked for listing(x) ^ infected(x) >>} {term: x}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if looking and a marked for listing person is not in the loc' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if looking and a marked for listing person is not in the loc' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'looking and a marked for listing person is not in the locati' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            LOGICAL_AND_NT'looking and a marked for listing person is not in the locati'
                                                TEST_VALUE_NT'looking'
                                                    CONSTANT_NT'looking' {kind: action} {action pattern: <action: looking / >}
                                                TEST_PROPOSITION_NT'a marked for listing person is not in the location' {proposition: << Exists x : kind=person(x) ^ marked for listing(x) ^ NOT< ('the location' == <ContainerOf(*1) : x>) NOT> >>} {term: x}
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'clear marked people' {indent: 3}
                                        INVOCATION_NT'clear marked people' {phrase invoked: call}
                                    CODE_BLOCK_NT'say paragraph break' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break' {phrase invoked: call}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                    INVOCATION_LIST_NT'describe patients' {indent: 3}
                                        INVOCATION_NT'describe patients' {phrase invoked: call}
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            INVOCATION_LIST_NT'clear marked people' {indent: 2}
                                INVOCATION_NT'clear marked people' {phrase invoked: call}
                            CODE_BLOCK_NT'say paragraph break' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'paragraph break'
                                    INVOCATION_NT'paragraph break' {phrase invoked: call}
            SENTENCE_NT'the last person named is a person that varies' {unit: 4} {classified} {interpretation of subject: infs'door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'last person named' {definite 'the' n/m/f s/p nom/acc} {refined} {eval: NONLOCAL_VARIABLE_NT'last person named' {nonlocal: 'last person named'(var)person}} {created here}
                COMMON_NOUN_NT'person that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=people variable-pointer(x) >>} {eval: TEST_VALUE_NT}
            RULE_NT'before printing the name of a person ( called target )' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last person named is the target' {control structure: NOW}
                        CONDITION_CONTEXT_NT'the last person named is the target'
            SENTENCE_NT'group size is a number that varies' {unit: 4} {classified} {interpretation of subject: infs'door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'group size' {refined} {eval: NONLOCAL_VARIABLE_NT'group size' {nonlocal: 'group size'(var)number}} {created here}
                COMMON_NOUN_NT'number that varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
            SENTENCE_NT'group size is 1' {unit: 4} {classified} {interpretation of subject: infs'door'}
                VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
                PROPER_NOUN_NT'group size' {refined} {eval: NONLOCAL_VARIABLE_NT'group size' {nonlocal: 'group size'(var)number}{meaning: {group size = VARIABLE_MC}}}
                PROPER_NOUN_NT'1' {refined} {eval: CONSTANT_NT'1' {kind: number} {explicit literal} {number: 1}}
            RULE_NT'to clear marked people' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with named party running through people' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with named party running through people' {phrase invoked: call} {kind variable declarations: K=person}
                                NEW_LOCAL_CONTEXT_NT'named party' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: person} {required: K}
                                    UNKNOWN_NT'named party'
                                RVALUE_CONTEXT_NT'people' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'people' {kind: description of people} {proposition: << kind=person(x) >>}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the named party is not marked for listing' {indent: 2} {control structure: NOW}
                                CONDITION_CONTEXT_NT'the named party is not marked for listing'
            RULE_NT'before listing nondescript items' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the number of people who are marked for listing is 0' {colon_block_command}
                            INVOCATION_NT'if the number of people who are marked for listing is 0' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'number of people who are marked for listing is 0' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'number of people who are marked for listing is 0' {proposition: << ('number of people who are marked for listing' == '0') >>} {term: 'number of people who are marked for listing'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'make no decision' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'make no decision' {phrase invoked: call}
                    CODE_BLOCK_NT'say "You can see [a list of people who are marked for listin' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'"You can see "'
                            INVOCATION_NT'"You can see "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'"You can see "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'"You can see "' {kind: text}
                        INVOCATION_LIST_SAY_NT'a list of people who are marked for listing'
                            INVOCATION_NT'a list of people who are marked for listing' {phrase invoked: call}
                                RVALUE_CONTEXT_NT'people who are marked for listing' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                    CONSTANT_NT'people who are marked for listing' {kind: description of people} {proposition: << kind=person(x) ^ marked for listing(x) >>}
                        INVOCATION_LIST_SAY_NT'" here. "'
                            INVOCATION_NT'" here. "' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'" here. "' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    CONSTANT_NT'" here. "' {kind: text}
                    INVOCATION_LIST_NT'now group size is the number of people who are marked for li' {control structure: NOW}
                        CONDITION_CONTEXT_NT'group size is the number of people who are marked for listin'
                    INVOCATION_LIST_NT'describe patients'
                        INVOCATION_NT'describe patients' {phrase invoked: call}
                    INVOCATION_LIST_NT'now every marked for listing person is not marked for listin' {control structure: NOW}
                        CONDITION_CONTEXT_NT'every marked for listing person is not marked for listing'
            RULE_NT'to describe patients' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if every marked for listing person is infected and at least ' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if every marked for listing person is infected and at least ' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'every marked for listing person is infected and at least thr' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    LOGICAL_AND_NT'every marked for listing person is infected and at least thr'
                                        TEST_PROPOSITION_NT'every marked for listing person is infected' {proposition: << ForAll x IN< kind=person(x) ^ marked for listing(x) IN> : infected(x) >>} {term: x}
                                        TEST_PROPOSITION_NT'at least three people are marked for listing' {proposition: << Card>=3 x IN< kind=person(x) IN> : marked for listing(x) >>} {term: x}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "They are all sick as dogs, every one."' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"They are all sick as dogs, every one."'
                                    INVOCATION_NT'"They are all sick as dogs, every one."' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"They are all sick as dogs, every one."' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"They are all sick as dogs, every one."' {kind: text}
                            INVOCATION_LIST_NT'clear marked people' {indent: 2}
                                INVOCATION_NT'clear marked people' {phrase invoked: call}
                            INVOCATION_LIST_NT'rule succeeds' {indent: 2}
                                INVOCATION_NT'rule succeeds' {phrase invoked: call}
                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if the number of people who are marked for listing is greate' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if the number of people who are marked for listing is greate' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'number of people who are marked for listing is greater than ' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            LOGICAL_AND_NT'number of people who are marked for listing is greater than '
                                                TEST_PROPOSITION_NT'number of people who are marked for listing is greater than ' {proposition: << greater-than('number of people who are marked for listing', 'two') >>} {term: 'number of people who are marked for listing'}
                                                TEST_PROPOSITION_NT'the number of infected people who are marked for listing is ' {proposition: << greater-than('the number of infected people who are marked for listing', 'the number of clean people who are marked for listing') >>} {term: 'the number of infected people who are marked for listing'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Only [the list of clean people who are marked for listi' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"Only "'
                                            INVOCATION_NT'"Only "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"Only "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"Only "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'the list of clean people who are marked for listing'
                                            INVOCATION_NT'the list of clean people who are marked for listing' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'clean people who are marked for listing' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'description of objects'} {required: description of objects}
                                                    CONSTANT_NT'clean people who are marked for listing' {kind: description of people} {proposition: << kind=person(x) ^ clean(x) ^ marked for listing(x) >>}
                                        INVOCATION_LIST_SAY_NT'" currently remain"'
                                            INVOCATION_NT'" currently remain"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" currently remain"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" currently remain"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'if the number of clean people who are marked for listing is '
                                            INVOCATION_NT'if the number of clean people who are marked for listing is ' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'number of clean people who are marked for listing is 1' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'number of clean people who are marked for listing is 1' {proposition: << ('number of clean people who are marked for listing' == '1') >>} {term: 'number of clean people who are marked for listing'}
                                        INVOCATION_LIST_SAY_NT'"s"'
                                            INVOCATION_NT'"s"' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"s"' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"s"' {kind: text}
                                        INVOCATION_LIST_SAY_NT'end if'
                                            INVOCATION_NT'end if' {phrase invoked: call}
                                        INVOCATION_LIST_SAY_NT'" untainted."'
                                            INVOCATION_NT'" untainted."' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'" untainted."' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'" untainted."' {kind: text}
                                    INVOCATION_LIST_NT'clear marked people' {indent: 3}
                                        INVOCATION_NT'clear marked people' {phrase invoked: call}
                                    INVOCATION_LIST_NT'rule succeeds' {indent: 3}
                                        INVOCATION_NT'rule succeeds' {phrase invoked: call}
                    INVOCATION_LIST_NT'let count be the number of marked for listing other people w' {indent: 1}
                        INVOCATION_NT'let count be the number of marked for listing other people w' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'count' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'count'
                            RVALUE_CONTEXT_NT'number of marked for listing other people who are infected' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'number of marked for listing other people who are infected'
                                    INVOCATION_LIST_NT'number of marked for listing other people who are infected'
                                        INVOCATION_NT'number of marked for listing other people who are infected' {phrase invoked: call} {resulting: number}
                                            RVALUE_CONTEXT_NT'marked for listing other people who are infected' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'description of values'} {required: description of values}
                                                CONSTANT_NT'marked for listing other people who are infected' {kind: description of people} {proposition: << kind=person(x) ^ marked for listing(x) ^ other(x) ^ infected(x) >>}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if count is 0' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if count is 0' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'count is 0' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'count is 0' {proposition: << ('count' == '0') >>} {term: 'count'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say paragraph break' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'paragraph break'
                                    INVOCATION_NT'paragraph break' {phrase invoked: call}
                            INVOCATION_LIST_NT'make no decision' {indent: 2}
                                INVOCATION_NT'make no decision' {phrase invoked: call}
                    INVOCATION_LIST_NT'let index be count' {indent: 1}
                        INVOCATION_NT'let index be count' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'index'
                            RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                LOCAL_VARIABLE_NT'count' {local: LV"count"-number number}
                    CODE_BLOCK_NT {control structure: RPT}
                        INVOCATION_LIST_NT'repeat with patient running through marked for listing other' {colon_block_command} {indent: 1}
                            INVOCATION_NT'repeat with patient running through marked for listing other' {phrase invoked: call} {kind variable declarations: K=person}
                                NEW_LOCAL_CONTEXT_NT'patient' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {new var: person} {required: K}
                                    UNKNOWN_NT'patient'
                                RVALUE_CONTEXT_NT'marked for listing other people who are infected' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: description of values}
                                    CONSTANT_NT'marked for listing other people who are infected' {kind: description of people} {proposition: << kind=person(x) ^ marked for listing(x) ^ other(x) ^ infected(x) >>}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if index is count' {colon_block_command} {indent: 2}
                                    INVOCATION_NT'if index is count' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'index is count' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'index is count' {proposition: << ('index' == 'count') >>} {term: 'index'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if count is 1 and the patient is the last person named' {colon_block_command} {indent: 3}
                                            INVOCATION_NT'if count is 1 and the patient is the last person named' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'count is 1 and the patient is the last person named' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    LOGICAL_AND_NT'count is 1 and the patient is the last person named'
                                                        TEST_PROPOSITION_NT'count is 1' {proposition: << ('count' == '1') >>} {term: 'count'}
                                                        TEST_PROPOSITION_NT'the patient is the last person named' {proposition: << ('the patient' == 'the last person named') >>} {term: 'the patient'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The patient as pronoun]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the patient as pronoun'
                                                    [1/2] INVOCATION_NT'the patient as pronoun' {phrase invoked: call} {unproven}/1
                                                        RVALUE_CONTEXT_NT'patient' {token check to do: TEST_VALUE_NT'a man'} {token to be parsed against: TEST_VALUE_NT'a man'} {required: man}
                                                            LOCAL_VARIABLE_NT'patient' {local: LV<unallocated> person}
                                                    [2/2] INVOCATION_NT'the patient as pronoun' {phrase invoked: call} {unproven}
                                                        RVALUE_CONTEXT_NT'patient' {token check to do: TEST_VALUE_NT'a woman'} {token to be parsed against: TEST_VALUE_NT'a woman'} {required: woman}
                                                            LOCAL_VARIABLE_NT'patient' {local: LV<unallocated> person}
                                        CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 3} {control structure: O}
                                            CODE_BLOCK_NT'say "[The patient]"' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'the patient'
                                                    INVOCATION_NT'the patient' {phrase invoked: call}
                                                        RVALUE_CONTEXT_NT'patient' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                            LOCAL_VARIABLE_NT'patient' {local: LV<unallocated> person}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 2} {control structure: O}
                                    CODE_BLOCK_NT'say "[the patient]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'the patient'
                                            INVOCATION_NT'the patient' {phrase invoked: call}
                                                RVALUE_CONTEXT_NT'patient' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT'object'} {required: object}
                                                    LOCAL_VARIABLE_NT'patient' {local: LV<unallocated> person}
                            CODE_BLOCK_NT'say " [looks as though dipped in for index] [infection color' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" "' {kind: text}
                                INVOCATION_LIST_SAY_NT'looks as though dipped in for index'
                                    INVOCATION_NT'looks as though dipped in for index' {phrase invoked: call}
                                        RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                            LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'" "' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'" "' {kind: text}
                                INVOCATION_LIST_SAY_NT'infection color of the patient'
                                    INVOCATION_NT'infection color of the patient' {phrase invoked: call} {kind variable declarations: K=infection color} {save self}
                                        RVALUE_CONTEXT_NT'infection color of the patient' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            PROPERTY_VALUE_NT'infection color of the patient' {record as self}
                                                CONSTANT_NT {kind: infection colors valued property} {property: 'infection color'=infection color}{meaning: {infection color = PROPERTY_MC}}
                                                LOCAL_VARIABLE_NT'the patient' {local: LV<unallocated> person}
                            INVOCATION_LIST_NT'decrement index' {indent: 2}
                                INVOCATION_NT'decrement index' {phrase invoked: call}
                                    LVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'equation'}
                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                            INVOCATION_LIST_NT'make delimiter index of count' {indent: 2}
                                INVOCATION_NT'make delimiter index of count' {phrase invoked: call}
                                    RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                                    RVALUE_CONTEXT_NT'count' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'a number'} {required: number}
                                        LOCAL_VARIABLE_NT'count' {local: LV"count"-number number}
                    INVOCATION_LIST_NT'clear marked people' {indent: 1}
                        INVOCATION_NT'clear marked people' {phrase invoked: call}
            RULE_NT'to say ( named character - a man ) as pronoun' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is 1' {colon_block_command}
                            INVOCATION_NT'if group size is 1' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is 1' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is 1' {proposition: << ('group size' == '1') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "He"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"He"'
                                    INVOCATION_NT'"He"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"He"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"He"' {kind: text}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is 2' {colon_block_command}
                            INVOCATION_NT'if group size is 2' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is 2' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is 2' {proposition: << ('group size' == '2') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The latter"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"The latter"'
                                    INVOCATION_NT'"The latter"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"The latter"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"The latter"' {kind: text}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is greater than 2' {colon_block_command}
                            INVOCATION_NT'if group size is greater than 2' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is greater than 2' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is greater than 2' {proposition: << greater-than('group size', '2') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The last"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"The last"'
                                    INVOCATION_NT'"The last"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"The last"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"The last"' {kind: text}
            RULE_NT'to say ( named character - a woman ) as pronoun' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is 1' {colon_block_command}
                            INVOCATION_NT'if group size is 1' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is 1' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is 1' {proposition: << ('group size' == '1') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "She"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"She"'
                                    INVOCATION_NT'"She"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"She"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"She"' {kind: text}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is 2' {colon_block_command}
                            INVOCATION_NT'if group size is 2' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is 2' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is 2' {proposition: << ('group size' == '2') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The latter"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"The latter"'
                                    INVOCATION_NT'"The latter"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"The latter"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"The latter"' {kind: text}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if group size is greater than 2' {colon_block_command}
                            INVOCATION_NT'if group size is greater than 2' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'group size is greater than 2' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'group size is greater than 2' {proposition: << greater-than('group size', '2') >>} {term: 'group size'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The last"' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'"The last"'
                                    INVOCATION_NT'"The last"' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'"The last"' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'"The last"' {kind: text}
            RULE_NT'to say looks as though dipped in for ( index - a number )' {unit: 4}
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let divider be the number of filled rows in the table of dip'
                        INVOCATION_NT'let divider be the number of filled rows in the table of dip' {phrase invoked: call}
                            NEW_LOCAL_CONTEXT_NT'divider' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT} {new var: number} {required: value}
                                UNKNOWN_NT'divider'
                            RVALUE_CONTEXT_NT'number of filled rows in the table of dipping phrases' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of dipping phrases'
                                    INVOCATION_LIST_NT'number of filled rows in the table of dipping phrases'
                                        INVOCATION_NT'number of filled rows in the table of dipping phrases' {phrase invoked: call} {resulting: number}
                                            RVALUE_CONTEXT_NT'table of dipping phrases' {token check to do: <null-parse-node>
                                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                                CONSTANT_NT'table of dipping phrases' {kind: table name} {table: table_data}{meaning: {table of dipping phrases = TABLE_MC}}
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if index is greater than 4' {colon_block_command}
                            INVOCATION_NT'if index is greater than 4' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'index is greater than 4' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'index is greater than 4' {proposition: << greater-than('index', '4') >>} {term: 'index'}
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let index be the remainder after dividing index by divider' {results_from_splitting} {indent: 1}
                                INVOCATION_NT'let index be the remainder after dividing index by divider' {phrase invoked: call}
                                    LVALUE_LOCAL_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT} {required: value}
                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                                    RVALUE_CONTEXT_NT'remainder after dividing index by divider' {token check to do: <null-parse-node>
                                    } {token to be parsed against: TEST_VALUE_NT'value'} {required: value}
                                        PHRASE_TO_DECIDE_VALUE_NT'remainder after dividing index by divider'
                                            INVOCATION_LIST_NT'remainder after dividing index by divider'
                                                INVOCATION_NT'remainder after dividing index by divider' {phrase invoked: call} {resulting: number}
                                                    RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'arithmetic value'} {required: arithmetic value}
                                                        LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                                                    RVALUE_CONTEXT_NT'divider' {token check to do: <null-parse-node>
                                                    } {token to be parsed against: TEST_VALUE_NT'arithmetic value'} {required: arithmetic value}
                                                        LOCAL_VARIABLE_NT'divider' {local: LV"divider"-number number}
                    INVOCATION_LIST_NT'choose row index in the table of dipping phrases'
                        INVOCATION_NT'choose row index in the table of dipping phrases' {phrase invoked: call}
                            RVALUE_CONTEXT_NT'index' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'number'} {required: number}
                                LOCAL_VARIABLE_NT'index' {local: LV"index"-number number}
                            RVALUE_CONTEXT_NT'table of dipping phrases' {token check to do: <null-parse-node>
                            } {token to be parsed against: TEST_VALUE_NT'table name'} {required: table name}
                                CONSTANT_NT'table of dipping phrases' {kind: table name} {table: table_data}{meaning: {table of dipping phrases = TABLE_MC}}
                    CODE_BLOCK_NT'say dipping entry' {control structure: SAY}
                        INVOCATION_LIST_SAY_NT'dipping entry'
                            INVOCATION_NT'dipping entry' {phrase invoked: call} {kind variable declarations: K=text}
                                RVALUE_CONTEXT_NT'dipping entry' {token check to do: <null-parse-node>
                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                    TABLE_ENTRY_NT'dipping entry'
                                        CONSTANT_NT {kind: nothing valued table column} {table column: 'dipping'}{meaning: {dipping = TABLE_COLUMN_MC}}
            TABLE_NT'table of dipping phrases dipping "looks as though dipped in"' {unit: 4}
            SENTENCE_NT'a door is usually scenery' {unit: 4} {classified} {interpretation of subject: infs'door'}
                VERB_NT'is usually' {certainty:likely} {verb 'be' 3p s act IS_TENSE +ve}
                COMMON_NOUN_NT'door' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'door'} {creation: << kind=door(x) >>} {eval: TEST_VALUE_NT}
                ADJECTIVE_NT'scenery' {refined} {predicate: scenery} {creation: << scenery(x) ^ scenery(x) >>}
            RULE_NT'to make delimiter ( index - a number ) of ( count - a number' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if index is 0' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if index is 0' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'index is 0' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'index is 0' {proposition: << ('index' == '0') >>} {term: 'index'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if continuing' {indent: 2} {colon_block_command}
                                    INVOCATION_NT'if continuing' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'continuing' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PHRASE_OPTION_NT'continuing' {phrase option: 00000001}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say ". [run paragraph on]"' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'". "' {suppress_newlines}
                                            INVOCATION_NT'". "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'". "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'". "' {kind: text}
                                        INVOCATION_LIST_SAY_NT'run paragraph on'
                                            INVOCATION_NT'run paragraph on' {phrase invoked: call}
                                CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 2} {control structure: O}
                                    CODE_BLOCK_NT'say "."' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'"."'
                                            INVOCATION_NT'"."' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'"."' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'"."' {kind: text}
                        CODE_BLOCK_NT'otherwise' {control structure: O}
                            CODE_BLOCK_NT {control structure: IF}
                                INVOCATION_LIST_NT'if index is 1' {colon_block_command} {indent: 1}
                                    INVOCATION_NT'if index is 1' {phrase invoked: call}
                                        CONDITION_CONTEXT_NT'index is 1' {token check to do: <null-parse-node>
                                        } {token to be parsed against: <null-parse-node>
                                        }
                                            TEST_PROPOSITION_NT'index is 1' {proposition: << ('index' == '1') >>} {term: 'index'}
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT {control structure: IF}
                                        INVOCATION_LIST_NT'if count is 2' {indent: 2} {colon_block_command}
                                            INVOCATION_NT'if count is 2' {phrase invoked: call}
                                                CONDITION_CONTEXT_NT'count is 2' {token check to do: <null-parse-node>
                                                } {token to be parsed against: <null-parse-node>
                                                }
                                                    TEST_PROPOSITION_NT'count is 2' {proposition: << ('count' == '2') >>} {term: 'count'}
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say " and "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'" and "'
                                                    INVOCATION_NT'" and "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'" and "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'" and "' {kind: text}
                                        CODE_BLOCK_NT'otherwise' {results_from_splitting} {indent: 2} {control structure: O}
                                            CODE_BLOCK_NT'say "[optional comma] and "' {control structure: SAY}
                                                INVOCATION_LIST_SAY_NT'optional comma'
                                                    INVOCATION_NT'optional comma' {phrase invoked: call}
                                                INVOCATION_LIST_SAY_NT'" and "'
                                                    INVOCATION_NT'" and "' {phrase invoked: call} {kind variable declarations: K=text}
                                                        RVALUE_CONTEXT_NT'" and "' {token check to do: <null-parse-node>
                                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                            CONSTANT_NT'" and "' {kind: text}
                                CODE_BLOCK_NT'otherwise' {colon_block_command} {indent: 1} {control structure: O}
                                    CODE_BLOCK_NT'say ", "' {control structure: SAY}
                                        INVOCATION_LIST_SAY_NT'", "'
                                            INVOCATION_NT'", "' {phrase invoked: call} {kind variable declarations: K=text}
                                                RVALUE_CONTEXT_NT'", "' {token check to do: <null-parse-node>
                                                } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                                    CONSTANT_NT'", "' {kind: text}
            RULE_NT'to say optional comma' {unit: 4}
                CODE_BLOCK_NT
                    CODE_BLOCK_NT {control structure: IF}
                        INVOCATION_LIST_NT'if the serial comma option is active' {colon_block_command} {indent: 1}
                            INVOCATION_NT'if the serial comma option is active' {phrase invoked: call}
                                CONDITION_CONTEXT_NT'serial comma option is active' {token check to do: <null-parse-node>
                                } {token to be parsed against: <null-parse-node>
                                }
                                    TEST_PROPOSITION_NT'serial comma option is active' {proposition: << active('serial comma option') >>} {term: 'serial comma option'}
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say ","' {control structure: SAY}
                                INVOCATION_LIST_SAY_NT'","'
                                    INVOCATION_NT'","' {phrase invoked: call} {kind variable declarations: K=text}
                                        RVALUE_CONTEXT_NT'","' {token check to do: <null-parse-node>
                                        } {token to be parsed against: TEST_VALUE_NT} {required: sayable value}
                                            CONSTANT_NT'","' {kind: text}
            SENTENCE_NT'test me with go to cold comfort / z / z / z / z / ask vaness' {unit: 4} {classified}
                VERB_NT'test' {verb 'test' 3p p act IS_TENSE +ve} {prep2: with} {special meaning: test-with}
                UNPARSED_NOUN_NT'me'
                UNPARSED_NOUN_NT'go to cold comfort / z / z / z / z / ask vanessa for french '
            SENTENCE_NT'use fast route-finding' {unit: 4} {classified}
                VERB_NT'use' {verb 'use' 3p p act IS_TENSE +ve} {special meaning: use}
                UNPARSED_NOUN_NT'fast route-finding'
    HEADING_NT'invented sentences' {under: H0'invented sentences'} {heading 0} {implied}
        SENTENCE_NT'number understood is a number which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'number understood' {refined} {eval: NONLOCAL_VARIABLE_NT'number understood' {nonlocal: 'number understood'(var)number}} {created here}
            COMMON_NOUN_NT'number which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'real number understood is a real number which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'real number understood' {refined} {eval: NONLOCAL_VARIABLE_NT'real number understood' {nonlocal: 'real number understood'(var)real number}} {created here}
            COMMON_NOUN_NT'real number which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=real numbers variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'truth state understood is a truth state which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'truth state understood' {refined} {eval: NONLOCAL_VARIABLE_NT'truth state understood' {nonlocal: 'truth state understood'(var)truth state}} {created here}
            COMMON_NOUN_NT'truth state which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=truth states variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'external file understood is a external file which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'external file understood' {refined} {eval: NONLOCAL_VARIABLE_NT'external file understood' {nonlocal: 'external file understood'(var)external file}} {created here}
            COMMON_NOUN_NT'external file which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=external files variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'time understood is a time which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'time understood' {refined} {eval: NONLOCAL_VARIABLE_NT'time understood' {nonlocal: 'time understood'(var)time}} {created here}
            COMMON_NOUN_NT'time which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=times variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'scene understood is a scene which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'scene understood' {refined} {eval: NONLOCAL_VARIABLE_NT'scene understood' {nonlocal: 'scene understood'(var)scene}} {created here}
            COMMON_NOUN_NT'scene which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=scenes variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'figure name understood is a figure name which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'figure name understood' {refined} {eval: NONLOCAL_VARIABLE_NT'figure name understood' {nonlocal: 'figure name understood'(var)figure name}} {created here}
            COMMON_NOUN_NT'figure name which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=figure names variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'sound name understood is a sound name which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'sound name understood' {refined} {eval: NONLOCAL_VARIABLE_NT'sound name understood' {nonlocal: 'sound name understood'(var)sound name}} {created here}
            COMMON_NOUN_NT'sound name which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=sound names variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'natural language understood is a natural language which vari' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'natural language understood' {refined} {eval: NONLOCAL_VARIABLE_NT'natural language understood' {nonlocal: 'natural language understood'(var)natural language}} {created here}
            COMMON_NOUN_NT'natural language which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=natural languages variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'grammatical tense understood is a grammatical tense which va' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'grammatical tense understood' {refined} {eval: NONLOCAL_VARIABLE_NT'grammatical tense understood' {nonlocal: 'grammatical tense understood'(var)grammatical tense}} {created here}
            COMMON_NOUN_NT'grammatical tense which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=grammatical tenses variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'narrative viewpoint understood is a narrative viewpoint whic' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'narrative viewpoint understood' {refined} {eval: NONLOCAL_VARIABLE_NT'narrative viewpoint understood' {nonlocal: 'narrative viewpoint understood'(var)narrative viewpoint}} {created here}
            COMMON_NOUN_NT'narrative viewpoint which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=narrative viewpoints variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'grammatical case understood is a grammatical case which vari' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'grammatical case understood' {refined} {eval: NONLOCAL_VARIABLE_NT'grammatical case understood' {nonlocal: 'grammatical case understood'(var)grammatical case}} {created here}
            COMMON_NOUN_NT'grammatical case which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=grammatical cases variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'grammatical gender understood is a grammatical gender which ' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'grammatical gender understood' {refined} {eval: NONLOCAL_VARIABLE_NT'grammatical gender understood' {nonlocal: 'grammatical gender understood'(var)grammatical gender}} {created here}
            COMMON_NOUN_NT'grammatical gender which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=grammatical genders variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'command parser error understood is a command parser error wh' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'command parser error understood' {refined} {eval: NONLOCAL_VARIABLE_NT'command parser error understood' {nonlocal: 'command parser error understood'(var)command parser error}} {created here}
            COMMON_NOUN_NT'command parser error which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=command parser errors variable-pointer(x) >>} {eval: TEST_VALUE_NT}
        SENTENCE_NT'infection color understood is a infection color which varies' {classified}
            VERB_NT'is' {verb 'be' 3p s act IS_TENSE +ve}
            PROPER_NOUN_NT'infection color understood' {refined} {eval: NONLOCAL_VARIABLE_NT'infection color understood' {nonlocal: 'infection color understood'(var)infection color}} {created here}
            COMMON_NOUN_NT'infection color which varies' {indefinite 'a' n/m/f nom/acc s} {refined} {refers: infs'values variable-pointer'-k} {creation: << kind=infection colors variable-pointer(x) >>} {eval: TEST_VALUE_NT}
