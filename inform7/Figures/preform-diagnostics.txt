0/0: <preform-nonterminal>: 
  (internal)
  min 1, max 1

1205/7256: <if-start-of-paragraph>: 
  (internal)
  min 0, max 0

2620/5274: <if-not-deliberately-capitalised>: 
  (internal)
  min 0, max 0

1504/3008: <balanced-text>: 
  English:
   {......}       1504/1504: <issuing the response text of something -- documented at act_resp --> ==> 
  min 1, max 1000000000

6/28: <list-comma-division>:  DS: 00008000
  English:
   {......} , {......}       6/13: <he conceals , they conceal , he concealed , it is concealed , he is concealing> ==>  DS: 00008000
  min 3, max 1000000000

0/0: <any-integer>: 
  (internal)
  min 1, max 1

2894/23406: <quoted-text>: 
  (internal)
  min 1, max 1

0/0: <quoted-text-with-subs>: 
  (internal)
  min 1, max 1

25/50: <quoted-text-without-subs>: 
  (internal)
  min 1, max 1

0/0: <empty-text>: 
  (internal)
  min 1, max 1

2/12950: <if-start-of-source-text>: 
  (internal)
  min 0, max 0

0/18: <list-or-division>:  DS: 00010000
  English:
   {......} , _or {......}       0/9:  ==>  DS: 00010000
   {......} _or {......}       0/9:  ==>  DS: 00010000
  min 3, max 1000000000

0/0: <extension-documentation-heading>:  DS: 00020000
  English:
   chapter : {...}       0/0:  ==>  DS: 00020000
   section : {...}       0/0:  ==>  DS: 00020000
  min 3, max 1000000000

0/0: <extension-example-header>:  DS: 00080000
  English:
   example : <row-of-asterisks> {...} - {...}       0/0:  ==>  DS: 000c0000
   example : {...} - {...}       0/0:  ==>  DS: 00080000
  min 5, max 1000000000

0/0: <row-of-asterisks>:  CS: 00040000
  English:
   *       0/0:  ==>  CS: 00040000
   **       0/0:  ==>  CS: 00040000
   ***       0/0:  ==>  CS: 00040000
   ****       0/0:  ==>  CS: 00040000
  min 1, max 1

0/0: <table-sentence>:  DS: 00100000
  English:
   <if-start-of-paragraph> table {...}       0/0:  ==>  DS: 00100000
  min 2, max 1000000000

0/0: <extension-documentation-paste-marker>:  DS: 00200000
  English:
   * : {...}       0/0:  ==>  DS: 00200000
  min 3, max 1000000000

0/0: <comparative-construction>:  DS: 00400000
  English:
   {...} than       0/0:  ==>  DS: 00400000
  min 2, max 1000000000

0/0: <auxiliary-verb-only>: 
  (internal)
  min 1, max 1000000000

0/0: <not-instance-of-verb-at-run-time>: 
  (internal)
  min 1, max 1000000000

0/0: <singular-noun-to-its-indefinite-article>:  CW: 03800000
  English:
   <en-trie-indef-a>       0/0:  ==>  CS: 00800000
   <en-trie-indef-b>       0/0:  ==>  CS: 01000000
   <en-trie-indef-c>       0/0:  ==>  CS: 02000000
  min 2, max 2

0/0: <en-trie-indef-a>:  CS: 00800000
  English:
   oneir* an       0/0:  ==>  CS: 00800000
   onero* an       0/0:  ==>  CS: 00800000
   ukiyo-e an       0/0:  ==>  CS: 00800000
   urao* an       0/0:  ==>  CS: 00800000
   urial* an       0/0:  ==>  CS: 00800000
   uvarovite* an       0/0:  ==>  CS: 00800000
  min 2, max 2

0/0: <en-trie-indef-b>:  CS: 01000000
  English:
   eu* a       0/0:  ==>  CS: 01000000
   ewe* a       0/0:  ==>  CS: 01000000
   ewftes a       0/0:  ==>  CS: 01000000
   ewghen a       0/0:  ==>  CS: 01000000
   ewk a       0/0:  ==>  CS: 01000000
   houri a       0/0:  ==>  CS: 01000000
   once* a       0/0:  ==>  CS: 01000000
   one* a       0/0:  ==>  CS: 01000000
   onst a       0/0:  ==>  CS: 01000000
   oui* a       0/0:  ==>  CS: 01000000
   u a       0/0:  ==>  CS: 01000000
   u-* a       0/0:  ==>  CS: 01000000
   u'* a       0/0:  ==>  CS: 01000000
   uakari a       0/0:  ==>  CS: 01000000
   ub* a       0/0:  ==>  CS: 01000000
   udal* a       0/0:  ==>  CS: 01000000
   udomet* a       0/0:  ==>  CS: 01000000
   uey a       0/0:  ==>  CS: 01000000
   ueys a       0/0:  ==>  CS: 01000000
   ufo* a       0/0:  ==>  CS: 01000000
   uganda* a       0/0:  ==>  CS: 01000000
   ugr* a       0/0:  ==>  CS: 01000000
   uint* a       0/0:  ==>  CS: 01000000
   uk* a       0/0:  ==>  CS: 01000000
   ulex a       0/0:  ==>  CS: 01000000
   uli* a       0/0:  ==>  CS: 01000000
   ulo* a       0/0:  ==>  CS: 01000000
   ulu* a       0/0:  ==>  CS: 01000000
   una a       0/0:  ==>  CS: 01000000
   unabomb* a       0/0:  ==>  CS: 01000000
   unalist a       0/0:  ==>  CS: 01000000
   unanimit* a       0/0:  ==>  CS: 01000000
   unanimous* a       0/0:  ==>  CS: 01000000
   unesco a       0/0:  ==>  CS: 01000000
   unescos a       0/0:  ==>  CS: 01000000
   unia* a       0/0:  ==>  CS: 01000000
   unic* a       0/0:  ==>  CS: 01000000
   unif* a       0/0:  ==>  CS: 01000000
   unig* a       0/0:  ==>  CS: 01000000
   unil* a       0/0:  ==>  CS: 01000000
   unio* a       0/0:  ==>  CS: 01000000
   unip* a       0/0:  ==>  CS: 01000000
   uniq* a       0/0:  ==>  CS: 01000000
   unis* a       0/0:  ==>  CS: 01000000
   unit* a       0/0:  ==>  CS: 01000000
   univ* a       0/0:  ==>  CS: 01000000
   upas* a       0/0:  ==>  CS: 01000000
   ura* a       0/0:  ==>  CS: 01000000
   ure* a       0/0:  ==>  CS: 01000000
   uri* a       0/0:  ==>  CS: 01000000
   uru* a       0/0:  ==>  CS: 01000000
   usa* a       0/0:  ==>  CS: 01000000
   use* a       0/0:  ==>  CS: 01000000
   usi* a       0/0:  ==>  CS: 01000000
   usu* a       0/0:  ==>  CS: 01000000
   utas* a       0/0:  ==>  CS: 01000000
   ute* a       0/0:  ==>  CS: 01000000
   uti* a       0/0:  ==>  CS: 01000000
   uto* a       0/0:  ==>  CS: 01000000
   utr* a       0/0:  ==>  CS: 01000000
   uttoxeter* a       0/0:  ==>  CS: 01000000
   uva* a       0/0:  ==>  CS: 01000000
   uvu* a       0/0:  ==>  CS: 01000000
  min 2, max 2

0/0: <en-trie-indef-c>:  CS: 02000000
  English:
   a* an       0/0:  ==>  CS: 02000000
   e* an       0/0:  ==>  CS: 02000000
   i* an       0/0:  ==>  CS: 02000000
   o* an       0/0:  ==>  CS: 02000000
   u* an       0/0:  ==>  CS: 02000000
   f an       0/0:  ==>  CS: 02000000
   f's an       0/0:  ==>  CS: 02000000
   f-* an       0/0:  ==>  CS: 02000000
   fbi an       0/0:  ==>  CS: 02000000
   fo an       0/0:  ==>  CS: 02000000
   frs an       0/0:  ==>  CS: 02000000
   h an       0/0:  ==>  CS: 02000000
   h's an       0/0:  ==>  CS: 02000000
   h-* an       0/0:  ==>  CS: 02000000
   haute* an       0/0:  ==>  CS: 02000000
   heir* an       0/0:  ==>  CS: 02000000
   hono* an       0/0:  ==>  CS: 02000000
   hour* an       0/0:  ==>  CS: 02000000
   l an       0/0:  ==>  CS: 02000000
   l's an       0/0:  ==>  CS: 02000000
   l-* an       0/0:  ==>  CS: 02000000
   m an       0/0:  ==>  CS: 02000000
   m's an       0/0:  ==>  CS: 02000000
   m-* an       0/0:  ==>  CS: 02000000
   n an       0/0:  ==>  CS: 02000000
   n's an       0/0:  ==>  CS: 02000000
   n-* an       0/0:  ==>  CS: 02000000
   r an       0/0:  ==>  CS: 02000000
   r's an       0/0:  ==>  CS: 02000000
   r-* an       0/0:  ==>  CS: 02000000
   rac an       0/0:  ==>  CS: 02000000
   raf an       0/0:  ==>  CS: 02000000
   rspca an       0/0:  ==>  CS: 02000000
   rsvp an       0/0:  ==>  CS: 02000000
   s an       0/0:  ==>  CS: 02000000
   s's an       0/0:  ==>  CS: 02000000
   s-* an       0/0:  ==>  CS: 02000000
   x an       0/0:  ==>  CS: 02000000
   x's an       0/0:  ==>  CS: 02000000
   x-* an       0/0:  ==>  CS: 02000000
   xmas* an       0/0:  ==>  CS: 02000000
   yb* an       0/0:  ==>  CS: 02000000
   yc* an       0/0:  ==>  CS: 02000000
   yd* an       0/0:  ==>  CS: 02000000
   yf* an       0/0:  ==>  CS: 02000000
   yg* an       0/0:  ==>  CS: 02000000
   ym* an       0/0:  ==>  CS: 02000000
   yn* an       0/0:  ==>  CS: 02000000
   yp* an       0/0:  ==>  CS: 02000000
   yr* an       0/0:  ==>  CS: 02000000
   ys* an       0/0:  ==>  CS: 02000000
   yt* an       0/0:  ==>  CS: 02000000
   yw* an       0/0:  ==>  CS: 02000000
  min 2, max 2

0/0: <singular-noun-to-its-plural>:  DW: fc0000c0
  English:
   {...} <en-trie-plural-uninflected>       0/0:  ==>  DS: 04000000
   {...} <en-trie-plural-pronouns>       0/0:  ==>  DS: 08000000
   {...} <en-trie-plural-irregular>       0/0:  ==>  DS: 10000000
   {...} <en-trie-plural-irregular-inflections>       0/0:  ==>  DS: 20000000
   {...} <en-trie-plural-assimilated-classical-inflections>       0/0:  ==>  DS: 40000000
   {...} <en-trie-plural-irregular-o-suffixes>       0/0:  ==>  DS: 80000000
   {...} <en-trie-plural-regular-inflections>       0/0:  ==>  DS: 00000040
   {...} <en-trie-plural-append-s>       0/0:  ==>  DS: 00000080
  min 3, max 1000000000

0/0: <en-trie-plural-uninflected>:  CS: 04000000
  English:
   *fish 0       0/0:  ==>  CS: 04000000
   *ois 0       0/0:  ==>  CS: 04000000
   *sheep 0       0/0:  ==>  CS: 04000000
   *deer 0       0/0:  ==>  CS: 04000000
   *pox 0       0/0:  ==>  CS: 04000000
   *itis 0       0/0:  ==>  CS: 04000000
   bison 0       0/0:  ==>  CS: 04000000
   flounder 0       0/0:  ==>  CS: 04000000
   pliers 0       0/0:  ==>  CS: 04000000
   bream 0       0/0:  ==>  CS: 04000000
   gallows 0       0/0:  ==>  CS: 04000000
   proceedings 0       0/0:  ==>  CS: 04000000
   breeches 0       0/0:  ==>  CS: 04000000
   graffiti 0       0/0:  ==>  CS: 04000000
   rabies 0       0/0:  ==>  CS: 04000000
   britches 0       0/0:  ==>  CS: 04000000
   headquarters 0       0/0:  ==>  CS: 04000000
   salmon 0       0/0:  ==>  CS: 04000000
   carp 0       0/0:  ==>  CS: 04000000
   herpes 0       0/0:  ==>  CS: 04000000
   scissors 0       0/0:  ==>  CS: 04000000
   chassis 0       0/0:  ==>  CS: 04000000
   high-jinks 0       0/0:  ==>  CS: 04000000
   sea-bass 0       0/0:  ==>  CS: 04000000
   clippers 0       0/0:  ==>  CS: 04000000
   homework 0       0/0:  ==>  CS: 04000000
   series 0       0/0:  ==>  CS: 04000000
   cod 0       0/0:  ==>  CS: 04000000
   innings 0       0/0:  ==>  CS: 04000000
   shears 0       0/0:  ==>  CS: 04000000
   contretemps 0       0/0:  ==>  CS: 04000000
   jackanapes 0       0/0:  ==>  CS: 04000000
   species 0       0/0:  ==>  CS: 04000000
   corps 0       0/0:  ==>  CS: 04000000
   mackerel 0       0/0:  ==>  CS: 04000000
   swine 0       0/0:  ==>  CS: 04000000
   debris 0       0/0:  ==>  CS: 04000000
   measles 0       0/0:  ==>  CS: 04000000
   trout 0       0/0:  ==>  CS: 04000000
   diabetes 0       0/0:  ==>  CS: 04000000
   mews 0       0/0:  ==>  CS: 04000000
   tuna 0       0/0:  ==>  CS: 04000000
   djinn 0       0/0:  ==>  CS: 04000000
   mumps 0       0/0:  ==>  CS: 04000000
   whiting 0       0/0:  ==>  CS: 04000000
   eland 0       0/0:  ==>  CS: 04000000
   news 0       0/0:  ==>  CS: 04000000
   wildebeest 0       0/0:  ==>  CS: 04000000
   elk 0       0/0:  ==>  CS: 04000000
   pincers 0       0/0:  ==>  CS: 04000000
  min 2, max 2

0/0: <en-trie-plural-pronouns>:  CS: 08000000
  English:
   i we       0/0:  ==>  CS: 08000000
   you you       0/0:  ==>  CS: 08000000
   thou you       0/0:  ==>  CS: 08000000
   she they       0/0:  ==>  CS: 08000000
   he they       0/0:  ==>  CS: 08000000
   it they       0/0:  ==>  CS: 08000000
   they they       0/0:  ==>  CS: 08000000
   me us       0/0:  ==>  CS: 08000000
   you you       0/0:  ==>  CS: 08000000
   thee you       0/0:  ==>  CS: 08000000
   her them       0/0:  ==>  CS: 08000000
   him them       0/0:  ==>  CS: 08000000
   it them       0/0:  ==>  CS: 08000000
   them them       0/0:  ==>  CS: 08000000
   myself ourselves       0/0:  ==>  CS: 08000000
   yourself yourself       0/0:  ==>  CS: 08000000
   thyself yourself       0/0:  ==>  CS: 08000000
   herself themselves       0/0:  ==>  CS: 08000000
   himself themselves       0/0:  ==>  CS: 08000000
   itself themselves       0/0:  ==>  CS: 08000000
   themself themselves       0/0:  ==>  CS: 08000000
   oneself oneselves       0/0:  ==>  CS: 08000000
  min 2, max 2

0/0: <en-trie-plural-irregular>:  CS: 10000000
  English:
   beef beefs       0/0:  ==>  CS: 10000000
   brother brothers       0/0:  ==>  CS: 10000000
   child children       0/0:  ==>  CS: 10000000
   cow cows       0/0:  ==>  CS: 10000000
   ephemeris ephemerides       0/0:  ==>  CS: 10000000
   genie genies       0/0:  ==>  CS: 10000000
   money moneys       0/0:  ==>  CS: 10000000
   mongoose mongooses       0/0:  ==>  CS: 10000000
   mythos mythoi       0/0:  ==>  CS: 10000000
   octopus octopuses       0/0:  ==>  CS: 10000000
   ox oxen       0/0:  ==>  CS: 10000000
   soliloquy soliloquies       0/0:  ==>  CS: 10000000
   trilby trilbys       0/0:  ==>  CS: 10000000
  min 2, max 2

0/0: <en-trie-plural-irregular-inflections>:  CS: 20000000
  English:
   *man 3men       0/0:  ==>  CS: 20000000
   *blouse 2ses       0/0:  ==>  CS: 20000000
   *louse 5lice       0/0:  ==>  CS: 20000000
   *mouse 5mice       0/0:  ==>  CS: 20000000
   *tooth 5teeth       0/0:  ==>  CS: 20000000
   *goose 5geese       0/0:  ==>  CS: 20000000
   *foot 4feet       0/0:  ==>  CS: 20000000
   *zoon 4zoa       0/0:  ==>  CS: 20000000
   *cis 3ces       0/0:  ==>  CS: 20000000
   *sis 3ses       0/0:  ==>  CS: 20000000
   *xis 3xes       0/0:  ==>  CS: 20000000
  min 2, max 2

0/0: <en-trie-plural-assimilated-classical-inflections>:  CS: 40000000
  English:
   alumna alumnae       0/0:  ==>  CS: 40000000
   alga algae       0/0:  ==>  CS: 40000000
   vertebra vertebrae       0/0:  ==>  CS: 40000000
   codex codices       0/0:  ==>  CS: 40000000
   murex murices       0/0:  ==>  CS: 40000000
   silex silices       0/0:  ==>  CS: 40000000
   aphelion aphelia       0/0:  ==>  CS: 40000000
   hyperbaton hyperbata       0/0:  ==>  CS: 40000000
   perihelion perihelia       0/0:  ==>  CS: 40000000
   asyndeton asyndeta       0/0:  ==>  CS: 40000000
   noumenon noumena       0/0:  ==>  CS: 40000000
   phenomenon phenomena       0/0:  ==>  CS: 40000000
   criterion criteria       0/0:  ==>  CS: 40000000
   organon organa       0/0:  ==>  CS: 40000000
   prolegomenon prolegomena       0/0:  ==>  CS: 40000000
   agendum agenda       0/0:  ==>  CS: 40000000
   datum data       0/0:  ==>  CS: 40000000
   extremum extrema       0/0:  ==>  CS: 40000000
   bacterium bacteria       0/0:  ==>  CS: 40000000
   desideratum desiderata       0/0:  ==>  CS: 40000000
   stratum strata       0/0:  ==>  CS: 40000000
   candelabrum candelabra       0/0:  ==>  CS: 40000000
   erratum errata       0/0:  ==>  CS: 40000000
   ovum ova       0/0:  ==>  CS: 40000000
  min 2, max 2

0/0: <en-trie-plural-irregular-o-suffixes>:  CS: 80000000
  English:
   albino albinos       0/0:  ==>  CS: 80000000
   alto altos       0/0:  ==>  CS: 80000000
   archipelago archipelagos       0/0:  ==>  CS: 80000000
   armadillo armadillos       0/0:  ==>  CS: 80000000
   basso bassos       0/0:  ==>  CS: 80000000
   canto cantos       0/0:  ==>  CS: 80000000
   commando commandos       0/0:  ==>  CS: 80000000
   contralto contraltos       0/0:  ==>  CS: 80000000
   crescendo crescendos       0/0:  ==>  CS: 80000000
   ditto dittos       0/0:  ==>  CS: 80000000
   dynamo dynamos       0/0:  ==>  CS: 80000000
   embryo embryos       0/0:  ==>  CS: 80000000
   fiasco fiascos       0/0:  ==>  CS: 80000000
   generalissimo generalissimos       0/0:  ==>  CS: 80000000
   ghetto ghettos       0/0:  ==>  CS: 80000000
   guano guanos       0/0:  ==>  CS: 80000000
   inferno infernos       0/0:  ==>  CS: 80000000
   jumbo jumbos       0/0:  ==>  CS: 80000000
   lingo lingos       0/0:  ==>  CS: 80000000
   lumbago lumbagos       0/0:  ==>  CS: 80000000
   magneto magnetos       0/0:  ==>  CS: 80000000
   manifesto manifestos       0/0:  ==>  CS: 80000000
   medico medicos       0/0:  ==>  CS: 80000000
   octavo octavos       0/0:  ==>  CS: 80000000
   photo photos       0/0:  ==>  CS: 80000000
   pro pros       0/0:  ==>  CS: 80000000
   quarto quartos       0/0:  ==>  CS: 80000000
   rhino rhinos       0/0:  ==>  CS: 80000000
   solo solos       0/0:  ==>  CS: 80000000
   soprano sopranos       0/0:  ==>  CS: 80000000
   stylo stylos       0/0:  ==>  CS: 80000000
   tempo tempos       0/0:  ==>  CS: 80000000
  min 2, max 2

0/0: <en-trie-plural-regular-inflections>:  CS: 00000040
  English:
   *ch 0es       0/0:  ==>  CS: 00000040
   *sh 0es       0/0:  ==>  CS: 00000040
   *ss 0es       0/0:  ==>  CS: 00000040
   *alf 1ves       0/0:  ==>  CS: 00000040
   *elf 1ves       0/0:  ==>  CS: 00000040
   *olf 1ves       0/0:  ==>  CS: 00000040
   *eaf 1ves       0/0:  ==>  CS: 00000040
   *arf 1ves       0/0:  ==>  CS: 00000040
   *nife 2ves       0/0:  ==>  CS: 00000040
   *life 2ves       0/0:  ==>  CS: 00000040
   *wife 2ves       0/0:  ==>  CS: 00000040
   *ax 0es       0/0:  ==>  CS: 00000040
   *ex 0es       0/0:  ==>  CS: 00000040
   *ix 0es       0/0:  ==>  CS: 00000040
   *ox 0es       0/0:  ==>  CS: 00000040
   *ux 0es       0/0:  ==>  CS: 00000040
   *as 0es       0/0:  ==>  CS: 00000040
   *es 0es       0/0:  ==>  CS: 00000040
   *is 0es       0/0:  ==>  CS: 00000040
   *os 0es       0/0:  ==>  CS: 00000040
   *us 0es       0/0:  ==>  CS: 00000040
   *az 0es       0/0:  ==>  CS: 00000040
   *ez 0es       0/0:  ==>  CS: 00000040
   *iz 0es       0/0:  ==>  CS: 00000040
   *oz 0es       0/0:  ==>  CS: 00000040
   *uz 0es       0/0:  ==>  CS: 00000040
   *ay 0s       0/0:  ==>  CS: 00000040
   *by 1ies       0/0:  ==>  CS: 00000040
   *cy 1ies       0/0:  ==>  CS: 00000040
   *dy 1ies       0/0:  ==>  CS: 00000040
   *ey 0s       0/0:  ==>  CS: 00000040
   *fy 1ies       0/0:  ==>  CS: 00000040
   *gy 1ies       0/0:  ==>  CS: 00000040
   *hy 1ies       0/0:  ==>  CS: 00000040
   *iy 0s       0/0:  ==>  CS: 00000040
   *jy 1ies       0/0:  ==>  CS: 00000040
   *ky 1ies       0/0:  ==>  CS: 00000040
   *ly 1ies       0/0:  ==>  CS: 00000040
   *my 1ies       0/0:  ==>  CS: 00000040
   *ny 1ies       0/0:  ==>  CS: 00000040
   *oy 0s       0/0:  ==>  CS: 00000040
   *py 1ies       0/0:  ==>  CS: 00000040
   *qy 1ies       0/0:  ==>  CS: 00000040
   *ry 1ies       0/0:  ==>  CS: 00000040
   *sy 1ies       0/0:  ==>  CS: 00000040
   *ty 1ies       0/0:  ==>  CS: 00000040
   *uy 0s       0/0:  ==>  CS: 00000040
   *vy 1ies       0/0:  ==>  CS: 00000040
   *wy 1ies       0/0:  ==>  CS: 00000040
   *xy 1ies       0/0:  ==>  CS: 00000040
   *yy 1ies       0/0:  ==>  CS: 00000040
   *zy 1ies       0/0:  ==>  CS: 00000040
   *ao 0s       0/0:  ==>  CS: 00000040
   *bo 1oes       0/0:  ==>  CS: 00000040
   *co 1oes       0/0:  ==>  CS: 00000040
   *do 1oes       0/0:  ==>  CS: 00000040
   *eo 0s       0/0:  ==>  CS: 00000040
   *fo 1oes       0/0:  ==>  CS: 00000040
   *go 1oes       0/0:  ==>  CS: 00000040
   *ho 1oes       0/0:  ==>  CS: 00000040
   *io 0s       0/0:  ==>  CS: 00000040
   *jo 1oes       0/0:  ==>  CS: 00000040
   *ko 1oes       0/0:  ==>  CS: 00000040
   *lo 1oes       0/0:  ==>  CS: 00000040
   *mo 1oes       0/0:  ==>  CS: 00000040
   *no 1oes       0/0:  ==>  CS: 00000040
   *oo 0s       0/0:  ==>  CS: 00000040
   *po 1oes       0/0:  ==>  CS: 00000040
   *qo 1oes       0/0:  ==>  CS: 00000040
   *ro 1oes       0/0:  ==>  CS: 00000040
   *so 0s       0/0:  ==>  CS: 00000040
   *to 1oes       0/0:  ==>  CS: 00000040
   *uo 0s       0/0:  ==>  CS: 00000040
   *vo 1oes       0/0:  ==>  CS: 00000040
   *wo 1oes       0/0:  ==>  CS: 00000040
   *xo 0s       0/0:  ==>  CS: 00000040
   *yo 1oes       0/0:  ==>  CS: 00000040
   *zo 0s       0/0:  ==>  CS: 00000040
  min 2, max 2

0/0: <en-trie-plural-append-s>:  CS: 00000080
  English:
   * 0s       0/0:  ==>  CS: 00000080
  min 2, max 2

0/0: <verb-conjugation-instructions>:  DW: 000001c0
  English:
   be <to-be-conjugation>       0/0:  ==>  DS: 00000100 CW: 00000f00
   be able to {...} <to-be-able-to-auxiliary>       0/0:  ==>  DS: 00000100
   be able to <to-be-able-to-conjugation>       0/0:  ==>  DS: 00000100
   could <modal-conjugation>       0/0:  ==>  DS: 00000100
   may <modal-conjugation>       0/0:  ==>  DS: 00000100
   might <modal-conjugation>       0/0:  ==>  DS: 00000100
   must <modal-conjugation>       0/0:  ==>  DS: 00000100
   should <modal-conjugation>       0/0:  ==>  DS: 00000100
   would <modal-conjugation>       0/0:  ==>  DS: 00000100
   auxiliary-have <to-have-conjugation>       0/0:  ==>  DS: 00000100
   do <to-do-conjugation>       0/0:  ==>  DS: 00000100 CW: 000001c0
   're <contracted-to-be-conjugation>       0/0:  ==>  DS: 00000100
   've <contracted-to-have-conjugation>       0/0:  ==>  DS: 00000100
   aren't <arent-conjugation>       0/0:  ==>  DS: 00000100
   can't <cant-modal-conjugation>       0/0:  ==>  DS: 00000100
   don't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   haven't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   mayn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   mightn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   mustn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   wouldn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   couldn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   shouldn't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   won't <informal-negated-modal-conjugation>       0/0:  ==>  DS: 00000100
   {...} <regular-verb-conjugation>       0/0:  ==>  DW: 000000c0
  min 2, max 1000000000

0/0: <to-have-conjugation>: 
  English:
   2 having       0/0:  ==>  CS: 80000000
   3 had       0/0:  ==>  CS: 80000000
   <auxiliary-verb-only>       0/0:  ==> 
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <to-have-tabulation>       0/0:  ==>  DS: 40000000 CW: 60000000
  min 1, max 1000000000

0/0: <to-have-tabulation>:  DS: 40000000 CW: 60000000
  English:
   a1+ <to-have-present>       0/0:  ==>  DS: 60000000 CW: 60000000
   a1- <to-have-present> not       0/0:  ==>  DS: 60000000 CW: 60000000
   a2+ had       0/0:  ==>  CS: 40000000
   a2- had not       0/0:  ==>  CS: 40000000
  min 2, max 3

0/0: <to-have-present>:  CS: 20000000
  English:
   have       0/0:  ==>  CS: 20000000
   have       0/0:  ==>  CS: 20000000
   has       0/0:  ==>  CS: 20000000
   have       0/0:  ==>  CS: 20000000
   have       0/0:  ==>  CS: 20000000
   have       0/0:  ==>  CS: 20000000
  min 1, max 1

0/0: <to-do-conjugation>:  CW: 000001c0
  English:
   2 doing       0/0:  ==>  CS: 00000100
   3 done       0/0:  ==>  CS: 00000100
   <to-do-tabulation>       0/0:  ==>  DS: 00000080 CW: 000000c0
  min 2, max 6

0/0: <to-do-tabulation>:  DS: 00000080 CW: 000000c0
  English:
   a1+ <to-do-present>       0/0:  ==>  DS: 000000c0 CW: 000000c0
   a1- <to-do-present> not       0/0:  ==>  DS: 000000c0 CW: 000000c0
   a2+ did       0/0:  ==>  CS: 00000080
   a2- did not       0/0:  ==>  CS: 00000080
   a3 ( t1 auxiliary-have ) done       0/0:  ==>  CS: 00000080
   a4 ( t2 auxiliary-have ) done       0/0:  ==>  CS: 00000080
   a5+ will do       0/0:  ==>  CS: 00000080
   a5- will not do       0/0:  ==>  CS: 00000080
   p* done by       0/0:  ==>  CS: 00000080
  min 2, max 6

0/0: <to-do-present>:  CS: 00000040
  English:
   do       0/0:  ==>  CS: 00000040
   do       0/0:  ==>  CS: 00000040
   does       0/0:  ==>  CS: 00000040
   do       0/0:  ==>  CS: 00000040
   do       0/0:  ==>  CS: 00000040
   do       0/0:  ==>  CS: 00000040
  min 1, max 1

0/0: <regular-verb-conjugation>:  DW: 000000c0
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 00000080
   3 <en-trie-past-participle>       0/0:  ==>  DS: 00000080
   5 <en-trie-present-verb-form>       0/0:  ==>  DS: 00000080
   6 <en-trie-past>       0/0:  ==>  DS: 00000080
   <regular-verb-tabulation>       0/0:  ==>  DS: 00000040 CW: 80000040
  min 2, max 1000000000

0/0: <regular-verb-tabulation>:  DS: 00000040 CW: 80000040
  English:
   a1+ <regular-verb-present>       0/0:  ==>  DS: 80000040 CW: 80000040
   a1- ( do ) 1       0/0:  ==>  CS: 00000040
   a2+ 6       0/0:  ==>  CS: 00000040
   a2- ( do ) 1       0/0:  ==>  CS: 00000040
   a3 ( t1 auxiliary-have ) 3       0/0:  ==>  CS: 00000040
   a4 ( t2 auxiliary-have ) 3       0/0:  ==>  CS: 00000040
   a5+ will 1       0/0:  ==>  CS: 00000040
   a5- will not 1       0/0:  ==>  CS: 00000040
   p* 3 by       0/0:  ==>  CS: 00000040
  min 2, max 6

0/0: <regular-verb-present>:  CS: 80000000
  English:
   1       0/0:  ==>  CS: 80000000
   1       0/0:  ==>  CS: 80000000
   5       0/0:  ==>  CS: 80000000
   1       0/0:  ==>  CS: 80000000
   1       0/0:  ==>  CS: 80000000
   1       0/0:  ==>  CS: 80000000
  min 1, max 1

0/0: <to-be-conjugation>:  CW: 00000f00
  English:
   2 being       0/0:  ==>  CS: 00000800
   3 been       0/0:  ==>  CS: 00000800
   <to-be-tabulation>       0/0:  ==>  DS: 00000400 CW: 00000700
  min 2, max 6

0/0: <to-be-tabulation>:  DS: 00000400 CW: 00000700
  English:
   a1+ <to-be-present>       0/0:  ==>  DS: 00000500 CW: 00000500
   a1- <to-be-present> not       0/0:  ==>  DS: 00000500 CW: 00000500
   a2+ <to-be-past>       0/0:  ==>  DS: 00000600 CW: 00000600
   a2- <to-be-past> not       0/0:  ==>  DS: 00000600 CW: 00000600
   a3 ( t1 auxiliary-have ) been       0/0:  ==>  CS: 00000400
   a4 ( t2 auxiliary-have ) been       0/0:  ==>  CS: 00000400
   a5+ will be       0/0:  ==>  CS: 00000400
   a5- will not be       0/0:  ==>  CS: 00000400
  min 2, max 6

0/0: <to-be-present>:  CS: 00000100
  English:
   am       0/0:  ==>  CS: 00000100
   are       0/0:  ==>  CS: 00000100
   is       0/0:  ==>  CS: 00000100
   are       0/0:  ==>  CS: 00000100
   are       0/0:  ==>  CS: 00000100
   are       0/0:  ==>  CS: 00000100
  min 1, max 1

0/0: <to-be-past>:  CS: 00000200
  English:
   was       0/0:  ==>  CS: 00000200
   were       0/0:  ==>  CS: 00000200
   was       0/0:  ==>  CS: 00000200
   were       0/0:  ==>  CS: 00000200
   were       0/0:  ==>  CS: 00000200
   were       0/0:  ==>  CS: 00000200
  min 1, max 1

0/0: <to-be-able-to-conjugation>:  DW: 06000000
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 04000000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 04000000
   <to-be-able-to-tabulation>       0/0:  ==>  CS: 02000000
  min 3, max 1000000000

0/0: <to-be-able-to-tabulation>:  CS: 02000000
  English:
   a1+ can ++1       0/0:  ==>  CS: 02000000
   a1- cannot ++1       0/0:  ==>  CS: 02000000
   a2+ could ++1       0/0:  ==>  CS: 02000000
   a2- could not ++1       0/0:  ==>  CS: 02000000
   a3 ( t1 auxiliary-have ) been able to ++1       0/0:  ==>  CS: 02000000
   a4 ( t2 auxiliary-have ) been able to ++1       0/0:  ==>  CS: 02000000
   a5+ will be able to ++1       0/0:  ==>  CS: 02000000
   a5- will not be able to ++1       0/0:  ==>  CS: 02000000
  min 3, max 9

0/0: <to-be-able-to-auxiliary>:  DW: 01800000
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 01000000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 01000000
   <to-be-able-to-auxiliary-tabulation>       0/0:  ==>  CS: 00800000
  min 3, max 1000000000

0/0: <to-be-able-to-auxiliary-tabulation>:  CS: 00800000
  English:
   a ( be able to ) 4       0/0:  ==>  CS: 00800000
   p ( be able to ) be 3 ( 4 ) by       0/0:  ==>  CS: 00800000
  min 7, max 12

0/0: <modal-conjugation>:  DW: 18000000
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 10000000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 10000000
   <modal-tabulation>       0/0:  ==>  CS: 08000000
  min 3, max 1000000000

0/0: <modal-tabulation>:  CS: 08000000
  English:
   a1+ 4 ++1       0/0:  ==>  CS: 08000000
   a1- 4 not ++1       0/0:  ==>  CS: 08000000
   a2+ 4 have ++2       0/0:  ==>  CS: 08000000
   a2- 4 not have ++2       0/0:  ==>  CS: 08000000
   a3+ 4 have ++2       0/0:  ==>  CS: 08000000
   a3- 4 not have ++2       0/0:  ==>  CS: 08000000
   a4+ 4 have ++2       0/0:  ==>  CS: 08000000
   a4- 4 not have ++2       0/0:  ==>  CS: 08000000
   a5+ 4 ++1       0/0:  ==>  CS: 08000000
   a5- 4 not ++1       0/0:  ==>  CS: 08000000
  min 3, max 5

0/0: <contracted-to-be-conjugation>: 
  English:
   2 being       0/0:  ==>  CS: 00004000
   3 been       0/0:  ==>  CS: 00004000
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <contracted-to-be-tabulation>       0/0:  ==>  DS: 00002000 CW: 00003e00
  min 1, max 1000000000

0/0: <contracted-to-be-tabulation>:  DS: 00002000 CW: 00003e00
  English:
   a1+ <contracted-to-be-present>       0/0:  ==>  DS: 00002200 CW: 00002200
   a1- <contracted-to-be-present> not       0/0:  ==>  DS: 00002200 CW: 00002200
   a2+ <contracted-to-be-past>       0/0:  ==>  DS: 00002400 CW: 00002400
   a2- <contracted-to-be-past-negated>       0/0:  ==>  DS: 00002800 CW: 00002800
   a3+ <contracted-to-have-present> been       0/0:  ==>  DS: 00003000 CW: 00003000
   a3- <contracted-to-have-present> not been       0/0:  ==>  DS: 00003000 CW: 00003000
   a4+ 'd been       0/0:  ==>  CS: 00002000
   a4- 'd not been       0/0:  ==>  CS: 00002000
   a5+ 'll be       0/0:  ==>  CS: 00002000
   a5- 'll not be       0/0:  ==>  CS: 00002000
  min 2, max 4

0/0: <contracted-to-be-present>:  CS: 00000200
  English:
   'm       0/0:  ==>  CS: 00000200
   're       0/0:  ==>  CS: 00000200
   's       0/0:  ==>  CS: 00000200
   're       0/0:  ==>  CS: 00000200
   're       0/0:  ==>  CS: 00000200
   're       0/0:  ==>  CS: 00000200
  min 1, max 1

0/0: <contracted-to-be-past>:  CS: 00000400
  English:
   was       0/0:  ==>  CS: 00000400
   were       0/0:  ==>  CS: 00000400
   was       0/0:  ==>  CS: 00000400
   were       0/0:  ==>  CS: 00000400
   were       0/0:  ==>  CS: 00000400
   were       0/0:  ==>  CS: 00000400
  min 1, max 1

0/0: <contracted-to-be-past-negated>:  CS: 00000800
  English:
   wasn't       0/0:  ==>  CS: 00000800
   weren't       0/0:  ==>  CS: 00000800
   wasn't       0/0:  ==>  CS: 00000800
   weren't       0/0:  ==>  CS: 00000800
   weren't       0/0:  ==>  CS: 00000800
   weren't       0/0:  ==>  CS: 00000800
  min 1, max 1

0/0: <contracted-to-have-conjugation>: 
  English:
   2 having       0/0:  ==>  CS: 00010000
   3 had       0/0:  ==>  CS: 00010000
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <contracted-to-have-tabulation>       0/0:  ==>  DS: 00008000 CW: 00009000
  min 1, max 1000000000

0/0: <contracted-to-have-tabulation>:  DS: 00008000 CW: 00009000
  English:
   a1+ <contracted-to-have-present>       0/0:  ==>  DS: 00009000 CW: 00009000
   a1- <contracted-to-have-present> not       0/0:  ==>  DS: 00009000 CW: 00009000
   a2+ had       0/0:  ==>  CS: 00008000
   a2- hadn't       0/0:  ==>  CS: 00008000
   a3+ <contracted-to-have-present> had       0/0:  ==>  DS: 00009000 CW: 00009000
   a3- <contracted-to-have-present> not had       0/0:  ==>  DS: 00009000 CW: 00009000
   a4+ 'd had       0/0:  ==>  CS: 00008000
   a4- 'd not had       0/0:  ==>  CS: 00008000
   a5+ 'll have       0/0:  ==>  CS: 00008000
   a5- 'll not have       0/0:  ==>  CS: 00008000
  min 2, max 4

0/0: <contracted-to-have-present>:  CS: 00001000
  English:
   've       0/0:  ==>  CS: 00001000
   've       0/0:  ==>  CS: 00001000
   's       0/0:  ==>  CS: 00001000
   've       0/0:  ==>  CS: 00001000
   've       0/0:  ==>  CS: 00001000
   've       0/0:  ==>  CS: 00001000
  min 1, max 1

0/0: <arent-conjugation>: 
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 00200000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 00200000
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <arent-tabulation>       0/0:  ==>  DS: 00100000 CW: 001e0000
  min 1, max 1000000000

0/0: <arent-tabulation>:  DS: 00100000 CW: 001e0000
  English:
   a1+ <arent-present>       0/0:  ==>  DS: 00120000 CW: 00120000
   a2+ <arent-past>       0/0:  ==>  DS: 00140000 CW: 00140000
   a3+ <arent-perfect>       0/0:  ==>  DS: 00180000 CW: 00180000
   a4+ hadn't been       0/0:  ==>  CS: 00100000
   a5+ won't be       0/0:  ==>  CS: 00100000
  min 2, max 3

0/0: <arent-present>:  CS: 00020000
  English:
   am not       0/0:  ==>  CS: 00020000
   aren't       0/0:  ==>  CS: 00020000
   isn't       0/0:  ==>  CS: 00020000
   aren't       0/0:  ==>  CS: 00020000
   aren't       0/0:  ==>  CS: 00020000
   aren't       0/0:  ==>  CS: 00020000
  min 1, max 2

0/0: <arent-past>:  CS: 00040000
  English:
   wasn't       0/0:  ==>  CS: 00040000
   weren't       0/0:  ==>  CS: 00040000
   wasn't       0/0:  ==>  CS: 00040000
   weren't       0/0:  ==>  CS: 00040000
   weren't       0/0:  ==>  CS: 00040000
   weren't       0/0:  ==>  CS: 00040000
  min 1, max 1

0/0: <arent-perfect>:  CS: 00080000
  English:
   haven't been       0/0:  ==>  CS: 00080000
   haven't been       0/0:  ==>  CS: 00080000
   hasn't been       0/0:  ==>  CS: 00080000
   haven't been       0/0:  ==>  CS: 00080000
   haven't been       0/0:  ==>  CS: 00080000
   haven't been       0/0:  ==>  CS: 00080000
  min 2, max 2

0/0: <informal-negated-modal-conjugation>: 
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 20000000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 20000000
   5 <en-trie-modal-contracted-past>       0/0:  ==>  DS: 21000000 CW: 21000000
   6 <en-trie-modal-contracted-future>       0/0:  ==>  DS: 22000000 CW: 22000000
   7 <en-trie-modal-contracted-present>       0/0:  ==>  DS: 24000000 CW: 24000000
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <informal-negated-modal-tabulation>       0/0:  ==>  DS: 10000000 CW: 18000000
  min 1, max 1000000000

0/0: <informal-negated-modal-tabulation>:  DS: 10000000 CW: 18000000
  English:
   a1+ <informal-negated-modal-present> ++1       0/0:  ==>  DS: 18000000 CW: 18000000
   a2+ 5 ++2       0/0:  ==>  CS: 10000000
   a3+ 5 ++2       0/0:  ==>  CS: 10000000
   a4+ 5 ++2       0/0:  ==>  CS: 10000000
   a5+ 6 ++1       0/0:  ==>  CS: 10000000
  min 3, max 3

0/0: <informal-negated-modal-present>:  CS: 08000000
  English:
   1       0/0:  ==>  CS: 08000000
   1       0/0:  ==>  CS: 08000000
   7       0/0:  ==>  CS: 08000000
   1       0/0:  ==>  CS: 08000000
   1       0/0:  ==>  CS: 08000000
   1       0/0:  ==>  CS: 08000000
  min 1, max 1

0/0: <cant-modal-conjugation>: 
  English:
   2 <en-trie-present-participle>       0/0:  ==>  DS: 00800000
   3 <en-trie-past-participle>       0/0:  ==>  DS: 00800000
   <not-instance-of-verb-at-run-time>       0/0:  ==> 
   <cant-modal-tabulation>       0/0:  ==>  CS: 00400000
  min 1, max 1000000000

0/0: <cant-modal-tabulation>:  CS: 00400000
  English:
   a1+ can't ++1       0/0:  ==>  CS: 00400000
   a2+ couldn't ++1       0/0:  ==>  CS: 00400000
   a3+ ( t1 haven't ) been able to ++1       0/0:  ==>  CS: 00400000
   a4+ ( t2 haven't ) been able to ++1       0/0:  ==>  CS: 00400000
   a5+ won't be able to ++1       0/0:  ==>  CS: 00400000
  min 3, max 9

0/0: <en-trie-modal-contracted-present>:  CS: 04000000
  English:
   can't can't       0/0:  ==>  CS: 04000000
   don't doesn't       0/0:  ==>  CS: 04000000
   haven't hasn't       0/0:  ==>  CS: 04000000
   won't won't       0/0:  ==>  CS: 04000000
   mayn't mayn't       0/0:  ==>  CS: 04000000
   mightn't mightn't       0/0:  ==>  CS: 04000000
   mustn't mustn't       0/0:  ==>  CS: 04000000
   wouldn't wouldn't       0/0:  ==>  CS: 04000000
   couldn't couldn't       0/0:  ==>  CS: 04000000
   shouldn't shouldn't       0/0:  ==>  CS: 04000000
  min 2, max 2

0/0: <en-trie-modal-contracted-past>:  CS: 01000000
  English:
   can't couldn't       0/0:  ==>  CS: 01000000
   don't didn't       0/0:  ==>  CS: 01000000
   haven't hadn't       0/0:  ==>  CS: 01000000
   won't wouldn't       0/0:  ==>  CS: 01000000
   mayn't mayn't+have       0/0:  ==>  CS: 01000000
   mightn't mightn't+have       0/0:  ==>  CS: 01000000
   mustn't mustn't+have       0/0:  ==>  CS: 01000000
   wouldn't wouldn't+have       0/0:  ==>  CS: 01000000
   couldn't couldn't+have       0/0:  ==>  CS: 01000000
   shouldn't shouldn't+have       0/0:  ==>  CS: 01000000
  min 2, max 2

0/0: <en-trie-modal-contracted-future>:  CS: 02000000
  English:
   can't won't+be+able+to       0/0:  ==>  CS: 02000000
   don't won't       0/0:  ==>  CS: 02000000
   haven't won't+have       0/0:  ==>  CS: 02000000
   won't won't       0/0:  ==>  CS: 02000000
   mayn't mayn't       0/0:  ==>  CS: 02000000
   mightn't mightn't       0/0:  ==>  CS: 02000000
   mustn't mustn't       0/0:  ==>  CS: 02000000
   wouldn't wouldn't       0/0:  ==>  CS: 02000000
   couldn't couldn't       0/0:  ==>  CS: 02000000
   shouldn't shouldn't       0/0:  ==>  CS: 02000000
  min 2, max 2

0/0: <en-trie-present-participle>:  DW: 0001f000
  English:
   {...} <en-trie-irregular-present-participle>       0/0:  ==>  DS: 00001000
   {...} <en-trie-irregular-compound-present-participle>       0/0:  ==>  DS: 00002000
   {...} <en-trie-regular-a-present-participle>       0/0:  ==>  DS: 00004000
   {...} <en-trie-regular-b-present-participle>       0/0:  ==>  DS: 00008000
   {...} <en-trie-regular-c-present-participle>       0/0:  ==>  DS: 00010000
  min 3, max 1000000000

0/0: <en-trie-irregular-present-participle>:  CS: 00001000
  English:
   boob 0ing       0/0:  ==>  CS: 00001000
   had 0ding       0/0:  ==>  CS: 00001000
   quad 0ding       0/0:  ==>  CS: 00001000
   quod 0ding       0/0:  ==>  CS: 00001000
   squid 0ding       0/0:  ==>  CS: 00001000
   whid 0ding       0/0:  ==>  CS: 00001000
   ballad 0ing       0/0:  ==>  CS: 00001000
   salad 0ing       0/0:  ==>  CS: 00001000
   invalid 0ing       0/0:  ==>  CS: 00001000
   ref 0fing       0/0:  ==>  CS: 00001000
   stravaig 0ing       0/0:  ==>  CS: 00001000
   scoog 0ing       0/0:  ==>  CS: 00001000
   scoug 0ing       0/0:  ==>  CS: 00001000
   yak 0king       0/0:  ==>  CS: 00001000
   yok 0king       0/0:  ==>  CS: 00001000
   lek 0king       0/0:  ==>  CS: 00001000
   trek 0king       0/0:  ==>  CS: 00001000
   spaniel 0ling       0/0:  ==>  CS: 00001000
   vermeil 0ling       0/0:  ==>  CS: 00001000
   madam 0ing       0/0:  ==>  CS: 00001000
   buckram 0ing       0/0:  ==>  CS: 00001000
   hem 0ming       0/0:  ==>  CS: 00001000
   emblem 0ing       0/0:  ==>  CS: 00001000
   item 0ing       0/0:  ==>  CS: 00001000
   slalom 0ing       0/0:  ==>  CS: 00001000
   alarum 0ing       0/0:  ==>  CS: 00001000
   possum 0ing       0/0:  ==>  CS: 00001000
   chalan 0ing       0/0:  ==>  CS: 00001000
   challan 0ing       0/0:  ==>  CS: 00001000
   tyran 0ning       0/0:  ==>  CS: 00001000
   den 0ning       0/0:  ==>  CS: 00001000
   hen 0ning       0/0:  ==>  CS: 00001000
   ken 0ning       0/0:  ==>  CS: 00001000
   misken 0ning       0/0:  ==>  CS: 00001000
   pen 0ning       0/0:  ==>  CS: 00001000
   unpen 0ning       0/0:  ==>  CS: 00001000
   sten 0ning       0/0:  ==>  CS: 00001000
   in 0ning       0/0:  ==>  CS: 00001000
   gin 0ning       0/0:  ==>  CS: 00001000
   begin 0ning       0/0:  ==>  CS: 00001000
   bin 0ning       0/0:  ==>  CS: 00001000
   sin 0ning       0/0:  ==>  CS: 00001000
   damaskin 0ing       0/0:  ==>  CS: 00001000
   trampolin 0ing       0/0:  ==>  CS: 00001000
   chagrin 0ing       0/0:  ==>  CS: 00001000
   satin 0ing       0/0:  ==>  CS: 00001000
   on 0ning       0/0:  ==>  CS: 00001000
   con 0ning       0/0:  ==>  CS: 00001000
   don 0ning       0/0:  ==>  CS: 00001000
   kon 0ning       0/0:  ==>  CS: 00001000
   fillip 0ing       0/0:  ==>  CS: 00001000
   turnip 0ing       0/0:  ==>  CS: 00001000
   sip 0ping       0/0:  ==>  CS: 00001000
   cop 0ping       0/0:  ==>  CS: 00001000
   lop 0ping       0/0:  ==>  CS: 00001000
   clop 0ping       0/0:  ==>  CS: 00001000
   flop 0ping       0/0:  ==>  CS: 00001000
   plop 0ping       0/0:  ==>  CS: 00001000
   slop 0ping       0/0:  ==>  CS: 00001000
   galop 0ping       0/0:  ==>  CS: 00001000
   up 0ping       0/0:  ==>  CS: 00001000
   cup 0ping       0/0:  ==>  CS: 00001000
   gar 0ring       0/0:  ==>  CS: 00001000
   mortar 0ing       0/0:  ==>  CS: 00001000
   sker 0ring       0/0:  ==>  CS: 00001000
   deter 0ring       0/0:  ==>  CS: 00001000
   inter 0ring       0/0:  ==>  CS: 00001000
   disinter 0ring       0/0:  ==>  CS: 00001000
   reinter 0ring       0/0:  ==>  CS: 00001000
   aver 0ring       0/0:  ==>  CS: 00001000
   abhor 0ring       0/0:  ==>  CS: 00001000
   vor 0ring       0/0:  ==>  CS: 00001000
   demur 0ring       0/0:  ==>  CS: 00001000
   fur 0ring       0/0:  ==>  CS: 00001000
   smur 0ring       0/0:  ==>  CS: 00001000
   caucus 0ing       0/0:  ==>  CS: 00001000
   sus 0sing       0/0:  ==>  CS: 00001000
   combat 0ing       0/0:  ==>  CS: 00001000
   ballat 0ing       0/0:  ==>  CS: 00001000
   curat 0ing       0/0:  ==>  CS: 00001000
   quadrat 0ing       0/0:  ==>  CS: 00001000
   bet 0ting       0/0:  ==>  CS: 00001000
   abet 0ting       0/0:  ==>  CS: 00001000
   fet 0ting       0/0:  ==>  CS: 00001000
   fidget 0ing       0/0:  ==>  CS: 00001000
   target 0ing       0/0:  ==>  CS: 00001000
   crochet 0ing       0/0:  ==>  CS: 00001000
   epithet 0ing       0/0:  ==>  CS: 00001000
   ratchet 0ing       0/0:  ==>  CS: 00001000
   let 0ting       0/0:  ==>  CS: 00001000
   blet 0ting       0/0:  ==>  CS: 00001000
   leaflet 0ting       0/0:  ==>  CS: 00001000
   relet 0ting       0/0:  ==>  CS: 00001000
   sublet 0ting       0/0:  ==>  CS: 00001000
   underlet 0ting       0/0:  ==>  CS: 00001000
   net 0ting       0/0:  ==>  CS: 00001000
   benet 0ting       0/0:  ==>  CS: 00001000
   overnet 0ting       0/0:  ==>  CS: 00001000
   pet 0ting       0/0:  ==>  CS: 00001000
   spet 0ting       0/0:  ==>  CS: 00001000
   ret 0ting       0/0:  ==>  CS: 00001000
   aret 0ting       0/0:  ==>  CS: 00001000
   fret 0ting       0/0:  ==>  CS: 00001000
   regret 0ting       0/0:  ==>  CS: 00001000
   basset 0ing       0/0:  ==>  CS: 00001000
   closet 0ing       0/0:  ==>  CS: 00001000
   corset 0ing       0/0:  ==>  CS: 00001000
   cosset 0ing       0/0:  ==>  CS: 00001000
   gusset 0ing       0/0:  ==>  CS: 00001000
   posset 0ing       0/0:  ==>  CS: 00001000
   roset 0ing       0/0:  ==>  CS: 00001000
   russet 0ing       0/0:  ==>  CS: 00001000
   briquet 0ting       0/0:  ==>  CS: 00001000
   coquet 0ting       0/0:  ==>  CS: 00001000
   duet 0ting       0/0:  ==>  CS: 00001000
   parquet 0ting       0/0:  ==>  CS: 00001000
   covet 0ing       0/0:  ==>  CS: 00001000
   unrivet 0ing       0/0:  ==>  CS: 00001000
   velvet 0ing       0/0:  ==>  CS: 00001000
   discomfit 0ing       0/0:  ==>  CS: 00001000
   profit 0ing       0/0:  ==>  CS: 00001000
   limit 0ing       0/0:  ==>  CS: 00001000
   delimit 0ing       0/0:  ==>  CS: 00001000
   vomit 0ing       0/0:  ==>  CS: 00001000
   rit 0ting       0/0:  ==>  CS: 00001000
   frit 0ting       0/0:  ==>  CS: 00001000
   grit 0ting       0/0:  ==>  CS: 00001000
   bit 0ting       0/0:  ==>  CS: 00001000
   dit 0ting       0/0:  ==>  CS: 00001000
   kit 0ting       0/0:  ==>  CS: 00001000
   sit 0ting       0/0:  ==>  CS: 00001000
   besit 0ting       0/0:  ==>  CS: 00001000
   outsit 0ting       0/0:  ==>  CS: 00001000
   resit 0ting       0/0:  ==>  CS: 00001000
   picot 0ing       0/0:  ==>  CS: 00001000
   ballot 0ing       0/0:  ==>  CS: 00001000
   pilot 0ing       0/0:  ==>  CS: 00001000
   parrot 0ing       0/0:  ==>  CS: 00001000
   debut 0ing       0/0:  ==>  CS: 00001000
   brut 0ing       0/0:  ==>  CS: 00001000
   div 0ing       0/0:  ==>  CS: 00001000
   ante 0ing       0/0:  ==>  CS: 00001000
   be 0ing       0/0:  ==>  CS: 00001000
   binge 0ing       0/0:  ==>  CS: 00001000
   birdie 0ing       0/0:  ==>  CS: 00001000
   centre 0ing       0/0:  ==>  CS: 00001000
   chasse 0ing       0/0:  ==>  CS: 00001000
   cicerone 0ing       0/0:  ==>  CS: 00001000
   dele 0ing       0/0:  ==>  CS: 00001000
   ensilage 0ing       0/0:  ==>  CS: 00001000
   facsimile 0ing       0/0:  ==>  CS: 00001000
   glace 0ing       0/0:  ==>  CS: 00001000
   jeelie 0ing       0/0:  ==>  CS: 00001000
   longe 0ing       0/0:  ==>  CS: 00001000
   lunge 0ing       0/0:  ==>  CS: 00001000
   ouglie 0ing       0/0:  ==>  CS: 00001000
   peenge 0ing       0/0:  ==>  CS: 00001000
   pie 0ing       0/0:  ==>  CS: 00001000
   quaere 0ing       0/0:  ==>  CS: 00001000
   queue 0ing       0/0:  ==>  CS: 00001000
   recce 0ing       0/0:  ==>  CS: 00001000
   route 0ing       0/0:  ==>  CS: 00001000
   reroute 0ing       0/0:  ==>  CS: 00001000
   restringe 0ing       0/0:  ==>  CS: 00001000
   saute 0eing       0/0:  ==>  CS: 00001000
   schappe 0ing       0/0:  ==>  CS: 00001000
   segue 0ing       0/0:  ==>  CS: 00001000
   singe 0ing       0/0:  ==>  CS: 00001000
   sortie 0ing       0/0:  ==>  CS: 00001000
   stymie 0ing       0/0:  ==>  CS: 00001000
   winge 0ing       0/0:  ==>  CS: 00001000
   swinge 0ing       0/0:  ==>  CS: 00001000
   tinge 0ing       0/0:  ==>  CS: 00001000
   unbe 0ing       0/0:  ==>  CS: 00001000
   vise 0ing       0/0:  ==>  CS: 00001000
   vogue 1ing       0/0:  ==>  CS: 00001000
   whinge 0ing       0/0:  ==>  CS: 00001000
   aleye 1ing       0/0:  ==>  CS: 00001000
   baye 1ing       0/0:  ==>  CS: 00001000
   herye 1ing       0/0:  ==>  CS: 00001000
   nye 1ing       0/0:  ==>  CS: 00001000
   rallye 1ing       0/0:  ==>  CS: 00001000
   reaedifye 1ing       0/0:  ==>  CS: 00001000
   stye 1ing       0/0:  ==>  CS: 00001000
   undersaye 1ing       0/0:  ==>  CS: 00001000
  min 2, max 2

0/0: <en-trie-irregular-compound-present-participle>:  CS: 00002000
  English:
   *<gosyz>ie 0ing       0/0:  ==>  CS: 00002000
   *ae 0ing       0/0:  ==>  CS: 00002000
   *quit 0ting       0/0:  ==>  CS: 00002000
   *uret 0ting       0/0:  ==>  CS: 00002000
   *budget 0ing       0/0:  ==>  CS: 00002000
   *efer 0ring       0/0:  ==>  CS: 00002000
   *nfer 0ring       0/0:  ==>  CS: 00002000
   *sfer 0ring       0/0:  ==>  CS: 00002000
   *bias 0sing       0/0:  ==>  CS: 00002000
   *bishop 0ing       0/0:  ==>  CS: 00002000
   *woman 0ing       0/0:  ==>  CS: 00002000
   *jambok 0king       0/0:  ==>  CS: 00002000
   *alog 0ing       0/0:  ==>  CS: 00002000
   *daub 0ing       0/0:  ==>  CS: 00002000
  min 2, max 2

0/0: <en-trie-regular-a-present-participle>:  CS: 00004000
  English:
   *<aeiouy>b 0bing       0/0:  ==>  CS: 00004000
   *<dglmpw>ad 0ding       0/0:  ==>  CS: 00004000
   *<bhlnrtw>ed 0ding       0/0:  ==>  CS: 00004000
   *<bklr>id 0ding       0/0:  ==>  CS: 00004000
   *<cdghlnprst>od 0ding       0/0:  ==>  CS: 00004000
   *<bchmprtw>ud 0ding       0/0:  ==>  CS: 00004000
   *uf 0fing       0/0:  ==>  CS: 00004000
   *<aeiouy>g 0ging       0/0:  ==>  CS: 00004000
   *<bcdhiklmnprstuv>al 0ling       0/0:  ==>  CS: 00004000
   *<bcdfghkmnprstuvwz>el 0ling       0/0:  ==>  CS: 00004000
   *<cfmnrtv>il 0ling       0/0:  ==>  CS: 00004000
   *<bcrtv>ol 0ling       0/0:  ==>  CS: 00004000
   *<cn>ul 0ling       0/0:  ==>  CS: 00004000
   *<bcdghjlprw>am 0ming       0/0:  ==>  CS: 00004000
   *<glt>em 0ming       0/0:  ==>  CS: 00004000
   *<dhklnrw>im 0ming       0/0:  ==>  CS: 00004000
   *lom 0ming       0/0:  ==>  CS: 00004000
   *<bcghlmrstv>um 0ming       0/0:  ==>  CS: 00004000
   *<bcflmptvw>an 0ning       0/0:  ==>  CS: 00004000
   *<ry>en 0ning       0/0:  ==>  CS: 00004000
   *<dhklprtw>in 0ning       0/0:  ==>  CS: 00004000
   *<fw>on 0ning       0/0:  ==>  CS: 00004000
   *<dfghprst>un 0ning       0/0:  ==>  CS: 00004000
   *<cdghjlmnprstwyz>ap 0ping       0/0:  ==>  CS: 00004000
   *<klprt>ep 0ping       0/0:  ==>  CS: 00004000
   *<dhklnprtuyz>ip 0ping       0/0:  ==>  CS: 00004000
   *<bdhmprstuw>op 0ping       0/0:  ==>  CS: 00004000
   *<dhpst>up 0ping       0/0:  ==>  CS: 00004000
   *yp 0ping       0/0:  ==>  CS: 00004000
   *<bcfhjmnptw>ar 0ring       0/0:  ==>  CS: 00004000
   *<fhmst>ir 0ring       0/0:  ==>  CS: 00004000
   *dor 0ring       0/0:  ==>  CS: 00004000
   *<bclp>ur 0ring       0/0:  ==>  CS: 00004000
   *<bgmpv>as 0sing       0/0:  ==>  CS: 00004000
   *<mnrsu>es 0sing       0/0:  ==>  CS: 00004000
   *<hmpw>is 0sing       0/0:  ==>  CS: 00004000
   *<bcds>os 0sing       0/0:  ==>  CS: 00004000
   *<bclm>us 0sing       0/0:  ==>  CS: 00004000
   *<bcfhlmprtuvw>at 0ting       0/0:  ==>  CS: 00004000
   *<ghjstvw>et 0ting       0/0:  ==>  CS: 00004000
   *<fhlmnptw>it 0ting       0/0:  ==>  CS: 00004000
   *<bcdhjlnprstw>ot 0ting       0/0:  ==>  CS: 00004000
   *<bcghjlmnprt>ut 0ting       0/0:  ==>  CS: 00004000
   *<ei>v 0ving       0/0:  ==>  CS: 00004000
   *iz 0zing       0/0:  ==>  CS: 00004000
  min 2, max 2

0/0: <en-trie-regular-b-present-participle>:  CS: 00008000
  English:
   *<aeiou>c 0king       0/0:  ==>  CS: 00008000
   *<eoy>e 0ing       0/0:  ==>  CS: 00008000
   *ie 2ying       0/0:  ==>  CS: 00008000
  min 2, max 2

0/0: <en-trie-regular-c-present-participle>:  CS: 00010000
  English:
   *e 1ing       0/0:  ==>  CS: 00010000
   * 0ing       0/0:  ==>  CS: 00010000
  min 2, max 2

0/0: <en-trie-past-participle>:  DW: 007e0000
  English:
   <en-trie-irregular-past-participle>       0/0:  ==>  CS: 00020000
   <en-trie-past>       0/0:  ==>  DW: 007c0000
  min 2, max 1000000000

0/0: <en-trie-irregular-past-participle>:  CS: 00020000
  English:
   be been       0/0:  ==>  CS: 00020000
   have had       0/0:  ==>  CS: 00020000
   do did       0/0:  ==>  CS: 00020000
   arise arisen       0/0:  ==>  CS: 00020000
   awake awoken       0/0:  ==>  CS: 00020000
   bear borne       0/0:  ==>  CS: 00020000
   beat beaten       0/0:  ==>  CS: 00020000
   become become       0/0:  ==>  CS: 00020000
   befall befallen       0/0:  ==>  CS: 00020000
   beget begotten       0/0:  ==>  CS: 00020000
   begin begun       0/0:  ==>  CS: 00020000
   bespeak bespoken       0/0:  ==>  CS: 00020000
   bite bitten       0/0:  ==>  CS: 00020000
   blow blown       0/0:  ==>  CS: 00020000
   break broken       0/0:  ==>  CS: 00020000
   browbeat browbeaten       0/0:  ==>  CS: 00020000
   choose chosen       0/0:  ==>  CS: 00020000
   cleave cloven       0/0:  ==>  CS: 00020000
   come come       0/0:  ==>  CS: 00020000
   dive dived       0/0:  ==>  CS: 00020000
   draw drawn       0/0:  ==>  CS: 00020000
   drink drunk       0/0:  ==>  CS: 00020000
   drive driven       0/0:  ==>  CS: 00020000
   eat eaten       0/0:  ==>  CS: 00020000
   fall fallen       0/0:  ==>  CS: 00020000
   fly flown       0/0:  ==>  CS: 00020000
   forbear forborne       0/0:  ==>  CS: 00020000
   forbid forbidden       0/0:  ==>  CS: 00020000
   forego foregone       0/0:  ==>  CS: 00020000
   foreknow foreknown       0/0:  ==>  CS: 00020000
   forelie forlain       0/0:  ==>  CS: 00020000
   forerun forerun       0/0:  ==>  CS: 00020000
   foresee foreseen       0/0:  ==>  CS: 00020000
   forget forgotten       0/0:  ==>  CS: 00020000
   forgive forgiven       0/0:  ==>  CS: 00020000
   forgo forgone       0/0:  ==>  CS: 00020000
   forsake forsaken       0/0:  ==>  CS: 00020000
   forswear forsworn       0/0:  ==>  CS: 00020000
   freeze frozen       0/0:  ==>  CS: 00020000
   ghostwrite ghostwritten       0/0:  ==>  CS: 00020000
   give given       0/0:  ==>  CS: 00020000
   go gone       0/0:  ==>  CS: 00020000
   grow grown       0/0:  ==>  CS: 00020000
   hew hewn       0/0:  ==>  CS: 00020000
   hide hidden       0/0:  ==>  CS: 00020000
   interweave interwoven       0/0:  ==>  CS: 00020000
   know known       0/0:  ==>  CS: 00020000
   lade laden       0/0:  ==>  CS: 00020000
   misbecome misbecome       0/0:  ==>  CS: 00020000
   misbeget misbegotten       0/0:  ==>  CS: 00020000
   mischoose mischosen       0/0:  ==>  CS: 00020000
   misdo misdone       0/0:  ==>  CS: 00020000
   misget misgotten       0/0:  ==>  CS: 00020000
   misgive misgiven       0/0:  ==>  CS: 00020000
   misknow misknown       0/0:  ==>  CS: 00020000
   misshape misshapen       0/0:  ==>  CS: 00020000
   misspeak misspoken       0/0:  ==>  CS: 00020000
   mistake mistaken       0/0:  ==>  CS: 00020000
   miswrite miswritten       0/0:  ==>  CS: 00020000
   mow mown       0/0:  ==>  CS: 00020000
   outdo outdone       0/0:  ==>  CS: 00020000
   outgrow outgrown       0/0:  ==>  CS: 00020000
   outgrow outgrown       0/0:  ==>  CS: 00020000
   outrun outrun       0/0:  ==>  CS: 00020000
   outshine outshone       0/0:  ==>  CS: 00020000
   outswear outsworn       0/0:  ==>  CS: 00020000
   outthrow outthrown       0/0:  ==>  CS: 00020000
   overbear overborne       0/0:  ==>  CS: 00020000
   overblow overblown       0/0:  ==>  CS: 00020000
   overclothe overclad       0/0:  ==>  CS: 00020000
   overcome overcome       0/0:  ==>  CS: 00020000
   overdo overdone       0/0:  ==>  CS: 00020000
   overdraw overdrawn       0/0:  ==>  CS: 00020000
   overdrink overdrunk       0/0:  ==>  CS: 00020000
   overdrive overdriven       0/0:  ==>  CS: 00020000
   overeat overeaten       0/0:  ==>  CS: 00020000
   overfly overflown       0/0:  ==>  CS: 00020000
   overgrow overgrown       0/0:  ==>  CS: 00020000
   overlie overlain       0/0:  ==>  CS: 00020000
   override overridden       0/0:  ==>  CS: 00020000
   overrun overrun       0/0:  ==>  CS: 00020000
   oversee overseen       0/0:  ==>  CS: 00020000
   oversew oversewn       0/0:  ==>  CS: 00020000
   overshake overshaken       0/0:  ==>  CS: 00020000
   overstride overstridden       0/0:  ==>  CS: 00020000
   overtake overtaken       0/0:  ==>  CS: 00020000
   overwear overworn       0/0:  ==>  CS: 00020000
   overwrite overwritten       0/0:  ==>  CS: 00020000
   partake partaken       0/0:  ==>  CS: 00020000
   plead pled       0/0:  ==>  CS: 00020000
   redo redone       0/0:  ==>  CS: 00020000
   redraw redrawn       0/0:  ==>  CS: 00020000
   regrow regrown       0/0:  ==>  CS: 00020000
   rerun rerun       0/0:  ==>  CS: 00020000
   resing resung       0/0:  ==>  CS: 00020000
   retake retaken       0/0:  ==>  CS: 00020000
   retread retrodden       0/0:  ==>  CS: 00020000
   rewrite rewritten       0/0:  ==>  CS: 00020000
   ride ridden       0/0:  ==>  CS: 00020000
   ring rung       0/0:  ==>  CS: 00020000
   rise risen       0/0:  ==>  CS: 00020000
   rive riven       0/0:  ==>  CS: 00020000
   run run       0/0:  ==>  CS: 00020000
   saw sawn       0/0:  ==>  CS: 00020000
   see seen       0/0:  ==>  CS: 00020000
   sew sewn       0/0:  ==>  CS: 00020000
   shake shaken       0/0:  ==>  CS: 00020000
   shave shaven       0/0:  ==>  CS: 00020000
   shear shorn       0/0:  ==>  CS: 00020000
   shine shone       0/0:  ==>  CS: 00020000
   shoe shodden       0/0:  ==>  CS: 00020000
   show shown       0/0:  ==>  CS: 00020000
   shrink shrunk       0/0:  ==>  CS: 00020000
   shrive shriven       0/0:  ==>  CS: 00020000
   sing sung       0/0:  ==>  CS: 00020000
   sink sunk       0/0:  ==>  CS: 00020000
   slay slain       0/0:  ==>  CS: 00020000
   smite smitten       0/0:  ==>  CS: 00020000
   sow sown       0/0:  ==>  CS: 00020000
   speak spoken       0/0:  ==>  CS: 00020000
   spin spun       0/0:  ==>  CS: 00020000
   spit spit       0/0:  ==>  CS: 00020000
   spring sprung       0/0:  ==>  CS: 00020000
   steal stolen       0/0:  ==>  CS: 00020000
   stink stunk       0/0:  ==>  CS: 00020000
   stride stridden       0/0:  ==>  CS: 00020000
   bestride bestridden       0/0:  ==>  CS: 00020000
   strike stricken       0/0:  ==>  CS: 00020000
   strive striven       0/0:  ==>  CS: 00020000
   swear sworn       0/0:  ==>  CS: 00020000
   swell swollen       0/0:  ==>  CS: 00020000
   take taken       0/0:  ==>  CS: 00020000
   tear torn       0/0:  ==>  CS: 00020000
   thrive thriven       0/0:  ==>  CS: 00020000
   throw thrown       0/0:  ==>  CS: 00020000
   tread trodden       0/0:  ==>  CS: 00020000
   underbear underborne       0/0:  ==>  CS: 00020000
   underdo underdone       0/0:  ==>  CS: 00020000
   underdraw underdrawn       0/0:  ==>  CS: 00020000
   undergo undergone       0/0:  ==>  CS: 00020000
   undergrow undergrown       0/0:  ==>  CS: 00020000
   underrun underrun       0/0:  ==>  CS: 00020000
   undertake undertaken       0/0:  ==>  CS: 00020000
   underwrite underwritten       0/0:  ==>  CS: 00020000
   undo undone       0/0:  ==>  CS: 00020000
   wake woken       0/0:  ==>  CS: 00020000
   wear worn       0/0:  ==>  CS: 00020000
   weave woven       0/0:  ==>  CS: 00020000
   withdraw withdrawn       0/0:  ==>  CS: 00020000
   wring wrung       0/0:  ==>  CS: 00020000
   write written       0/0:  ==>  CS: 00020000
  min 2, max 2

0/0: <en-trie-present-verb-form>:  DW: fc0000c0
  English:
   <en-trie-irregular-third-person-present>       0/0:  ==>  CS: 40000000
   {...} <singular-noun-to-its-plural>       0/0:  ==>  DW: fc0000c0
  min 2, max 1000000000

0/0: <en-trie-irregular-third-person-present>:  CS: 40000000
  English:
   be is       0/0:  ==>  CS: 40000000
   have has       0/0:  ==>  CS: 40000000
   do does       0/0:  ==>  CS: 40000000
  min 2, max 2

0/0: <en-trie-past>:  DW: 007c0000
  English:
   {...} <en-trie-irregular-past>       0/0:  ==>  DS: 00040000
   {...} <en-trie-irregular-compound-past>       0/0:  ==>  DS: 00080000
   {...} <en-trie-regular-a-past>       0/0:  ==>  DS: 00100000
   {...} <en-trie-regular-b-past>       0/0:  ==>  DS: 00200000
   {...} <en-trie-regular-c-past>       0/0:  ==>  DS: 00400000
  min 3, max 1000000000

0/0: <en-trie-irregular-past>:  CS: 00040000
  English:
   be was       0/0:  ==>  CS: 00040000
   do did       0/0:  ==>  CS: 00040000
   go went       0/0:  ==>  CS: 00040000
   in 0ned       0/0:  ==>  CS: 00040000
   on 0ned       0/0:  ==>  CS: 00040000
   up 0ped       0/0:  ==>  CS: 00040000
   bet bet       0/0:  ==>  CS: 00040000
   abet 0ted       0/0:  ==>  CS: 00040000
   bid bid       0/0:  ==>  CS: 00040000
   bin 0ned       0/0:  ==>  CS: 00040000
   bit 0ted       0/0:  ==>  CS: 00040000
   buy bought       0/0:  ==>  CS: 00040000
   con 0ned       0/0:  ==>  CS: 00040000
   cop 0ped       0/0:  ==>  CS: 00040000
   cup 0ped       0/0:  ==>  CS: 00040000
   cut cut       0/0:  ==>  CS: 00040000
   den 0ned       0/0:  ==>  CS: 00040000
   dig dug       0/0:  ==>  CS: 00040000
   dit 0ted       0/0:  ==>  CS: 00040000
   div 0ed       0/0:  ==>  CS: 00040000
   don 0ned       0/0:  ==>  CS: 00040000
   eat ate       0/0:  ==>  CS: 00040000
   fet 0ted       0/0:  ==>  CS: 00040000
   fit fitted       0/0:  ==>  CS: 00040000
   fly flew       0/0:  ==>  CS: 00040000
   fur 0red       0/0:  ==>  CS: 00040000
   gar 0red       0/0:  ==>  CS: 00040000
   get got       0/0:  ==>  CS: 00040000
   gin 0ned       0/0:  ==>  CS: 00040000
   had 0ded       0/0:  ==>  CS: 00040000
   hem 0med       0/0:  ==>  CS: 00040000
   hen 0ned       0/0:  ==>  CS: 00040000
   hit hit       0/0:  ==>  CS: 00040000
   ken 0ned       0/0:  ==>  CS: 00040000
   kit 0ted       0/0:  ==>  CS: 00040000
   kon 0ned       0/0:  ==>  CS: 00040000
   lay laid       0/0:  ==>  CS: 00040000
   lek 0ked       0/0:  ==>  CS: 00040000
   let let       0/0:  ==>  CS: 00040000
   let 0ted       0/0:  ==>  CS: 00040000
   lop 0ped       0/0:  ==>  CS: 00040000
   net 0ted       0/0:  ==>  CS: 00040000
   ante 0ed       0/0:  ==>  CS: 00040000
   nye 1ed       0/0:  ==>  CS: 00040000
   pay paid       0/0:  ==>  CS: 00040000
   pen penned       0/0:  ==>  CS: 00040000
   pet 0ted       0/0:  ==>  CS: 00040000
   pie 1ed       0/0:  ==>  CS: 00040000
   put put       0/0:  ==>  CS: 00040000
   ref 0fed       0/0:  ==>  CS: 00040000
   ret 0ted       0/0:  ==>  CS: 00040000
   aret 0ted       0/0:  ==>  CS: 00040000
   rid rid       0/0:  ==>  CS: 00040000
   rit 0ted       0/0:  ==>  CS: 00040000
   run ran       0/0:  ==>  CS: 00040000
   say said       0/0:  ==>  CS: 00040000
   see saw       0/0:  ==>  CS: 00040000
   set set       0/0:  ==>  CS: 00040000
   sin 0ned       0/0:  ==>  CS: 00040000
   sip 0ped       0/0:  ==>  CS: 00040000
   sit sat       0/0:  ==>  CS: 00040000
   sus 0sed       0/0:  ==>  CS: 00040000
   aver 0red       0/0:  ==>  CS: 00040000
   vor 0red       0/0:  ==>  CS: 00040000
   wed wedded       0/0:  ==>  CS: 00040000
   wet wetted       0/0:  ==>  CS: 00040000
   win won       0/0:  ==>  CS: 00040000
   yak 0ked       0/0:  ==>  CS: 00040000
   yok 0ked       0/0:  ==>  CS: 00040000
   baye 1ed       0/0:  ==>  CS: 00040000
   bear bore       0/0:  ==>  CS: 00040000
   beat beat       0/0:  ==>  CS: 00040000
   bend bent       0/0:  ==>  CS: 00040000
   abhor 0red       0/0:  ==>  CS: 00040000
   abide abided       0/0:  ==>  CS: 00040000
   bide bided       0/0:  ==>  CS: 00040000
   bind bound       0/0:  ==>  CS: 00040000
   bite bit       0/0:  ==>  CS: 00040000
   blet 0ted       0/0:  ==>  CS: 00040000
   blow blew       0/0:  ==>  CS: 00040000
   boob 0ed       0/0:  ==>  CS: 00040000
   brut 0ed       0/0:  ==>  CS: 00040000
   burn burnt       0/0:  ==>  CS: 00040000
   cast cast       0/0:  ==>  CS: 00040000
   clop 0ped       0/0:  ==>  CS: 00040000
   come came       0/0:  ==>  CS: 00040000
   deal dealt       0/0:  ==>  CS: 00040000
   dele 1ed       0/0:  ==>  CS: 00040000
   dive dove       0/0:  ==>  CS: 00040000
   drag dragged       0/0:  ==>  CS: 00040000
   draw drew       0/0:  ==>  CS: 00040000
   duet 0ted       0/0:  ==>  CS: 00040000
   fall fell       0/0:  ==>  CS: 00040000
   feed fed       0/0:  ==>  CS: 00040000
   feel felt       0/0:  ==>  CS: 00040000
   find found       0/0:  ==>  CS: 00040000
   flee fled       0/0:  ==>  CS: 00040000
   flop 0ped       0/0:  ==>  CS: 00040000
   fret 0ted       0/0:  ==>  CS: 00040000
   frit 0ted       0/0:  ==>  CS: 00040000
   give gave       0/0:  ==>  CS: 00040000
   grit 0ted       0/0:  ==>  CS: 00040000
   grow grew       0/0:  ==>  CS: 00040000
   hang hung       0/0:  ==>  CS: 00040000
   have had       0/0:  ==>  CS: 00040000
   hear heard       0/0:  ==>  CS: 00040000
   hide hid       0/0:  ==>  CS: 00040000
   hold held       0/0:  ==>  CS: 00040000
   hurt hurt       0/0:  ==>  CS: 00040000
   item 0ed       0/0:  ==>  CS: 00040000
   keep kept       0/0:  ==>  CS: 00040000
   knit knit       0/0:  ==>  CS: 00040000
   know knew       0/0:  ==>  CS: 00040000
   lade laded       0/0:  ==>  CS: 00040000
   lead led       0/0:  ==>  CS: 00040000
   lend lent       0/0:  ==>  CS: 00040000
   aleye 1ed       0/0:  ==>  CS: 00040000
   lose lost       0/0:  ==>  CS: 00040000
   make made       0/0:  ==>  CS: 00040000
   mean meant       0/0:  ==>  CS: 00040000
   meet met       0/0:  ==>  CS: 00040000
   plop 0ped       0/0:  ==>  CS: 00040000
   quad 0ded       0/0:  ==>  CS: 00040000
   quit quit       0/0:  ==>  CS: 00040000
   quod 0ded       0/0:  ==>  CS: 00040000
   read read       0/0:  ==>  CS: 00040000
   redo redid       0/0:  ==>  CS: 00040000
   rend rent       0/0:  ==>  CS: 00040000
   ride rode       0/0:  ==>  CS: 00040000
   ring rang       0/0:  ==>  CS: 00040000
   arise arose       0/0:  ==>  CS: 00040000
   rise rose       0/0:  ==>  CS: 00040000
   rive rove       0/0:  ==>  CS: 00040000
   seek sought       0/0:  ==>  CS: 00040000
   sell sold       0/0:  ==>  CS: 00040000
   send sent       0/0:  ==>  CS: 00040000
   shed shed       0/0:  ==>  CS: 00040000
   shoe shoed       0/0:  ==>  CS: 00040000
   shut shut       0/0:  ==>  CS: 00040000
   sing sang       0/0:  ==>  CS: 00040000
   sink sank       0/0:  ==>  CS: 00040000
   sker 0red       0/0:  ==>  CS: 00040000
   slip slipped       0/0:  ==>  CS: 00040000
   slit slit       0/0:  ==>  CS: 00040000
   slop 0ped       0/0:  ==>  CS: 00040000
   smur 0red       0/0:  ==>  CS: 00040000
   spet 0ted       0/0:  ==>  CS: 00040000
   spin span       0/0:  ==>  CS: 00040000
   spit spat       0/0:  ==>  CS: 00040000
   sten 0ned       0/0:  ==>  CS: 00040000
   stye 1ed       0/0:  ==>  CS: 00040000
   swim swam       0/0:  ==>  CS: 00040000
   take took       0/0:  ==>  CS: 00040000
   tear tore       0/0:  ==>  CS: 00040000
   tell told       0/0:  ==>  CS: 00040000
   trek 0ked       0/0:  ==>  CS: 00040000
   unbe 1ed       0/0:  ==>  CS: 00040000
   undo undid       0/0:  ==>  CS: 00040000
   vise 1ed       0/0:  ==>  CS: 00040000
   awake awoke       0/0:  ==>  CS: 00040000
   wake woke       0/0:  ==>  CS: 00040000
   wear wore       0/0:  ==>  CS: 00040000
   weep wept       0/0:  ==>  CS: 00040000
   whid 0ded       0/0:  ==>  CS: 00040000
   wind wound       0/0:  ==>  CS: 00040000
   beget begot       0/0:  ==>  CS: 00040000
   begin began       0/0:  ==>  CS: 00040000
   benet 0ted       0/0:  ==>  CS: 00040000
   beset beset       0/0:  ==>  CS: 00040000
   besit 0ted       0/0:  ==>  CS: 00040000
   binge 1ed       0/0:  ==>  CS: 00040000
   bleed bled       0/0:  ==>  CS: 00040000
   break broke       0/0:  ==>  CS: 00040000
   breed bred       0/0:  ==>  CS: 00040000
   bring brought       0/0:  ==>  CS: 00040000
   build built       0/0:  ==>  CS: 00040000
   burst burst       0/0:  ==>  CS: 00040000
   catch caught       0/0:  ==>  CS: 00040000
   cling clung       0/0:  ==>  CS: 00040000
   covet 0ed       0/0:  ==>  CS: 00040000
   creep crept       0/0:  ==>  CS: 00040000
   curat 0ed       0/0:  ==>  CS: 00040000
   debut 0ed       0/0:  ==>  CS: 00040000
   demur 0red       0/0:  ==>  CS: 00040000
   deter 0red       0/0:  ==>  CS: 00040000
   drink drank       0/0:  ==>  CS: 00040000
   drive drove       0/0:  ==>  CS: 00040000
   fight fought       0/0:  ==>  CS: 00040000
   fling flung       0/0:  ==>  CS: 00040000
   forgo forwent       0/0:  ==>  CS: 00040000
   galop 0ped       0/0:  ==>  CS: 00040000
   glace 0ed       0/0:  ==>  CS: 00040000
   grind ground       0/0:  ==>  CS: 00040000
   herye 1ed       0/0:  ==>  CS: 00040000
   hoise hoist       0/0:  ==>  CS: 00040000
   inlay inlaid       0/0:  ==>  CS: 00040000
   input input       0/0:  ==>  CS: 00040000
   inset inset       0/0:  ==>  CS: 00040000
   inter 0red       0/0:  ==>  CS: 00040000
   kneel knelt       0/0:  ==>  CS: 00040000
   alarum 0ed       0/0:  ==>  CS: 00040000
   leave left       0/0:  ==>  CS: 00040000
   light lit       0/0:  ==>  CS: 00040000
   limit 0ed       0/0:  ==>  CS: 00040000
   longe 1ed       0/0:  ==>  CS: 00040000
   lunge 1ed       0/0:  ==>  CS: 00040000
   madam 0ed       0/0:  ==>  CS: 00040000
   misdo misdid       0/0:  ==>  CS: 00040000
   outdo outdid       0/0:  ==>  CS: 00040000
   picot 0ed       0/0:  ==>  CS: 00040000
   pilot 0ed       0/0:  ==>  CS: 00040000
   prove proved       0/0:  ==>  CS: 00040000
   queue 1ed       0/0:  ==>  CS: 00040000
   reave reft       0/0:  ==>  CS: 00040000
   recce 1ed       0/0:  ==>  CS: 00040000
   recut recut       0/0:  ==>  CS: 00040000
   relet 0ted       0/0:  ==>  CS: 00040000
   repay repaid       0/0:  ==>  CS: 00040000
   rerun reran       0/0:  ==>  CS: 00040000
   reset reset       0/0:  ==>  CS: 00040000
   resit 0ted       0/0:  ==>  CS: 00040000
   roset 0ed       0/0:  ==>  CS: 00040000
   route 1ed       0/0:  ==>  CS: 00040000
   salad 0ed       0/0:  ==>  CS: 00040000
   satin 0ed       0/0:  ==>  CS: 00040000
   saute 0ed       0/0:  ==>  CS: 00040000
   scoog 0ed       0/0:  ==>  CS: 00040000
   scoug 0ed       0/0:  ==>  CS: 00040000
   segue 1ed       0/0:  ==>  CS: 00040000
   shake shook       0/0:  ==>  CS: 00040000
   shall should       0/0:  ==>  CS: 00040000
   shape shaped       0/0:  ==>  CS: 00040000
   shave shaved       0/0:  ==>  CS: 00040000
   shine shined       0/0:  ==>  CS: 00040000
   shoot shot       0/0:  ==>  CS: 00040000
   singe 1ed       0/0:  ==>  CS: 00040000
   sleep slept       0/0:  ==>  CS: 00040000
   slide slid       0/0:  ==>  CS: 00040000
   sling slung       0/0:  ==>  CS: 00040000
   slink slunk       0/0:  ==>  CS: 00040000
   smite smote       0/0:  ==>  CS: 00040000
   speak spoke       0/0:  ==>  CS: 00040000
   speed sped       0/0:  ==>  CS: 00040000
   spell spelt       0/0:  ==>  CS: 00040000
   spend spent       0/0:  ==>  CS: 00040000
   split split       0/0:  ==>  CS: 00040000
   squid 0ded       0/0:  ==>  CS: 00040000
   stand stood       0/0:  ==>  CS: 00040000
   steal stole       0/0:  ==>  CS: 00040000
   stick stuck       0/0:  ==>  CS: 00040000
   sting stung       0/0:  ==>  CS: 00040000
   stink stank       0/0:  ==>  CS: 00040000
   swear swore       0/0:  ==>  CS: 00040000
   sweep swept       0/0:  ==>  CS: 00040000
   swing swung       0/0:  ==>  CS: 00040000
   teach taught       0/0:  ==>  CS: 00040000
   think thought       0/0:  ==>  CS: 00040000
   throw threw       0/0:  ==>  CS: 00040000
   tinge 1ed       0/0:  ==>  CS: 00040000
   tread trod       0/0:  ==>  CS: 00040000
   tyran 0ned       0/0:  ==>  CS: 00040000
   unpen 0ned       0/0:  ==>  CS: 00040000
   unset unset       0/0:  ==>  CS: 00040000
   upset upset       0/0:  ==>  CS: 00040000
   vogue 1ed       0/0:  ==>  CS: 00040000
   vomit 0ed       0/0:  ==>  CS: 00040000
   weave wove       0/0:  ==>  CS: 00040000
   winge 1ed       0/0:  ==>  CS: 00040000
   worth worth       0/0:  ==>  CS: 00040000
   wring wrang       0/0:  ==>  CS: 00040000
   write wrote       0/0:  ==>  CS: 00040000
   ballad 0ed       0/0:  ==>  CS: 00040000
   ballat 0ed       0/0:  ==>  CS: 00040000
   ballot 0ed       0/0:  ==>  CS: 00040000
   basset 0ed       0/0:  ==>  CS: 00040000
   become became       0/0:  ==>  CS: 00040000
   befall befell       0/0:  ==>  CS: 00040000
   behold beheld       0/0:  ==>  CS: 00040000
   birdie 1ed       0/0:  ==>  CS: 00040000
   caucus 0ed       0/0:  ==>  CS: 00040000
   centre 1ed       0/0:  ==>  CS: 00040000
   chalan 0ed       0/0:  ==>  CS: 00040000
   chasse 1ed       0/0:  ==>  CS: 00040000
   choose chose       0/0:  ==>  CS: 00040000
   cleave clove       0/0:  ==>  CS: 00040000
   closet 0ed       0/0:  ==>  CS: 00040000
   clothe clothed       0/0:  ==>  CS: 00040000
   combat 0ed       0/0:  ==>  CS: 00040000
   coquet 0ted       0/0:  ==>  CS: 00040000
   corset 0ed       0/0:  ==>  CS: 00040000
   cosset 0ed       0/0:  ==>  CS: 00040000
   emblem 0ed       0/0:  ==>  CS: 00040000
   fidget 0ed       0/0:  ==>  CS: 00040000
   fillip 0ed       0/0:  ==>  CS: 00040000
   forbid forbade       0/0:  ==>  CS: 00040000
   forego forewent       0/0:  ==>  CS: 00040000
   forget forgot       0/0:  ==>  CS: 00040000
   freeze froze       0/0:  ==>  CS: 00040000
   gusset 0ed       0/0:  ==>  CS: 00040000
   jeelie 1ed       0/0:  ==>  CS: 00040000
   misfit misfitted       0/0:  ==>  CS: 00040000
   misget misgot       0/0:  ==>  CS: 00040000
   mishit mishit       0/0:  ==>  CS: 00040000
   misken 0ned       0/0:  ==>  CS: 00040000
   mislay mislaid       0/0:  ==>  CS: 00040000
   missay missaid       0/0:  ==>  CS: 00040000
   misset misset       0/0:  ==>  CS: 00040000
   mortar 0ed       0/0:  ==>  CS: 00040000
   naysay naysaid       0/0:  ==>  CS: 00040000
   ouglie 1ed       0/0:  ==>  CS: 00040000
   outbid outbid       0/0:  ==>  CS: 00040000
   output output       0/0:  ==>  CS: 00040000
   outrun outran       0/0:  ==>  CS: 00040000
   outsit outsat       0/0:  ==>  CS: 00040000
   overdo overdid       0/0:  ==>  CS: 00040000
   parrot 0ed       0/0:  ==>  CS: 00040000
   peenge 1ed       0/0:  ==>  CS: 00040000
   posset 0ed       0/0:  ==>  CS: 00040000
   possum 0ed       0/0:  ==>  CS: 00040000
   prepay prepaid       0/0:  ==>  CS: 00040000
   preset preset       0/0:  ==>  CS: 00040000
   profit 0ed       0/0:  ==>  CS: 00040000
   quaere 1ed       0/0:  ==>  CS: 00040000
   rallye 1ed       0/0:  ==>  CS: 00040000
   recast recast       0/0:  ==>  CS: 00040000
   redraw redrew       0/0:  ==>  CS: 00040000
   regret 0ted       0/0:  ==>  CS: 00040000
   regrow regrew       0/0:  ==>  CS: 00040000
   re-lay re-laid       0/0:  ==>  CS: 00040000
   remake remade       0/0:  ==>  CS: 00040000
   reread reread       0/0:  ==>  CS: 00040000
   resell resold       0/0:  ==>  CS: 00040000
   resend resent       0/0:  ==>  CS: 00040000
   resing resang       0/0:  ==>  CS: 00040000
   retake retook       0/0:  ==>  CS: 00040000
   retell retold       0/0:  ==>  CS: 00040000
   rewind rewound       0/0:  ==>  CS: 00040000
   russet 0ed       0/0:  ==>  CS: 00040000
   shrink shrank       0/0:  ==>  CS: 00040000
   shrive shrove       0/0:  ==>  CS: 00040000
   slalom 0ed       0/0:  ==>  CS: 00040000
   sortie 1ed       0/0:  ==>  CS: 00040000
   spread spread       0/0:  ==>  CS: 00040000
   spring sprang       0/0:  ==>  CS: 00040000
   stride strode       0/0:  ==>  CS: 00040000
   strike struck       0/0:  ==>  CS: 00040000
   string strung       0/0:  ==>  CS: 00040000
   strive strove       0/0:  ==>  CS: 00040000
   stymie 1ed       0/0:  ==>  CS: 00040000
   sublet sublet       0/0:  ==>  CS: 00040000
   sunset sunset       0/0:  ==>  CS: 00040000
   swinge 1ed       0/0:  ==>  CS: 00040000
   target 0ed       0/0:  ==>  CS: 00040000
   thrive throve       0/0:  ==>  CS: 00040000
   turnip 0ed       0/0:  ==>  CS: 00040000
   unbend unbent       0/0:  ==>  CS: 00040000
   unbind unbound       0/0:  ==>  CS: 00040000
   unhear unheard       0/0:  ==>  CS: 00040000
   unmake unmade       0/0:  ==>  CS: 00040000
   unwind unwound       0/0:  ==>  CS: 00040000
   uphold upheld       0/0:  ==>  CS: 00040000
   velvet 0ed       0/0:  ==>  CS: 00040000
   waylay waylaid       0/0:  ==>  CS: 00040000
   whinge 1ed       0/0:  ==>  CS: 00040000
   writhe writhed       0/0:  ==>  CS: 00040000
   beseech besought       0/0:  ==>  CS: 00040000
   bespeak bespoke       0/0:  ==>  CS: 00040000
   briquet 0ted       0/0:  ==>  CS: 00040000
   buckram 0ed       0/0:  ==>  CS: 00040000
   chagrin 0ed       0/0:  ==>  CS: 00040000
   challan 0ed       0/0:  ==>  CS: 00040000
   crochet 0ed       0/0:  ==>  CS: 00040000
   delimit 0ed       0/0:  ==>  CS: 00040000
   epithet 0ed       0/0:  ==>  CS: 00040000
   forbear forbore       0/0:  ==>  CS: 00040000
   forelay forelaid       0/0:  ==>  CS: 00040000
   forelie forlay       0/0:  ==>  CS: 00040000
   forerun foreran       0/0:  ==>  CS: 00040000
   foresee foresaw       0/0:  ==>  CS: 00040000
   forgive forgave       0/0:  ==>  CS: 00040000
   forsake forsook       0/0:  ==>  CS: 00040000
   gainsay gainsaid       0/0:  ==>  CS: 00040000
   inbreed inbred       0/0:  ==>  CS: 00040000
   invalid 0ed       0/0:  ==>  CS: 00040000
   leaflet 0ted       0/0:  ==>  CS: 00040000
   lipread lipread       0/0:  ==>  CS: 00040000
   miscast miscast       0/0:  ==>  CS: 00040000
   misdeal misdealt       0/0:  ==>  CS: 00040000
   misfeed misfed       0/0:  ==>  CS: 00040000
   misgive misgave       0/0:  ==>  CS: 00040000
   mishear misheard       0/0:  ==>  CS: 00040000
   mishold misheld       0/0:  ==>  CS: 00040000
   miskeep miskept       0/0:  ==>  CS: 00040000
   misknow misknew       0/0:  ==>  CS: 00040000
   mislead misled       0/0:  ==>  CS: 00040000
   misread misread       0/0:  ==>  CS: 00040000
   missend missent       0/0:  ==>  CS: 00040000
   mistake mistook       0/0:  ==>  CS: 00040000
   outgrow outgrew       0/0:  ==>  CS: 00040000
   outride outrode       0/0:  ==>  CS: 00040000
   outsell outsold       0/0:  ==>  CS: 00040000
   outswim outswam       0/0:  ==>  CS: 00040000
   outtell outtold       0/0:  ==>  CS: 00040000
   outwear outwore       0/0:  ==>  CS: 00040000
   overbid overbid       0/0:  ==>  CS: 00040000
   overbuy overbought       0/0:  ==>  CS: 00040000
   overeat overate       0/0:  ==>  CS: 00040000
   overfly overflew       0/0:  ==>  CS: 00040000
   overhit overhit       0/0:  ==>  CS: 00040000
   overlay overlaid       0/0:  ==>  CS: 00040000
   overlie overlay       0/0:  ==>  CS: 00040000
   overnet 0ted       0/0:  ==>  CS: 00040000
   overpay overpaid       0/0:  ==>  CS: 00040000
   overrun overran       0/0:  ==>  CS: 00040000
   oversee oversaw       0/0:  ==>  CS: 00040000
   overset overset       0/0:  ==>  CS: 00040000
   parquet 0ted       0/0:  ==>  CS: 00040000
   partake partook       0/0:  ==>  CS: 00040000
   podcast podcast       0/0:  ==>  CS: 00040000
   precast precast       0/0:  ==>  CS: 00040000
   quadrat 0ed       0/0:  ==>  CS: 00040000
   ratchet 0ed       0/0:  ==>  CS: 00040000
   rebuild rebuilt       0/0:  ==>  CS: 00040000
   reinter 0red       0/0:  ==>  CS: 00040000
   reroute 1ed       0/0:  ==>  CS: 00040000
   reshoot reshot       0/0:  ==>  CS: 00040000
   rethink rethought       0/0:  ==>  CS: 00040000
   retread retrod       0/0:  ==>  CS: 00040000
   rewrite rewrote       0/0:  ==>  CS: 00040000
   schappe 1ed       0/0:  ==>  CS: 00040000
   spaniel 0led       0/0:  ==>  CS: 00040000
   underdo underdid       0/0:  ==>  CS: 00040000
   undergo underwent       0/0:  ==>  CS: 00040000
   unrivet 0ed       0/0:  ==>  CS: 00040000
   vermeil 0led       0/0:  ==>  CS: 00040000
   webcast webcast       0/0:  ==>  CS: 00040000
   backbite backbit       0/0:  ==>  CS: 00040000
   bespread bespread       0/0:  ==>  CS: 00040000
   bestride bestrode       0/0:  ==>  CS: 00040000
   browbeat browbeat       0/0:  ==>  CS: 00040000
   cicerone 1ed       0/0:  ==>  CS: 00040000
   crosscut crosscut       0/0:  ==>  CS: 00040000
   damaskin 0ed       0/0:  ==>  CS: 00040000
   disinter 0red       0/0:  ==>  CS: 00040000
   ensilage 1ed       0/0:  ==>  CS: 00040000
   forecast forecast       0/0:  ==>  CS: 00040000
   foreknow foreknew       0/0:  ==>  CS: 00040000
   foretell foretold       0/0:  ==>  CS: 00040000
   forswear forswore       0/0:  ==>  CS: 00040000
   intercut intercut       0/0:  ==>  CS: 00040000
   misbeget misbegot       0/0:  ==>  CS: 00040000
   misshape misshaped       0/0:  ==>  CS: 00040000
   misshoot misshot       0/0:  ==>  CS: 00040000
   misspeak misspoke       0/0:  ==>  CS: 00040000
   misspell misspelt       0/0:  ==>  CS: 00040000
   misspend misspent       0/0:  ==>  CS: 00040000
   miswrite miswrote       0/0:  ==>  CS: 00040000
   outdrink outdrunk       0/0:  ==>  CS: 00040000
   outfight outfought       0/0:  ==>  CS: 00040000
   outshine outshone       0/0:  ==>  CS: 00040000
   outspend outspent       0/0:  ==>  CS: 00040000
   outswear outswore       0/0:  ==>  CS: 00040000
   outthink outthought       0/0:  ==>  CS: 00040000
   outthrow outthrew       0/0:  ==>  CS: 00040000
   overbear overbore       0/0:  ==>  CS: 00040000
   overbend overbent       0/0:  ==>  CS: 00040000
   overblow overblew       0/0:  ==>  CS: 00040000
   overcast overcast       0/0:  ==>  CS: 00040000
   overcome overcame       0/0:  ==>  CS: 00040000
   overdraw overdrew       0/0:  ==>  CS: 00040000
   overfeed overfed       0/0:  ==>  CS: 00040000
   overgrow overgrew       0/0:  ==>  CS: 00040000
   overhang overhung       0/0:  ==>  CS: 00040000
   overhear overheard       0/0:  ==>  CS: 00040000
   overlend overlent       0/0:  ==>  CS: 00040000
   override overrode       0/0:  ==>  CS: 00040000
   oversell oversold       0/0:  ==>  CS: 00040000
   overslip overslipped       0/0:  ==>  CS: 00040000
   overtake overtook       0/0:  ==>  CS: 00040000
   overwear overwore       0/0:  ==>  CS: 00040000
   sightsee sightsaw       0/0:  ==>  CS: 00040000
   stravaig 0ed       0/0:  ==>  CS: 00040000
   telecast telecast       0/0:  ==>  CS: 00040000
   unclothe unclothed       0/0:  ==>  CS: 00040000
   underbid underbid       0/0:  ==>  CS: 00040000
   underbuy underbought       0/0:  ==>  CS: 00040000
   undercut undercut       0/0:  ==>  CS: 00040000
   underdig underdug       0/0:  ==>  CS: 00040000
   underlay underlaid       0/0:  ==>  CS: 00040000
   underlet 0ted       0/0:  ==>  CS: 00040000
   underlie underlaid       0/0:  ==>  CS: 00040000
   underpay underpaid       0/0:  ==>  CS: 00040000
   underrun underran       0/0:  ==>  CS: 00040000
   unfreeze unfroze       0/0:  ==>  CS: 00040000
   withdraw withdrew       0/0:  ==>  CS: 00040000
   withhold withheld       0/0:  ==>  CS: 00040000
   broadcast broadcast       0/0:  ==>  CS: 00040000
   discomfit 0ed       0/0:  ==>  CS: 00040000
   facsimile 1ed       0/0:  ==>  CS: 00040000
   misbecome misbecame       0/0:  ==>  CS: 00040000
   mischoose mischose       0/0:  ==>  CS: 00040000
   outthrust outthrust       0/0:  ==>  CS: 00040000
   overbreed overbred       0/0:  ==>  CS: 00040000
   overbuild overbuilt       0/0:  ==>  CS: 00040000
   overdrink overdrank       0/0:  ==>  CS: 00040000
   overdrive overdrove       0/0:  ==>  CS: 00040000
   overshake overshook       0/0:  ==>  CS: 00040000
   overshine overshone       0/0:  ==>  CS: 00040000
   overshoot overshot       0/0:  ==>  CS: 00040000
   oversleep overslept       0/0:  ==>  CS: 00040000
   overslide overslid       0/0:  ==>  CS: 00040000
   overspend overspent       0/0:  ==>  CS: 00040000
   overswing overswung       0/0:  ==>  CS: 00040000
   overwrite overwrote       0/0:  ==>  CS: 00040000
   proofread proofread       0/0:  ==>  CS: 00040000
   reaedifye 1ed       0/0:  ==>  CS: 00040000
   restringe 1ed       0/0:  ==>  CS: 00040000
   simulcast simulcast       0/0:  ==>  CS: 00040000
   trampolin 0ed       0/0:  ==>  CS: 00040000
   underbear underbore       0/0:  ==>  CS: 00040000
   underbind underbound       0/0:  ==>  CS: 00040000
   undercast undercast       0/0:  ==>  CS: 00040000
   underdraw underdrew       0/0:  ==>  CS: 00040000
   underfeed underfed       0/0:  ==>  CS: 00040000
   undergrow undergrew       0/0:  ==>  CS: 00040000
   underhang underhung       0/0:  ==>  CS: 00040000
   undersaye 1ed       0/0:  ==>  CS: 00040000
   undersell undersold       0/0:  ==>  CS: 00040000
   undertake undertook       0/0:  ==>  CS: 00040000
   withstand withstood       0/0:  ==>  CS: 00040000
   ghostwrite ghostwrote       0/0:  ==>  CS: 00040000
   interbreed interbred       0/0:  ==>  CS: 00040000
   interweave interwove       0/0:  ==>  CS: 00040000
   overclothe overclothed       0/0:  ==>  CS: 00040000
   overstride overstrode       0/0:  ==>  CS: 00040000
   underbuild underbuilt       0/0:  ==>  CS: 00040000
   undershoot undershot       0/0:  ==>  CS: 00040000
   underspend underspent       0/0:  ==>  CS: 00040000
   understand understood       0/0:  ==>  CS: 00040000
   underwrite underwrote       0/0:  ==>  CS: 00040000
   underclothe underclothed       0/0:  ==>  CS: 00040000
   misunderstand misunderstood       0/0:  ==>  CS: 00040000
  min 2, max 2

0/0: <en-trie-irregular-compound-past>:  CS: 00080000
  English:
   *<gosyz>ie 1ed       0/0:  ==>  CS: 00080000
   *ae 1ed       0/0:  ==>  CS: 00080000
   *quit 0ted       0/0:  ==>  CS: 00080000
   *uret 0ted       0/0:  ==>  CS: 00080000
   *budget 0ed       0/0:  ==>  CS: 00080000
   *efer 0red       0/0:  ==>  CS: 00080000
   *nfer 0red       0/0:  ==>  CS: 00080000
   *sfer 0red       0/0:  ==>  CS: 00080000
   *bias 0sed       0/0:  ==>  CS: 00080000
   *bishop 0ed       0/0:  ==>  CS: 00080000
   *woman 0ed       0/0:  ==>  CS: 00080000
   *jambok 0ked       0/0:  ==>  CS: 00080000
   *alog 0ed       0/0:  ==>  CS: 00080000
   *daub 0ed       0/0:  ==>  CS: 00080000
  min 2, max 2

0/0: <en-trie-regular-a-past>:  CS: 00100000
  English:
   *<aeiouy>b 0bed       0/0:  ==>  CS: 00100000
   *<dglmpw>ad 0ded       0/0:  ==>  CS: 00100000
   *<bhlnrtw>ed 0ded       0/0:  ==>  CS: 00100000
   *<bklr>id 0ded       0/0:  ==>  CS: 00100000
   *<cdghlnprst>od 0ded       0/0:  ==>  CS: 00100000
   *<bchmprtw>ud 0ded       0/0:  ==>  CS: 00100000
   *uf 0fed       0/0:  ==>  CS: 00100000
   *<aeiouy>g 0ged       0/0:  ==>  CS: 00100000
   *<bcdhiklmnprstuv>al 0led       0/0:  ==>  CS: 00100000
   *<bcdfghkmnprstuvwz>el 0led       0/0:  ==>  CS: 00100000
   *<cfmnrtv>il 0led       0/0:  ==>  CS: 00100000
   *<bcrtv>ol 0led       0/0:  ==>  CS: 00100000
   *<cn>ul 0led       0/0:  ==>  CS: 00100000
   *<bcdghjlprw>am 0med       0/0:  ==>  CS: 00100000
   *<glt>em 0med       0/0:  ==>  CS: 00100000
   *<dhklnrw>im 0med       0/0:  ==>  CS: 00100000
   *lom 0med       0/0:  ==>  CS: 00100000
   *<bcghlmrstv>um 0med       0/0:  ==>  CS: 00100000
   *<bcflmptvw>an 0ned       0/0:  ==>  CS: 00100000
   *<ry>en 0ned       0/0:  ==>  CS: 00100000
   *<dhklprtw>in 0ned       0/0:  ==>  CS: 00100000
   *<fw>on 0ned       0/0:  ==>  CS: 00100000
   *<dfghprst>un 0ned       0/0:  ==>  CS: 00100000
   *<cdghjlmnprstwyz>ap 0ped       0/0:  ==>  CS: 00100000
   *<klprt>ep 0ped       0/0:  ==>  CS: 00100000
   *<dhklnprtuyz>ip 0ped       0/0:  ==>  CS: 00100000
   *<bdhmprstuw>op 0ped       0/0:  ==>  CS: 00100000
   *<dhpst>up 0ped       0/0:  ==>  CS: 00100000
   *yp 0ped       0/0:  ==>  CS: 00100000
   *<bcfhjmnptw>ar 0red       0/0:  ==>  CS: 00100000
   *<fhmst>ir 0red       0/0:  ==>  CS: 00100000
   *dor 0red       0/0:  ==>  CS: 00100000
   *<bclp>ur 0red       0/0:  ==>  CS: 00100000
   *<bgmpv>as 0sed       0/0:  ==>  CS: 00100000
   *<mnrsu>es 0sed       0/0:  ==>  CS: 00100000
   *<hmpw>is 0sed       0/0:  ==>  CS: 00100000
   *<bcds>os 0sed       0/0:  ==>  CS: 00100000
   *<bclm>us 0sed       0/0:  ==>  CS: 00100000
   *<bcfhlmprtuvw>at 0ted       0/0:  ==>  CS: 00100000
   *<ghjstvw>et 0ted       0/0:  ==>  CS: 00100000
   *<fhlmnptw>it 0ted       0/0:  ==>  CS: 00100000
   *<bcdhjlnprstw>ot 0ted       0/0:  ==>  CS: 00100000
   *<bcghjlmnprt>ut 0ted       0/0:  ==>  CS: 00100000
   *<ei>v 0ved       0/0:  ==>  CS: 00100000
   *iz 0zed       0/0:  ==>  CS: 00100000
  min 2, max 2

0/0: <en-trie-regular-b-past>:  CS: 00200000
  English:
   *<aeiou>c 0ked       0/0:  ==>  CS: 00200000
   *<eioy>e 1ed       0/0:  ==>  CS: 00200000
   *<aeiou>y 0ed       0/0:  ==>  CS: 00200000
  min 2, max 2

0/0: <en-trie-regular-c-past>:  CS: 00400000
  English:
   *e 1ed       0/0:  ==>  CS: 00400000
   *y 1ied       0/0:  ==>  CS: 00400000
   * 0ed       0/0:  ==>  CS: 00400000
  min 2, max 2

0/0: <pasturise-participle>:  DW: 00000e00
  English:
   <en-trie-pasturise-exceptions>       0/0:  ==>  CS: 00000200
   {...} <en-trie-pasturise-regular-y>       0/0:  ==>  DS: 00000400
   {...} <en-trie-pasturise-regular>       0/0:  ==>  DS: 00000800
  min 2, max 1000000000

0/0: <en-trie-pasturise-exceptions>:  CS: 00000200
  English:
   abiding abided       0/0:  ==>  CS: 00000200
   alighting alighted       0/0:  ==>  CS: 00000200
   arising arisen       0/0:  ==>  CS: 00000200
   awaking awakened       0/0:  ==>  CS: 00000200
   backbiting backbitten       0/0:  ==>  CS: 00000200
   backsliding backslidden       0/0:  ==>  CS: 00000200
   bearing born       0/0:  ==>  CS: 00000200
   beating beaten       0/0:  ==>  CS: 00000200
   becoming become       0/0:  ==>  CS: 00000200
   befalling befallen       0/0:  ==>  CS: 00000200
   begeting begotten       0/0:  ==>  CS: 00000200
   begining begun       0/0:  ==>  CS: 00000200
   beholding beheld       0/0:  ==>  CS: 00000200
   bending bent       0/0:  ==>  CS: 00000200
   bereaving bereaved       0/0:  ==>  CS: 00000200
   beseeching besought       0/0:  ==>  CS: 00000200
   besetting beset       0/0:  ==>  CS: 00000200
   bestrewing bestrewn       0/0:  ==>  CS: 00000200
   betting bet       0/0:  ==>  CS: 00000200
   betaking betaken       0/0:  ==>  CS: 00000200
   bethinking bethought       0/0:  ==>  CS: 00000200
   binding bound       0/0:  ==>  CS: 00000200
   biting bitten       0/0:  ==>  CS: 00000200
   bleeding bled       0/0:  ==>  CS: 00000200
   blowing blown       0/0:  ==>  CS: 00000200
   breaking broken       0/0:  ==>  CS: 00000200
   breeding bred       0/0:  ==>  CS: 00000200
   bringing brought       0/0:  ==>  CS: 00000200
   broadcasting broadcast       0/0:  ==>  CS: 00000200
   browbeating browbeaten       0/0:  ==>  CS: 00000200
   building built       0/0:  ==>  CS: 00000200
   burning burned       0/0:  ==>  CS: 00000200
   bursting burst       0/0:  ==>  CS: 00000200
   busting busted       0/0:  ==>  CS: 00000200
   buying bought       0/0:  ==>  CS: 00000200
   casting cast       0/0:  ==>  CS: 00000200
   catching caught       0/0:  ==>  CS: 00000200
   chiding chided       0/0:  ==>  CS: 00000200
   choosing chosen       0/0:  ==>  CS: 00000200
   claping clapped       0/0:  ==>  CS: 00000200
   clinging clung       0/0:  ==>  CS: 00000200
   clothing clothed       0/0:  ==>  CS: 00000200
   coming come       0/0:  ==>  CS: 00000200
   costing cost       0/0:  ==>  CS: 00000200
   creeping crept       0/0:  ==>  CS: 00000200
   crossbreeding crossbred       0/0:  ==>  CS: 00000200
   cutting cut       0/0:  ==>  CS: 00000200
   daring dared       0/0:  ==>  CS: 00000200
   daydreaming daydreamed       0/0:  ==>  CS: 00000200
   dealing dealt       0/0:  ==>  CS: 00000200
   diging dug       0/0:  ==>  CS: 00000200
   dighting dighted       0/0:  ==>  CS: 00000200
   disproving disproved       0/0:  ==>  CS: 00000200
   diving dived       0/0:  ==>  CS: 00000200
   doing done       0/0:  ==>  CS: 00000200
   drawing drawn       0/0:  ==>  CS: 00000200
   dreaming dreamed       0/0:  ==>  CS: 00000200
   drinking drunk       0/0:  ==>  CS: 00000200
   driving driven       0/0:  ==>  CS: 00000200
   dwelling dwelt       0/0:  ==>  CS: 00000200
   eating eaten       0/0:  ==>  CS: 00000200
   enwinding enwound       0/0:  ==>  CS: 00000200
   falling fallen       0/0:  ==>  CS: 00000200
   feeding fed       0/0:  ==>  CS: 00000200
   feeling felt       0/0:  ==>  CS: 00000200
   fighting fought       0/0:  ==>  CS: 00000200
   finding found       0/0:  ==>  CS: 00000200
   fitting fitted       0/0:  ==>  CS: 00000200
   fleeing fled       0/0:  ==>  CS: 00000200
   flinging flung       0/0:  ==>  CS: 00000200
   flying flown       0/0:  ==>  CS: 00000200
   forbearing forborne       0/0:  ==>  CS: 00000200
   forbiding forbidden       0/0:  ==>  CS: 00000200
   fordoing fordone       0/0:  ==>  CS: 00000200
   forecasting forecast       0/0:  ==>  CS: 00000200
   foregoing foregone       0/0:  ==>  CS: 00000200
   foreknowing foreknown       0/0:  ==>  CS: 00000200
   foreruning forerun       0/0:  ==>  CS: 00000200
   foreseeing foreseen       0/0:  ==>  CS: 00000200
   foreshowing foreshown       0/0:  ==>  CS: 00000200
   forespeaking forespoken       0/0:  ==>  CS: 00000200
   foretelling foretold       0/0:  ==>  CS: 00000200
   forgetting forgotten       0/0:  ==>  CS: 00000200
   forgiving forgiven       0/0:  ==>  CS: 00000200
   forsaking forsaken       0/0:  ==>  CS: 00000200
   forswearing forsworn       0/0:  ==>  CS: 00000200
   fraughting fraught       0/0:  ==>  CS: 00000200
   freezing frozen       0/0:  ==>  CS: 00000200
   frostbiting frostbitten       0/0:  ==>  CS: 00000200
   gainsaying gainsaid       0/0:  ==>  CS: 00000200
   getting got       0/0:  ==>  CS: 00000200
   gilding gilded       0/0:  ==>  CS: 00000200
   giving given       0/0:  ==>  CS: 00000200
   going gone       0/0:  ==>  CS: 00000200
   grinding ground       0/0:  ==>  CS: 00000200
   growing grown       0/0:  ==>  CS: 00000200
   halterbreaking halterbroken       0/0:  ==>  CS: 00000200
   hamstringing hamstrung       0/0:  ==>  CS: 00000200
   hand-feeding hand-fed       0/0:  ==>  CS: 00000200
   handwriting handwritten       0/0:  ==>  CS: 00000200
   hanging hung       0/0:  ==>  CS: 00000200
   hearing heard       0/0:  ==>  CS: 00000200
   heaving heaved       0/0:  ==>  CS: 00000200
   hewing hewn       0/0:  ==>  CS: 00000200
   hiding hidden       0/0:  ==>  CS: 00000200
   hitting hit       0/0:  ==>  CS: 00000200
   holding held       0/0:  ==>  CS: 00000200
   hurting hurt       0/0:  ==>  CS: 00000200
   inbreeding inbred       0/0:  ==>  CS: 00000200
   inlaying inlaid       0/0:  ==>  CS: 00000200
   inputing input       0/0:  ==>  CS: 00000200
   insetting inset       0/0:  ==>  CS: 00000200
   interbreeding interbred       0/0:  ==>  CS: 00000200
   intercutting intercut       0/0:  ==>  CS: 00000200
   interlaying interlaid       0/0:  ==>  CS: 00000200
   intersetting interset       0/0:  ==>  CS: 00000200
   interweaving interwoven       0/0:  ==>  CS: 00000200
   interwinding interwound       0/0:  ==>  CS: 00000200
   inweaving inwoven       0/0:  ==>  CS: 00000200
   jerry-building jerry-built       0/0:  ==>  CS: 00000200
   keeping kept       0/0:  ==>  CS: 00000200
   kneeling knelt       0/0:  ==>  CS: 00000200
   knitting knitted       0/0:  ==>  CS: 00000200
   knowing known       0/0:  ==>  CS: 00000200
   lading laden       0/0:  ==>  CS: 00000200
   landsliding landslid       0/0:  ==>  CS: 00000200
   laying laid       0/0:  ==>  CS: 00000200
   leading led       0/0:  ==>  CS: 00000200
   leaning leaned       0/0:  ==>  CS: 00000200
   leaping leaped       0/0:  ==>  CS: 00000200
   learning learned       0/0:  ==>  CS: 00000200
   leaving left       0/0:  ==>  CS: 00000200
   lending lent       0/0:  ==>  CS: 00000200
   letting let       0/0:  ==>  CS: 00000200
   lieing lain       0/0:  ==>  CS: 00000200
   lighting lit       0/0:  ==>  CS: 00000200
   lip-reading lip-read       0/0:  ==>  CS: 00000200
   losing lost       0/0:  ==>  CS: 00000200
   making made       0/0:  ==>  CS: 00000200
   meaning meant       0/0:  ==>  CS: 00000200
   meeting met       0/0:  ==>  CS: 00000200
   misbecoming misbecome       0/0:  ==>  CS: 00000200
   miscasting miscast       0/0:  ==>  CS: 00000200
   miscutting miscut       0/0:  ==>  CS: 00000200
   misdealing misdealt       0/0:  ==>  CS: 00000200
   misdoing misdone       0/0:  ==>  CS: 00000200
   mishearing misheard       0/0:  ==>  CS: 00000200
   mishitting mishit       0/0:  ==>  CS: 00000200
   mislaying mislaid       0/0:  ==>  CS: 00000200
   misleading misled       0/0:  ==>  CS: 00000200
   mislearning mislearned       0/0:  ==>  CS: 00000200
   misreading misread       0/0:  ==>  CS: 00000200
   missaying missaid       0/0:  ==>  CS: 00000200
   missending missent       0/0:  ==>  CS: 00000200
   missetting misset       0/0:  ==>  CS: 00000200
   misspeaking misspoken       0/0:  ==>  CS: 00000200
   misspelling misspelled       0/0:  ==>  CS: 00000200
   misspending misspent       0/0:  ==>  CS: 00000200
   misswearing missworn       0/0:  ==>  CS: 00000200
   mistaking mistaken       0/0:  ==>  CS: 00000200
   misteaching mistaught       0/0:  ==>  CS: 00000200
   mistelling mistold       0/0:  ==>  CS: 00000200
   misthinking misthought       0/0:  ==>  CS: 00000200
   misunderstanding misunderstood       0/0:  ==>  CS: 00000200
   miswearing misworn       0/0:  ==>  CS: 00000200
   misweding miswed       0/0:  ==>  CS: 00000200
   miswriting miswritten       0/0:  ==>  CS: 00000200
   mowing mowed       0/0:  ==>  CS: 00000200
   offsetting offset       0/0:  ==>  CS: 00000200
   outbiding outbid       0/0:  ==>  CS: 00000200
   outbreeding outbred       0/0:  ==>  CS: 00000200
   outdoing outdone       0/0:  ==>  CS: 00000200
   outdrawing outdrawn       0/0:  ==>  CS: 00000200
   outdrinking outdrunk       0/0:  ==>  CS: 00000200
   outdriving outdriven       0/0:  ==>  CS: 00000200
   outfighting outfought       0/0:  ==>  CS: 00000200
   outflying outflown       0/0:  ==>  CS: 00000200
   outgrowing outgrown       0/0:  ==>  CS: 00000200
   outlaying outlaid       0/0:  ==>  CS: 00000200
   outleaping outleaped       0/0:  ==>  CS: 00000200
   outputing output       0/0:  ==>  CS: 00000200
   outriding outridden       0/0:  ==>  CS: 00000200
   outruning outrun       0/0:  ==>  CS: 00000200
   outseeing outseen       0/0:  ==>  CS: 00000200
   outselling outsold       0/0:  ==>  CS: 00000200
   outshining outshined       0/0:  ==>  CS: 00000200
   outshooting outshot       0/0:  ==>  CS: 00000200
   outsinging outsung       0/0:  ==>  CS: 00000200
   outsitting outsat       0/0:  ==>  CS: 00000200
   outsleeping outslept       0/0:  ==>  CS: 00000200
   outsmelling outsmelled       0/0:  ==>  CS: 00000200
   outspeaking outspoken       0/0:  ==>  CS: 00000200
   outspeeding outsped       0/0:  ==>  CS: 00000200
   outspending outspent       0/0:  ==>  CS: 00000200
   outspining outspun       0/0:  ==>  CS: 00000200
   outspringing outsprung       0/0:  ==>  CS: 00000200
   outstanding outstood       0/0:  ==>  CS: 00000200
   outswearing outsworn       0/0:  ==>  CS: 00000200
   outswiming outswum       0/0:  ==>  CS: 00000200
   outtelling outtold       0/0:  ==>  CS: 00000200
   outthinking outthought       0/0:  ==>  CS: 00000200
   outthrowing outthrown       0/0:  ==>  CS: 00000200
   outwearing outworn       0/0:  ==>  CS: 00000200
   outwinding outwound       0/0:  ==>  CS: 00000200
   outwriting outwritten       0/0:  ==>  CS: 00000200
   overbearing overborne       0/0:  ==>  CS: 00000200
   overbiding overbid       0/0:  ==>  CS: 00000200
   overbreeding overbred       0/0:  ==>  CS: 00000200
   overbuilding overbuilt       0/0:  ==>  CS: 00000200
   overbuying overbought       0/0:  ==>  CS: 00000200
   overcasting overcast       0/0:  ==>  CS: 00000200
   overcoming overcome       0/0:  ==>  CS: 00000200
   overcutting overcut       0/0:  ==>  CS: 00000200
   overdoing overdone       0/0:  ==>  CS: 00000200
   overdrawing overdrawn       0/0:  ==>  CS: 00000200
   overdrinking overdrunk       0/0:  ==>  CS: 00000200
   overeating overeaten       0/0:  ==>  CS: 00000200
   overfeeding overfed       0/0:  ==>  CS: 00000200
   overhanging overhung       0/0:  ==>  CS: 00000200
   overhearing overheard       0/0:  ==>  CS: 00000200
   overlaying overlaid       0/0:  ==>  CS: 00000200
   overleaping overleaped       0/0:  ==>  CS: 00000200
   overlieing overlain       0/0:  ==>  CS: 00000200
   overpaying overpaid       0/0:  ==>  CS: 00000200
   overriding overridden       0/0:  ==>  CS: 00000200
   overruning overrun       0/0:  ==>  CS: 00000200
   overseeing overseen       0/0:  ==>  CS: 00000200
   overselling oversold       0/0:  ==>  CS: 00000200
   oversetting overset       0/0:  ==>  CS: 00000200
   oversewing oversewn       0/0:  ==>  CS: 00000200
   overshooting overshot       0/0:  ==>  CS: 00000200
   oversleeping overslept       0/0:  ==>  CS: 00000200
   oversowing oversown       0/0:  ==>  CS: 00000200
   overspeaking overspoken       0/0:  ==>  CS: 00000200
   overspending overspent       0/0:  ==>  CS: 00000200
   overspilling overspilled       0/0:  ==>  CS: 00000200
   overspining overspun       0/0:  ==>  CS: 00000200
   overspreading overspread       0/0:  ==>  CS: 00000200
   overspringing oversprung       0/0:  ==>  CS: 00000200
   overstanding overstood       0/0:  ==>  CS: 00000200
   overstrewing overstrewn       0/0:  ==>  CS: 00000200
   overstriding overstridden       0/0:  ==>  CS: 00000200
   overstriking overstruck       0/0:  ==>  CS: 00000200
   overtaking overtaken       0/0:  ==>  CS: 00000200
   overthinking overthought       0/0:  ==>  CS: 00000200
   overthrowing overthrown       0/0:  ==>  CS: 00000200
   overwearing overworn       0/0:  ==>  CS: 00000200
   overwinding overwound       0/0:  ==>  CS: 00000200
   overwriting overwritten       0/0:  ==>  CS: 00000200
   partaking partaken       0/0:  ==>  CS: 00000200
   paying paid       0/0:  ==>  CS: 00000200
   pleading pleaded       0/0:  ==>  CS: 00000200
   praying prayed       0/0:  ==>  CS: 00000200
   prebuilding prebuilt       0/0:  ==>  CS: 00000200
   predoing predone       0/0:  ==>  CS: 00000200
   premaking premade       0/0:  ==>  CS: 00000200
   prepaying prepaid       0/0:  ==>  CS: 00000200
   preselling presold       0/0:  ==>  CS: 00000200
   presetting preset       0/0:  ==>  CS: 00000200
   preshrinking preshrunk       0/0:  ==>  CS: 00000200
   presplitting presplit       0/0:  ==>  CS: 00000200
   proofreading proofread       0/0:  ==>  CS: 00000200
   proving proven       0/0:  ==>  CS: 00000200
   putting put       0/0:  ==>  CS: 00000200
   quick-freezing quick-frozen       0/0:  ==>  CS: 00000200
   quiting quit       0/0:  ==>  CS: 00000200
   reading read       0/0:  ==>  CS: 00000200
   reawaking reawaken       0/0:  ==>  CS: 00000200
   rebiding rebid       0/0:  ==>  CS: 00000200
   rebinding rebound       0/0:  ==>  CS: 00000200
   rebroadcasting rebroadcast       0/0:  ==>  CS: 00000200
   rebuilding rebuilt       0/0:  ==>  CS: 00000200
   recasting recast       0/0:  ==>  CS: 00000200
   recutting recut       0/0:  ==>  CS: 00000200
   redealing redealt       0/0:  ==>  CS: 00000200
   redoing redone       0/0:  ==>  CS: 00000200
   redrawing redrawn       0/0:  ==>  CS: 00000200
   reeving reeved       0/0:  ==>  CS: 00000200
   refitting refitted       0/0:  ==>  CS: 00000200
   regrinding reground       0/0:  ==>  CS: 00000200
   regrowing regrown       0/0:  ==>  CS: 00000200
   rehanging rehung       0/0:  ==>  CS: 00000200
   rehearing reheard       0/0:  ==>  CS: 00000200
   reknitting reknitted       0/0:  ==>  CS: 00000200
   relearning relearned       0/0:  ==>  CS: 00000200
   relighting relit       0/0:  ==>  CS: 00000200
   remaking remade       0/0:  ==>  CS: 00000200
   rending rent       0/0:  ==>  CS: 00000200
   repaying repaid       0/0:  ==>  CS: 00000200
   rereading reread       0/0:  ==>  CS: 00000200
   reruning rerun       0/0:  ==>  CS: 00000200
   reselling resold       0/0:  ==>  CS: 00000200
   resending resent       0/0:  ==>  CS: 00000200
   resetting reset       0/0:  ==>  CS: 00000200
   resewing resewn       0/0:  ==>  CS: 00000200
   retaking retaken       0/0:  ==>  CS: 00000200
   reteaching retaught       0/0:  ==>  CS: 00000200
   retearing retorn       0/0:  ==>  CS: 00000200
   retelling retold       0/0:  ==>  CS: 00000200
   rethinking rethought       0/0:  ==>  CS: 00000200
   retreading retread       0/0:  ==>  CS: 00000200
   retrofitting retrofitted       0/0:  ==>  CS: 00000200
   rewaking rewaken       0/0:  ==>  CS: 00000200
   rewearing reworn       0/0:  ==>  CS: 00000200
   reweaving rewoven       0/0:  ==>  CS: 00000200
   reweding rewed       0/0:  ==>  CS: 00000200
   reweting rewet       0/0:  ==>  CS: 00000200
   rewining rewon       0/0:  ==>  CS: 00000200
   rewinding rewound       0/0:  ==>  CS: 00000200
   rewriting rewritten       0/0:  ==>  CS: 00000200
   riding rid       0/0:  ==>  CS: 00000200
   riding ridden       0/0:  ==>  CS: 00000200
   ringing rung       0/0:  ==>  CS: 00000200
   rising risen       0/0:  ==>  CS: 00000200
   riving riven       0/0:  ==>  CS: 00000200
   roughcasting roughcast       0/0:  ==>  CS: 00000200
   running run       0/0:  ==>  CS: 00000200
   sand-casting sand-cast       0/0:  ==>  CS: 00000200
   sawing sawed       0/0:  ==>  CS: 00000200
   saying said       0/0:  ==>  CS: 00000200
   seeing seen       0/0:  ==>  CS: 00000200
   seeking sought       0/0:  ==>  CS: 00000200
   self-feeding self-fed       0/0:  ==>  CS: 00000200
   self-sowing self-sown       0/0:  ==>  CS: 00000200
   selling sold       0/0:  ==>  CS: 00000200
   sending sent       0/0:  ==>  CS: 00000200
   setting set       0/0:  ==>  CS: 00000200
   sewing sewn       0/0:  ==>  CS: 00000200
   shaking shaken       0/0:  ==>  CS: 00000200
   shaving shaved       0/0:  ==>  CS: 00000200
   shearing sheared       0/0:  ==>  CS: 00000200
   sheding shed       0/0:  ==>  CS: 00000200
   shining shined       0/0:  ==>  CS: 00000200
   shoeing shoed       0/0:  ==>  CS: 00000200
   shooting shot       0/0:  ==>  CS: 00000200
   showing shown       0/0:  ==>  CS: 00000200
   shrinking shrunk       0/0:  ==>  CS: 00000200
   shriving shriven       0/0:  ==>  CS: 00000200
   shutting shut       0/0:  ==>  CS: 00000200
   sight-reading sight-read       0/0:  ==>  CS: 00000200
   singing sung       0/0:  ==>  CS: 00000200
   sinking sunk       0/0:  ==>  CS: 00000200
   siting sat       0/0:  ==>  CS: 00000200
   skywriting skywritten       0/0:  ==>  CS: 00000200
   sleeping slept       0/0:  ==>  CS: 00000200
   sliding slid       0/0:  ==>  CS: 00000200
   slinging slung       0/0:  ==>  CS: 00000200
   slinking slinked       0/0:  ==>  CS: 00000200
   slitting slit       0/0:  ==>  CS: 00000200
   smelling smelled       0/0:  ==>  CS: 00000200
   smiting smitten       0/0:  ==>  CS: 00000200
   sneaking sneaked       0/0:  ==>  CS: 00000200
   sowing sown       0/0:  ==>  CS: 00000200
   speaking spoken       0/0:  ==>  CS: 00000200
   speeding sped       0/0:  ==>  CS: 00000200
   spelling spelled       0/0:  ==>  CS: 00000200
   spending spent       0/0:  ==>  CS: 00000200
   spilling spilled       0/0:  ==>  CS: 00000200
   spinning spun       0/0:  ==>  CS: 00000200
   spitting spit       0/0:  ==>  CS: 00000200
   splitting split       0/0:  ==>  CS: 00000200
   spoiling spoiled       0/0:  ==>  CS: 00000200
   spoon-feeding spoon-fed       0/0:  ==>  CS: 00000200
   spreading spread       0/0:  ==>  CS: 00000200
   springing sprung       0/0:  ==>  CS: 00000200
   stall-feeding stall-fed       0/0:  ==>  CS: 00000200
   standing stood       0/0:  ==>  CS: 00000200
   staving staved       0/0:  ==>  CS: 00000200
   stealing stolen       0/0:  ==>  CS: 00000200
   sticking stuck       0/0:  ==>  CS: 00000200
   stinging stung       0/0:  ==>  CS: 00000200
   stinking stunk       0/0:  ==>  CS: 00000200
   strewing strewn       0/0:  ==>  CS: 00000200
   striding stridden       0/0:  ==>  CS: 00000200
   striking struck       0/0:  ==>  CS: 00000200
   stringing strung       0/0:  ==>  CS: 00000200
   striping stripped       0/0:  ==>  CS: 00000200
   striving striven       0/0:  ==>  CS: 00000200
   subletting sublet       0/0:  ==>  CS: 00000200
   sunburning sunburned       0/0:  ==>  CS: 00000200
   swearing sworn       0/0:  ==>  CS: 00000200
   sweating sweat       0/0:  ==>  CS: 00000200
   sweeping swept       0/0:  ==>  CS: 00000200
   swelling swollen       0/0:  ==>  CS: 00000200
   swiming swum       0/0:  ==>  CS: 00000200
   swinging swung       0/0:  ==>  CS: 00000200
   taking taken       0/0:  ==>  CS: 00000200
   teaching taught       0/0:  ==>  CS: 00000200
   tearing torn       0/0:  ==>  CS: 00000200
   telecasting telecast       0/0:  ==>  CS: 00000200
   telling told       0/0:  ==>  CS: 00000200
   test-driving test-driven       0/0:  ==>  CS: 00000200
   test-flying test-flown       0/0:  ==>  CS: 00000200
   thinking thought       0/0:  ==>  CS: 00000200
   thriving thrived       0/0:  ==>  CS: 00000200
   throwing thrown       0/0:  ==>  CS: 00000200
   thrusting thrust       0/0:  ==>  CS: 00000200
   treading trodden       0/0:  ==>  CS: 00000200
   troubleshooting troubleshot       0/0:  ==>  CS: 00000200
   typecasting typecast       0/0:  ==>  CS: 00000200
   typesetting typeset       0/0:  ==>  CS: 00000200
   typewriting typewritten       0/0:  ==>  CS: 00000200
   unbearing unborn       0/0:  ==>  CS: 00000200
   unbending unbent       0/0:  ==>  CS: 00000200
   unbinding unbound       0/0:  ==>  CS: 00000200
   unbuilding unbuilt       0/0:  ==>  CS: 00000200
   underbiding underbid       0/0:  ==>  CS: 00000200
   underbuying underbought       0/0:  ==>  CS: 00000200
   undercutting undercut       0/0:  ==>  CS: 00000200
   underfeeding underfed       0/0:  ==>  CS: 00000200
   undergoing undergone       0/0:  ==>  CS: 00000200
   underlaying underlaid       0/0:  ==>  CS: 00000200
   underletting underlet       0/0:  ==>  CS: 00000200
   underlieing underlain       0/0:  ==>  CS: 00000200
   underruning underrun       0/0:  ==>  CS: 00000200
   underselling undersold       0/0:  ==>  CS: 00000200
   undershooting undershot       0/0:  ==>  CS: 00000200
   underspending underspent       0/0:  ==>  CS: 00000200
   understanding understood       0/0:  ==>  CS: 00000200
   undertaking undertaken       0/0:  ==>  CS: 00000200
   underthrusting underthrust       0/0:  ==>  CS: 00000200
   underwriting underwritten       0/0:  ==>  CS: 00000200
   undoing undone       0/0:  ==>  CS: 00000200
   undrawing undrawn       0/0:  ==>  CS: 00000200
   unfreezing unfrozen       0/0:  ==>  CS: 00000200
   unhanging unhung       0/0:  ==>  CS: 00000200
   unhiding unhidden       0/0:  ==>  CS: 00000200
   unholding unheld       0/0:  ==>  CS: 00000200
   unknitting unknitted       0/0:  ==>  CS: 00000200
   unlading unladen       0/0:  ==>  CS: 00000200
   unlaying unlaid       0/0:  ==>  CS: 00000200
   unlearning unlearned       0/0:  ==>  CS: 00000200
   unmaking unmade       0/0:  ==>  CS: 00000200
   unreeving unreeved       0/0:  ==>  CS: 00000200
   unsaying unsaid       0/0:  ==>  CS: 00000200
   unsewing unsewn       0/0:  ==>  CS: 00000200
   unslinging unslung       0/0:  ==>  CS: 00000200
   unspining unspun       0/0:  ==>  CS: 00000200
   unsticking unstuck       0/0:  ==>  CS: 00000200
   unstringing unstrung       0/0:  ==>  CS: 00000200
   unswearing unsworn       0/0:  ==>  CS: 00000200
   unteaching untaught       0/0:  ==>  CS: 00000200
   unthinking unthought       0/0:  ==>  CS: 00000200
   unweaving unwoven       0/0:  ==>  CS: 00000200
   unwinding unwound       0/0:  ==>  CS: 00000200
   unwriting unwritten       0/0:  ==>  CS: 00000200
   upholding upheld       0/0:  ==>  CS: 00000200
   upsetting upset       0/0:  ==>  CS: 00000200
   vexing vexed       0/0:  ==>  CS: 00000200
   waking woken       0/0:  ==>  CS: 00000200
   waylaying waylaid       0/0:  ==>  CS: 00000200
   wearing worn       0/0:  ==>  CS: 00000200
   weaving woven       0/0:  ==>  CS: 00000200
   weding wed       0/0:  ==>  CS: 00000200
   weeping wept       0/0:  ==>  CS: 00000200
   wetting wet       0/0:  ==>  CS: 00000200
   wining won       0/0:  ==>  CS: 00000200
   winding wound       0/0:  ==>  CS: 00000200
   withdrawing withdrawn       0/0:  ==>  CS: 00000200
   withholding withheld       0/0:  ==>  CS: 00000200
   withstanding withstood       0/0:  ==>  CS: 00000200
   wringing wrung       0/0:  ==>  CS: 00000200
   writing written       0/0:  ==>  CS: 00000200
  min 2, max 2

0/0: <en-trie-pasturise-regular-y>:  CS: 00000400
  English:
   *aying 3ed       0/0:  ==>  CS: 00000400
   *eying 3ed       0/0:  ==>  CS: 00000400
   *oying 3ed       0/0:  ==>  CS: 00000400
   *ying 4ied       0/0:  ==>  CS: 00000400
  min 2, max 2

0/0: <en-trie-pasturise-regular>:  CS: 00000800
  English:
   *ing 3ed       0/0:  ==>  CS: 00000800
  min 2, max 2

0/0: <adjective-to-plural>:  CS: 00001000
  English:
   * 0       0/0:  ==>  CS: 00001000
  min 2, max 2

0/0: <adjective-to-masculine-singular>:  CS: 00002000
  English:
   * 0       0/0:  ==>  CS: 00002000
  min 2, max 2

0/0: <adjective-to-feminine-singular>:  CS: 00004000
  English:
   * 0       0/0:  ==>  CS: 00004000
  min 2, max 2

0/0: <adjective-to-masculine-plural>:  CS: 00008000
  English:
   * 0       0/0:  ==>  CS: 00008000
  min 2, max 2

0/0: <adjective-to-feminine-plural>:  CS: 00010000
  English:
   * 0       0/0:  ==>  CS: 00010000
  min 2, max 2

0/0: <adjective-to-comparative>:  CS: 00020000
  English:
   good better       0/0:  ==>  CS: 00020000
   well better       0/0:  ==>  CS: 00020000
   bad worse       0/0:  ==>  CS: 00020000
   far farther       0/0:  ==>  CS: 00020000
   *e 1er       0/0:  ==>  CS: 00020000
   *<bcdfghkmlnprstvwxyz>y 1ier       0/0:  ==>  CS: 00020000
   *<aeiou><aeiou><bcdfghkmlnprstvxyz> 0er       0/0:  ==>  CS: 00020000
   *<aeiou><bcdfghkmlnprstvxyz> 0+er       0/0:  ==>  CS: 00020000
   * 0er       0/0:  ==>  CS: 00020000
  min 2, max 2

0/0: <adjective-to-superlative>:  CS: 00040000
  English:
   good best       0/0:  ==>  CS: 00040000
   well best       0/0:  ==>  CS: 00040000
   bad worst       0/0:  ==>  CS: 00040000
   far farthest       0/0:  ==>  CS: 00040000
   *e 1est       0/0:  ==>  CS: 00040000
   *<bcdfghkmlnprstvwxyz>y 1iest       0/0:  ==>  CS: 00040000
   *<aeiou><aeiou><bcdfghkmlnprstvxyz> 0est       0/0:  ==>  CS: 00040000
   *<aeiou><bcdfghkmlnprstvxyz> 0+est       0/0:  ==>  CS: 00040000
   * 0est       0/0:  ==>  CS: 00040000
  min 2, max 2

0/0: <adjective-to-quiddity>:  CS: 00080000
  English:
   *ong 3ength       0/0:  ==>  CS: 00080000
   *<bcdfghkmlnprstvwxyz>y 1iness       0/0:  ==>  CS: 00080000
   * 0ness       0/0:  ==>  CS: 00080000
  min 2, max 2

0/0: <grammatical-case-names>:  CS: 00100000
  English:
   nominative       0/0:  ==>  CS: 00100000
   accusative       0/0:  ==>  CS: 00100000
  min 1, max 1

0/0: <noun-declension>:  DS: 00e00000 CW: 00e00000
  English:
   * <en-noun-declension-group> <en-noun-declension-tables>       0/0:  ==>  DS: 00e00000 CW: 00e00000
  min 4, max 4

0/0: <en-noun-declension-group>:  CS: 00200000
  English:
   * 1       0/0:  ==>  CS: 00200000
  min 2, max 2

0/0: <en-noun-declension-tables>:  CS: 00400000
  English:
   <en-noun-declension-uninflected>       0/0:  ==>  CS: 00400000
  min 1, max 1

0/0: <en-noun-declension-uninflected>:  CS: 00400000
  English:
   0       0/0:  ==>  CS: 00400000
   0       0/0:  ==>  CS: 00400000
   0       0/0:  ==>  CS: 00400000
   0       0/0:  ==>  CS: 00400000
  min 1, max 1

0/0: <article-declension>:  DS: 03000000 CW: 03000000
  English:
   * <en-article-declension>       0/0:  ==>  DS: 03000000 CW: 03000000
  min 3, max 6

0/0: <en-article-declension>:  CS: 01000000
  English:
   a a a some some       0/0:  ==>  CS: 01000000
   the the the       0/0:  ==>  CS: 01000000
   the the       0/0:  ==>  CS: 01000000
  min 2, max 5

88/492: <pronoun>:  CW: 0c000000
  English:
   <nominative-pronoun>       88/108: <it> ==>  CS: 04000000
   <accusative-pronoun>       0/0:  ==>  CS: 08000000
  min 1, max 1

103/300: <nominative-pronoun>:  CS: 04000000
  English:
   it/he/she       102/129: <he> ==>  CS: 04000000
   they       1/27: <they> ==>  CS: 04000000
  min 1, max 1

490/1114: <accusative-pronoun>:  CS: 08000000
  English:
   it/him/her       490/557: <it> ==>  CS: 08000000
   them       0/67:  ==>  CS: 08000000
  min 1, max 1

0/0: <possessive-first-person>:  CS: 10000000
  English:
   my       0/0:  ==>  CS: 10000000
   our       0/0:  ==>  CS: 10000000
  min 1, max 1

0/444: <possessive-second-person>:  CS: 20000000
  English:
   your       0/10:  ==>  CS: 20000000
   your       0/10:  ==>  CS: 20000000
  min 1, max 1

0/172: <possessive-third-person>:  CS: 40000000
  English:
   its/his/her       0/0:  ==>  CS: 40000000
   their       0/0:  ==>  CS: 40000000
  min 1, max 1

13009/42250: <article>:  CS: 00000004
  English:
   <indefinite-article>       3045/13009: <an> ==>  CS: 00000004
   <definite-article>       9964/9964: <the> ==>  CS: 00000004
  min 1, max 1

31501/185380: <definite-article>:  CS: 00000004
  English:
   the       31501/37153: <the> ==>  CS: 00000004
  min 1, max 1

5109/43826: <indefinite-article>:  CS: 00000004
  English:
   a/an       5105/19491: <a> ==>  CS: 00000004
   some       4/14386: <some> ==>  CS: 00000004
  min 1, max 1

36057/72114: <optional-definite-article>: 
  English:
   <definite-article> {...}       7694/17674: <the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==>  DS: 00000004
   {...}       28363/28363: <if the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==> 
  min 1, max 1000000000

70513/141026: <optional-article>: 
  English:
   <article> {...}       12586/20606: <the table of visible entrances plus the number of filled rows in the table of visible exits> ==>  DS: 00000004
   {...}       57927/57927: <list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only> ==> 
  min 1, max 1000000000

0/0: <compulsory-article>:  DS: 00000004
  English:
   <article> {...}       0/0:  ==>  DS: 00000004
  min 2, max 1000000000

61/898: <non-participles>:  CS: 80000000
  English:
   thing/something       61/63: <thing> ==>  CS: 80000000
  min 1, max 1

388/16728: <probable-participle>: 
  (internal)
  min 1, max 1

14/18948: <negated-clause>:  DS: 00000040
  English:
   not {...}       14/6212: <not handled things on the tabletop which provide the property initial appearance> ==>  DS: 00000040
  min 2, max 1000000000

0/0: <cardinal-number-in-words>:  CS: 00000080
  English:
   zero       0/0:  ==>  CS: 00000080
   one       0/0:  ==>  CS: 00000080
   two       0/0:  ==>  CS: 00000080
   three       0/0:  ==>  CS: 00000080
   four       0/0:  ==>  CS: 00000080
   five       0/0:  ==>  CS: 00000080
   six       0/0:  ==>  CS: 00000080
   seven       0/0:  ==>  CS: 00000080
   eight       0/0:  ==>  CS: 00000080
   nine       0/0:  ==>  CS: 00000080
   ten       0/0:  ==>  CS: 00000080
   eleven       0/0:  ==>  CS: 00000080
   twelve       0/0:  ==>  CS: 00000080
  min 1, max 1

0/0: <ordinal-number-in-words>:  CS: 00000100
  English:
   zeroth       0/0:  ==>  CS: 00000100
   first       0/0:  ==>  CS: 00000100
   second       0/0:  ==>  CS: 00000100
   third       0/0:  ==>  CS: 00000100
   fourth       0/0:  ==>  CS: 00000100
   fifth       0/0:  ==>  CS: 00000100
   sixth       0/0:  ==>  CS: 00000100
   seventh       0/0:  ==>  CS: 00000100
   eighth       0/0:  ==>  CS: 00000100
   ninth       0/0:  ==>  CS: 00000100
   tenth       0/0:  ==>  CS: 00000100
   eleventh       0/0:  ==>  CS: 00000100
   twelfth       0/0:  ==>  CS: 00000100
  min 1, max 1

200/19030: <cardinal-number>:  CS: 00000001
  (internal)
  min 1, max 1

0/0: <ordinal-number>:  CS: 00000002
  (internal)
  min 1, max 1

36/72: <cardinal-number-unlimited>: 
  (internal)
  min 1, max 1

0/0: <determiner-names>:  CS: 00000200
  English:
   all       0/0:  ==>  CS: 00000200
   each       0/0:  ==>  CS: 00000200
   every       0/0:  ==>  CS: 00000200
   no       0/0:  ==>  CS: 00000200
   none       0/0:  ==>  CS: 00000200
   some       0/0:  ==>  CS: 00000200
   any       0/0:  ==>  CS: 00000200
   all but       0/0:  ==>  CS: 00000200
   all except       0/0:  ==>  CS: 00000200
   almost all       0/0:  ==>  CS: 00000200
   almost no       0/0:  ==>  CS: 00000200
   most       0/0:  ==>  CS: 00000200
   under half       0/0:  ==>  CS: 00000200
   at least       0/0:  ==>  CS: 00000200
   at most       0/0:  ==>  CS: 00000200
   exactly       0/0:  ==>  CS: 00000200
   fewer than       0/0:  ==>  CS: 00000200
   less than       0/0:  ==>  CS: 00000200
   more than       0/0:  ==>  CS: 00000200
   greater than       0/0:  ==>  CS: 00000200
   other than       0/0:  ==>  CS: 00000200
  min 1, max 2

79/158: <determination-of>: 
  English:
   of the {...}       0/28:  ==>  DS: 00000400
   of {...}       0/28:  ==>  DS: 00000400
   {...}       79/79: <dvd carried by the person asked> ==> 
  min 1, max 1000000000

0/18664: <excluded-from-determiners>:  DS: 00000800
  English:
   no one {***}       0/6378:  ==>  DS: 00000800
  min 2, max 1000000000

0/258: <adjective-name>: 
  (internal)
  min 1, max 1000000000

4128/9250: <meaningful-nonimperative-verb>:  FS: 00000040
  (internal)
  min 1, max 1000000000

16/128: <copular-verb>:  FS: 00000080
  (internal)
  min 1, max 1000000000

1/8990: <negated-noncopular-verb-present>:  FS: 00000100
  (internal)
  min 1, max 1000000000

0/1832: <universal-verb>:  FS: 00000200
  (internal)
  min 1, max 1000000000

0/0: <negated-verb>:  FS: 00000400
  (internal)
  min 1, max 1000000000

0/0: <past-tense-verb>:  FS: 00000800
  (internal)
  min 1, max 1000000000

210/5162: <adaptive-verb>: 
  (internal)
  min 1, max 1000000000

59/4030: <adaptive-verb-infinitive>: 
  (internal)
  min 1, max 1000000000

1/2: <instance-of-verb>: 
  (internal)
  min 1, max 1000000000

0/0: <instance-of-infinitive-form>: 
  (internal)
  min 1, max 1000000000

58/118: <modal-verb>: 
  (internal)
  min 1, max 1000000000

0/0: <preposition>:  DS: 00001000
  (internal)
  min 1, max 1000000000

635/19300: <copular-preposition>:  DS: 00002000
  (internal)
  min 1, max 1000000000

254/10408: <permitted-preposition>:  DS: 00004000
  (internal)
  min 1, max 1000000000

67/3528: <certainty>:  CS: 00001000
  English:
   always/certainly       10/775: <always> ==>  CS: 00001000
   usually/normally       53/765: <usually> ==>  CS: 00001000
   rarely/seldom       0/712:  ==>  CS: 00001000
   never       4/712: <never> ==>  CS: 00001000
   initially       0/708:  ==>  CS: 00001000
  min 1, max 1

0/4304: <historical-reference-possible>:  DS: 00002000
  English:
   {***} once/twice/thrice/turn/turns/time/times       0/1783:  ==>  DS: 00002000
  min 1, max 1000000000

0/0: <historical-reference>:  CW: 0003c007
  English:
   for <repetition-specification>       0/0:  ==>  DS: 00020000 CW: 0003c007
   <repetition-specification>       0/0:  ==>  CW: 0001c007
  min 1, max 9

0/0: <repetition-specification>:  CW: 0001c007
  English:
   only/exactly <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   at most <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   less/fewer than <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   at least <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   more than <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   under <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   over <repetitions>       0/0:  ==>  DS: 00010000 CW: 0001c007
   <repetitions>       0/0:  ==>  CW: 0000c007
  min 1, max 8

0/0: <repetitions>:  CW: 0000c007
  English:
   <iteration-repetitions>       0/0:  ==>  DS: 00004000 CW: 00004007
   <turn-repetitions>       0/0:  ==>  DS: 00008000 CW: 00008007
  min 1, max 6

0/0: <iteration-repetitions>:  DS: 00004000 CW: 00004007
  English:
   once       0/0:  ==>  CS: 00004000
   twice       0/0:  ==>  CS: 00004000
   thrice       0/0:  ==>  CS: 00004000
   <rep-number> to <rep-number> time/times       0/0:  ==>  DS: 00004000 CW: 00004007
   <rep-number> time/times       0/0:  ==>  DS: 00004000 CW: 00004007
  min 1, max 6

0/0: <turn-repetitions>:  DS: 00008000 CW: 00008007
  English:
   <rep-number> to <rep-number> turn/turns       0/0:  ==>  DS: 00008000 CW: 00008007
   <rep-number> turn/turns       0/0:  ==>  DS: 00008000 CW: 00008007
  min 2, max 6

0/0: <rep-number>:  CW: 00000007
  English:
   <definite-article> <ordinal-number>       0/0:  ==>  DS: 00000006 CW: 00000006
   <ordinal-number>       0/0:  ==>  CS: 00000002
   <cardinal-number>       0/0:  ==>  CS: 00000001
  min 1, max 2

3218/6436: <nounphrase>: 
  English:
   {...}       3218/3218: <LIST_WRITER_INTERNAL_R with " (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==> 
  min 1, max 1000000000

220/440: <nounphrase-definite>: 
  English:
   <definite-article> <nounphrase>       220/220: <the current item from the multiple object list variable> ==>  DS: 00000004
   <nounphrase>       0/0:  ==> 
  min 1, max 1000000000

1931/3862: <nounphrase-articled>: 
  English:
   {...}       99/1931: <"(considering the first sixteen objects only)[command clarification break]" ( a )> ==> 
   <if-not-deliberately-capitalised> <indefinite-article> <nounphrase>       322/876: <an action name based rule producing nothing that varies> ==>  DS: 00000004
   <if-not-deliberately-capitalised> <definite-article> <nounphrase>       452/554: <the reason the action failed -- documented at var_reason --> ==>  DS: 00000004
   <nounphrase>       1058/1058: <LIST_WRITER_INTERNAL_R with " (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==> 
  min 1, max 1000000000

60/120: <np-balanced>: 
  English:
   ^<balanced-text>       0/60:  ==> 
   <nounphrase>       60/60: <fixed in place> ==> 
  min 1, max 1000000000

1444/2888: <np-articled-balanced>: 
  English:
   ^<balanced-text>       0/1444:  ==> 
   <nounphrase-articled>       1444/1444: <issuing the response text of something -- documented at act_resp --> ==> 
  min 1, max 1000000000

279/558: <nounphrase-articled-list>: 
  English:
   {...}       99/279: <")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==> 
   <np-articled-balanced> <np-articled-tail>       99/143: <" (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==>  DS: 00040000
   <nounphrase-articled>       81/81: <maximum things understood at once of at least 100> ==> 
  min 1, max 1000000000

198/1232: <np-articled-tail>:  DS: 00040000
  English:
   , _{and} <nounphrase-articled-list>       0/571:  ==>  DS: 00040000
   _{,/and} <nounphrase-articled-list>       198/571: <, ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==>  DS: 00040000
  min 2, max 1000000000

103/206: <nounphrase-alternative-list>: 
  English:
   {...}       30/103: <unmarked for listing> ==> 
   <np-balanced> <np-alternative-tail>       30/32: <marked for listing or unmarked for listing> ==>  DS: 00080000
   <nounphrase>       43/43: <pushable between rooms> ==> 
  min 1, max 1000000000

60/142: <np-alternative-tail>:  DS: 00080000
  English:
   , _{or} <nounphrase-alternative-list>       0/69:  ==>  DS: 00080000
   _{,/or} <nounphrase-alternative-list>       60/69: <or unmarked for listing> ==>  DS: 00080000
  min 2, max 1000000000

587/1174: <nounphrase-as-object>: 
  English:
   <np-inner>       587/587: <didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==> 
   <nounphrase-articled>       0/0:  ==> 
  min 1, max 1000000000

471/942: <nounphrase-as-subject>: 
  English:
   <if-not-deliberately-capitalised> <np-relative-phrase-limited>       0/471:  ==> 
   <np-inner-without-rp>       471/471: <the command parser errors are didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to> ==> 
   <nounphrase-articled>       0/0:  ==> 
  min 1, max 1000000000

1226/2452: <np-inner>: 
  English:
   <if-not-deliberately-capitalised> <np-relative-phrase-unlimited>       0/740:  ==>  DW: 00104000
   <np-inner-without-rp>       1226/1226: <didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==> 
  min 1, max 1000000000

0/942: <np-relative-phrase-limited>: 
  English:
   <np-relative-phrase-implicit>       0/9:  ==>  CS: 00100000
   <probable-participle> {***}       0/464:  ==> 
   <np-relative-phrase-explicit>       0/392:  ==>  DS: 00004000
  min 1, max 1000000000

0/1458: <np-relative-phrase-unlimited>:  DW: 00104000
  English:
   <np-relative-phrase-implicit>       0/220:  ==>  CS: 00100000
   <np-relative-phrase-explicit>       0/725:  ==>  DS: 00004000
  min 1, max 1000000000

0/2174: <np-relative-phrase-explicit>:  DS: 00004000
  English:
   <permitted-preposition> _,/and {...}       0/738:  ==>  DS: 04004000
   <permitted-preposition> _,/and       0/738:  ==>  DS: 04004000
   <permitted-preposition> <np-inner-without-rp>       0/1087:  ==>  DS: 00004000
  min 2, max 1000000000

1697/3394: <np-inner-without-rp>: 
  English:
   {...}       278/1697: <only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==> 
   <np-inner> {called} <np-articled-balanced>       57/677: <a room called the room gone from ( matched as from )> ==>  DS: 02000000
   <np-inner> <np-with-or-having-tail>       0/809:  ==>  DS: 00400000
   <np-inner> <np-and-tail>       139/848: <didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==>  DS: 00800000
   <np-kind-phrase>       30/713: <a kind of supporter that is portable> ==>  DW: 01000004 DS: 01000000
   <nominative-pronoun>       4/18: <it> ==>  CS: 04000000
   <np-articled-balanced>       1189/1189: <issuing the response text of something -- documented at act_resp --> ==> 
  min 1, max 1000000000

0/17092: <np-with-or-having-tail>:  DS: 00400000
  English:
   it with action {***}       0/7030:  ==>  DS: 00400000
   {with/having} (/) {***}       0/7030:  ==>  DS: 00400000
   {with/having} {...} ( <response-letter> )       0/7030:  ==>  DS: 00400000
   {with/having} <np-new-property-list>       0/7030:  ==>  DS: 00400000
  min 2, max 1000000000

0/0: <np-new-property-list>: 
  English:
   {...}       0/0:  ==> 
   <np-new-property> <np-new-property-tail>       0/0:  ==>  DS: 00200000
   <np-new-property>       0/0:  ==> 
  min 1, max 1000000000

0/0: <np-new-property>: 
  English:
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <np-new-property-tail>:  DS: 00200000
  English:
   , _{and} <np-new-property-list>       0/0:  ==>  DS: 00200000
   _{,/and} <np-new-property-list>       0/0:  ==>  DS: 00200000
  min 2, max 1000000000

278/5092: <np-and-tail>:  DS: 00800000
  English:
   , _{and} <np-inner>       12/1419: <, and didn't understand addressee's last name error> ==>  DS: 00800000
   _{,/and} <np-inner>       266/1407: <, only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==>  DS: 00800000
  min 2, max 1000000000

30/1426: <np-kind-phrase>:  DW: 01000004 DS: 01000000
  English:
   <indefinite-article> <np-kind-phrase-unarticled>       30/646: <a kind of supporter that is portable> ==>  DS: 01000004
   <np-kind-phrase-unarticled>       0/683:  ==>  DS: 01000000
  min 1, max 1000000000

30/2032: <np-kind-phrase-unarticled>:  DS: 01000000
  English:
   kind/kinds       4/14: <kind> ==>  CS: 01000000
   kind/kinds of <np-inner>       26/726: <kind of supporter that is portable> ==>  DS: 01000000
  min 1, max 1000000000

33/113264: <s-existential-np>:  CS: 08000000
  English:
   there       33/361: <there> ==>  CS: 08000000
  min 1, max 1

0/2756: <pre-verb-certainty>:  DS: 00001000
  English:
   {...} <certainty>       0/670:  ==>  DS: 00001000
  min 2, max 1000000000

67/2756: <post-verb-certainty>:  DS: 00001000
  English:
   <certainty> {...}       67/1094: <usually table of general chitchat> ==>  DS: 00001000
  min 2, max 1000000000

768/22554: <relative-clause-marker>:  CS: 10000000
  English:
   which/who/that       768/4199: <which> ==>  CS: 10000000
  min 1, max 1

2/2734: <pre-verb-rc-marker>:  DS: 10000000
  English:
   {...} <relative-clause-marker>       2/472: <answering it that> ==>  DS: 10000000
  min 2, max 1000000000

0/0: <phrase-with-calling>:  DS: 20000000
  English:
   {...} called {...}       0/0:  ==>  DS: 20000000
  min 3, max 1000000000

1353/2734: <sentence>: 
  (internal)
  min 1, max 1000000000

5/60: <notable-linguistic-kinds>:  CS: 40000000
  English:
   natural language       1/5: <natural language> ==>  CS: 40000000
   grammatical gender       1/4: <grammatical gender> ==>  CS: 40000000
   grammatical tense       1/3: <grammatical tense> ==>  CS: 40000000
   narrative viewpoint       1/2: <narrative viewpoint> ==>  CS: 40000000
   grammatical case       1/1: <grammatical case> ==>  CS: 40000000
  min 2, max 2

2398/28470: <if-parsing-phrase-tokens>: 
  (internal)
  min 0, max 0

164/328: <k-kind-for-template>: 
  (internal)
  min 1, max 1000000000

24/68: <k-kind-as-name-token>:  DS: 00000040
  English:
   ( <k-kind-as-name-token> )       0/34:  ==>  DS: 00000040
   name of kind of <k-kind-abbreviating>       21/34: <name of kind of value of kind k> ==>  DS: 00000040
   name of kind <k-kind-abbreviating>       3/13: <name of kind k> ==>  DS: 00000040
   name of kind of {...}       0/10:  ==>  DS: 00000040
   name of kind {...}       0/10:  ==>  DS: 00000040
  min 3, max 1000000000

24/48: <k-kind-abbreviating>:  DW: 80000020
  English:
   ( <k-kind-abbreviating> )       0/1:  ==>  DS: 80000000
   <k-kind-of-kind> <k-formal-kind-variable>       19/24: <enumerated value k> ==>  DS: 00000020 CW: 00000024
   <k-kind>       5/5: <value of kind k> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

4972/17318: <k-kind>:  DS: 00000020 CW: 00000024
  English:
   ( <k-kind> )       0/7912:  ==>  DS: 00000020 CW: 00000024
   ^<if-parsing-phrase-tokens> <k-kind-variable>       1589/7912: <k> ==>  DS: 00000020 CW: 00000024
   <if-parsing-phrase-tokens> <k-variable-definition>       195/6323: <sayable value of kind k> ==>  DS: 00000020
   <k-base-kind>       2969/6128: <an ice cream cone> ==>  DS: 00000020 CW: 00000024
   <k-irregular-kind-construction>       2/3159: <object-based rulebook> ==>  DS: 00000020
   <k-kind-construction>       217/3157: <phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

40/94: <k-kind-articled>:  DS: 00000020 CW: 00000024
  English:
   <indefinite-article> <k-kind>       32/32: <an object> ==>  DS: 00000024 CW: 00000024
   <k-kind>       8/8: <room> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

195/2398: <k-variable-definition>:  DS: 00000020
  English:
   <k-formal-kind-variable>       116/1199: <k> ==>  DS: 00000020 CW: 00000024
   <k-kind-of-kind> of kind <k-formal-kind-variable>       79/1083: <sayable value of kind k> ==>  DS: 00000020
  min 1, max 1000000000

2969/12256: <k-base-kind>:  DS: 00000020 CW: 00000024
  (internal)
  min 1, max 1000000000

2/3580: <k-irregular-kind-construction>:  DS: 00000020
  English:
   indexed text       0/1788:  ==>  CS: 00000020
   indexed texts       0/1788:  ==>  CS: 00000020
   stored action       0/1788:  ==>  CS: 00000020
   stored actions       0/1788:  ==>  CS: 00000020
   object-based rulebook producing <indefinite-article> <k-kind>       0/1037:  ==>  DS: 00000024
   object-based rulebook producing <k-kind>       0/1790:  ==>  DS: 00000020
   object-based rulebook       2/1788: <object-based rulebook> ==>  CS: 00000020
   action-based rulebook       0/1786:  ==>  CS: 00000020
   object-based rule producing <indefinite-article> <k-kind>       0/1037:  ==>  DS: 00000024
   object-based rule producing <k-kind>       0/1788:  ==>  DS: 00000020
   object-based rule       0/1786:  ==>  CS: 00000020
   action-based rule       0/1786:  ==>  CS: 00000020
   either-or property       0/1786:  ==>  CS: 00000020
  min 2, max 1000000000

217/6314: <k-kind-construction>:  DS: 00000020 CW: 00000024
  (internal)
  min 1, max 1000000000

150/300: <k-single-material>:  DW: 00000024
  English:
   ( <k-single-material> )       0/150:  ==>  DS: 00000020
   <article> <k-single-material>       0/1:  ==>  DS: 00000004
   <k-kind>       150/150: <relations of values of kind k to values of kind l> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

62/124: <k-optional-material>:  DW: 00000024
  English:
   ( <k-optional-material> )       0/62:  ==>  DS: 00000020
   <article> <k-optional-material>       9/9: <a value of kind k> ==>  DS: 00000004
   nothing       14/53: <nothing> ==>  CS: 00000020
   action       0/39:  ==>  CS: 00000020
   <k-kind>       39/39: <value of kind k> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

15/30: <k-tupled-material>:  DW: 00000024
  English:
   ( <k-tuple-list> )       7/15: <( value of kind k , value of kind l , value of kind m )> ==>  DS: 00000020
   nothing       3/8: <nothing> ==>  CS: 00000020
   <k-single-material>       5/5: <value of kind k> ==>  DW: 00000024
  min 1, max 1000000000

17/34: <k-tuple-list>:  DW: 00000024
  English:
   <k-single-material> , <k-tuple-list>       10/17: <value of kind k , value of kind l , value of kind m> ==>  DW: 00000024 DS: 00000020
   <k-single-material>       7/7: <value of kind l> ==>  DW: 00000024
  min 1, max 1000000000

98/432: <k-kind-of-kind>:  DS: 00000020 CW: 00000024
  English:
   <k-kind>       98/216: <sayable value> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

1589/13426: <k-kind-variable>:  DS: 00000020 CW: 00000024
  (internal)
  min 1, max 1

214/1394: <k-formal-kind-variable>:  DS: 00000020 CW: 00000024
  (internal)
  min 1, max 1

0/772: <k-formal-kind-variable-singular>: 
  (internal)
  min 1, max 1

0/0: <k-kind-variable-texts>:  CS: 00000020
  English:
   a/as       0/0:  ==>  CS: 00000020
   b/bs       0/0:  ==>  CS: 00000020
   c/cs       0/0:  ==>  CS: 00000020
   d/ds       0/0:  ==>  CS: 00000020
   e/es       0/0:  ==>  CS: 00000020
   f/fs       0/0:  ==>  CS: 00000020
   g/gs       0/0:  ==>  CS: 00000020
   h/hs       0/0:  ==>  CS: 00000020
   i/is       0/0:  ==>  CS: 00000020
   j/js       0/0:  ==>  CS: 00000020
   k/ks       0/0:  ==>  CS: 00000020
   l/ls       0/0:  ==>  CS: 00000020
   m/ms       0/0:  ==>  CS: 00000020
   n/ns       0/0:  ==>  CS: 00000020
   o/os       0/0:  ==>  CS: 00000020
   p/ps       0/0:  ==>  CS: 00000020
   q/qs       0/0:  ==>  CS: 00000020
   r/rs       0/0:  ==>  CS: 00000020
   s/ss       0/0:  ==>  CS: 00000020
   t/ts       0/0:  ==>  CS: 00000020
   u/us       0/0:  ==>  CS: 00000020
   v/vs       0/0:  ==>  CS: 00000020
   w/ws       0/0:  ==>  CS: 00000020
   x/xs       0/0:  ==>  CS: 00000020
   y/ys       0/0:  ==>  CS: 00000020
   z/zs       0/0:  ==>  CS: 00000020
  min 1, max 1

4/8: <extension-body>: 
  English:
   {***} ---- documentation ---- {...}       3/4: <version 6 of the standard rules by graham nelson begins here . |__ The Standard Rules, included in every project, define phrases, actions and
activities for interactive fiction. |__ part one - preamble |__ the verb to begin when means the built-in scene-begins-when meaning . the verb to end when means the built-in scene-ends-when meaning . the verb to end + when means the built-in scene-ends-when meaning . |__ the verb to test + with in the imperative means the built-in test-with meaning . the verb to understand + as in the imperative means the built-in understand-as meaning . the verb to release along with in the imperative means the built-in release-along-with meaning . the verb to index map with in the imperative means the built-in index-map-with meaning . |__ use command line echoing translates as (-  Constant ECHO_COMMANDS;  . use full-length room descriptions translates as (-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 2; #ENDIF;  . use abbreviated room descriptions translates as (-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 3; #ENDIF;  . use scoring translates as (-  #IFNDEF USE_SCORING; Constant USE_SCORING = 1; #ENDIF;  . use no scoring translates as (-  #IFNDEF USE_SCORING; Constant USE_SCORING = 0; #ENDIF;  . use manual pronouns translates as (-  Constant MANUAL_PRONOUNS;  . use undo prevention translates as (-  Constant PREVENT_UNDO;  . use verbose room descriptions translates as (-  Constant DEFAULT_VERBOSE_DESCRIPTIONS;  . use brief room descriptions translates as (-  Constant DEFAULT_BRIEF_DESCRIPTIONS;  . use superbrief room descriptions translates as (-  Constant DEFAULT_SUPERBRIEF_DESCRIPTIONS;  . |__ use maximum things understood at once of at least 100 translates as (-  Constant MATCH_LIST_WORDS = {N};  . use maximum things understood at once of at least 100 . |__ part two - the physical world model |__ chapter 1 - verbs and relations |__ the verb to be in means the reversed containment relation . the verb to be inside means the reversed containment relation . the verb to be within means the reversed containment relation . the verb to be held in means the reversed containment relation . the verb to be held inside means the reversed containment relation . |__ the verb to contain means the containment relation . the verb to be contained in means the reversed containment relation . |__ the verb to be on top of means the reversed support relation . the verb to be on means the reversed support relation . |__ the verb to support means the support relation . the verb to be supported on means the reversed support relation . |__ the verb to incorporate means the incorporation relation . the verb to be part of means the reversed incorporation relation . the verb to be a part of means the reversed incorporation relation . the verb to be parts of means the reversed incorporation relation . |__ the verb to enclose means the enclosure relation . |__ the verb to carry means the carrying relation . the verb to hold means the holding relation . the verb to wear means the wearing relation . |__ definition : a thing is worn if the player is wearing it . definition : a thing is carried if the player is carrying it . definition : a thing is held if the player is holding it . |__ the verb to be able to see means the visibility relation . the verb to be able to touch means the touchability relation . |__ definition : something is visible rather than invisible if the player can see it . definition : something is touchable rather than untouchable if the player can touch it . |__ the verb to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing ) means the concealment relation . definition : something is concealed rather than unconcealed if the holder of it conceals it . |__ definition : something is on-stage rather than off-stage if i6 routine OnStage makes it so ( it is indirectly in one of the rooms ) . definition : something is offstage if it is off-stage . |__ definition : a scene is happening if i6 condition scene_status-->(*1-1)==1 says so ( it is currently taking place ) . |__ chapter 2 - kinds for the physical world |__ section 1 - kind definitions |__ a room is a kind . a thing is a kind . a direction is a kind . a door is a kind of thing . a container is a kind of thing . a supporter is a kind of thing . a backdrop is a kind of thing . the plural of person is people . the plural of person is persons . a person is a kind of thing . a region is a kind . |__ section 2 - rooms |__ the specification of room is Represents geographical locations, both indoor
and outdoor, which are not necessarily areas in a building. A player in one
room is mostly unable to sense, or interact with, anything in a different room.
Rooms are arranged in a map. |__ a room can be privately-named or publicly-named . a room is usually publicly-named . a room can be lighted or dark . a room is usually lighted . a room can be visited or unvisited . a room is usually unvisited . |__ a room has a text called description . |__ a room has an object called map region . the map region of a room is usually nothing . |__ the verb to be adjacent to means the reversed adjacency relation . definition : a room is adjacent if it is adjacent to the location . |__ the verb to be regionally in means the reversed regional-containment relation . |__ the specification of region is Represents a broader area than a single
room, and allows rules to apply to a whole geographical territory. Each
region can contain many rooms, and regions can even be inside each other,
though they cannot otherwise overlap. For instance, the room Place d'Italie
might be inside the region 13th Arrondissement, which in turn is inside
the region Paris. Regions are useful mainly when the world is a large one,
and are optional. |__ a region can be privately-named or publicly-named . a region is usually publicly-named . |__ section 3 - things |__ the specification of thing is Represents anything interactive in the model
world that is not a room. People, pieces of scenery, furniture, doors and
mislaid umbrellas might all be examples, and so might more surprising things
like the sound of birdsong or a shaft of sunlight. |__ a thing can be lit or unlit . a thing is usually unlit . a thing can be edible or inedible . a thing is usually inedible . a thing can be fixed in place or portable . a thing is usually portable . a thing can be scenery . a thing can be wearable . a thing can be pushable between rooms . |__ a thing can be handled . |__ a thing can be privately-named or publicly-named . a thing is usually publicly-named . a thing can be undescribed or described . a thing is usually described . a thing can be marked for listing or unmarked for listing . a thing is usually unmarked for listing . a thing can be mentioned or unmentioned . a thing is usually mentioned . |__ a thing has a text called a description . a thing has a text called an initial appearance . |__ scenery is usually fixed in place . |__ section 4 - directions |__ the specification of direction is Represents a direction of movement, such
as northeast or down. They always occur in opposite, matched pairs: northeast
and southwest, for instance; down and up. |__ a direction can be privately-named or publicly-named . a direction is usually publicly-named . a direction can be marked for listing or unmarked for listing . a direction is usually unmarked for listing . a direction can be scenery . a direction is always scenery . |__ a direction has a direction called an opposite . |__ the north is a direction . the northeast is a direction . the northwest is a direction . the south is a direction . the southeast is a direction . the southwest is a direction . the east is a direction . the west is a direction . the up is a direction . the down is a direction . the inside is a direction . the outside is a direction . |__ the north has opposite south . understand "n" as north . the northeast has opposite southwest . understand "ne" as northeast . the northwest has opposite southeast . understand "nw" as northwest . the south has opposite north . understand "s" as south . the southeast has opposite northwest . understand "se" as southeast . the southwest has opposite northeast . understand "sw" as southwest . the east has opposite west . understand "e" as east . the west has opposite east . understand "w" as west . up has opposite down . understand "u" as up . down has opposite up . understand "d" as down . inside has opposite outside . understand "in" as inside . outside has opposite inside . understand "out" as outside . |__ the inside object translates into i6 as in_obj . the outside object translates into i6 as out_obj . |__ the verb to be above means the reversed mapping up relation . the verb to be mapped above means the reversed mapping up relation . the verb to be below means the reversed mapping down relation . the verb to be mapped below means the reversed mapping down relation . |__ section 5 - doors |__ the specification of door is Represents a conduit joining two rooms, most
often a door or gate but sometimes a plank bridge, a slide or a hatchway.
Usually visible and operable from both sides (for instance if you write
'The blue door is east of the Ballroom and west of the Garden.'), but
sometimes only one-way (for instance if you write 'East of the Ballroom is
the long slide. Through the long slide is the cellar.'). |__ a door is always fixed in place . a door is never pushable between rooms . |__ a door has an object called other side . the other side property translates into i6 as door_to . leading-through relates one room ( called the other side ) to various doors . the verb to be through means the leading-through relation . |__ section 6 - containers |__ the specification of container is Represents something into which portable
things can be put, such as a teachest or a handbag. Something with a really
large immobile interior, such as the Albert Hall, had better be a room
instead. |__ a container can be enterable . a container can be transparent or opaque . a container is usually opaque . a container has a number called carrying capacity . the carrying capacity of a container is usually 100 . |__ section 7 - supporters |__ the specification of supporter is Represents a surface on which things can be
placed, such as a table. |__ a supporter can be enterable . a supporter has a number called carrying capacity . the carrying capacity of a supporter is usually 100 . |__ a supporter is usually fixed in place . a supporter can be transparent . a supporter is always transparent . |__ section 8 - openability |__ a door can be open or closed . a door is usually closed . a door can be openable or unopenable . a door is usually openable . |__ a container can be open or closed . a container is usually open . a container can be openable or unopenable . a container is usually unopenable . |__ section 9 - lockability |__ a door can be lockable . a door is usually not lockable . a door can be locked or unlocked . a door is usually unlocked . a door has an object called a matching key . a locked door is usually lockable . a locked door is usually closed . a lockable door is usually openable . |__ a container can be lockable . a container is usually not lockable . a container can be locked or unlocked . a container is usually unlocked . a container has an object called a matching key . a locked container is usually lockable . a locked container is usually closed . a lockable container is usually openable . |__ lock-fitting relates one thing ( called the matching key ) to various things . the verb to unlock means the lock-fitting relation . |__ section 10 - backdrops |__ the specification of backdrop is Represents an aspect of the landscape
or architecture which extends across more than one room: for instance,
a stream, the sky or a long carpet. |__ a backdrop is usually scenery . a backdrop is always fixed in place . a backdrop is never pushable between rooms . |__ section 11 - people |__ the specification of person is Despite the name, not necessarily a human
being, but anything animate enough to envisage having a conversation with, or
bartering with. |__ a person can be female or male . a person is usually male . a person can be neuter . a person is usually not neuter . |__ a person has a number called carrying capacity . the carrying capacity of a person is usually 100 . |__ a person can be transparent . a person is always transparent . |__ the yourself is an undescribed person . the yourself is proper-named . |__ the yourself is privately-named . understand "your former self" or "my former self" or "former self" or "former" as yourself when the player is not yourself . |__ the description of yourself is usually "As good-looking as ever." |__ the yourself object translates into i6 as selfobj . |__ section 12 - animals , men and women |__ the plural of man is men . the plural of woman is women . |__ a man is a kind of person . the specification of man is Represents a man or boy. a man is always male . a man is never neuter . |__ a woman is a kind of person . the specification of woman is Represents a woman or girl. a woman is always female . a woman is never neuter . |__ an animal is a kind of person . |__ the specification of animal is Represents an animal, or at any rate a
non-human living creature reasonably large and possible to interact with: a
giant Venus fly-trap might qualify, but not a patch of lichen. |__ section 13 - devices |__ a device is a kind of thing . |__ a device can be switched on or switched off . a device is usually switched off . |__ the specification of device is Represents a machine or contrivance of some
kind which can be switched on or off. |__ section 14 - vehicles |__ a vehicle is a kind of container . |__ the specification of vehicle is Represents a container large enough for
a person to enter, and which can then move between rooms at the driver's
instruction. (If a supporter is needed instead, try the extension
Rideable Vehicles by Graham Nelson.) |__ a vehicle is always enterable . |__ a vehicle is usually not portable . |__ section 15 - player's holdall |__ a player's holdall is a kind of container . |__ the specification of player's holdall is Represents a container which the
player can carry around as a sort of rucksack, into which spare items are
automatically stowed away. |__ a player's holdall is always portable . a player's holdall is usually openable . |__ section 16 - inform 6 equivalents |__ the wearable property translates into i6 as clothing . the undescribed property translates into i6 as concealed . the edible property translates into i6 as edible . the enterable property translates into i6 as enterable . the female property translates into i6 as female . the mentioned property translates into i6 as mentioned . the lit property translates into i6 as light . the lighted property translates into i6 as light . the lockable property translates into i6 as lockable . the locked property translates into i6 as locked . the handled property translates into i6 as moved . the neuter property translates into i6 as neuter . the switched on property translates into i6 as on . the open property translates into i6 as open . the openable property translates into i6 as openable . the privately-named property translates into i6 as privately_named . the pushable between rooms property translates into i6 as pushable . the scenery property translates into i6 as scenery . the fixed in place property translates into i6 as static . the transparent property translates into i6 as transparent . the visited property translates into i6 as visited . the marked for listing property translates into i6 as workflag . the list grouping key property translates into i6 as list_together . |__ the carrying capacity property translates into i6 as capacity . the description property translates into i6 as description . the initial appearance property translates into i6 as initial . the map region property translates into i6 as map_region . the matching key property translates into i6 as with_key . |__ |__ part three - variables and rulebooks |__ chapter 1 - variables |__ section 1 - situation |__ the player is a person that varies . the player variable translates into i6 as player . |__ the location -- documented at var_location -- is an object that varies . the score -- documented at var_score -- is a number that varies . the last notified score is a number that varies . the maximum score is a number that varies . the turn count is a number that varies . the time of day -- documented at var_time -- is a time that varies . the darkness witnessed is a truth state that varies . |__ the location variable translates into i6 as real_location . the score variable translates into i6 as score . the last notified score variable translates into i6 as last_score . the maximum score variable translates into i6 as MAX_SCORE . the turn count variable translates into i6 as turns . the time of day variable translates into i6 as the_time . |__ section 2 - current action |__ the noun -- documented at var_noun -- is an object that varies . the second noun is an object that varies . the person asked -- documented at var_person_asked -- is an object that varies . the reason the action failed -- documented at var_reason -- is an action name based rule producing nothing that varies . the item described is an object that varies . |__ the noun variable translates into i6 as noun . the second noun variable translates into i6 as second . the person asked variable translates into i6 as actor . the reason the action failed variable translates into i6 as reason_the_action_failed . the item described variable translates into i6 as self . |__ section 3 - used when ruling on accessibility |__ the person reaching -- documented at var_person_reaching -- is an object that varies . the container in question is an object that varies . the supporter in question is an object that varies . the particular possession -- documented at var_particular -- is a thing that varies . |__ the person reaching variable translates into i6 as actor . the container in question variable translates into i6 as parameter_object . the supporter in question variable translates into i6 as parameter_object . the particular possession variable translates into i6 as particular_possession . |__ section 4 - used when understanding typed commands |__ the player's command -- documented at var_command -- is a snippet that varies . the matched text is a snippet that varies . the number understood -- documented at var_understood -- is a number that varies . the real number understood -- documented at var_understood -- is a real number that varies . the time understood is a time that varies . the topic understood is a snippet that varies . the truth state understood is a truth state that varies . the current item from the multiple object list is an object that varies . |__ the player's command variable translates into i6 as players_command . the matched text variable translates into i6 as matched_text . the topic understood variable translates into i6 as parsed_number . the current item from the multiple object list variable translates into i6 as multiple_object_item . |__ section 5 - presentation on screen |__ the command prompt -- documented at var_prompt -- is a text that varies . the command prompt is ">" . |__ the left hand status line -- documented at var_sl -- is a text that varies . the right hand status line is a text that varies . |__ the left hand status line variable translates into i6 as left_hand_status_line . the right hand status line variable translates into i6 as right_hand_status_line . |__ the listing group size is a number that varies . the listing group size variable translates into i6 as listing_size . |__ section 6 - language generation |__ the prior named object is an object that varies . the prior named object variable translates into i6 as prior_named_noun . an object has a text called list grouping key . |__ section 7 - unindexed standard rules variables - unindexed |__ the story title , the story author , the story headline , the story genre and the story description are text variables . the release number and the story creation year are number variables . |__ the release number is usually 1 . the story headline is usually "An Interactive Fiction" . the story genre is usually "Fiction" . |__ the story title variable translates into i6 as Story . |__ section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only ) |__ figure of cover is the file of cover art ( The cover art. ) . |__ section 8 - unindexed standard rules variables - unindexed |__ the i6-nothing-constant is an object that varies . the i6-nothing-constant variable translates into i6 as nothing . |__ the i6-varying-global is an object that varies . the i6-varying-global variable translates into i6 as nothing . |__ the item-pushed-between-rooms is an object that varies . the item-pushed-between-rooms variable translates into i6 as move_pushing . |__ the actor-location is an object that varies . the actor-location variable translates into i6 as actor_location . |__ the scene being changed is a scene that varies . the scene being changed variable translates into i6 as parameter_value . |__ chapter 2 - rulebooks |__ section 1 - the standard rulebooks |__ turn sequence rules is a rulebook . |__ scene changing rules is a rulebook . when play begins is a rulebook . when play ends is a rulebook . when scene begins is a scene based rulebook . when scene ends is a scene based rulebook . every turn rules is a rulebook . |__ action-processing rules is a rulebook . the action-processing rulebook has a person called the actor . setting action variables is a rulebook . the specific action-processing rules is a rulebook . the specific action-processing rulebook has a truth state called action in world . the specific action-processing rulebook has a truth state called action keeping silent . the specific action-processing rulebook has a rulebook called specific check rulebook . the specific action-processing rulebook has a rulebook called specific carry out rulebook . the specific action-processing rulebook has a rulebook called specific report rulebook . the specific action-processing rulebook has a truth state called within the player's sight . the player's action awareness rules is a rulebook . |__ accessibility rules is a rulebook . reaching inside rules is an object-based rulebook . reaching inside rules have outcomes allow access ( success ) and deny access ( failure ) . reaching outside rules is an object-based rulebook . reaching outside rules have outcomes allow access ( success ) and deny access ( failure ) . visibility rules is a rulebook . visibility rules have outcomes there is sufficient light ( failure ) and there is insufficient light ( success ) . |__ persuasion rules is a rulebook . persuasion rules have outcomes persuasion succeeds ( success ) and persuasion fails ( failure ) . unsuccessful attempt by is a rulebook . |__ before rules is a rulebook . instead rules is a rulebook . check rules is a rulebook . carry out rules is a rulebook . after rules is a rulebook . report rules is a rulebook . |__ the does the player mean rules is a rulebook . the does the player mean rules have outcomes it is very likely , it is likely , it is possible , it is unlikely and it is very unlikely . |__ the multiple action processing rules is a rulebook . |__ section 2 - the standard rules |__ the little-used do nothing rule translates into i6 as LITTLE_USED_DO_NOTHING_R . |__ the start in the correct scenes rule is listed first in the startup rulebook . the position player in model world rule is listed first in the startup rulebook . this is the declare everything initially unmentioned rule : repeat with item running through things : now the item is not mentioned . the declare everything initially unmentioned rule is listed first in the startup rulebook . the update chronological records rule is listed first in the startup rulebook . the seed random number generator rule is listed first in the startup rulebook . the virtual machine startup rule is listed first in the startup rulebook . the initialise memory rule is listed first in the startup rulebook . |__ the virtual machine startup rule translates into i6 as VIRTUAL_MACHINE_STARTUP_R . the initialise memory rule translates into i6 as INITIALISE_MEMORY_R . the seed random number generator rule translates into i6 as SEED_RANDOM_NUMBER_GENERATOR_R . the update chronological records rule translates into i6 as UPDATE_CHRONOLOGICAL_RECORDS_R . the position player in model world rule translates into i6 as POSITION_PLAYER_IN_MODEL_R . |__ this is the start in the correct scenes rule : follow the scene changing rules . |__ the when play begins stage rule is listed in the startup rulebook . the fix baseline scoring rule is listed in the startup rulebook . the display banner rule is listed in the startup rulebook . the initial room description rule is listed in the startup rulebook . |__ this is the when play begins stage rule : follow the when play begins rulebook . |__ this is the fix baseline scoring rule : now the last notified score is the score . |__ this is the display banner rule : say "[banner text]" . |__ this is the initial room description rule : try looking . |__ a first turn sequence rule ( this is the every turn stage rule ) : follow the every turn rules . a first turn sequence rule : follow the scene changing rules . the generate action rule is listed first in the turn sequence rulebook . the declare everything initially unmentioned rule is listed first in the turn sequence rulebook . the parse command rule is listed first in the turn sequence rulebook . |__ the timed events rule is listed in the turn sequence rulebook . the advance time rule is listed in the turn sequence rulebook . the update chronological records rule is listed in the turn sequence rulebook . |__ a last turn sequence rule : follow the scene changing rules . the adjust light rule is listed last in the turn sequence rulebook . the note object acquisitions rule is listed last in the turn sequence rulebook . the notify score changes rule is listed last in the turn sequence rulebook . |__ this is the notify score changes rule : if the score is not the last notified score : issue score notification message ; now the last notified score is the score ; |__ the adjust light rule translates into i6 as ADJUST_LIGHT_R with "[It] [are] [if story tense is present tense]now [end if]pitch dark in
[if story tense is present tense]here[else]there[end if]!" ( a ) . the advance time rule translates into i6 as ADVANCE_TIME_R . the generate action rule translates into i6 as GENERATE_ACTION_R with "(considering the first sixteen objects only)[command clarification break]" ( a ) , "Nothing to do!" ( b ) . |__ the note object acquisitions rule translates into i6 as NOTE_OBJECT_ACQUISITIONS_R . the parse command rule translates into i6 as PARSE_COMMAND_R . the timed events rule translates into i6 as TIMED_EVENTS_R . |__ the when play ends stage rule is listed first in the shutdown rulebook . the resurrect player if asked rule is listed last in the shutdown rulebook . the print player's obituary rule is listed last in the shutdown rulebook . the ask the final question rule is listed last in the shutdown rulebook . |__ this is the when play ends stage rule : follow the when play ends rulebook . this is the print player's obituary rule : carry out the printing the player's obituary activity . |__ the resurrect player if asked rule translates into i6 as RESURRECT_PLAYER_IF_ASKED_R . the ask the final question rule translates into i6 as ASK_FINAL_QUESTION_R . |__ the scene change machinery rule is listed last in the scene changing rulebook . |__ the scene change machinery rule translates into i6 as SCENE_CHANGE_MACHINERY_R . |__ section 3 - the entire game scene |__ the entire game is a scene . the entire game begins when the story has not ended . the entire game ends when the story has ended . |__ section 4 - action processing |__ the before stage rule is listed first in the action-processing rules . the set pronouns from items from multiple object lists rule is listed first in the action-processing rules . the announce items from multiple object lists rule is listed first in the action-processing rules . the basic visibility rule is listed in the action-processing rules . the basic accessibility rule is listed in the action-processing rules . the carrying requirements rule is listed in the action-processing rules . the instead stage rule is listed last in the action-processing rules . the requested actions require persuasion rule is listed last in the action-processing rules . the carry out requested actions rule is listed last in the action-processing rules . the descend to specific action-processing rule is listed last in the action-processing rules . the end action-processing in success rule is listed last in the action-processing rules . |__ this is the set pronouns from items from multiple object lists rule : if the current item from the multiple object list is not nothing , set pronouns from the current item from the multiple object list . |__ this is the announce items from multiple object lists rule : if the current item from the multiple object list is not nothing , say "[current item from the multiple object list]: [run paragraph on]" ( a ) . |__ this is the before stage rule : abide by the before rules . this is the instead stage rule : abide by the instead rules . |__ this is the end action-processing in success rule : rule succeeds . |__ the basic accessibility rule translates into i6 as BASIC_ACCESSIBILITY_R with "You must name something more substantial." ( a ) . the basic visibility rule translates into i6 as BASIC_VISIBILITY_R with "[It] [are] pitch dark, and [we] [can't see] a thing." ( a ) . the carrying requirements rule translates into i6 as CARRYING_REQUIREMENTS_R . the requested actions require persuasion rule translates into i6 as REQUESTED_ACTIONS_REQUIRE_R with "[The noun] [have] better things to do." ( a ) . the carry out requested actions rule translates into i6 as CARRY_OUT_REQUESTED_ACTIONS_R with "[The noun] [are] unable to do that." ( a ) . the descend to specific action-processing rule translates into i6 as DESCEND_TO_SPECIFIC_ACTION_R . |__ the work out details of specific action rule is listed first in the specific action-processing rules . |__ a specific action-processing rule ( this is the investigate player's awareness before action rule ) : follow the player's action awareness rules ; if rule succeeded , now within the player's sight is true ; otherwise now within the player's sight is false . |__ a specific action-processing rule ( this is the check stage rule ) : anonymously abide by the specific check rulebook . |__ a specific action-processing rule ( this is the carry out stage rule ) : follow the specific carry out rulebook . |__ a specific action-processing rule ( this is the after stage rule ) : if action in world is true , abide by the after rules . |__ a specific action-processing rule ( this is the investigate player's awareness after action rule ) : if within the player's sight is false : follow the player's action awareness rules ; if rule succeeded , now within the player's sight is true ; |__ a specific action-processing rule ( this is the report stage rule ) : if within the player's sight is true and action keeping silent is false , follow the specific report rulebook ; |__ the last specific action-processing rule : rule succeeds . |__ the work out details of specific action rule translates into i6 as WORK_OUT_DETAILS_OF_SPECIFIC_R . |__ a player's action awareness rule ( this is the player aware of his own actions rule ) : if the player is the actor , rule succeeds . a player's action awareness rule ( this is the player aware of actions by visible actors rule ) : if the player is not the actor and the player can see the actor , rule succeeds . a player's action awareness rule ( this is the player aware of actions on visible nouns rule ) : if the noun is a thing and the player can see the noun , rule succeeds . a player's action awareness rule ( this is the player aware of actions on visible second nouns rule ) : if the second noun is a thing and the player can see the second noun , rule succeeds . |__ section 5 - accessibility |__ the access through barriers rule is listed last in the accessibility rules . |__ the access through barriers rule translates into i6 as ACCESS_THROUGH_BARRIERS_R with "[regarding the noun][Those] [aren't] available." ( a ) . |__ the can't reach inside rooms rule is listed last in the reaching inside rules . the can't reach inside closed containers rule is listed last in the reaching inside rules . |__ the can't reach inside closed containers rule translates into i6 as CANT_REACH_INSIDE_CLOSED_R with "[The noun] [aren't] open." ( a ) . the can't reach inside rooms rule translates into i6 as CANT_REACH_INSIDE_ROOMS_R with "[We] [can't] reach into [the noun]." ( a ) . |__ the can't reach outside closed containers rule is listed last in the reaching outside rules . |__ the can't reach outside closed containers rule translates into i6 as CANT_REACH_OUTSIDE_CLOSED_R with "[The noun] [aren't] open." ( a ) . |__ the can't act in the dark rule is listed last in the visibility rules . |__ the last visibility rule ( this is the can't act in the dark rule ) : if in darkness , rule succeeds . |__ does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule ) : it is very unlikely . |__ section 6 - adjectival definitions |__ a scene can be recurring or non-recurring . a scene is usually non-recurring . the entire game is recurring . |__ section 7 - scene descriptions |__ a scene has a text called description . when a scene ( called the event ) begins ( this is the scene description text rule ) : if the description of the event is not "" , say "[description of the event][paragraph break]" . |__ section 8 - command parser errors |__ a command parser error is a kind of value . the command parser errors are didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error . |__ the latest parser error is a command parser error that varies . the latest parser error variable translates into i6 as etype . |__ section 9 - responses for internal rules |__ the list writer internal rule translates into i6 as LIST_WRITER_INTERNAL_R with " (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y ) . |__ the action processing internal rule translates into i6 as ACTION_PROCESSING_INTERNAL_R with "[bracket]That command asks to do something outside of play, so it can
only make sense from you to me. [The noun] cannot be asked to do this.[close
bracket]" ( a ) , "You must name an object." ( b ) , "You may not name an object." ( c ) , "You must supply a noun." ( d ) , "You may not supply a noun." ( e ) , "You must name a second object." ( f ) , "You may not name a second object." ( g ) , "You must supply a second noun." ( h ) , "You may not supply a second noun." ( i ) , "(Since something dramatic has happened, your list of commands has been
cut short.)" ( j ) , "I didn't understand that instruction." ( k ) . |__ the parser error internal rule translates into i6 as PARSER_ERROR_INTERNAL_R with "I didn't understand that sentence." ( a ) , "I only understood you as far as wanting to " ( b ) , "I only understood you as far as wanting to (go) " ( c ) , "I didn't understand that number." ( d ) , "[We] [can't] see any such thing." ( e ) , "You seem to have said too little!" ( f ) , "[We] [aren't] holding that!" ( g ) , "You can't use multiple objects with that verb." ( h ) , "You can only use multiple objects once on a line." ( i ) , "I'm not sure what ['][pronoun i6 dictionary word]['] refers to." ( j ) , "[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment." ( k ) , "You excepted something not included anyway!" ( l ) , "You can only do that to something animate." ( m ) , "That's not a verb I [if American dialect option is
active]recognize[otherwise]recognise[end if]." ( n ) , "That's not something you need to refer to in the course of this game." ( o ) , "I didn't understand the way that finished." ( p ) , "[if number understood is 0]None[otherwise]Only [number understood in words][end if]
of those [regarding the number understood][are] available." ( q ) , "That noun did not make sense in this context." ( r ) , "To repeat a command like 'frog, jump', just say 'again', not 'frog, again'." ( s ) , "You can't begin with a comma." ( t ) , "You seem to want to talk to someone, but I can't see whom." ( u ) , "You can't talk to [the noun]." ( v ) , "To talk to someone, try 'someone, hello' or some such." ( w ) , "I beg your pardon?" ( x ) . |__ the parser nothing error internal rule translates into i6 as PARSER_N_ERROR_INTERNAL_R with "Nothing to do!" ( a ) , "[There] [adapt the verb are from the third person plural] none at all available!" ( b ) , "[regarding the noun][Those] [seem] to belong to [the noun]." ( c ) , "[regarding the noun][Those] [can't] contain things." ( d ) , "[The noun] [aren't] open." ( e ) , "[The noun] [are] empty." ( f ) . |__ the darkness name internal rule translates into i6 as DARKNESS_NAME_INTERNAL_R with "Darkness" ( a ) . |__ the parser command internal rule translates into i6 as PARSER_COMMAND_INTERNAL_R with "Sorry, that can't be corrected." ( a ) , "Think nothing of it." ( b ) , "'Oops' can only correct a single word." ( c ) , "You can hardly repeat that." ( d ) . |__ the parser clarification internal rule translates into i6 as PARSER_CLARIF_INTERNAL_R with "Who do you mean, " ( a ) , "Which do you mean, " ( b ) , "Sorry, you can only have one item here. Which exactly?" ( c ) , "Whom do you want [if the noun is not the player][the noun] [end if]to
[parser command so far]?" ( d ) , "What do you want [if the noun is not the player][the noun] [end if]to
[parser command so far]?" ( e ) , "those things" ( f ) , "that" ( g ) , " or " ( h ) . |__ the yes or no question internal rule translates into i6 as YES_OR_NO_QUESTION_INTERNAL_R with "Please answer yes or no." ( a ) . |__ the print protagonist internal rule translates into i6 as PRINT_PROTAGONIST_INTERNAL_R with "[We]" ( a ) , "[ourselves]" ( b ) , "[our] former self" ( c ) . |__ part four - activities |__ section 1 - responses |__ issuing the response text of something -- documented at act_resp -- is an activity on responses . |__ the standard issuing the response text rule is listed last in for issuing the response text . |__ the standard issuing the response text rule translates into i6 as STANDARD_RESPONSE_ISSUING_R . |__ section 2 - naming and listing |__ before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule ) : if expanding text for comparison purposes , continue the activity ; now the item being printed is mentioned . |__ printing a number of something ( documented at act_pan ) is an activity . |__ rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule ) : say "[listing group size in words] " ; carry out the printing the plural name activity with the item . the standard printing a number of something rule is listed last in the for printing a number rulebook . |__ printing room description details of something ( documented at act_details ) is an activity . printing inventory details of something ( documented at act_idetails ) is an activity . |__ listing contents of something ( documented at act_lc ) is an activity . the standard contents listing rule is listed last in the for listing contents rulebook . the standard contents listing rule translates into i6 as STANDARD_CONTENTS_LISTING_R . grouping together something ( documented at act_gt ) is an activity . |__ writing a paragraph about something ( documented at act_wpa ) is an activity . |__ listing nondescript items of something ( documented at act_lni ) is an activity . |__ printing the name of a dark room ( documented at act_darkname ) is an activity . printing the description of a dark room ( documented at act_darkdesc ) is an activity . printing the announcement of darkness ( documented at act_nowdark ) is an activity . printing the announcement of light ( documented at act_nowlight ) is an activity . printing a refusal to act in the dark ( documented at act_toodark ) is an activity . |__ the look around once light available rule is listed last in for printing the announcement of light . |__ this is the look around once light available rule : try looking . |__ constructing the status line ( documented at act_csl ) is an activity . printing the banner text ( documented at act_banner ) is an activity . |__ section 3 - command parsing |__ reading a command ( documented at act_reading ) is an activity . deciding the scope of something ( future action ) ( documented at act_ds ) is an activity . deciding the concealed possessions of something ( documented at act_con ) is an activity . deciding whether all includes something ( future action ) ( documented at act_all ) is an activity . the for deciding whether all includes rules have outcomes it does not ( failure ) and it does ( success ) . clarifying the parser's choice of something ( future action ) ( documented at act_clarify ) is an activity . asking which do you mean ( future action ) ( documented at act_which ) is an activity . printing a parser error ( documented at act_parsererror ) is an activity . supplying a missing noun ( documented at act_smn ) is an activity . supplying a missing second noun ( documented at act_smn ) is an activity . implicitly taking something ( documented at act_implicitly ) is an activity . |__ rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule ) : it does not . rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule ) : it does not . rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule ) : it does not . rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule ) : it does not . rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule ) : it does not . |__ rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule ) : now the noun is the touchability ceiling of the player . |__ rule for supplying a missing noun while an actor listening ( this is the ambient sound rule ) : now the noun is the touchability ceiling of the player . |__ rule for supplying a missing noun while an actor going ( this is the block vaguely going rule ) : say "You'll have to say which compass direction to go in." ( a ) . |__ the standard implicit taking rule is listed last in for implicitly taking . |__ the standard implicit taking rule translates into i6 as STANDARD_IMPLICIT_TAKING_R with "(first taking [the noun])[command clarification break]" ( a ) , "([the second noun] first taking [the noun])[command clarification break]" ( b ) . |__ section 4 - posthumous activities |__ amusing a victorious player ( documented at act_amuse ) is an activity . |__ printing the player's obituary ( documented at act_obit ) is an activity . the print obituary headline rule is listed last in for printing the player's obituary . the print final score rule is listed last in for printing the player's obituary . the display final status line rule is listed last in for printing the player's obituary . |__ the print obituary headline rule translates into i6 as PRINT_OBITUARY_HEADLINE_R with " You have died " ( a ) , " You have won " ( b ) , " The End " ( c ) . the print final score rule translates into i6 as PRINT_FINAL_SCORE_R . the display final status line rule translates into i6 as DISPLAY_FINAL_STATUS_LINE_R . |__ handling the final question is an activity . |__ the immediately restart the vm rule translates into i6 as IMMEDIATELY_RESTART_VM_R . the immediately restore saved game rule translates into i6 as IMMEDIATELY_RESTORE_SAVED_R . the immediately quit rule translates into i6 as IMMEDIATELY_QUIT_R . the immediately undo rule translates into i6 as IMMEDIATELY_UNDO_R with "The use of 'undo' is forbidden in this story." ( a ) , "You can't 'undo' what hasn't been done!" ( b ) , "Your interpreter does not provide 'undo'. Sorry!" ( c ) , "'Undo' failed. Sorry!" ( d ) , "[bracket]Previous turn undone.[close bracket]" ( e ) , "'Undo' capacity exhausted. Sorry!" ( f ) . |__ the print the final question rule is listed in before handling the final question . the print the final prompt rule is listed in before handling the final question . the read the final answer rule is listed last in before handling the final question . the standard respond to final question rule is listed last in for handling the final question . |__ this is the print the final prompt rule : say "> [run paragraph on]" ( a ) . |__ the read the final answer rule translates into i6 as READ_FINAL_ANSWER_R . |__ section 5 - the final question |__ this is the print the final question rule : let named options count be 0 ; repeat through the table of final question options : if the only if victorious entry is false or the story has ended finally : if there is a final response rule entry or the final response activity entry is not empty : if there is a final question wording entry , increase named options count by 1 ; if the named options count is less than 1 , abide by the immediately quit rule ; say "Would you like to " ( a ) ; repeat through the table of final question options : if the only if victorious entry is false or the story has ended finally : if there is a final response rule entry or the final response activity entry is not empty : if there is a final question wording entry : say final question wording entry ; decrease named options count by 1 ; if the named options count is 1 : if the serial comma option is active , say "," ; say " or " ( b ) ; otherwise if the named options count is 0 : say "?[line break]" ; otherwise : say ", " ; |__ this is the standard respond to final question rule : repeat through the table of final question options : if the only if victorious entry is false or the story has ended finally : if there is a final response rule entry or the final response activity entry is not empty : if the player's command matches the topic entry : if there is a final response rule entry , abide by final response rule entry ; otherwise carry out the final response activity entry activity ; rule succeeds ; say "Please give one of the answers above." ( a ) . |__ section 6 - final question options |__ table of final question options final question wording only if victorious topic final response rule final response activity "RESTART" false "restart" immediately restart the vm rule -- "RESTORE a saved game" false "restore" immediately restore saved game rule -- "see some suggestions for AMUSING things to do" true "amusing" -- amusing a victorious player "QUIT" false "quit" immediately quit rule -- "UNDO the last command" false "undo" immediately undo rule -- |__ section 7 - locale descriptions - unindexed |__ table of locale priorities notable-object ( an object ) locale description priority ( a number ) -- -- with blank rows for each thing . |__ to describe locale for ( o - object ) : carry out the printing the locale description activity with o . |__ to set the/-- locale priority of ( o - an object ) to ( n - a number ) : if o is a thing : if n <= 0 , now o is mentioned ; if there is a notable-object of o in the table of locale priorities : choose row with a notable-object of o in the table of locale priorities ; if n <= 0 , blank out the whole row ; otherwise now the locale description priority entry is n ; otherwise : if n is greater than 0 : choose a blank row in the table of locale priorities ; now the notable-object entry is o ; now the locale description priority entry is n ; |__ printing the locale description of something ( documented at act_pld ) is an activity . |__ the locale paragraph count is a number that varies . |__ before printing the locale description ( this is the initialise locale description rule ) : now the locale paragraph count is 0 ; repeat through the table of locale priorities : blank out the whole row . |__ before printing the locale description ( this is the find notable locale objects rule ) : let the domain be the parameter-object ; carry out the choosing notable locale objects activity with the domain ; continue the activity . |__ for printing the locale description ( this is the interesting locale paragraphs rule ) : let the domain be the parameter-object ; sort the table of locale priorities in locale description priority order ; repeat through the table of locale priorities : carry out the printing a locale paragraph about activity with the notable-object entry ; continue the activity . |__ for printing the locale description ( this is the you-can-also-see rule ) : let the domain be the parameter-object ; let the mentionable count be 0 ; repeat with item running through things : now the item is not marked for listing ; repeat through the table of locale priorities : if the locale description priority entry is greater than 0 , now the notable-object entry is marked for listing ; increase the mentionable count by 1 ; if the mentionable count is greater than 0 : repeat with item running through things : if the item is mentioned : now the item is not marked for listing ; begin the listing nondescript items activity with the domain ; if the number of marked for listing things is 0 : abandon the listing nondescript items activity with the domain ; otherwise : if handling the listing nondescript items activity with the domain : if the domain is the location : say "[We] " ( a ) ; otherwise if the domain is a supporter or the domain is an animal : say "On [the domain] [we] " ( b ) ; otherwise : say "In [the domain] [we] " ( c ) ; if the locale paragraph count is greater than 0 : say "[regarding the player][can] also see " ( d ) ; otherwise : say "[regarding the player][can] see " ( e ) ; let the common holder be nothing ; let contents form of list be true ; repeat with list item running through marked for listing things : if the holder of the list item is not the common holder : if the common holder is nothing , now the common holder is the holder of the list item ; otherwise now contents form of list is false ; if the list item is mentioned , now the list item is not marked for listing ; filter list recursion to unmentioned things ; if contents form of list is true and the common holder is not nothing , list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only ; otherwise say "[a list of marked for listing things including contents]" ; if the domain is the location , say " here" ( f ) ; say ".[paragraph break]" ; unfilter list recursion ; end the listing nondescript items activity with the domain ; continue the activity . |__ choosing notable locale objects of something ( documented at act_cnlo ) is an activity . |__ for choosing notable locale objects ( this is the standard notable locale objects rule ) : let the domain be the parameter-object ; let the held item be the first thing held by the domain ; while the held item is a thing : set the locale priority of the held item to 5 ; now the held item is the next thing held after the held item ; continue the activity . |__ printing a locale paragraph about something ( documented at act_plp ) is an activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ) : if the item encloses the player , set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ) : if the item is scenery , set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ) : if the item is undescribed : set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ) : if the item is not mentioned , set pronouns from the item ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ) : if the item is not mentioned : if a paragraph break is pending , say "[conditional paragraph break]" ; carry out the writing a paragraph about activity with the item ; if a paragraph break is pending : increase the locale paragraph count by 1 ; now the item is mentioned ; say "[conditional paragraph break]" ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ) : if the item is not mentioned : if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not "" : increase the locale paragraph count by 1 ; say "[initial appearance of the item]" ; say "[paragraph break]" ; if a locale-supportable thing is on the item : repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; now the item is mentioned ; continue the activity . |__ for printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ) : repeat with item running through not handled things on the tabletop which provide the property initial appearance : if the item is not a person and the initial appearance of the item is not "" and the item is not undescribed : now the item is mentioned ; say initial appearance of the item ; say paragraph break ; continue the activity . |__ definition : a thing ( called the item ) is locale-supportable if the item is not scenery and the item is not mentioned and the item is not undescribed . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ) : if the item is scenery and the item does not enclose the player : if a locale-supportable thing is on the item : set pronouns from the item ; repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; increase the locale paragraph count by 1 ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ) : if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player : if a locale-supportable thing is on the item : set pronouns from the item ; repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; increase the locale paragraph count by 1 ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; continue the activity . |__ |__ part five - actions |__ section 1 - verbs needed for adaptive text |__ to achieve is a verb . to appreciate is a verb . to arrive is a verb . to care is a verb . to close is a verb . to die is a verb . to discover is a verb . to drop is a verb . to eat is a verb . to feel is a verb . to find is a verb . to get is a verb . to give is a verb . to go is a verb . to happen is a verb . to hear is a verb . to jump is a verb . to lack is a verb . to lead is a verb . to like is a verb . to listen is a verb . to lock is a verb . to look is a verb . to need is a verb . to open is a verb . to pass is a verb . to pick is a verb . to provoke is a verb . to pull is a verb . to push is a verb . to put is a verb . to rub is a verb . to say is a verb . to search is a verb . to see is a verb . to seem is a verb . to set is a verb . to smell is a verb . to sniff is a verb . to squeeze is a verb . to switch is a verb . to take is a verb . to talk is a verb . to taste is a verb . to touch is a verb . to turn is a verb . to wait is a verb . to wave is a verb . to win is a verb . |__ section 2 - standard actions concerning the actor's possessions |__ taking inventory is an action applying to nothing . the taking inventory action translates into i6 as Inv . |__ the specification of the taking inventory action is Taking an inventory of
one's immediate possessions: the things being carried, either directly or in
any containers being carried. When the player performs this action, either
the inventory listing, or else a special message if nothing is being carried
or worn, is printed during the carry out rules: nothing happens at the report
stage. The opposite happens for other people performing the action: nothing
happens during carry out, but a report such as 'Mr X looks through his
possessions.' is produced (provided Mr X is visible). |__ carry out taking inventory ( this is the print empty inventory rule ) : if the first thing held by the player is nothing , say "[We] [are] carrying nothing." ( a ) instead . |__ carry out taking inventory ( this is the print standard inventory rule ) : say "[We] [are] carrying:[line break]" ( a ) ; list the contents of the player , with newlines , indented , including contents , giving inventory information , with extra indentation . |__ report an actor taking inventory ( this is the report other people taking inventory rule ) : if the actor is not the player and the action is not silent : say "[The actor] [look] through [their] possessions." ( a ) ; |__ taking is an action applying to one thing . the taking action translates into i6 as Take . |__ the specification of the taking action is The taking action is the only way
an action in the Standard Rules can cause something to be carried by an actor.
It is very simple in operation (the entire carry out stage consists only of
'now the actor carries the noun') but many checks must be performed before it
can be allowed to happen. |__ check an actor taking ( this is the can't take yourself rule ) : if the actor is the noun : if the actor is the player , say "[We] [are] always self-possessed." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take other people rule ) : if the noun is a person : if the actor is the player , say "I don't suppose [the noun] [would care] for that." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take component parts rule ) : if the noun is part of something ( called the whole ) : if the actor is the player : say "[regarding the noun][Those] [seem] to be a part of [the whole]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take people's possessions rule ) : let the local ceiling be the common ancestor of the actor with the noun ; let the owner be the not-counting-parts holder of the noun ; while the owner is not nothing and the owner is not the local ceiling : if the owner is a person : if the actor is the player : say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a ) ; stop the action ; let the owner be the not-counting-parts holder of the owner ; |__ check an actor taking ( this is the can't take items out of play rule ) : let h be the noun ; while h is not nothing and h is not a room : let h be the not-counting-parts holder of h ; if h is nothing : if the actor is the player : say "[regarding the noun][Those] [aren't] available." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what you're inside rule ) : let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the noun : if the actor is the player : say "[We] [would have] to get
[if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what's already taken rule ) : if the actor is carrying the noun or the actor is wearing the noun : if the actor is the player : say "[We] already [have] [regarding the noun][those]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take scenery rule ) : if the noun is scenery : if the actor is the player : say "[regarding the noun][They're] hardly portable." ( a ) ; stop the action . |__ check an actor taking ( this is the can only take things rule ) : if the noun is not a thing : if the actor is the player : say "[We] [cannot] carry [the noun]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They're] fixed in place." ( a ) ; stop the action . |__ check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is holding a player's holdall ( called the current working sack ) : let the transferred item be nothing ; repeat with the possible item running through things carried by the actor : if the possible item is not lit and the possible item is not the current working sack , let the transferred item be the possible item ; if the transferred item is not nothing : if the actor is the player : say "(putting [the transferred item] into [the current working sack]
to make room)[command clarification break]" ( a ) ; silently try the actor trying inserting the transferred item into the current working sack ; if the transferred item is not in the current working sack : stop the action . |__ check an actor taking ( this is the can't exceed carrying capacity rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is the player : say "[We]['re] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor taking ( this is the standard taking rule ) : now the actor carries the noun ; if the actor is the player , now the noun is handled . |__ report an actor taking ( this is the standard report taking rule ) : if the action is not silent : if the actor is the player : say "Taken." ( a ) ; otherwise : say "[The actor] [pick] up [the noun]." ( b ) . |__ removing it from is an action applying to two things . the removing it from action translates into i6 as Remove . |__ the specification of the removing it from action is Removing is not really
an action in its own right. Whereas there are many ways to put something down
(on the floor, on top of something, inside something else, giving it to
somebody else, and so on), Inform has only one way to take something: the
taking action. Removing exists only to provide some nicely worded replies
to impossible requests, and in all sensible cases is converted into taking.
Because of this, it's usually a bad idea to write rules about removing:
if you write a rule such as 'Instead of removing the key, ...' then it
won't apply if the player simply types TAKE KEY instead. The safe way to
do this is to write a rule about taking, which covers all possibilities. |__ check an actor removing something from ( this is the can't remove what's not inside rule ) : if the holder of the noun is not the second noun : if the actor is the player : say "But [regarding the noun][they] [aren't] there now." ( a ) ; stop the action . |__ check an actor removing something from ( this is the can't remove from people rule ) : let the owner be the holder of the noun ; if the owner is a person : if the owner is the actor , convert to the taking off action on the noun ; if the actor is the player : say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a ) ; stop the action . |__ check an actor removing something from ( this is the convert remove to take rule ) : convert to the taking action on the noun . |__ the can't take component parts rule is listed before the can't remove what's not inside rule in the check removing it from rules . |__ dropping is an action applying to one thing . the dropping action translates into i6 as Drop . |__ the specification of the dropping action is Dropping is one of five actions
by which an actor can get rid of something carried: the others are inserting
(into a container), putting (onto a supporter), giving (to someone else) and
eating. Dropping means dropping onto the actor's current floor, which is
usually the floor of a room - but might be the inside of a box if the actor
is also inside that box, and so on.The can't drop clothes being worn rule silently tries the taking off action
on any clothing being dropped: unlisting this rule removes both this behaviour
and also the requirement that clothes cannot simply be dropped. |__ check an actor dropping ( this is the can't drop yourself rule ) : if the noun is the actor : if the actor is the player : say "[We] [lack] the dexterity." ( a ) ; stop the action . |__ check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ) : if the actor is the player : say "[We] [can't drop] part of [ourselves]." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop what's already dropped rule ) : if the noun is in the holder of the actor : if the actor is the player : say "[The noun] [are] already here." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; if the actor is the player : say "[We] [haven't] got [regarding the noun][those]." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ) : let the receptacle be the holder of the actor ; if the receptacle is a room , continue the action ; if the receptacle provides the property carrying capacity : if the receptacle is a supporter : if the number of things on the receptacle is at least the carrying capacity of the receptacle : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room on [the receptacle]." ( a ) ; stop the action ; otherwise if the receptacle is a container : if the number of things in the receptacle is at least the carrying capacity of the receptacle : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the receptacle]." ( b ) ; stop the action ; |__ carry out an actor dropping ( this is the standard dropping rule ) : now the noun is in the holder of the actor . |__ report an actor dropping ( this is the standard report dropping rule ) : if the action is not silent : if the actor is the player : say "Dropped." ( a ) ; otherwise : say "[The actor] [put] down [the noun]." ( b ) ; |__ putting it on is an action applying to two things . the putting it on action translates into i6 as PutOn . |__ the specification of the putting it on action is By this action, an actor puts
something he is holding on top of a supporter: for instance, putting an apple
on a table. |__ check an actor putting something on ( this is the convert put to drop where possible rule ) : if the second noun is down or the actor is on the second noun , convert to the dropping action on the noun . |__ check an actor putting something on ( this is the can't put what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; carry out the implicitly taking activity with the noun ; if the actor is carrying the noun , continue the action ; stop the action . |__ check an actor putting something on ( this is the can't put something on itself rule ) : let the noun-cpc be the component parts core of the noun ; let the second-cpc be the component parts core of the second noun ; let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc ; if the transfer ceiling is the noun-cpc : if the actor is the player : say "[We] [can't put] something on top of itself." ( a ) ; stop the action . |__ check an actor putting something on ( this is the can't put onto what's not a supporter rule ) : if the second noun is not a supporter : if the actor is the player : say "Putting things on [the second noun] [would achieve] nothing." ( a ) ; stop the action . |__ check an actor putting something on ( this is the can't put clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [regarding the noun][them] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action . |__ check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ) : if the second noun provides the property carrying capacity : if the number of things on the second noun is at least the carrying capacity of the second noun : if the actor is the player : say "[There] [are] no more room on [the second noun]." ( a ) ; stop the action . |__ carry out an actor putting something on ( this is the standard putting rule ) : now the noun is on the second noun . |__ report an actor putting something on ( this is the concise report putting rule ) : if the action is not silent : if the actor is the player and the i6 parser is running multiple actions : say "Done." ( a ) ; stop the action ; continue the action . |__ report an actor putting something on ( this is the standard report putting rule ) : if the action is not silent : say "[The actor] [put] [the noun] on [the second noun]." ( a ) . |__ inserting it into is an action applying to two things . the inserting it into action translates into i6 as Insert . |__ the specification of the inserting it into action is By this action, an actor puts
something he is holding into a container: for instance, putting a coin into a
collection box. |__ check an actor inserting something into ( this is the convert insert to drop where possible rule ) : if the second noun is down or the actor is in the second noun , convert to the dropping action on the noun . |__ check an actor inserting something into ( this is the can't insert what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; carry out the implicitly taking activity with the noun ; if the actor is carrying the noun , continue the action ; stop the action . |__ check an actor inserting something into ( this is the can't insert something into itself rule ) : let the noun-cpc be the component parts core of the noun ; let the second-cpc be the component parts core of the second noun ; let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc ; if the transfer ceiling is the noun-cpc : if the actor is the player : say "[We] [can't put] something inside itself." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert into closed containers rule ) : if the second noun is a closed container : if the actor is the player : say "[The second noun] [are] closed." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert into what's not a container rule ) : if the second noun is not a container : if the actor is the player : say "[regarding the second noun][Those] [can't contain] things." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [regarding the noun][them] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ) : if the second noun provides the property carrying capacity : if the number of things in the second noun is at least the carrying capacity of the second noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the second noun]." ( a ) ; stop the action . |__ carry out an actor inserting something into ( this is the standard inserting rule ) : now the noun is in the second noun . |__ report an actor inserting something into ( this is the concise report inserting rule ) : if the action is not silent : if the actor is the player and the i6 parser is running multiple actions : say "Done." ( a ) ; stop the action ; continue the action . |__ report an actor inserting something into ( this is the standard report inserting rule ) : if the action is not silent : say "[The actor] [put] [the noun] into [the second noun]." ( a ) . |__ eating is an action applying to one thing . the eating action translates into i6 as Eat . |__ the specification of the eating action is Eating is the only one of the
built-in actions which can, in effect, destroy something: the carry out
rule removes what's being eaten from play, and nothing in the Standard
Rules can then get at it again.Note that, uncontroversially, one can only eat things with the 'edible'
either/or property. Until 2011, the action also required that the foodstuff
had to be carried by the eater, which meant that a player standing next
to a bush with berries who typed EAT BERRIES would force a '(first taking
the berries)' action. This is no longer true. Taking is now only forced if
the foodstuff is portable. |__ check an actor eating ( this is the can't eat unless edible rule ) : if the noun is not a thing or the noun is not edible : if the actor is the player : say "[regarding the noun][They're] plainly inedible." ( a ) ; stop the action . |__ check an actor eating ( this is the can't eat clothing without removing it first rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [the noun] off)[command clarification break]" ( a ) ; try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action . |__ check an actor eating ( this is the can't eat other people's food rule ) : if the noun is enclosed by a person ( called the owner ) who is not the actor : if the actor is the player : say "[The owner] [might not appreciate] that." ( a ) ; stop the action . |__ check an actor eating ( this is the can't eat portable food without carrying it rule ) : if the noun is portable and the actor is not carrying the noun : carry out the implicitly taking activity with the noun ; if the actor is not carrying the noun , stop the action . |__ carry out an actor eating ( this is the standard eating rule ) : now the noun is nowhere . |__ report an actor eating ( this is the standard report eating rule ) : if the action is not silent : if the actor is the player : say "[We] [eat] [the noun]. Not bad." ( a ) ; otherwise : say "[The actor] [eat] [the noun]." ( b ) . |__ section 3 - standard actions which move the actor |__ going is an action applying to one visible thing . the going action translates into i6 as Go . |__ the specification of the going action is This is the action which allows people
to move from one room to another, using whatever map connections and doors are
to hand. The Standard Rules are written so that the noun can be either a
direction or a door in the location of the actor: while the player's commands
only lead to going actions with directions as nouns, going actions can also
happen as a result of entering actions, and then the noun can indeed be
a door. |__ the going action has a room called the room gone from ( matched as from ) . the going action has an object called the room gone to ( matched as to ) . the going action has an object called the door gone through ( matched as through ) . the going action has an object called the vehicle gone by ( matched as by ) . the going action has an object called the thing gone with ( matched as with ) . |__ rule for setting action variables for going ( this is the standard set going variables rule ) : now the thing gone with is the item-pushed-between-rooms ; now the room gone from is the location of the actor ; if the actor is in an enterable vehicle ( called the carriage ) , now the vehicle gone by is the carriage ; let the target be nothing ; if the noun is a direction : let direction d be the noun ; let the target be the room-or-door direction d from the room gone from ; otherwise : if the noun is a door , let the target be the noun ; if the target is a door : now the door gone through is the target ; now the target is the other side of the target from the room gone from ; now the room gone to is the target . |__ check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ) : if the actor is the player : say "(first getting off [the chaise])[command clarification break]" ( a ) ; silently try the actor exiting . |__ check an actor going ( this is the can't travel in what's not a vehicle rule ) : let nonvehicle be the holder of the actor ; if nonvehicle is the room gone from , continue the action ; if nonvehicle is the vehicle gone by , continue the action ; if the actor is the player : if nonvehicle is a supporter : say "[We] [would have] to get off [the nonvehicle] first." ( a ) ; otherwise : say "[We] [would have] to get out of [the nonvehicle] first." ( b ) ; stop the action . |__ check an actor going ( this is the can't go through undescribed doors rule ) : if the door gone through is not nothing and the door gone through is undescribed : if the actor is the player : say "[We] [can't go] that way." ( a ) ; stop the action . |__ check an actor going ( this is the can't go through closed doors rule ) : if the door gone through is not nothing and the door gone through is closed : if the actor is the player : say "(first opening [the door gone through])[command clarification break]" ( a ) ; silently try the actor opening the door gone through ; if the door gone through is open , continue the action ; stop the action . |__ check an actor going ( this is the determine map connection rule ) : let the target be nothing ; if the noun is a direction : let direction d be the noun ; let the target be the room-or-door direction d from the room gone from ; otherwise : if the noun is a door , let the target be the noun ; if the target is a door : now the target is the other side of the target from the room gone from ; now the room gone to is the target . |__ check an actor going ( this is the can't go that way rule ) : if the room gone to is nothing : if the door gone through is nothing : if the actor is the player : say "[We] [can't go] that way." ( a ) ; stop the action ; if the actor is the player : say "[We] [can't], since [the door gone through] [lead] nowhere." ( b ) ; stop the action . |__ carry out an actor going ( this is the move player and vehicle rule ) : if the vehicle gone by is nothing , surreptitiously move the actor to the room gone to during going ; otherwise surreptitiously move the vehicle gone by to the room gone to during going ; if the location is not the location of the player : now the location is the location of the player . |__ carry out an actor going ( this is the move floating objects rule ) : if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with : update backdrop positions . |__ carry out an actor going ( this is the check light in new location rule ) : if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with : surreptitiously reckon darkness . |__ report an actor going ( this is the describe room gone into rule ) : if the player is the actor : if the action is not silent : produce a room description with going spacing conventions ; otherwise : if the noun is a direction : if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with : if the room gone from is the room gone to : continue the action ; otherwise : if the noun is up : say "[The actor] [go] up" ( a ) ; otherwise if the noun is down : say "[The actor] [go] down" ( b ) ; otherwise : say "[The actor] [go] [noun]" ( c ) ; otherwise : let the back way be the opposite of the noun ; if the location is the room gone to : let the room back the other way be the room back way from the location ; let the room normally this way be the room noun from the room gone from ; if the room back the other way is the room gone from or the room back the other way is the room normally this way : if the back way is up : say "[The actor] [arrive] from above" ( d ) ; otherwise if the back way is down : say "[The actor] [arrive] from below" ( e ) ; otherwise : say "[The actor] [arrive] from [the back way]" ( f ) ; otherwise : say "[The actor] [arrive]" ( g ) ; otherwise : if the back way is up : say "[The actor] [arrive] at [the room gone to] from above" ( h ) ; otherwise if the back way is down : say "[The actor] [arrive] at [the room gone to] from below" ( i ) ; otherwise : say "[The actor] [arrive] at [the room gone to] from [the back way]" ( j ) ; otherwise if the location is the room gone from : say "[The actor] [go] through [the noun]" ( k ) ; otherwise : say "[The actor] [arrive] from [the noun]" ( l ) ; if the vehicle gone by is not nothing : say " " ; if the vehicle gone by is a supporter : say "on [the vehicle gone by]" ( m ) ; otherwise : say "in [the vehicle gone by]" ( n ) ; if the thing gone with is not nothing : if the player is within the thing gone with : say ", pushing [the thing gone with] in front, and [us] along too" ( o ) ; otherwise if the player is within the vehicle gone by : say ", pushing [the thing gone with] in front" ( p ) ; otherwise if the location is the room gone from : say ", pushing [the thing gone with] away" ( q ) ; otherwise : say ", pushing [the thing gone with] in" ( r ) ; if the player is within the vehicle gone by and the player is not within the thing gone with : say ", taking [us] along" ( s ) ; say "." ; try looking ; continue the action ; say "." ; |__ entering is an action applying to one thing . the entering action translates into i6 as Enter . |__ the specification of the entering action is Whereas the going action allows
people to move from one location to another in the model world, the entering
action is for movement inside a location: for instance, climbing into a cage
or sitting on a couch. (Entering is not allowed to change location, so any
attempt to enter a door is converted into a going action.) What makes
entering trickier than it looks is that the player may try to enter an
object which is itself inside, or part of, something else, which might in
turn be... and so on. To preserve realism, the implicitly pass through other
barriers rule automatically generates entering and exiting actions needed
to pass between anything which might be in the way: for instance, in a
room with two open cages, an actor in cage A who tries entering cage B first
has to perform an exiting action. |__ rule for supplying a missing noun while entering ( this is the find what to enter rule ) : if something enterable ( called the box ) is in the location , now the noun is the box ; otherwise continue the activity . |__ the find what to enter rule is listed last in the for supplying a missing noun rulebook . |__ check an actor entering ( this is the convert enter door into go rule ) : if the noun is a door , convert to the going action on the noun . |__ check an actor entering ( this is the convert enter compass direction into go rule ) : if the noun is a direction , convert to the going action on the noun . |__ check an actor entering ( this is the can't enter what's already entered rule ) : if the actor is the noun , make no decision ; let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the noun : if the player is the actor : if the noun is a supporter : say "But [we]['re] already on [the noun]." ( a ) ; otherwise : say "But [we]['re] already in [the noun]." ( b ) ; stop the action . |__ check an actor entering ( this is the can't enter what's not enterable rule ) : if the noun is not enterable : if the player is the actor : if the player's command includes "stand" : say "[regarding the noun][They're] not something [we] [can] stand on." ( a ) ; otherwise if the player's command includes "sit" : say "[regarding the noun][They're] not something [we] [can] sit down on." ( b ) ; otherwise if the player's command includes "lie" : say "[regarding the noun][They're] not something [we] [can] lie down on." ( c ) ; otherwise : say "[regarding the noun][They're] not something [we] [can] enter." ( d ) ; stop the action . |__ check an actor entering ( this is the can't enter closed containers rule ) : if the noun is a closed container : if the player is the actor : say "[We] [can't get] into the closed [noun]." ( a ) ; stop the action . |__ check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ) : if the noun provides the property carrying capacity : if the noun is a supporter : if the number of things on the noun is at least the carrying capacity of the noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room on [the noun]." ( a ) ; stop the action ; otherwise if the noun is a container : if the number of things in the noun is at least the carrying capacity of the noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the noun]." ( b ) ; stop the action ; |__ check an actor entering ( this is the can't enter something carried rule ) : let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the actor : if the player is the actor : say "[We] [can] only get into something free-standing." ( a ) ; stop the action . |__ check an actor entering ( this is the implicitly pass through other barriers rule ) : if the holder of the actor is the holder of the noun , continue the action ; let the local ceiling be the common ancestor of the actor with the noun ; while the holder of the actor is not the local ceiling : let the current home be the holder of the actor ; if the player is the actor : if the current home is a supporter or the current home is an animal : say "(getting off [the current home])[command clarification break]" ( a ) ; otherwise : say "(getting out of [the current home])[command clarification break]" ( b ) ; silently try the actor trying exiting ; if the holder of the actor is the current home , stop the action ; if the holder of the actor is the noun , stop the action ; if the holder of the actor is the holder of the noun , continue the action ; let the target be the holder of the noun ; if the noun is part of the target , let the target be the holder of the target ; while the target is a thing : if the holder of the target is the local ceiling : if the player is the actor : if the target is a supporter : say "(getting onto [the target])[command clarification break]" ( c ) ; otherwise if the target is a container : say "(getting into [the target])[command clarification break]" ( d ) ; otherwise : say "(entering [the target])[command clarification break]" ( e ) ; silently try the actor trying entering the target ; if the holder of the actor is not the target , stop the action ; convert to the entering action on the noun ; continue the action ; let the target be the holder of the target ; |__ carry out an actor entering ( this is the standard entering rule ) : surreptitiously move the actor to the noun . |__ report an actor entering ( this is the standard report entering rule ) : if the actor is the player : if the action is not silent : if the noun is a supporter : say "[We] [get] onto [the noun]." ( a ) ; otherwise : say "[We] [get] into [the noun]." ( b ) ; otherwise if the noun is a container : say "[The actor] [get] into [the noun]." ( c ) ; otherwise : say "[The actor] [get] onto [the noun]." ( d ) ; continue the action . |__ report an actor entering ( this is the describe contents entered into rule ) : if the actor is the player , describe locale for the noun . |__ exiting is an action applying to nothing . the exiting action translates into i6 as Exit . the exiting action has an object called the container exited from ( matched as from ) . |__ the specification of the exiting action is Whereas the going action allows
people to move from one location to another in the model world, and the
entering action is for movement deeper inside the objects in a location,
the exiting action is for movement back out towards the main floor area.
Climbing out of a cupboard, for instance, is an exiting action. Exiting
when already in the main floor area of a room with a map connection to
the outside is converted to a going action. Finally, note that whereas
entering works for either containers or supporters, exiting is purely for
getting oneself out of containers: if the actor is on top of a supporter
instead, an exiting action is converted to the getting off action. |__ setting action variables for exiting : now the container exited from is the holder of the actor . |__ check an actor exiting ( this is the convert exit into go out rule ) : let the local room be the location of the actor ; if the container exited from is the local room : if the room-or-door outside from the local room is not nothing , convert to the going action on the outside ; |__ check an actor exiting ( this is the can't exit when not inside anything rule ) : let the local room be the location of the actor ; if the container exited from is the local room : if the player is the actor : say "But [we] [aren't] in anything at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor exiting ( this is the can't exit closed containers rule ) : if the actor is in a closed container ( called the cage ) : if the player is the actor : say "You can't get out of the closed [cage]." ( a ) ; stop the action . |__ check an actor exiting ( this is the convert exit into get off rule ) : if the actor is on a supporter ( called the platform ) , convert to the getting off action on the platform . |__ carry out an actor exiting ( this is the standard exiting rule ) : let the former exterior be the not-counting-parts holder of the container exited from ; surreptitiously move the actor to the former exterior . |__ report an actor exiting ( this is the standard report exiting rule ) : if the action is not silent : if the actor is the player : if the container exited from is a supporter : say "[We] [get] off [the container exited from]." ( a ) ; otherwise : say "[We] [get] out of [the container exited from]." ( b ) ; otherwise : say "[The actor] [get] out of [the container exited from]." ( c ) ; continue the action . |__ report an actor exiting ( this is the describe room emerged into rule ) : if the actor is the player : surreptitiously reckon darkness ; produce a room description with going spacing conventions . |__ getting off is an action applying to one thing . the getting off action translates into i6 as GetOff . |__ the specification of the getting off action is The getting off action is for
actors who are currently on top of a supporter: perhaps standing on a platform,
but maybe only sitting on a chair or even lying down in bed. Unlike the similar
exiting action, getting off takes a noun: the platform, chair, bed or what
have you. |__ check an actor getting off ( this is the can't get off things rule ) : if the actor is on the noun , continue the action ; if the actor is carried by the noun , continue the action ; if the actor is the player : say "But [we] [aren't] on [the noun] at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ carry out an actor getting off ( this is the standard getting off rule ) : let the former exterior be the not-counting-parts holder of the noun ; surreptitiously move the actor to the former exterior . |__ report an actor getting off ( this is the standard report getting off rule ) : if the action is not silent : say "[The actor] [get] off [the noun]." ( a ) ; continue the action . |__ report an actor getting off ( this is the describe room stood up into rule ) : if the actor is the player , produce a room description with going spacing conventions . |__ section 4 - standard actions concerning the actor's vision |__ looking is an action applying to nothing . the looking action translates into i6 as Look . |__ the specification of the looking action is The looking action describes the
player's current room and any visible items, but is made more complicated
by the problem of visibility. Inform calculates this by dividing the room
into visibility levels. For an actor on the floor of a room, there is only
one such level: the room itself. But an actor sitting on a chair inside
a packing case which is itself on a gantry would have four visibility levels:
chair, case, gantry, room. The looking rules use a special phrase, 'the
visibility-holder of X', to go up from one level to the next: thus the
visibility-holder of the case is the gantry.The 'visibility level count' is the number of levels which the player can
actually see, and the 'visibility ceiling' is the uppermost visible level.
For a player standing on the floor of a lighted room, this will be a count
of 1 with the ceiling set to the room. But a player sitting on a chair in
a closed opaque packing case would have visibility level count 2, and
visibility ceiling equal to the case. Moreover, light has to be available
in order to see anything at all: if the player is in darkness, the level
count is 0 and the ceiling is nothing.Finally, note that several actions other than looking also produce room
descriptions in some cases. The most familiar is going, but exiting a
container or getting off a supporter will also generate a room description.
(The phrase used by the relevant rules is 'produce a room description with
going spacing conventions' and carry out or report rules for newly written
actions are welcome to use this too if they would like to. The spacing
conventions affect paragraph division, and note that the main description
paragraph may be omitted for a place not newly visited, depending on the
VERBOSE settings.) Room descriptions like this are produced by running the
check, carry out and report rules for looking, but are not subject to
before, instead or after rules: so they do not count as a new action. The
looking variable 'room-describing action' holds the action name of the
reason a room description is currently being made: if the player typed
LOOK, this will indeed be set to the looking action, but if we're
describing a room just reached by GO EAST, say, it will be set to the going
action. This can be used to customise carry out looking rules so that
different forms of description are used on going to a room as compared with
looking around while already there. |__ the looking action has an action name called the room-describing action . the looking action has a truth state called abbreviated form allowed . the looking action has a number called the visibility level count . the looking action has an object called the visibility ceiling . |__ setting action variables for looking ( this is the determine visibility ceiling rule ) : if the actor is the player , calculate visibility ceiling at low level ; now the visibility level count is the visibility ceiling count calculated ; now the visibility ceiling is the visibility ceiling calculated ; now the room-describing action is the looking action . |__ carry out looking ( this is the declare everything unmentioned rule ) : repeat with item running through things : now the item is not mentioned . |__ carry out looking ( this is the room description heading rule ) : say bold type ; if the visibility level count is 0 : begin the printing the name of a dark room activity ; if handling the printing the name of a dark room activity : say "Darkness" ( a ) ; end the printing the name of a dark room activity ; otherwise if the visibility ceiling is the location : say "[visibility ceiling]" ; otherwise : say "[The visibility ceiling]" ; say roman type ; let intermediate level be the visibility-holder of the actor ; repeat with intermediate level count running from 2 to the visibility level count : if the intermediate level is a supporter or the intermediate level is an animal : say " (on [the intermediate level])" ( b ) ; otherwise : say " (in [the intermediate level])" ( c ) ; let the intermediate level be the visibility-holder of the intermediate level ; say line break ; say run paragraph on with special look spacing . |__ carry out looking ( this is the room description body text rule ) : if the visibility level count is 0 : if set to abbreviated room descriptions , continue the action ; if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true , continue the action ; begin the printing the description of a dark room activity ; if handling the printing the description of a dark room activity : now the prior named object is nothing ; say "[It] [are] pitch dark, and [we] [can't see] a thing." ( a ) ; end the printing the description of a dark room activity ; otherwise if the visibility ceiling is the location : if set to abbreviated room descriptions , continue the action ; if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited , continue the action ; print the location's description ; |__ carry out looking ( this is the room description paragraphs about objects rule ) : if the visibility level count is greater than 0 : let the intermediate position be the actor ; let the ip count be the visibility level count ; while the ip count is greater than 0 : now the intermediate position is marked for listing ; let the intermediate position be the visibility-holder of the intermediate position ; decrease the ip count by 1 ; let the top-down ip count be the visibility level count ; while the top-down ip count is greater than 0 : let the intermediate position be the actor ; let the ip count be 0 ; while the ip count is less than the top-down ip count : let the intermediate position be the visibility-holder of the intermediate position ; increase the ip count by 1 ; describe locale for the intermediate position ; decrease the top-down ip count by 1 ; continue the action ; |__ carry out looking ( this is the check new arrival rule ) : if in darkness : now the darkness witnessed is true ; otherwise : if the location is a room , now the location is visited ; |__ report an actor looking ( this is the other people looking rule ) : if the actor is not the player : say "[The actor] [look] around." ( a ) . |__ examining is an action applying to one visible thing and requiring light . the examining action translates into i6 as Examine . |__ the specification of the examining action is The act of looking closely at
something. Note that the noun could be either a direction or a thing, which
is why the Standard Rules include the 'examine directions rule' to deal with
directions: it simply says 'You see nothing unexpected in that direction.'
and stops the action. (If you would like to handle directions differently,
list another rule instead of this one in the carry out examining rules.)Some things have no description property, or rather, have only a blank text
as one. It's possible that something interesting may be said anyway (see
the rules for directions, containers, supporters and devices), but if not,
we give up with a bland response. This is done by the examine undescribed
things rule. |__ the examining action has a truth state called examine text printed . |__ carry out examining ( this is the standard examining rule ) : if the noun provides the property description and the description of the noun is not "" : say "[description of the noun][line break]" ; now examine text printed is true . |__ carry out examining ( this is the examine directions rule ) : if the noun is a direction : say "[We] [see] nothing unexpected in that direction." ( a ) ; now examine text printed is true . |__ carry out examining ( this is the examine containers rule ) : if the noun is a container : if the noun is open or the noun is transparent : if something described which is not scenery is in the noun and something which is not the player is in the noun : say "In [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; now examine text printed is true ; otherwise if examine text printed is false : if the player is in the noun : make no decision ; say "[The noun] [are] empty." ( b ) ; now examine text printed is true ; |__ carry out examining ( this is the examine supporters rule ) : if the noun is a supporter : if something described which is not scenery is on the noun and something which is not the player is on the noun : say "On [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information ; say "." ; now examine text printed is true . |__ carry out examining ( this is the examine devices rule ) : if the noun is a device : say "[The noun] [are] [if story tense is present tense]currently [end if]switched
[if the noun is switched on]on[otherwise]off[end if]." ( a ) ; now examine text printed is true . |__ carry out examining ( this is the examine undescribed things rule ) : if examine text printed is false : say "[We] [see] nothing special about [the noun]." ( a ) . |__ report an actor examining ( this is the report other people examining rule ) : if the actor is not the player : say "[The actor] [look] closely at [the noun]." ( a ) . |__ looking under is an action applying to one visible thing and requiring light . the looking under action translates into i6 as LookUnder . |__ the specification of the looking under action is The standard Inform world
model does not have a concept of things being under other things, so this
action is only minimally provided by the Standard Rules, but it exists here
for traditional reasons (and because, after all, LOOK UNDER TABLE is the
sort of command which ought to be recognised even if it does nothing useful).
The action ordinarily either tells the player he finds nothing of interest,
or reports that somebody else has looked under something.The usual way to make this action do something useful is to write a rule
like 'Instead of looking under the cabinet for the first time: now the
player has the silver key; say ...' and so on. |__ carry out an actor looking under ( this is the standard looking under rule ) : if the player is the actor : say "[We] [find] nothing of interest." ( a ) ; stop the action . |__ report an actor looking under ( this is the report other people looking under rule ) : if the action is not silent : if the actor is not the player : say "[The actor] [look] under [the noun]." ( a ) . |__ searching is an action applying to one thing and requiring light . the searching action translates into i6 as Search . |__ the specification of the searching action is Searching looks at the contents
of an open or transparent container, or at the items on top of a supporter.
These are often mentioned in room descriptions already, and then the action
is unnecessary, but that wouldn't be true for something like a kitchen
cupboard which is scenery - mentioned in passing in a room description, but
not made a fuss of. Searching such a cupboard would then, by listing its
contents, give the player more information than the ordinary room description
shows.The usual check rules restrict searching to containers and supporters: so
the Standard Rules do not allow the searching of people, for instance. But
it is easy to add instead rules ('Instead of searching Dr Watson: ...') or
even a new carry out rule ('Check searching someone (called the suspect): ...')
to extend the way searching normally works. |__ check an actor searching ( this is the can't search unless container or supporter rule ) : if the noun is not a container and the noun is not a supporter : if the player is the actor : say "[We] [find] nothing of interest." ( a ) ; stop the action . |__ check an actor searching ( this is the can't search closed opaque containers rule ) : if the noun is a closed opaque container : if the player is the actor : say "[We] [can't see] inside, since [the noun] [are] closed." ( a ) ; stop the action . |__ report searching a container ( this is the standard search containers rule ) : if the noun contains a described thing which is not scenery : say "In [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; otherwise : say "[The noun] [are] empty." ( b ) . |__ report searching a supporter ( this is the standard search supporters rule ) : if the noun supports a described thing which is not scenery : say "On [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; otherwise : now the prior named object is nothing ; say "[There] [are] nothing on [the noun]." ( b ) . |__ report an actor searching ( this is the report other people searching rule ) : if the actor is not the player : say "[The actor] [search] [the noun]." ( a ) . |__ consulting it about is an action applying to one thing and one topic . the consulting it about action translates into i6 as Consult . |__ the specification of the consulting it about action is Consulting is a very
flexible and potentially powerful action, but only because it leaves almost
all of the work to the author to deal with directly. The idea is for it to
respond to commands such as LOOK UP HENRY FITZROY IN HISTORY BOOK, where
the topic would be the snippet of command HENRY FITZROY and the thing would
be the book.The Standard Rules simply parry such requests by saying that the player finds
nothing of interest. All interesting responses must be provided by the author,
using rules like 'Instead of consulting the history book about...' |__ report an actor consulting something about ( this is the block consulting rule ) : if the actor is the player : say "[We] [discover] nothing of interest in [the noun]." ( a ) ; otherwise : say "[The actor] [look] at [the noun]." ( b ) ; |__ section 5 - standard actions which change the state of things |__ locking it with is an action applying to one thing and one carried thing . the locking it with action translates into i6 as Lock . |__ the specification of the locking it with action is Locking is the act of
using an object such as a key to ensure that something such as a door or
container cannot be opened unless first unlocked. (Only closed things can be
locked.)Locking can be performed on any kind of thing which provides the either/or
properties lockable, locked, openable and open. The 'can't lock without a lock
rule' tests to see if the noun both provides the lockable property, and if
it is in fact lockable: it is then assumed that the other properties can
safely be checked. In the Standard Rules, the container and door kinds both
satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
A briefcase can be open. A briefcase can be lockable. A briefcase can be
locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't lock without the correct
key rule'. To satisfy this, the actor must be directly holding the second
noun, and it must be the current value of the 'matching key' property for
the noun. (This property is seldom referred to directly because it is
automatically set by assertions like 'The silver key unlocks the wicket
gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
level: they can be much enhanced using the extension Locksmith by Emily
Short, which is included with all distributions of Inform. |__ check an actor locking something with ( this is the can't lock without a lock rule ) : if the noun provides the property lockable and the noun is lockable : continue the action ; if the actor is the player : say "[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock what's already locked rule ) : if the noun is locked : if the actor is the player : say "[regarding the noun][They're] locked at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock what's open rule ) : if the noun is open : if the actor is the player : say "First [we] [would have] to close [the noun]." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock without the correct key rule ) : if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun : if the actor is the player : say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a ) ; stop the action . |__ carry out an actor locking something with ( this is the standard locking rule ) : now the noun is locked . |__ report an actor locking something with ( this is the standard report locking rule ) : if the actor is the player : if the action is not silent : say "[We] [lock] [the noun]." ( a ) ; otherwise : if the actor is visible : say "[The actor] [lock] [the noun]." ( b ) ; |__ unlocking it with is an action applying to one thing and one carried thing . the unlocking it with action translates into i6 as Unlock . |__ the specification of the unlocking it with action is Unlocking undoes the
effect of locking, and renders the noun openable again provided that the
actor is carrying the right key (which must be the second noun).Unlocking can be performed on any kind of thing which provides the either/or
properties lockable, locked, openable and open. The 'can't unlock without a lock
rule' tests to see if the noun both provides the lockable property, and if
it is in fact lockable: it is then assumed that the other properties can
safely be checked. In the Standard Rules, the container and door kinds both
satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
A briefcase can be open. A briefcase can be lockable. A briefcase can be
locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't unlock without the correct
key rule'. To satisfy this, the actor must be directly holding the second
noun, and it must be the current value of the 'matching key' property for
the noun. (This property is seldom referred to directly because it is
automatically set by assertions like 'The silver key unlocks the wicket
gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
level: they can be much enhanced using the extension Locksmith by Emily
Short, which is included with all distributions of Inform. |__ check an actor unlocking something with ( this is the can't unlock without a lock rule ) : if the noun provides the property lockable and the noun is lockable : continue the action ; if the actor is the player : say "[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a ) ; stop the action . |__ check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ) : if the noun is not locked : if the actor is the player : say "[regarding the noun][They're] unlocked at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor unlocking something with ( this is the can't unlock without the correct key rule ) : if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun : if the actor is the player : say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a ) ; stop the action . |__ carry out an actor unlocking something with ( this is the standard unlocking rule ) : now the noun is not locked . |__ report an actor unlocking something with ( this is the standard report unlocking rule ) : if the actor is the player : if the action is not silent : say "[We] [unlock] [the noun]." ( a ) ; otherwise : if the actor is visible : say "[The actor] [unlock] [the noun]." ( b ) ; |__ switching on is an action applying to one thing . the switching on action translates into i6 as SwitchOn . |__ the specification of the switching on action is The switching on and switching
off actions are for the simplest kind of machinery operation: they are for
objects representing machines (or more likely parts of machines), which are
considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
they could work just as well with any kind which can be 'switched on' or
'switched off'. |__ check an actor switching on ( this is the can't switch on unless switchable rule ) : if the noun provides the property switched on , continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a ) ; stop the action . |__ check an actor switching on ( this is the can't switch on what's already on rule ) : if the noun is switched on : if the actor is the player : say "[regarding the noun][They're] already on." ( a ) ; stop the action . |__ carry out an actor switching on ( this is the standard switching on rule ) : now the noun is switched on . |__ report an actor switching on ( this is the standard report switching on rule ) : if the action is not silent : say "[The actor] [switch] [the noun] on." ( a ) . |__ switching off is an action applying to one thing . the switching off action translates into i6 as SwitchOff . |__ the specification of the switching off action is The switching off and switching
on actions are for the simplest kind of machinery operation: they are for
objects representing machines (or more likely parts of machines), which are
considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
they could work just as well with any kind which can be 'switched on' or
'switched off'. |__ check an actor switching off ( this is the can't switch off unless switchable rule ) : if the noun provides the property switched on , continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a ) ; stop the action . |__ check an actor switching off ( this is the can't switch off what's already off rule ) : if the noun is switched off : if the actor is the player : say "[regarding the noun][They're] already off." ( a ) ; stop the action . |__ carry out an actor switching off ( this is the standard switching off rule ) : now the noun is switched off . |__ report an actor switching off ( this is the standard report switching off rule ) : if the action is not silent : say "[The actor] [switch] [the noun] off." ( a ) . |__ opening is an action applying to one thing . the opening action translates into i6 as Open . |__ the specification of the opening action is Opening makes something no longer
a physical barrier. The action can be performed on any kind of thing which
provides the either/or properties openable and open. The 'can't open unless
openable rule' tests to see if the noun both can be and actually is openable.
(It is assumed that anything which can be openable can also be open.)
In the Standard Rules, the container and door kinds both satisfy these
requirements.In the event that the thing to be opened is also lockable, we are forbidden
to open it when it is locked. Both containers and doors can be lockable,
but the opening and closing actions would also work fine with kinds which
cannot be.We can create a new kind on which opening and closing will work thus:
'A case file is a kind of thing. A case file can be openable.
A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
When a container is closed, that means people outside cannot reach in,
and vice versa; when a door is closed, people cannot use the 'going' action
to pass through it. If we were to create a new kind such as 'case file',
we would also need to write rules to make the open and closed properties
interesting for this kind. |__ check an actor opening ( this is the can't open unless openable rule ) : if the noun provides the property openable and the noun is openable : continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] open." ( a ) ; stop the action . |__ check an actor opening ( this is the can't open what's locked rule ) : if the noun provides the property lockable and the noun is locked : if the actor is the player : say "[regarding the noun][They] [seem] to be locked." ( a ) ; stop the action . |__ check an actor opening ( this is the can't open what's already open rule ) : if the noun is open : if the actor is the player : say "[regarding the noun][They're] already open." ( a ) ; stop the action . |__ carry out an actor opening ( this is the standard opening rule ) : now the noun is open . |__ report an actor opening ( this is the reveal any newly visible interior rule ) : if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor : if the action is not silent : if the actor is the player : say "[We] [open] [the noun], revealing " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items ; say "." ; stop the action . |__ report an actor opening ( this is the standard report opening rule ) : if the actor is the player : if the action is not silent : say "[We] [open] [the noun]." ( a ) ; otherwise if the player can see the actor : say "[The actor] [open] [the noun]." ( b ) ; otherwise : say "[The noun] [open]." ( c ) ; |__ closing is an action applying to one thing . the closing action translates into i6 as Close . |__ the specification of the closing action is Closing makes something into
a physical barrier. The action can be performed on any kind of thing which
provides the either/or properties openable and open. The 'can't close unless
openable rule' tests to see if the noun both can be and actually is openable.
(It is assumed that anything which can be openable can also be open, and
hence can also be closed.) In the Standard Rules, the container and door
kinds both satisfy these requirements.We can create a new kind on which opening and closing will work thus:
'A case file is a kind of thing. A case file can be openable.
A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
When a container is closed, that means people outside cannot reach in,
and vice versa; when a door is closed, people cannot use the 'going' action
to pass through it. If we were to create a new kind such as 'case file',
we would also need to write rules to make the open and closed properties
interesting for this kind. |__ check an actor closing ( this is the can't close unless openable rule ) : if the noun provides the property openable and the noun is openable : continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] close." ( a ) ; stop the action . |__ check an actor closing ( this is the can't close what's already closed rule ) : if the noun is closed : if the actor is the player : say "[regarding the noun][They're] already closed." ( a ) ; stop the action . |__ carry out an actor closing ( this is the standard closing rule ) : now the noun is closed . |__ report an actor closing ( this is the standard report closing rule ) : if the actor is the player : if the action is not silent : say "[We] [close] [the noun]." ( a ) ; otherwise if the player can see the actor : say "[The actor] [close] [the noun]." ( b ) ; otherwise : say "[The noun] [close]." ( c ) ; |__ wearing is an action applying to one carried thing . the wearing action translates into i6 as Wear . |__ the specification of the wearing action is The Standard Rules give Inform
only a simple model of clothing. A thing can be worn only if it has the
either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
wears the Homburg hat.' automatically implies that the hat is wearable,
which is why we only seldom need to use the word 'wearable' directly.)
There is no checking of how much or how little any actor is wearing, or
how incongruous this may appear: nor any distinction between under or
over-clothes.To put on an article of clothing, the actor must be directly carrying it,
as enforced by the 'can't wear what's not held rule'. |__ check an actor wearing ( this is the can't wear what's not clothing rule ) : if the noun is not a thing or the noun is not wearable : if the actor is the player : say "[We] [can't wear] [regarding the noun][those]!" ( a ) ; stop the action . |__ check an actor wearing ( this is the can't wear what's not held rule ) : if the holder of the noun is not the actor : if the actor is the player : say "[We] [aren't] holding [regarding the noun][those]!" ( a ) ; stop the action . |__ check an actor wearing ( this is the can't wear what's already worn rule ) : if the actor is wearing the noun : if the actor is the player : say "[We]['re] already wearing [regarding the noun][those]!" ( a ) ; stop the action . |__ carry out an actor wearing ( this is the standard wearing rule ) : now the actor wears the noun . |__ report an actor wearing ( this is the standard report wearing rule ) : if the actor is the player : if the action is not silent : say "[We] [put] on [the noun]." ( a ) ; otherwise : say "[The actor] [put] on [the noun]." ( b ) . |__ taking off is an action applying to one thing . the taking off action translates into i6 as Disrobe . |__ does the player mean taking off something worn : it is very likely . |__ the specification of the taking off action is The Standard Rules give Inform
only a simple model of clothing. A thing can be worn only if it has the
either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
wears the Homburg hat.' automatically implies that the hat is wearable,
which is why we only seldom need to use the word 'wearable' directly.)
There is no checking of how much or how little any actor is wearing, or
how incongruous this may appear: nor any distinction between under or
over-clothes.When an article of clothing is taken off, it becomes a thing directly
carried by its former wearer, rather than being (say) dropped onto the floor. |__ check an actor taking off ( this is the can't take off what's not worn rule ) : if the actor is not wearing the noun : if the actor is the player : say "[We] [aren't] wearing [the noun]." ( a ) ; stop the action . |__ check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is the player : say "[We]['re] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor taking off ( this is the standard taking off rule ) : now the actor carries the noun . |__ report an actor taking off ( this is the standard report taking off rule ) : if the actor is the player : if the action is not silent : say "[We] [take] off [the noun]." ( a ) ; otherwise : say "[The actor] [take] off [the noun]." ( b ) . |__ section 6 - standard actions concerning other people |__ giving it to is an action applying to one carried thing and one thing . the giving it to action translates into i6 as Give . |__ the specification of the giving it to action is This action is indexed by
Inform under 'Actions concerning other people', but it could just as easily
have gone under 'Actions concerning the actor's possessions' because -
like dropping, putting it on or inserting it into - this is an action
which gets rid of something being carried.The Standard Rules implement this action fully - if it reaches the carry
out and report rulebooks, then the item is indeed transferred to the
recipient, and this is properly reported. But giving something to
somebody is not like putting something on a shelf: the recipient has
to agree. The final check rule, the 'block giving rule', assumes that
the recipient does not consent - so the gift fails to happen. The way
to make the giving action use its abilities fully is to replace the
block giving rule with a rule which makes a more sophisticated decision
about who will accept what from whom, and only blocks some attempts,
letting others run on into the carry out and report rules. |__ check an actor giving something to ( this is the can't give what you haven't got rule ) : if the actor is not the holder of the noun : if the actor is the player : say "[We] [aren't] holding [the noun]." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give to yourself rule ) : if the actor is the second noun : if the actor is the player : say "[We] [can't give] [the noun] to [ourselves]." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give to a non-person rule ) : if the second noun is not a person : if the actor is the player : say "[The second noun] [aren't] able to receive things." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give clothes being worn rule ) : if the actor is wearing the noun : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor giving something to ( this is the block giving rule ) : if the actor is the player : say "[The second noun] [don't] seem interested." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ) : if the number of things carried by the second noun is at least the carrying capacity of the second noun : if the actor is the player : say "[The second noun] [are] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor giving something to ( this is the standard giving rule ) : move the noun to the second noun . |__ report an actor giving something to ( this is the standard report giving rule ) : if the actor is the player : say "[We] [give] [the noun] to [the second noun]." ( a ) ; otherwise if the second noun is the player : say "[The actor] [give] [the noun] to [us]." ( b ) ; otherwise : say "[The actor] [give] [the noun] to [the second noun]." ( c ) . |__ showing it to is an action applying to one carried thing and one visible thing . the showing it to action translates into i6 as Show . |__ the specification of the showing it to action is Anyone can show anyone
else something which they are carrying, but not some nearby piece of
scenery, say - so this action is suitable for showing the emerald locket
to Katarina, but not showing the Orange River Rock Room to Mr Douglas.The Standard Rules implement this action in only a minimal way, checking
that it makes sense but then blocking all such attempts with a message
such as 'Katarina is not interested.' - this is the task of the 'block
showing rule'. As a result, there are no carry out or report rules. To
make it into a systematic and interesting action, we would need to
unlist the block showing rule and then to write carry out and report
rules: but usually for IF purposes we only need to make a handful of
special cases of showing work properly, and for those we can simply
write Instead rules to handle them. |__ check an actor showing something to ( this is the can't show what you haven't got rule ) : if the actor is not the holder of the noun : if the actor is the player : say "[We] [aren't] holding [the noun]." ( a ) ; stop the action . |__ check an actor showing something to ( this is the convert show to yourself to examine rule ) : if the actor is the second noun : convert to the examining action on the noun . |__ check an actor showing something to ( this is the block showing rule ) : if the actor is the player : say "[The second noun] [are] unimpressed." ( a ) ; stop the action . |__ waking is an action applying to one thing . the waking action translates into i6 as WakeOther . |__ the specification of the waking action is This is the act of jostling
a sleeping person to wake him or her up, and it finds its way into the
Standard Rules only for historical reasons. Inform does not by default
provide any model for people being asleep or awake, so this action does
not do anything in the standard implementation: instead, it is always
stopped by the block waking rule. |__ check an actor waking ( this is the block waking rule ) : if the actor is the player : now the prior named object is nothing ; say "That [seem] unnecessary." ( a ) ; stop the action . |__ throwing it at is an action applying to one carried thing and one visible thing . the throwing it at action translates into i6 as ThrowAt . |__ the specification of the throwing it at action is Throwing something at
someone or something is difficult for Inform to model. So many considerations
apply: just because the actor can see the target, does it follow that the
target can accurately hit it? What if the projectile is heavy, like an
anvil, or something not easily aimable, like a feather? What if there
is a barrier in the way, like a cage with bars spaced so that only items
of a certain size get through? And then: what should happen as a result?
Will the projectile break, or do damage, or fall to the floor, or into
a container or onto a supporter? And so on.Because it seems hopeless to try to model this in any general way,
Inform instead provides the action for the user to attach specific rules to.
The check rules in the Standard Rules simply require that the projectile
is not an item of clothing still worn (this will be relevant for women
attending a Tom Jones concert) but then, in either the 'futile to throw
things at inanimate objects rule' or the 'block throwing at rule', will
refuse to carry out the action with a bland message.To make throwing do something, then, we must either write Instead rules
for special circumstances, or else unlist these check rules and write
suitable carry out and report rules to pick up the thread. |__ check an actor throwing something at ( this is the implicitly remove thrown clothing rule ) : if the actor is wearing the noun : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ) : if the second noun is not a person : if the actor is the player : say "Futile." ( a ) ; stop the action . |__ check an actor throwing something at ( this is the block throwing at rule ) : if the actor is the player : say "[We] [lack] the nerve when it [if story tense is the past
tense]came[otherwise]comes[end if] to the crucial moment." ( a ) ; stop the action . |__ attacking is an action applying to one thing . the attacking action translates into i6 as Attack . |__ the specification of the attacking action is Violence is seldom the answer,
and attempts to attack another person are normally blocked as being unrealistic
or not seriously meant. (I might find a shop assistant annoying, but IF is
not Grand Theft Auto, and responding by killing him is not really one of
my options.) So the Standard Rules simply block attempts to fight people,
but the action exists for rules to make exceptions. |__ check an actor attacking ( this is the block attacking rule ) : if the actor is the player : now the prior named object is nothing ; say "Violence [aren't] the answer to this one." ( a ) ; stop the action . |__ kissing is an action applying to one thing . the kissing action translates into i6 as Kiss . |__ the specification of the kissing action is Possibly because Inform was
originally written by an Englishman, attempts at kissing another person are
normally blocked as being unrealistic or not seriously meant. So the
Standard Rules simply block attempts to kiss people, but the action exists
for rules to make exceptions. |__ check an actor kissing ( this is the kissing yourself rule ) : if the noun is the actor : if the actor is the player : say "[We] [don't] get much from that." ( a ) ; stop the action . |__ check an actor kissing ( this is the block kissing rule ) : if the actor is the player : say "[The noun] [might not] like that." ( a ) ; stop the action . |__ answering it that is an action applying to one thing and one topic . the answering it that action translates into i6 as Answer . |__ the specification of the answering it that action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Answering is an action existing so that the player can say something free-form
to somebody else. A convention of IF is that a command such as DAPHNE, TAKE
MASK is a request to Daphne to perform an action: if the persuasion rules in
force mean that she consents, the action 'Daphne taking the mask' does
indeed then result. But if the player types DAPHNE, 12375 or DAPHNE, GREAT
HEAVENS - or anything else not making sense as a command - the action
'answering Daphne that ...' will be generated.The name of the action arises because it is also caused by typing, say,
ANSWER 12375 when Daphne (say) has asked a question. |__ report an actor answering something that ( this is the block answering rule ) : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no reply." ( a ) ; stop the action . |__ telling it about is an action applying to one thing and one topic . the telling it about action translates into i6 as Tell . |__ the specification of the telling it about action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Telling is an action existing only to catch commands like TELL ALEX ABOUT
GUITAR. Customarily in IF, such a command is shorthand which the player
accepts as a conventional form: it means 'tell Alex what I now know about
the guitar' and would make sense if the player had himself recently
discovered something significant about the guitar which might interest
Alex. |__ check an actor telling something about ( this is the telling yourself rule ) : if the actor is the noun : if the actor is the player : say "[We] [talk] to [ourselves] a while." ( a ) ; stop the action . |__ report an actor telling something about ( this is the block telling rule ) : if the actor is the player : now the prior named object is nothing ; say "This [provoke] no reaction." ( a ) ; stop the action . |__ asking it about is an action applying to one thing and one topic . the asking it about action translates into i6 as Ask . |__ the specification of the asking it about action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Asking is an action existing only to catch commands like ASK STEPHEN ABOUT
PENELOPE. Customarily in IF, such a command is shorthand which the player
accepts as a conventional form: it means 'engage Mary in conversation and
try to find out what she might know about'. It's understood as a convention
of the genre that Mary should not be expected to respond in cases where
there is no reason to suppose that she has anything relevant to pass on -
ASK JANE ABOUT RICE PUDDING, for instance, need not conjure up a recipe
even if Jane is a 19th-century servant and therefore almost certainly
knows one. |__ report an actor asking something about ( this is the block asking rule ) : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no reply." ( a ) ; stop the action . |__ asking it for is an action applying to two things . the asking it for action translates into i6 as AskFor . |__ the specification of the asking it for action is The Standard Rules do
not include any systematic way to handle conversation, but this is
action is not quite conversation: it doesn't involve any spoken text as
such. It exists to catch commands like ASK SALLY FOR THE EGG WHISK,
where the whisk is something which Sally has and the player can see.Slightly oddly, but for historical reasons, an actor asking himself for
something is treated to an inventory listing instead. All other cases
are converted to the giving action: that is, ASK SALLY FOR THE EGG WHISK
is treated as if it were SALLY, GIVE ME THE EGG WHISK - an action for
Sally to perform and which then follows rules for giving.To ask for information or something intangible, see the asking it about
action. |__ check an actor asking something for ( this is the asking yourself for something rule ) : if the actor is the noun and the actor is the player : try taking inventory instead . |__ check an actor asking something for ( this is the translate asking for to giving rule ) : convert to request of the noun to perform giving it to action with the second noun and the actor . |__ section 7 - standard actions which are checked but then do nothing unless rules intervene |__ waiting is an action applying to nothing . the waiting action translates into i6 as Wait . |__ the specification of the waiting action is The inaction action: where would
we be without waiting? Waiting does not cause time to pass by - that happens
anyway - but represents a positive choice by the actor not to fill that time.
It is an action so that rules can be attached to it: for instance, we could
imagine that a player who consciously decides to sit and wait might notice
something which a busy player does not, and we could write a rule accordingly.Note the absence of check or carry out rules - anyone can wait, at any time,
and it makes nothing happen. |__ report an actor waiting ( this is the standard report waiting rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Time [pass]." ( a ) ; otherwise : say "[The actor] [wait]." ( b ) . |__ touching is an action applying to one thing . the touching action translates into i6 as Touch . |__ the specification of the touching action is Touching is just that, touching
something without applying pressure: a touch-sensitive screen or a living
creature might react, but a standard push-button or lever will probably not.In the Standard Rules there are no check touching rules, since touchability
is already a requirement of the noun for the action anyway, and no carry out
rules because nothing in the standard Inform world model reacts to
a mere touch - though report rules do mean that attempts to touch other
people provoke a special reply. |__ report an actor touching ( this is the report touching yourself rule ) : if the noun is the actor : if the actor is the player : if the action is not silent : say "[We] [achieve] nothing by this." ( a ) ; otherwise : say "[The actor] [touch] [themselves]." ( b ) ; stop the action ; continue the action . |__ report an actor touching ( this is the report touching other people rule ) : if the noun is a person : if the actor is the player : if the action is not silent : say "[The noun] [might not like] that." ( a ) ; otherwise if the noun is the player : say "[The actor] [touch] [us]." ( b ) ; otherwise : say "[The actor] [touch] [the noun]." ( c ) ; stop the action ; continue the action . |__ report an actor touching ( this is the report touching things rule ) : if the actor is the player : if the action is not silent : say "[We] [feel] nothing unexpected." ( a ) ; otherwise : say "[The actor] [touch] [the noun]." ( b ) . |__ waving is an action applying to one thing . the waving action translates into i6 as Wave . |__ the specification of the waving action is Waving in this sense is like
waving a sceptre: the item to be waved must be directly held (or worn)
by the actor.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, waving a particular rusty iron rod with a star on the end. |__ check an actor waving ( this is the can't wave what's not held rule ) : if the actor is not the holder of the noun : if the actor is the player : say "But [we] [aren't] holding [regarding the noun][those]." ( a ) ; stop the action . |__ report an actor waving ( this is the report waving things rule ) : if the actor is the player : if the action is not silent : say "[We] [wave] [the noun]." ( a ) ; otherwise : say "[The actor] [wave] [the noun]." ( b ) . |__ pulling is an action applying to one thing . the pulling action translates into i6 as Pull . |__ the specification of the pulling action is Pulling is the act of pulling
something not grossly larger than the actor by an amount which would not
substantially move it.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, pulling a lever. ('The big red lever is a fixed in place device.
Instead of pulling the big red lever, try switching on the lever. Instead
of pushing the big red lever, try switching off the lever.') |__ check an actor pulling ( this is the can't pull what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor pulling ( this is the can't pull scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor pulling ( this is the can't pull people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor pulling ( this is the report pulling rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [pull] [the noun]." ( b ) . |__ pushing is an action applying to one thing . the pushing action translates into i6 as Push . |__ the specification of the pushing action is Pushing is the act of pushing
something not grossly larger than the actor by an amount which would not
substantially move it. (See also the pushing it to action, which involves
a longer-distance push between rooms.)In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, pulling a lever. ('The big red lever is a fixed in place device.
Instead of pulling the big red lever, try switching on the lever. Instead
of pushing the big red lever, try switching off the lever.') |__ check an actor pushing something ( this is the can't push what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor pushing something ( this is the can't push scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor pushing something ( this is the can't push people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor pushing something ( this is the report pushing rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [push] [the noun]." ( b ) . |__ turning is an action applying to one thing . the turning action translates into i6 as Turn . |__ the specification of the turning action is Turning is the act of rotating
something - say, a dial.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, turning a capstan. |__ check an actor turning ( this is the can't turn what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor turning ( this is the can't turn scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor turning ( this is the can't turn people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor turning ( this is the report turning rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [turn] [the noun]." ( b ) . |__ pushing it to is an action applying to one thing and one visible thing . the pushing it to action translates into i6 as PushDir . |__ the specification of the pushing it to action is This action covers pushing
a large object, not being carried, so that the actor pushes it from one room
to another: for instance, pushing a bale of hay to the east.This is rapidly converted into a special form of the going action. If the
noun object has the either/or property 'pushable between rooms', then the
action is converted to going by the 'standard pushing in directions rule'.
If that going action succeeds, then the original pushing it to action
stops; it's only if that fails that we run on into the 'block pushing in
directions rule', which then puts an end to the matter. |__ check an actor pushing something to ( this is the can't push unpushable things rule ) : if the noun is not pushable between rooms : if the actor is the player : say "[The noun] [cannot] be pushed from place to place." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push to non-directions rule ) : if the second noun is not a direction : if the actor is the player : say "[regarding the noun][They] [aren't] a direction." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push vertically rule ) : if the second noun is up or the second noun is down : if the actor is the player : say "[The noun] [cannot] be pushed up or down." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push from within rule ) : if the noun encloses the actor : if the actor is the player : say "[The noun] [cannot] be pushed from here." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the standard pushing in directions rule ) : convert to special going-with-push action . |__ check an actor pushing something to ( this is the block pushing in directions rule ) : if the actor is the player : say "[The noun] [cannot] be pushed from place to place." ( a ) ; stop the action . |__ squeezing is an action applying to one thing . the squeezing action translates into i6 as Squeeze . |__ the specification of the squeezing action is Squeezing is an action which
can conveniently vary from squeezing something hand-held, like a washing-up
liquid bottle, right up to squeezing a pillar in a bear hug.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases. A mildly fruity message is produced to players who attempt to
squeeze people, which is blocked by a check squeezing rule. |__ check an actor squeezing ( this is the innuendo about squeezing people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor squeezing ( this is the report squeezing rule ) : if the actor is the player : if the action is not silent : say "[We] [achieve] nothing by this." ( a ) ; otherwise : say "[The actor] [squeeze] [the noun]." ( b ) . |__ section 8 - standard actions which always do nothing unless rules intervene |__ saying yes is an action applying to nothing . the saying yes action translates into i6 as Yes . |__ the specification of the saying yes action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying yes ( this is the block saying yes rule ) : if the actor is the player : say "That was a rhetorical question." ( a ) ; stop the action . |__ saying no is an action applying to nothing . the saying no action translates into i6 as No . |__ the specification of the saying no action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying no ( this is the block saying no rule ) : if the actor is the player : say "That was a rhetorical question." ( a ) ; stop the action . |__ burning is an action applying to one thing . the burning action translates into i6 as Burn . |__ the specification of the burning action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor burning ( this is the block burning rule ) : if the actor is the player : say "This dangerous act [would achieve] little." ( a ) ; stop the action . |__ waking up is an action applying to nothing . the waking up action translates into i6 as Wake . |__ the specification of the waking up action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor waking up ( this is the block waking up rule ) : if the actor is the player : now the prior named object is nothing ; say "The dreadful truth [are], this [are not] a dream." ( a ) ; stop the action . |__ thinking is an action applying to nothing . the thinking action translates into i6 as Think . |__ the specification of the thinking action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor thinking ( this is the block thinking rule ) : if the actor is the player : say "What a good idea." ( a ) ; stop the action . |__ smelling is an action applying to nothing or one thing . the smelling action translates into i6 as Smell . |__ the specification of the smelling action is The Standard Rules define this action in only a minimal way, replying only
that the player smells nothing unexpected. |__ report an actor smelling ( this is the report smelling rule ) : if the actor is the player : if the action is not silent : say "[We] [smell] nothing unexpected." ( a ) ; otherwise : say "[The actor] [sniff]." ( b ) . |__ listening to is an action applying to nothing or one thing and abbreviable . the listening to action translates into i6 as Listen . |__ the specification of the listening to action is The Standard Rules define this action in only a minimal way, replying only
that the player hears nothing unexpected. |__ report an actor listening to ( this is the report listening rule ) : if the actor is the player : if the action is not silent : say "[We] [hear] nothing unexpected." ( a ) ; otherwise : say "[The actor] [listen]." ( b ) . |__ tasting is an action applying to one thing . the tasting action translates into i6 as Taste . |__ the specification of the tasting action is The Standard Rules define this action in only a minimal way, replying only
that the player tastes nothing unexpected. |__ report an actor tasting ( this is the report tasting rule ) : if the actor is the player : if the action is not silent : say "[We] [taste] nothing unexpected." ( a ) ; otherwise : say "[The actor] [taste] [the noun]." ( b ) . |__ cutting is an action applying to one thing . the cutting action translates into i6 as Cut . |__ the specification of the cutting action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor cutting ( this is the block cutting rule ) : if the actor is the player : say "Cutting [regarding the noun][them] up [would achieve] little." ( a ) ; stop the action . |__ jumping is an action applying to nothing . the jumping action translates into i6 as Jump . |__ the specification of the jumping action is The Standard Rules define this action in only a minimal way, simply reporting
a little jump on the spot. |__ report an actor jumping ( this is the report jumping rule ) : if the actor is the player : if the action is not silent : say "[We] [jump] on the spot." ( a ) ; otherwise : say "[The actor] [jump] on the spot." ( b ) . |__ tying it to is an action applying to two things . the tying it to action translates into i6 as Tie . |__ the specification of the tying it to action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor tying something to ( this is the block tying rule ) : if the actor is the player : say "[We] [would achieve] nothing by this." ( a ) ; stop the action . |__ drinking is an action applying to one thing . the drinking action translates into i6 as Drink . |__ the specification of the drinking action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor drinking ( this is the block drinking rule ) : if the actor is the player : now the prior named object is nothing ; say "[There's] nothing suitable to drink here." ( a ) ; stop the action . |__ saying sorry is an action applying to nothing . the saying sorry action translates into i6 as Sorry . |__ the specification of the saying sorry action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying sorry ( this is the block saying sorry rule ) : if the actor is the player : say "Oh, don't [if American dialect option is
active]apologize[otherwise]apologise[end if]." ( a ) ; stop the action . |__ swinging is an action applying to one thing . the swinging action translates into i6 as Swing . |__ the specification of the swinging action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor swinging ( this is the block swinging rule ) : if the actor is the player : now the prior named object is nothing ; say "[There's] nothing sensible to swing here." ( a ) ; stop the action . |__ rubbing is an action applying to one thing . the rubbing action translates into i6 as Rub . |__ the specification of the rubbing action is The Standard Rules define this action in only a minimal way, simply reporting
that it has happened. |__ check an actor rubbing ( this is the can't rub another person rule ) : if the noun is a person who is not the actor : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor rubbing ( this is the report rubbing rule ) : if the actor is the player : if the action is not silent : say "[We] [rub] [the noun]." ( a ) ; otherwise : say "[The actor] [rub] [the noun]." ( b ) . |__ setting it to is an action applying to one thing and one topic . the setting it to action translates into i6 as SetTo . |__ the specification of the setting it to action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor setting something to ( this is the block setting it to rule ) : if the actor is the player : say "No, [we] [can't set] [regarding the noun][those] to anything." ( a ) ; stop the action . |__ waving hands is an action applying to nothing . the waving hands action translates into i6 as WaveHands . |__ the specification of the waving hands action is The Standard Rules define this action in only a minimal way, simply reporting
a little wave of the hands. |__ report an actor waving hands ( this is the report waving hands rule ) : if the actor is the player : if the action is not silent : say "[We] [wave]." ( a ) ; otherwise : say "[The actor] [wave]." ( b ) . |__ buying is an action applying to one thing . the buying action translates into i6 as Buy . |__ the specification of the buying action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor buying ( this is the block buying rule ) : if the actor is the player : now the prior named object is nothing ; say "Nothing [are] on sale." ( a ) ; stop the action . |__ climbing is an action applying to one thing . the climbing action translates into i6 as Climb . |__ the specification of the climbing action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor climbing ( this is the block climbing rule ) : if the actor is the player : say "Little [are] to be achieved by that." ( a ) ; stop the action . |__ sleeping is an action applying to nothing . the sleeping action translates into i6 as Sleep . |__ the specification of the sleeping action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor sleeping ( this is the block sleeping rule ) : if the actor is the player : say "[We] [aren't] feeling especially drowsy." ( a ) ; stop the action . |__ section 9 - standard actions which happen out of world |__ quitting the game is an action out of world and applying to nothing . the quitting the game action translates into i6 as Quit . |__ the quit the game rule is listed in the carry out quitting the game rulebook . the quit the game rule translates into i6 as QUIT_THE_GAME_R with "Are you sure you want to quit? " ( a ) . |__ saving the game is an action out of world and applying to nothing . the saving the game action translates into i6 as Save . |__ the save the game rule is listed in the carry out saving the game rulebook . the save the game rule translates into i6 as SAVE_THE_GAME_R with "Save failed." ( a ) , "Ok." ( b ) . |__ restoring the game is an action out of world and applying to nothing . the restoring the game action translates into i6 as Restore . |__ the restore the game rule is listed in the carry out restoring the game rulebook . the restore the game rule translates into i6 as RESTORE_THE_GAME_R with "Restore failed." ( a ) , "Ok." ( b ) . |__ restarting the game is an action out of world and applying to nothing . the restarting the game action translates into i6 as Restart . |__ the restart the game rule is listed in the carry out restarting the game rulebook . the restart the game rule translates into i6 as RESTART_THE_GAME_R with "Are you sure you want to restart? " ( a ) , "Failed." ( b ) . |__ verifying the story file is an action out of world and applying to nothing . the verifying the story file action translates into i6 as Verify . |__ the verify the story file rule is listed in the carry out verifying the story file rulebook . the verify the story file rule translates into i6 as VERIFY_THE_STORY_FILE_R with "The game file has verified as intact." ( a ) , "The game file did not verify as intact, and may be corrupt." ( b ) . |__ switching the story transcript on is an action out of world and applying to nothing . the switching the story transcript on action translates into i6 as ScriptOn . |__ the switch the story transcript on rule is listed in the carry out switching the story transcript on rulebook . the switch the story transcript on rule translates into i6 as SWITCH_TRANSCRIPT_ON_R with "Transcripting is already on." ( a ) , "Start of a transcript of" ( b ) , "Attempt to begin transcript failed." ( c ) . |__ switching the story transcript off is an action out of world and applying to nothing . the switching the story transcript off action translates into i6 as ScriptOff . |__ the switch the story transcript off rule is listed in the carry out switching the story transcript off rulebook . the switch the story transcript off rule translates into i6 as SWITCH_TRANSCRIPT_OFF_R with "Transcripting is already off." ( a ) , "[line break]End of transcript." ( b ) , "Attempt to end transcript failed." ( c ) . |__ |__ requesting the story file version is an action out of world and applying to nothing . the requesting the story file version action translates into i6 as Version . |__ the announce the story file version rule is listed in the carry out requesting the story file version rulebook . the announce the story file version rule translates into i6 as ANNOUNCE_STORY_FILE_VERSION_R . |__ requesting the score is an action out of world and applying to nothing . the requesting the score action translates into i6 as Score . |__ the announce the score rule is listed in the carry out requesting the score rulebook . the announce the score rule translates into i6 as ANNOUNCE_SCORE_R with "[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
[score] out of a possible [maximum score], in [turn count] turn[s]" ( a ) , ", earning you the rank of " ( b ) , "[There] [are] no score in this story." ( c ) , "[bracket]Your score has just gone up by [number understood in words]
point[s].[close bracket]" ( d ) , "[bracket]Your score has just gone down by [number understood in words]
point[s].[close bracket]" ( e ) . |__ preferring abbreviated room descriptions is an action out of world and applying to nothing . the preferring abbreviated room descriptions action translates into i6 as LMode3 . |__ the prefer abbreviated room descriptions rule is listed in the carry out preferring abbreviated room descriptions rulebook . the prefer abbreviated room descriptions rule translates into i6 as PREFER_ABBREVIATED_R . |__ the standard report preferring abbreviated room descriptions rule is listed in the report preferring abbreviated room descriptions rulebook . the standard report preferring abbreviated room descriptions rule translates into i6 as REP_PREFER_ABBREVIATED_R with " is now in its 'superbrief' mode, which always gives short descriptions
of locations (even if you haven't been there before)." ( a ) . |__ preferring unabbreviated room descriptions is an action out of world and applying to nothing . the preferring unabbreviated room descriptions action translates into i6 as LMode2 . |__ the prefer unabbreviated room descriptions rule is listed in the carry out preferring unabbreviated room descriptions rulebook . the prefer unabbreviated room descriptions rule translates into i6 as PREFER_UNABBREVIATED_R . |__ the standard report preferring unabbreviated room descriptions rule is listed in the report preferring unabbreviated room descriptions rulebook . the standard report preferring unabbreviated room descriptions rule translates into i6 as REP_PREFER_UNABBREVIATED_R with " is now in its 'verbose' mode, which always gives long descriptions of
locations (even if you've been there before)." ( a ) . |__ preferring sometimes abbreviated room descriptions is an action out of world and applying to nothing . the preferring sometimes abbreviated room descriptions action translates into i6 as LMode1 . |__ the prefer sometimes abbreviated room descriptions rule is listed in the carry out preferring sometimes abbreviated room descriptions rulebook . the prefer sometimes abbreviated room descriptions rule translates into i6 as PREFER_SOMETIMES_ABBREVIATED_R . |__ the standard report preferring sometimes abbreviated room descriptions rule is listed in the report preferring sometimes abbreviated room descriptions rulebook . the standard report preferring sometimes abbreviated room descriptions rule translates into i6 as REP_PREFER_SOMETIMES_ABBR_R with " is now in its 'brief' printing mode, which gives long descriptions
of places never before visited and short descriptions otherwise." ( a ) . |__ switching score notification on is an action out of world and applying to nothing . the switching score notification on action translates into i6 as NotifyOn . |__ the switch score notification on rule is listed in the carry out switching score notification on rulebook . the switch score notification on rule translates into i6 as SWITCH_SCORE_NOTIFY_ON_R . |__ the standard report switching score notification on rule is listed in the report switching score notification on rulebook . the standard report switching score notification on rule translates into i6 as REP_SWITCH_NOTIFY_ON_R with "Score notification on." ( a ) . |__ switching score notification off is an action out of world and applying to nothing . the switching score notification off action translates into i6 as NotifyOff . |__ the switch score notification off rule is listed in the carry out switching score notification off rulebook . the switch score notification off rule translates into i6 as SWITCH_SCORE_NOTIFY_OFF_R . |__ the standard report switching score notification off rule is listed in the report switching score notification off rulebook . the standard report switching score notification off rule translates into i6 as REP_SWITCH_NOTIFY_OFF_R with "Score notification off." ( a ) . |__ requesting the pronoun meanings is an action out of world and applying to nothing . the requesting the pronoun meanings action translates into i6 as Pronouns . |__ the announce the pronoun meanings rule is listed in the carry out requesting the pronoun meanings rulebook . the announce the pronoun meanings rule translates into i6 as ANNOUNCE_PRONOUN_MEANINGS_R with "At the moment, " ( a ) , "means " ( b ) , "is unset" ( c ) , "no pronouns are known to the game." ( d ) . |__ part six - grammar |__ understand "take [things]" as taking . understand "take off [something]" as taking off . understand "take [something] off" as taking off . understand "take [things inside] from [something]" as removing it from . understand "take [things inside] off [something]" as removing it from . understand "take inventory" as taking inventory . understand the commands carry and hold as take . |__ understand "get in/on" as entering . understand "get out/off/down/up" as exiting . understand "get [things]" as taking . understand "get in/into/on/onto [something]" as entering . understand "get off/down [something]" as getting off . understand "get [things inside] from [something]" as removing it from . |__ understand "pick up [things]" or "pick [things] up" as taking . |__ understand "stand" or "stand up" as exiting . understand "stand on [something]" as entering . |__ understand "remove [something preferably held]" as taking off . understand "remove [things inside] from [something]" as removing it from . |__ understand "shed [something preferably held]" as taking off . understand the commands doff and disrobe as shed . |__ understand "wear [something preferably held]" as wearing . understand the command don as wear . |__ understand "put [other things] in/inside/into [something]" as inserting it into . understand "put [other things] on/onto [something]" as putting it on . understand "put on [something preferably held]" as wearing . understand "put [something preferably held] on" as wearing . understand "put down [things preferably held]" or "put [things preferably held] down" as dropping . |__ understand "insert [other things] in/into [something]" as inserting it into . |__ understand "drop [things preferably held]" as dropping . understand "drop [other things] in/into/down [something]" as inserting it into . understand "drop [other things] on/onto [something]" as putting it on . understand "drop [something preferably held] at/against [something]" as throwing it at . understand the commands throw and discard as drop . |__ understand "give [something preferably held] to [someone]" as giving it to . understand "give [someone] [something preferably held]" as giving it to ( with nouns reversed ) . understand the commands pay and offer and feed as give . |__ understand "show [someone] [something preferably held]" as showing it to ( with nouns reversed ) . understand "show [something preferably held] to [someone]" as showing it to . understand the commands present and display as show . |__ understand "go" as going . understand "go [direction]" as going . understand "go [something]" as entering . understand "go into/in/inside/through [something]" as entering . understand the commands walk and run as go . |__ understand "inventory" as taking inventory . understand the commands i and inv as inventory . |__ understand "look" as looking . understand "look at [something]" as examining . understand "look [something]" as examining . understand "look inside/in/into/through [something]" as searching . understand "look under [something]" as looking under . understand "look up [text] in [something]" as consulting it about ( with nouns reversed ) . understand the command l as look . |__ understand "consult [something] on/about [text]" as consulting it about . |__ understand "open [something]" as opening . understand "open [something] with [something preferably held]" as unlocking it with . understand the commands unwrap , uncover as open . |__ understand "close [something]" as closing . understand "close up [something]" as closing . understand "close off [something]" as switching off . understand the commands shut and cover as close . |__ understand "enter" as entering . understand "enter [something]" as entering . understand the command cross as enter . |__ understand "sit on top of [something]" as entering . understand "sit on/in/inside [something]" as entering . |__ understand "exit" as exiting . understand the commands leave and out as exit . |__ understand "examine [something]" as examining . understand the commands x , watch , describe and check as examine . |__ understand "read [something]" as examining . understand "read about [text] in [something]" as consulting it about ( with nouns reversed ) . understand "read [text] in [something]" as consulting it about ( with nouns reversed ) . |__ understand "yes" as saying yes . understand the command y as yes . |__ understand "no" as saying no . |__ understand "sorry" as saying sorry . |__ understand "search [something]" as searching . |__ understand "wave" as waving hands . |__ understand "wave [something]" as waving . |__ understand "set [something] to [text]" as setting it to . understand the command adjust as set . |__ understand "pull [something]" as pulling . understand the command drag as pull . |__ understand "push [something]" as pushing . understand "push [something] [direction]" or "push [something] to [direction]" as pushing it to . understand the commands move , shift , clear and press as push . |__ understand "turn [something]" as turning . understand "turn [something] on" or "turn on [something]" as switching on . understand "turn [something] off" or "turn off [something]" as switching off . understand the commands rotate , twist , unscrew and screw as turn . |__ understand "switch [something switched on]" as switching off . understand "switch [something]" or "switch on [something]" or "switch [something] on" as switching on . understand "switch [something] off" or "switch off [something]" as switching off . |__ understand "lock [something] with [something preferably held]" as locking it with . |__ understand "unlock [something] with [something preferably held]" as unlocking it with . |__ understand "attack [something]" as attacking . understand the commands break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump as attack . |__ understand "wait" as waiting . understand the command z as wait . |__ understand "answer [text] to [someone]" as answering it that ( with nouns reversed ) . understand the commands say , shout and speak as answer . |__ understand "tell [someone] about [text]" as telling it about . |__ understand "ask [someone] about [text]" as asking it about . understand "ask [someone] for [something]" as asking it for . |__ understand "eat [something preferably held]" as eating . |__ understand "sleep" as sleeping . understand the command nap as sleep . |__ understand "climb [something]" or "climb up/over [something]" as climbing . understand the command scale as climb . |__ understand "buy [something]" as buying . understand the command purchase as buy . |__ understand "squeeze [something]" as squeezing . understand the command squash as squeeze . |__ understand "swing [something]" or "swing on [something]" as swinging . |__ understand "wake" or "wake up" as waking up . understand "wake [someone]" or "wake [someone] up" or "wake up [someone]" as waking . understand the commands awake and awaken as wake . |__ understand "kiss [someone]" as kissing . understand the commands embrace and hug as kiss . |__ understand "think" as thinking . |__ understand "smell" as smelling . understand "smell [something]" as smelling . understand the command sniff as smell . |__ understand "listen" as listening to . understand "hear [something]" as listening to . understand "listen to [something]" as listening to . |__ understand "taste [something]" as tasting . |__ understand "touch [something]" as touching . understand the command feel as touch . |__ understand "rub [something]" as rubbing . understand the commands shine , polish , sweep , clean , dust , wipe and scrub as rub . |__ understand "tie [something] to [something]" as tying it to . understand the commands attach and fasten as tie . |__ understand "burn [something]" as burning . understand the command light as burn . |__ understand "drink [something]" as drinking . understand the commands swallow and sip as drink . |__ understand "cut [something]" as cutting . understand the commands slice , prune and chop as cut . |__ understand "jump" as jumping . understand the commands skip and hop as jump . |__ understand "score" as requesting the score . understand "quit" or "q" as quitting the game . understand "save" as saving the game . understand "restart" as restarting the game . understand "restore" as restoring the game . understand "verify" as verifying the story file . understand "version" as requesting the story file version . understand "script" or "script on" or "transcript" or "transcript on" as switching the story transcript on . understand "script off" or "transcript off" as switching the story transcript off . understand "superbrief" or "short" as preferring abbreviated room descriptions . understand "verbose" or "long" as preferring unabbreviated room descriptions . understand "brief" or "normal" as preferring sometimes abbreviated room descriptions . understand "nouns" or "pronouns" as requesting the pronoun meanings . understand "notify" or "notify on" as switching score notification on . understand "notify off" as switching score notification off . |__ the understand token a time period translates into i6 as RELATIVE_TIME_TOKEN . |__ part seven - phrasebook |__ chapter 1 - saying |__ section 1 - time values |__ to say ( something - time ) in words ( documented at phs_timewords ) : (-  print (PrintTimeOfDayEnglish) {something};  . to say here ( documented at phs_here ) : say "[if story tense is present tense]here[otherwise]there" . to say now ( documented at phs_now ) : say "[if story tense is present tense]now[otherwise]then" . |__ section 2 - boxed quotations |__ to display the boxed quotation ( q - text ) ( documented at ph_boxed ) : (-  DisplayBoxedQuotation({-box-quotation-text:Q});  . |__ section 3 - some built-in texts |__ to say the/-- banner text ( documented at phs_banner ) : (-  Banner();  . to say the/-- list of extension credits ( documented at phs_extcredits ) : (-  ShowExtensionVersions();  . to say the/-- complete list of extension credits ( documented at phs_compextcredits ) : (-  ShowFullExtensionVersions();  . to say the/-- player's surroundings ( documented at phs_surroundings ) : (-  SL_Location(true);  . to say run paragraph on with special look spacing -- running on ( documented at phs_runparaonsls ) : (-  SpecialLookSpacingBreak();  . to say command clarification break -- running on ( documented at phs_clarifbreak ) : (-  CommandClarificationBreak();  . |__ section 4 - responses |__ to say text of ( r - response ) ( documented at phs_response ) : carry out the issuing the response text activity with r . |__ section 5 - saying lists of things |__ to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized ( documented at ph_listcontents ) : (-  WriteListFrom(child({O}), {phrase options});  . |__ to say a list of ( os - description of objects ) ( documented at phs_alistof ) : (- 
	 	objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT);
	 . to say a list of ( os - description of objects ) ( documented at phs_alistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		TEXT_TY_Say_Capitalised((+ "[list-writer list of marked objects]" +));
	 . |__ to say list of ( os - description of objects ) ( documented at phs_listof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+NOARTICLE_BIT);
	 . to say the list of ( os - description of objects ) ( documented at phs_thelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);
	 . to say the list of ( os - description of objects ) ( documented at phs_thelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		TEXT_TY_Say_Capitalised((+ "[list-writer articled list of marked objects]" +));
	 . to say is-are a list of ( os - description of objects ) ( documented at phs_isalistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT);
	 . to say is-are list of ( os - description of objects ) ( documented at phs_islistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT+NOARTICLE_BIT);
	 . to say is-are the list of ( os - description of objects ) ( documented at phs_isthelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+ISARE_BIT);
	 . to say a list of ( os - description of objects ) including contents ( documented at phs_alistofconts ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+RECURSE_BIT+PARTINV_BIT+
			TERSE_BIT+CONCEAL_BIT);
	 . |__ section 6 - group in and omit from lists |__ to group ( os - description of objects ) together ( documented at ph_group ) : (- 
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-list-together:unarticled});
	 . to group ( os - description of objects ) together giving articles ( documented at ph_groupart ) : (- 
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-list-together:articled});
	 . to group ( os - description of objects ) together as ( t - text ) ( documented at ph_grouptext ) : (- 
		{-my:2} = BlkValueCreate(TEXT_TY);
		{-my:2} = TEXT_TY_SubstitutedForm({-my:2}, {-by-reference:T});
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-my:2});
		BlkValueFree({-my:2});
	 . to omit contents in listing ( documented at ph_omit ) : (-  c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);  . |__ section 7 - filtering contents of lists - unindexed |__ to filter list recursion to ( d - description of objects ) : (-  list_filter_routine = {D};  . to unfilter list recursion : (-  list_filter_routine = 0;  . |__ chapter 2 - multimedia |__ section 1 - figures ( for figures language element only ) |__ to display ( f - figure name ) , one time only ( documented at ph_displayfigure ) : (-  DisplayFigure(ResourceIDsOfFigures-->{F}, {phrase options});  . to decide which number is the glulx resource id of ( f - figure name ) ( documented at ph_figureid ) : (-  ResourceIDsOfFigures-->{F}  . |__ section 2 - sound effects ( for sounds language element only ) |__ to play ( sfx - sound name ) , one time only ( documented at ph_playsf ) : (-  PlaySound(ResourceIDsOfSounds-->{SFX}, {phrase options});  . to decide which number is the glulx resource id of ( sfx - sound name ) ( documented at ph_soundid ) : (-  ResourceIDsOfSounds-->{SFX}  . |__ chapter 3 - actions , activities and rules |__ section 1 - trying actions |__ to try ( s - action ) ( documented at ph_try ) : (-  {-try-action:S}  . to silently try ( s - action ) ( documented at ph_trysilently ) : (-  {-try-action-silently:S}  . to try silently ( s - action ) ( documented at ph_trysilently ) : (-  {-try-action-silently:S}  . to decide whether the action is not silent : (-  (keep_silent == false)  . |__ section 2 - action requirements |__ to decide whether the action requires a touchable noun ( documented at ph_requirestouch ) : (-  (NeedToTouchNoun())  . to decide whether the action requires a touchable second noun ( documented at ph_requirestouch2 ) : (-  (NeedToTouchSecondNoun())  . to decide whether the action requires a carried noun ( documented at ph_requirescarried ) : (-  (NeedToCarryNoun())  . to decide whether the action requires a carried second noun ( documented at ph_requirescarried2 ) : (-  (NeedToCarrySecondNoun())  . to decide whether the action requires light ( documented at ph_requireslight ) : (-  (NeedLightForAction())  . |__ to anonymously abide by ( rl - a rule ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL})) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . to anonymously abide by ( rl - value of kind k based rule producing a value ) for ( v - k ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL}, {V}, true)) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . to anonymously abide by ( rl - a nothing based rule ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL})) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . |__ section 3 - stop or continue |__ to stop the action ( documented at ph_stopaction ) : (-  rtrue;  - in to only . to continue the action ( documented at ph_continueaction ) : (-  rfalse;  - in to only . |__ section 4 - actions as values |__ to decide what action is the current action ( documented at ph_currentaction ) : (-  STORED_ACTION_TY_Current({-new:action})  . to decide what action is the action of ( a - action ) ( documented at ph_actionof ) : (-  {A}  . to decide if ( act - a action ) involves ( x - an object ) ( documented at ph_involves ) : (-  (STORED_ACTION_TY_Involves({-by-reference:act}, {X}))  . to decide what action name is the action name part of ( act - a action ) ( documented at ph_actionpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTION_F))  . to decide what object is the noun part of ( act - a action ) ( documented at ph_nounpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_NOUN_F))  . to decide what object is the second noun part of ( act - a action ) ( documented at ph_secondpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_SECOND_F))  . to decide what object is the actor part of ( act - a action ) ( documented at ph_actorpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTOR_F))  . |__ chapter 4 - the model world |__ section 1 - ending the story |__ to end the story ( documented at ph_end ) : (-  deadflag=3; story_complete=false;  . to end the story finally ( documented at ph_endfinally ) : (-  deadflag=3; story_complete=true;  . to end the story saying ( finale - text ) ( documented at ph_endsaying ) : (-  deadflag={-by-reference:finale}; story_complete=false;  . to end the story finally saying ( finale - text ) ( documented at ph_endfinallysaying ) : (-  deadflag={-by-reference:finale}; story_complete=true;  . to decide whether the story has ended ( documented at ph_ended ) : (-  (deadflag~=0)  . to decide whether the story has ended finally ( documented at ph_finallyended ) : (-  (story_complete)  . to decide whether the story has not ended ( documented at ph_notended ) : (-  (deadflag==0)  . to decide whether the story has not ended finally ( documented at ph_notfinallyended ) : (-  (story_complete==false)  . to resume the story ( documented at ph_resume ) : (-  resurrect_please = true;  . |__ section 2 - times of day |__ to decide which number is the minutes part of ( t - time ) ( documented at ph_minspart ) : (-  ({t}%ONE_HOUR)  . to decide which number is the hours part of ( t - time ) ( documented at ph_hourspart ) : (-  ({t}/ONE_HOUR)  . |__ to decide if ( t - time ) is before ( t2 - time ) ( documented at ph_timebefore ) : (-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))<(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS)))  . to decide if ( t - time ) is after ( t2 - time ) ( documented at ph_timeafter ) : (-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))>(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS)))  . to decide which time is ( t - time ) before ( t2 - time ) ( documented at ph_shiftbefore ) : (-  (({t2}-{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS))  . to decide which time is ( t - time ) after ( t2 - time ) ( documented at ph_shiftafter ) : (-  (({t2}+{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS))  . |__ section 3 - durations |__ to decide which time is ( n - number ) minutes ( documented at ph_durationmins ) : (-  (({n})%(TWENTY_FOUR_HOURS))  . to decide which time is ( n - number ) hours ( documented at ph_durationhours ) : (-  (({n}*ONE_HOUR)%(TWENTY_FOUR_HOURS))  . |__ section 4 - timed events |__ to ( r - rule ) in ( t - number ) turn/turns from now ( documented at ph_turnsfromnow ) : (-  SetTimedEvent({-mark-event-used:R}, {t}+1, 0);  . to ( r - rule ) at ( t - time ) ( documented at ph_attime ) : (-  SetTimedEvent({-mark-event-used:R}, {t}, 1);  . to ( r - rule ) in ( t - time ) from now ( documented at ph_timefromnow ) : (-  SetTimedEvent({-mark-event-used:R}, (the_time+{t})%(TWENTY_FOUR_HOURS), 1);  . |__ section 5 - scenes |__ to decide if ( sc - scene ) has happened ( documented at ph_hashappened ) : (-  (scene_endings-->({sc}-1))  . to decide if ( sc - scene ) has not happened ( documented at ph_hasnothappened ) : (-  (scene_endings-->({sc}-1) == 0)  . to decide if ( sc - scene ) has ended ( documented at ph_hasended ) : (-  (scene_endings-->({sc}-1) > 1)  . to decide if ( sc - scene ) has not ended ( documented at ph_hasnotended ) : (-  (scene_endings-->({sc}-1) <= 1)  . |__ section 6 - timing of scenes |__ to decide which time is the time since ( sc - scene ) began ( documented at ph_scenetimesincebegan ) : (-  (SceneUtility({sc}, 1))  . to decide which time is the time when ( sc - scene ) began ( documented at ph_scenetimewhenbegan ) : (-  (SceneUtility({sc}, 2))  . to decide which time is the time since ( sc - scene ) ended ( documented at ph_scenetimesinceended ) : (-  (SceneUtility({sc}, 3))  . to decide which time is the time when ( sc - scene ) ended ( documented at ph_scenetimewhenended ) : (-  (SceneUtility({sc}, 4))  . |__ section 7 - player's identity and location |__ to decide whether in darkness ( documented at ph_indarkness ) : (-  (location==thedark)  . |__ section 8 - moving and removing things |__ to move ( something - object ) to ( something else - object ) , without printing a room description or printing an abbreviated room description ( documented at ph_move ) : (-  MoveObject({something}, {something else}, {phrase options}, false);  . to remove ( something - object ) from play ( deprecated ) ( documented at ph_remove ) : (-  RemoveFromPlay({something});  . to move ( o - object ) backdrop to all ( d - description of objects ) ( documented at ph_movebackdrop ) : (-  MoveBackdrop({O}, {D});  . to update backdrop positions ( documented at ph_updatebackdrop ) : (-  MoveFloatingObjects();  . |__ section 9 - the map |__ to decide which room is location of ( o - object ) ( documented at ph_locationof ) : (-  LocationOf({O})  . to decide which room is room ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomdirof ) : (-  MapConnection({R1},{D})  . to decide which door is door ( d - direction ) from/of ( r1 - room ) ( documented at ph_doordirof ) : (-  DoorFrom({R1},{D})  . to decide which object is the other side of ( d - door ) from ( r1 - room ) ( documented at ph_othersideof ) : (-  OtherSideOfDoor({D},{R1})  . to decide which object is the direction of ( d - door ) from ( r1 - room ) ( documented at ph_directionofdoor ) : (-  DirectionDoorLeadsIn({D},{R1})  . to decide which object is room-or-door ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomordoor ) : (-  RoomOrDoorFrom({R1},{D})  . to change ( d - direction ) exit of ( r1 - room ) to ( r2 - room ) ( documented at ph_changeexit ) : (-  AssertMapConnection({R1},{D},{R2});  . to change ( d - direction ) exit of ( r1 - room ) to nothing/nowhere ( documented at ph_changenoexit ) : (-  AssertMapConnection({R1},{D},nothing);  . to decide which room is the front side of ( d - object ) ( documented at ph_frontside ) : (-  FrontSideOfDoor({D})  . to decide which room is the back side of ( d - object ) ( documented at ph_backside ) : (-  BackSideOfDoor({D})  . |__ section 10 - route-finding |__ to decide which object is best route from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroute ) : (-  MapRouteTo({R1},{R2},0,{phrase options})  . to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroutelength ) : (-  MapRouteTo({R1},{R2},0,{phrase options},true)  . to decide which object is best route from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethrough ) : (-  MapRouteTo({R1},{R2},{RS},{phrase options})  . to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethroughlength ) : (-  MapRouteTo({R1},{R2},{RS},{phrase options},true)  . |__ section 11 - the object tree |__ to decide which object is holder of ( something - object ) ( documented at ph_holder ) : (-  (HolderOf({something}))  . to decide which object is next thing held after ( something - object ) ( documented at ph_nextheld ) : (-  (sibling({something}))  . to decide which object is first thing held by ( something - object ) ( documented at ph_firstheld ) : (-  (child({something}))  . |__ chapter 5 - understanding |__ section 1 - asking yes/no questions |__ to decide whether player consents ( documented at ph_consents ) : (-  YesOrNo()  . |__ section 2 - the player's command |__ to decide if ( s - a snippet ) matches ( t - a topic ) ( documented at ph_snippetmatches ) : (-  (SnippetMatches({S}, {T}))  . to decide if ( s - a snippet ) does not match ( t - a topic ) ( documented at ph_snippetdoesnotmatch ) : (-  (SnippetMatches({S}, {T}) == false)  . to decide if ( s - a snippet ) includes ( t - a topic ) ( documented at ph_snippetincludes ) : (-  (matched_text=SnippetIncludes({T},{S}))  . to decide if ( s - a snippet ) does not include ( t - a topic ) ( documented at ph_snippetdoesnotinclude ) : (-  (SnippetIncludes({T},{S})==0)  . |__ section 3 - changing the player's command |__ to change the text of the player's command to ( t - text ) ( documented at ph_changecommand ) : (-  SetPlayersCommand({-by-reference:T});  . to replace ( s - a snippet ) with ( t - text ) ( documented at ph_replacesnippet ) : (-  SpliceSnippet({S}, {-by-reference:T});  . to cut ( s - a snippet ) ( documented at ph_cutsnippet ) : (-  SpliceSnippet({S}, 0);  . to reject the player's command ( documented at ph_rejectcommand ) : (-  RulebookFails(); rtrue;  - in to only . |__ section 4 - scope and pronouns |__ to place ( o - an object ) in scope , but not its contents ( documented at ph_placeinscope ) : (-  PlaceInScope({O}, {phrase options});  . to place the/-- contents of ( o - an object ) in scope ( documented at ph_placecontentsinscope ) : (-  ScopeWithin({O});  . to set pronouns from ( o - an object ) ( documented at ph_setpronouns ) : (-  PronounNotice({O});  . |__ section 5 - the multiple object list |__ to decide what list of objects is the multiple object list ( documented at ph_multipleobjectlist ) : (-  LIST_OF_TY_Mol({-new:list of objects})  . to alter the multiple object list to ( l - list of objects ) ( documented at ph_altermultipleobjectlist ) : (-  LIST_OF_TY_Set_Mol({-by-reference:L});  . |__ section sr5/8/1 - message support - issuance - unindexed |__ to issue score notification message : (-  NotifyTheScore();  . to say pronoun dictionary word : (-  print (address) pronoun_word;  . to say recap of command : (-  PrintCommand();  . the pronoun reference object is an object that varies . the pronoun reference object variable translates into i6 as pronoun_obj . |__ to say pronoun i6 dictionary word : (-  print (address) pronoun_word;  . |__ to say parser command so far : (-  PrintCommand();  . |__ chapter 6 - deprecated or private phrases - unindexed |__ section 1 - spatial modelling - unindexed |__ to decide which object is the component parts core of ( x - an object ) : (-  CoreOf({X})  . to decide which object is the common ancestor of ( o - an object ) with ( p - an object ) : (-  (CommonAncestor({O}, {P}))  . to decide which object is the not-counting-parts holder of ( o - an object ) : (-  (CoreOfParentOfCoreOf({O}))  . to decide which object is the visibility-holder of ( o - object ) : (-  VisibilityParent({O})  . to calculate visibility ceiling at low level : (-  FindVisibilityLevels();  . to decide which object is the touchability ceiling of ( o - object ) : (-  TouchabilityCeiling({O})  . |__ to decide which number is the visibility ceiling count calculated : (-  visibility_levels  . to decide which object is the visibility ceiling calculated : (-  visibility_ceiling  . |__ section 2 - room descriptions - unindexed |__ to produce a room description with going spacing conventions : (-  LookAfterGoing();  . |__ to print the location's description : (-  PrintOrRun(location, description);  . |__ to decide if set to sometimes abbreviated room descriptions : (-  (lookmode == 1)  . to decide if set to unabbreviated room descriptions : (-  (lookmode == 2)  . to decide if set to abbreviated room descriptions : (-  (lookmode == 3)  . |__ section 3 - action conversion - unindexed |__ to convert to ( an - an action name ) on ( o - an object ) : (-  return GVS_Convert({AN},{O},0);  - in to only . to convert to request of ( x - object ) to perform ( an - action name ) with ( y - object ) and ( z - object ) : (-  return ConvertToRequest({X}, {AN}, {Y}, {Z});  . to convert to special going-with-push action : (-  return ConvertToGoingWithPush();  . |__ section 4 - surreptitious violation of invariants - unindexed |__ to surreptitiously move ( something - object ) to ( something else - object ) : (-  move {something} to {something else};  . to surreptitiously move ( something - object ) to ( something else - object ) during going : (-  MoveDuringGoing({something}, {something else});  . to surreptitiously reckon darkness : (-  SilentlyConsiderLight();  . |__ section 5 - capitalised list-writing - unindexed |__ to say list-writer list of marked objects : (- 
	 	WriteListOfMarkedObjects(ENGLISH_BIT);
	 . to say list-writer articled list of marked objects : (- 
	 	WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+CFIRSTART_BIT);
	 . |__ section 6 - printing names - unindexed |__ to decide if expanding text for comparison purposes : (-  say__comp  . |__ section 7 - command parsing - unindexed |__ to decide whether the i6 parser is running multiple actions : (-  (multiflag==1)  . |__ section 8 - deprecated inform - unindexed |__ to yes ( documented at ph_yes ) : (-  rtrue;  - in to decide if only . to no ( documented at ph_no ) : (-  rfalse;  - in to decide if only . |__ section 9 - debugging inform - unindexed |__ to *** : (-  {-primitive-definition:verbose-checking}  . to *** ( t - text ) : (-  {-primitive-definition:verbose-checking}  . |__ the standard rules end here . |__ ---- documentation ---- |__ unlike other extensions , the standard rules are compulsorily included with every work of interactive fiction made with inform . they are described throughout the documentation supplied with inform , so no details will be given here . |__ |__ |__ |__ |__> ==>  DS: 00000080
   {...}       1/1: <version 1 of english language by graham nelson begins here . |__ To make English the language of play. |__ use authorial modesty . |__ section 1 - modal verbs and contractions |__ to be able to is a verb . to could is a verb . to may is a verb . to might is a verb . to must is a verb . to should is a verb . to would is a verb . |__ to 're is a verb . to 've is a verb . to aren't is a verb . to can't is a verb . to don't is a verb . to haven't is a verb . to mustn't is a verb . to mightn't is a verb . to mayn't is a verb . to wouldn't is a verb . to couldn't is a verb . to shouldn't is a verb . to won't is a verb . |__ section 2 - fallback definitions ( not for interactive fiction language element ) |__ a natural language is a kind of value . |__ section 1 - grammatical definitions |__ the language of play is a natural language that varies . the language of play is usually the english language . |__ a grammatical tense is a kind of value . the grammatical tenses are present tense , past tense , perfect tense , past perfect tense and future tense . |__ a narrative viewpoint is a kind of value . the narrative viewpoints are first person singular , second person singular , third person singular , first person plural , second person plural , and third person plural . |__ a natural language has a narrative viewpoint called the adaptive text viewpoint . |__ the adaptive text viewpoint of the english language is first person plural . |__ a grammatical case is a kind of value . the grammatical cases are nominative and accusative . |__ a grammatical gender is a kind of value . the grammatical genders are neuter gender , masculine gender , feminine gender . |__ the story tense is a grammatical tense that varies . the story tense variable translates into i6 as story_tense . the story viewpoint is a narrative viewpoint that varies . the story viewpoint variable translates into i6 as story_viewpoint . |__ to say regarding ( item - an object ) : (-  RegardingSingleObject({item});  . |__ to say regarding ( n - a number ) : (-  RegardingNumber({N});  . |__ to say regarding list writer internals : (-  RegardingLWI();  . |__ to say regarding ( d - a description of objects ) : (- 
	 	objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:D}) 
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		RegardingMarkedObjects();
	 . |__ to decide if the prior naming context is plural : (-  ((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname))  . |__ section 2 - saying pronouns ( for interactive fiction language element only ) |__ to say we : now the prior named object is the player ; if the story viewpoint is first person singular : say "I" ; if the story viewpoint is second person singular : say "you" ; if the story viewpoint is third person singular : if the player is male : say "he" ; otherwise : say "she" ; if the story viewpoint is first person plural : say "we" ; if the story viewpoint is second person plural : say "you" ; if the story viewpoint is third person plural : say "they" . |__ to say us : now the prior named object is the player ; if the story viewpoint is first person singular : say "me" ; if the story viewpoint is second person singular : say "you" ; if the story viewpoint is third person singular : if the player is male : say "him" ; otherwise : say "her" ; if the story viewpoint is first person plural : say "us" ; if the story viewpoint is second person plural : say "you" ; if the story viewpoint is third person plural : say "them" . |__ to say ours : now the prior named object is the player ; if the story viewpoint is first person singular : say "mine" ; if the story viewpoint is second person singular : say "yours" ; if the story viewpoint is third person singular : if the player is male : say "his" ; otherwise : say "hers" ; if the story viewpoint is first person plural : say "ours" ; if the story viewpoint is second person plural : say "yours" ; if the story viewpoint is third person plural : say "theirs" . |__ to say ourselves : now the prior named object is the player ; if the story viewpoint is first person singular : say "myself" ; if the story viewpoint is second person singular : say "yourself" ; if the story viewpoint is third person singular : if the player is male : say "himself" ; otherwise : say "herself" ; if the story viewpoint is first person plural : say "ourselves" ; if the story viewpoint is second person plural : say "yourselves" ; if the story viewpoint is third person plural : say "themselves" . |__ to say our : now the prior named object is the player ; if the story viewpoint is first person singular : say "my" ; if the story viewpoint is second person singular : say "your" ; if the story viewpoint is third person singular : if the player is male : say "his" ; otherwise : say "her" ; if the story viewpoint is first person plural : say "our" ; if the story viewpoint is second person plural : say "your" ; if the story viewpoint is third person plural : say "their" . |__ to say we : now the prior named object is the player ; if the story viewpoint is first person singular : say "I" ; if the story viewpoint is second person singular : say "You" ; if the story viewpoint is third person singular : if the player is male : say "He" ; otherwise : say "She" ; if the story viewpoint is first person plural : say "We" ; if the story viewpoint is second person plural : say "You" ; if the story viewpoint is third person plural : say "They" . |__ to say us : now the prior named object is the player ; if the story viewpoint is first person singular : say "Me" ; if the story viewpoint is second person singular : say "You" ; if the story viewpoint is third person singular : if the player is male : say "Him" ; otherwise : say "Her" ; if the story viewpoint is first person plural : say "Us" ; if the story viewpoint is second person plural : say "You" ; if the story viewpoint is third person plural : say "Them" . |__ to say ours : now the prior named object is the player ; if the story viewpoint is first person singular : say "Mine" ; if the story viewpoint is second person singular : say "Yours" ; if the story viewpoint is third person singular : if the player is male : say "His" ; otherwise : say "Hers" ; if the story viewpoint is first person plural : say "Ours" ; if the story viewpoint is second person plural : say "Yours" ; if the story viewpoint is third person plural : say "Theirs" . |__ to say ourselves : now the prior named object is the player ; if the story viewpoint is first person singular : say "Myself" ; if the story viewpoint is second person singular : say "Yourself" ; if the story viewpoint is third person singular : if the player is male : say "Himself" ; otherwise : say "Herself" ; if the story viewpoint is first person plural : say "Ourselves" ; if the story viewpoint is second person plural : say "Yourselves" ; if the story viewpoint is third person plural : say "Themselves" . |__ to say our : now the prior named object is the player ; if the story viewpoint is first person singular : say "My" ; if the story viewpoint is second person singular : say "Your" ; if the story viewpoint is third person singular : if the player is male : say "His" ; otherwise : say "Her" ; if the story viewpoint is first person plural : say "Our" ; if the story viewpoint is second person plural : say "Your" ; if the story viewpoint is third person plural : say "Their" . |__ section 3 - further pronouns ( for interactive fiction language element only ) |__ to say those : say those in the accusative . |__ to say those : say those in the nominative . |__ to say those in ( case - grammatical case ) : if the case is nominative : let the item be the prior named object ; if the prior naming context is plural : say "those" ; otherwise if the item is the player : say "[we]" ; otherwise if the item is a male person and item is not neuter : say "he" ; otherwise if the item is a female person and item is not neuter : say "she" ; otherwise : say "that" ; otherwise : let the item be the prior named object ; if the prior naming context is plural : say "those" ; otherwise if the item is the player : say "[we]" ; otherwise if the item is a male person and item is not neuter : say "him" ; otherwise if the item is a female person and item is not neuter : say "her" ; otherwise : say "that" . |__ to say those in ( case - grammatical case ) : if the case is nominative : let the item be the prior named object ; if the prior naming context is plural : say "Those" ; otherwise if the item is the player : say "[We]" ; otherwise if the item is a male person and item is not neuter : say "He" ; otherwise if the item is a female person and item is not neuter : say "She" ; otherwise : say "That" ; otherwise : let the item be the prior named object ; if the prior naming context is plural : say "Those" ; otherwise if the item is the player : say "[We]" ; otherwise if the item is a male person and item is not neuter : say "Him" ; otherwise if the item is a female person and item is not neuter : say "Her" ; otherwise : say "That" ; |__ to say they : let the item be the prior named object ; if the prior naming context is plural : say "they" ; otherwise if the item is the player : say "[we]" ; otherwise if the item is a male person and item is not neuter : say "he" ; otherwise if the item is a female person and item is not neuter : say "she" ; otherwise : say "it" ; |__ to say they : let the item be the prior named object ; if the prior naming context is plural : say "They" ; otherwise if the item is the player : say "[We]" ; otherwise if the item is a male person and item is not neuter : say "He" ; otherwise if the item is a female person and item is not neuter : say "She" ; otherwise : say "It" ; |__ to say their : let the item be the prior named object ; if the prior naming context is plural : say "their" ; otherwise if the item is the player : say "[our]" ; otherwise if the item is a male person and item is not neuter : say "his" ; otherwise if the item is a female person and item is not neuter : say "her" ; otherwise : say "its" ; |__ to say their : let the item be the prior named object ; if the prior naming context is plural : say "Their" ; otherwise if the item is the player : say "[Our]" ; otherwise if the item is a male person and item is not neuter : say "His" ; otherwise if the item is a female person and item is not neuter : say "Her" ; otherwise : say "Its" ; |__ to say them : let the item be the prior named object ; if the prior naming context is plural : say "them" ; otherwise if the item is the player : say "[us]" ; otherwise if the item is a male person and item is not neuter : say "him" ; otherwise if the item is a female person and item is not neuter : say "her" ; otherwise : say "it" ; |__ to say them : let the item be the prior named object ; if the prior naming context is plural : say "Them" ; otherwise if the item is the player : say "[Us]" ; otherwise if the item is a male person and item is not neuter : say "Him" ; otherwise if the item is a female person and item is not neuter : say "Her" ; otherwise : say "It" ; |__ to say theirs : let the item be the prior named object ; if the prior naming context is plural : say "theirs" ; otherwise if the item is the player : say "[ours]" ; otherwise if the item is a male person and item is not neuter : say "his" ; otherwise if the item is a female person and item is not neuter : say "hers" ; otherwise : say "its" ; |__ to say theirs : let the item be the prior named object ; if the prior naming context is plural : say "Theirs" ; otherwise if the item is the player : say "[Ours]" ; otherwise if the item is a male person and item is not neuter : say "His" ; otherwise if the item is a female person and item is not neuter : say "Hers" ; otherwise : say "Its" ; |__ to say themselves : let the item be the prior named object ; if the prior naming context is plural : say "themselves" ; otherwise if the item is the player : say "[ourselves]" ; otherwise if the item is a male person and item is not neuter : say "himself" ; otherwise if the item is a female person and item is not neuter : say "herself" ; otherwise : say "itself" ; |__ to say themselves : let the item be the prior named object ; if the prior naming context is plural : say "Themselves" ; otherwise if the item is the player : say "[Ourselves]" ; otherwise if the item is a male person and item is not neuter : say "Himself" ; otherwise if the item is a female person and item is not neuter : say "Herself" ; otherwise : say "Itself" ; |__ to say they're : let the item be the prior named object ; if the prior naming context is plural : say "they" ; otherwise if the item is the player : say "[we]" ; otherwise if the item is a male person and item is not neuter : say "he" ; otherwise if the item is a female person and item is not neuter : say "she" ; otherwise : say "that" ; say "['re]" . |__ to say they're : let the item be the prior named object ; if the prior naming context is plural : say "They" ; otherwise if the item is the player : say "[We]" ; otherwise if the item is a male person and item is not neuter : say "He" ; otherwise if the item is a female person and item is not neuter : say "She" ; otherwise : say "That" ; say "['re]" . |__ to say it : say "[regarding nothing]It" . |__ to say there : say "[regarding nothing]There" . |__ to say it : say "[regarding nothing]it" . |__ to say there : say "[regarding nothing]there" . |__ to say it's : say "[regarding nothing]It['re]" . |__ to say there's : say "[regarding nothing]There['re]" . |__ to say it's : say "[regarding nothing]it['re]" . |__ to say there's : say "[regarding nothing]there['re]" . |__ to say possessive : let the item be the prior named object ; if the item is the player : say "[our]" ; otherwise if the prior naming context is plural : say "[the item][apostrophe]" ; otherwise : say "[the item][apostrophe]s" ; |__ to say possessive : let the item be the prior named object ; if the item is the player : say "[Our]" ; otherwise if the prior naming context is plural : say "[The item][apostrophe]" ; otherwise : say "[The item][apostrophe]s" . |__ english language ends here . |__ |__ |__ |__> ==> 
  min 1, max 1000000000

199/10180: <dividing-sentence>:  DW: 00000300
  English:
   <if-start-of-paragraph> <heading>       191/3614: <section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only )> ==>  DS: 00000100
   <extension-end-marker-sentence>       8/2789: <version 6 of the standard rules by graham nelson begins here> ==>  DS: 00000200
  min 2, max 1000000000

191/2382: <heading>:  DS: 00000100
  English:
   volume {...}       6/1191: <volume 3 - the passkey kind , needed only if you want keys to name themselves> ==>  DS: 00000100
   book {...}       0/1185:  ==>  DS: 00000100
   part {...}       14/1185: <part two - the physical world model> ==>  DS: 00000100
   chapter {...}       20/1171: <chapter 9 - external files ( not for z-machine )> ==>  DS: 00000100
   section {...}       151/1151: <section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only )> ==>  DS: 00000100
  min 2, max 1000000000

8/5568: <extension-end-marker-sentence>:  DS: 00000200
  English:
   {...} begin/begins here       4/2784: <version 6 of the standard rules by graham nelson begins here> ==>  DS: 00000200
   {...} end/ends here       4/2780: <the standard rules end here> ==>  DS: 00000200
  min 3, max 1000000000

32/12950: <structural-sentence>: 
  English:
   <if-start-of-source-text> <quoted-text>       0/6475:  ==> 
   <if-start-of-source-text> <quoted-text> {...}       0/6475:  ==> 
   <language-modifying-sentence>       0/6258:  ==>  DS: 00000400
   *       0/5511:  ==>  CS: 00000800
   * <quoted-text-without-subs>       0/6235:  ==>  DS: 00000800
   <if-start-of-paragraph> table {...}       14/6235: <table of final question options final question wording only if victorious topic final response rule final response activity "RESTART" false "restart" immediately restart the vm rule -- "RESTORE a saved game" false "restore" immediately restore saved game rule -- "see some suggestions for AMUSING things to do" true "amusing" -- amusing a victorious player "QUIT" false "quit" immediately quit rule -- "UNDO the last command" false "undo" immediately undo rule -- |__ section 7 - locale descriptions - unindexed |__ table of locale priorities notable-object ( an object ) locale description priority ( a number ) -- -- with blank rows for each thing . |__ to describe locale for ( o - object ) : carry out the printing the locale description activity with o . |__ to set the/-- locale priority of ( o - an object ) to ( n - a number ) : if o is a thing : if n <= 0 , now o is mentioned ; if there is a notable-object of o in the table of locale priorities : choose row with a notable-object of o in the table of locale priorities ; if n <= 0 , blank out the whole row ; otherwise now the locale description priority entry is n ; otherwise : if n is greater than 0 : choose a blank row in the table of locale priorities ; now the notable-object entry is o ; now the locale description priority entry is n ; |__ printing the locale description of something ( documented at act_pld ) is an activity . |__ the locale paragraph count is a number that varies . |__ before printing the locale description ( this is the initialise locale description rule ) : now the locale paragraph count is 0 ; repeat through the table of locale priorities : blank out the whole row . |__ before printing the locale description ( this is the find notable locale objects rule ) : let the domain be the parameter-object ; carry out the choosing notable locale objects activity with the domain ; continue the activity . |__ for printing the locale description ( this is the interesting locale paragraphs rule ) : let the domain be the parameter-object ; sort the table of locale priorities in locale description priority order ; repeat through the table of locale priorities : carry out the printing a locale paragraph about activity with the notable-object entry ; continue the activity . |__ for printing the locale description ( this is the you-can-also-see rule ) : let the domain be the parameter-object ; let the mentionable count be 0 ; repeat with item running through things : now the item is not marked for listing ; repeat through the table of locale priorities : if the locale description priority entry is greater than 0 , now the notable-object entry is marked for listing ; increase the mentionable count by 1 ; if the mentionable count is greater than 0 : repeat with item running through things : if the item is mentioned : now the item is not marked for listing ; begin the listing nondescript items activity with the domain ; if the number of marked for listing things is 0 : abandon the listing nondescript items activity with the domain ; otherwise : if handling the listing nondescript items activity with the domain : if the domain is the location : say "[We] " ( a ) ; otherwise if the domain is a supporter or the domain is an animal : say "On [the domain] [we] " ( b ) ; otherwise : say "In [the domain] [we] " ( c ) ; if the locale paragraph count is greater than 0 : say "[regarding the player][can] also see " ( d ) ; otherwise : say "[regarding the player][can] see " ( e ) ; let the common holder be nothing ; let contents form of list be true ; repeat with list item running through marked for listing things : if the holder of the list item is not the common holder : if the common holder is nothing , now the common holder is the holder of the list item ; otherwise now contents form of list is false ; if the list item is mentioned , now the list item is not marked for listing ; filter list recursion to unmentioned things ; if contents form of list is true and the common holder is not nothing , list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only ; otherwise say "[a list of marked for listing things including contents]" ; if the domain is the location , say " here" ( f ) ; say ".[paragraph break]" ; unfilter list recursion ; end the listing nondescript items activity with the domain ; continue the activity . |__ choosing notable locale objects of something ( documented at act_cnlo ) is an activity . |__ for choosing notable locale objects ( this is the standard notable locale objects rule ) : let the domain be the parameter-object ; let the held item be the first thing held by the domain ; while the held item is a thing : set the locale priority of the held item to 5 ; now the held item is the next thing held after the held item ; continue the activity . |__ printing a locale paragraph about something ( documented at act_plp ) is an activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule ) : if the item encloses the player , set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule ) : if the item is scenery , set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule ) : if the item is undescribed : set the locale priority of the item to 0 ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule ) : if the item is not mentioned , set pronouns from the item ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule ) : if the item is not mentioned : if a paragraph break is pending , say "[conditional paragraph break]" ; carry out the writing a paragraph about activity with the item ; if a paragraph break is pending : increase the locale paragraph count by 1 ; now the item is mentioned ; say "[conditional paragraph break]" ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule ) : if the item is not mentioned : if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not "" : increase the locale paragraph count by 1 ; say "[initial appearance of the item]" ; say "[paragraph break]" ; if a locale-supportable thing is on the item : repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; now the item is mentioned ; continue the activity . |__ for printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule ) : repeat with item running through not handled things on the tabletop which provide the property initial appearance : if the item is not a person and the initial appearance of the item is not "" and the item is not undescribed : now the item is mentioned ; say initial appearance of the item ; say paragraph break ; continue the activity . |__ definition : a thing ( called the item ) is locale-supportable if the item is not scenery and the item is not mentioned and the item is not undescribed . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule ) : if the item is scenery and the item does not enclose the player : if a locale-supportable thing is on the item : set pronouns from the item ; repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; increase the locale paragraph count by 1 ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; continue the activity . |__ for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule ) : if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player : if a locale-supportable thing is on the item : set pronouns from the item ; repeat with possibility running through things on the item : now the possibility is marked for listing ; if the possibility is mentioned : now the possibility is not marked for listing ; increase the locale paragraph count by 1 ; say "On [the item] " ( a ) ; list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only ; say ".[paragraph break]" ; continue the activity . |__ |__ part five - actions |__ section 1 - verbs needed for adaptive text |__ to achieve is a verb . to appreciate is a verb . to arrive is a verb . to care is a verb . to close is a verb . to die is a verb . to discover is a verb . to drop is a verb . to eat is a verb . to feel is a verb . to find is a verb . to get is a verb . to give is a verb . to go is a verb . to happen is a verb . to hear is a verb . to jump is a verb . to lack is a verb . to lead is a verb . to like is a verb . to listen is a verb . to lock is a verb . to look is a verb . to need is a verb . to open is a verb . to pass is a verb . to pick is a verb . to provoke is a verb . to pull is a verb . to push is a verb . to put is a verb . to rub is a verb . to say is a verb . to search is a verb . to see is a verb . to seem is a verb . to set is a verb . to smell is a verb . to sniff is a verb . to squeeze is a verb . to switch is a verb . to take is a verb . to talk is a verb . to taste is a verb . to touch is a verb . to turn is a verb . to wait is a verb . to wave is a verb . to win is a verb . |__ section 2 - standard actions concerning the actor's possessions |__ taking inventory is an action applying to nothing . the taking inventory action translates into i6 as Inv . |__ the specification of the taking inventory action is Taking an inventory of
one's immediate possessions: the things being carried, either directly or in
any containers being carried. When the player performs this action, either
the inventory listing, or else a special message if nothing is being carried
or worn, is printed during the carry out rules: nothing happens at the report
stage. The opposite happens for other people performing the action: nothing
happens during carry out, but a report such as 'Mr X looks through his
possessions.' is produced (provided Mr X is visible). |__ carry out taking inventory ( this is the print empty inventory rule ) : if the first thing held by the player is nothing , say "[We] [are] carrying nothing." ( a ) instead . |__ carry out taking inventory ( this is the print standard inventory rule ) : say "[We] [are] carrying:[line break]" ( a ) ; list the contents of the player , with newlines , indented , including contents , giving inventory information , with extra indentation . |__ report an actor taking inventory ( this is the report other people taking inventory rule ) : if the actor is not the player and the action is not silent : say "[The actor] [look] through [their] possessions." ( a ) ; |__ taking is an action applying to one thing . the taking action translates into i6 as Take . |__ the specification of the taking action is The taking action is the only way
an action in the Standard Rules can cause something to be carried by an actor.
It is very simple in operation (the entire carry out stage consists only of
'now the actor carries the noun') but many checks must be performed before it
can be allowed to happen. |__ check an actor taking ( this is the can't take yourself rule ) : if the actor is the noun : if the actor is the player , say "[We] [are] always self-possessed." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take other people rule ) : if the noun is a person : if the actor is the player , say "I don't suppose [the noun] [would care] for that." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take component parts rule ) : if the noun is part of something ( called the whole ) : if the actor is the player : say "[regarding the noun][Those] [seem] to be a part of [the whole]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take people's possessions rule ) : let the local ceiling be the common ancestor of the actor with the noun ; let the owner be the not-counting-parts holder of the noun ; while the owner is not nothing and the owner is not the local ceiling : if the owner is a person : if the actor is the player : say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a ) ; stop the action ; let the owner be the not-counting-parts holder of the owner ; |__ check an actor taking ( this is the can't take items out of play rule ) : let h be the noun ; while h is not nothing and h is not a room : let h be the not-counting-parts holder of h ; if h is nothing : if the actor is the player : say "[regarding the noun][Those] [aren't] available." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what you're inside rule ) : let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the noun : if the actor is the player : say "[We] [would have] to get
[if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what's already taken rule ) : if the actor is carrying the noun or the actor is wearing the noun : if the actor is the player : say "[We] already [have] [regarding the noun][those]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take scenery rule ) : if the noun is scenery : if the actor is the player : say "[regarding the noun][They're] hardly portable." ( a ) ; stop the action . |__ check an actor taking ( this is the can only take things rule ) : if the noun is not a thing : if the actor is the player : say "[We] [cannot] carry [the noun]." ( a ) ; stop the action . |__ check an actor taking ( this is the can't take what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They're] fixed in place." ( a ) ; stop the action . |__ check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is holding a player's holdall ( called the current working sack ) : let the transferred item be nothing ; repeat with the possible item running through things carried by the actor : if the possible item is not lit and the possible item is not the current working sack , let the transferred item be the possible item ; if the transferred item is not nothing : if the actor is the player : say "(putting [the transferred item] into [the current working sack]
to make room)[command clarification break]" ( a ) ; silently try the actor trying inserting the transferred item into the current working sack ; if the transferred item is not in the current working sack : stop the action . |__ check an actor taking ( this is the can't exceed carrying capacity rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is the player : say "[We]['re] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor taking ( this is the standard taking rule ) : now the actor carries the noun ; if the actor is the player , now the noun is handled . |__ report an actor taking ( this is the standard report taking rule ) : if the action is not silent : if the actor is the player : say "Taken." ( a ) ; otherwise : say "[The actor] [pick] up [the noun]." ( b ) . |__ removing it from is an action applying to two things . the removing it from action translates into i6 as Remove . |__ the specification of the removing it from action is Removing is not really
an action in its own right. Whereas there are many ways to put something down
(on the floor, on top of something, inside something else, giving it to
somebody else, and so on), Inform has only one way to take something: the
taking action. Removing exists only to provide some nicely worded replies
to impossible requests, and in all sensible cases is converted into taking.
Because of this, it's usually a bad idea to write rules about removing:
if you write a rule such as 'Instead of removing the key, ...' then it
won't apply if the player simply types TAKE KEY instead. The safe way to
do this is to write a rule about taking, which covers all possibilities. |__ check an actor removing something from ( this is the can't remove what's not inside rule ) : if the holder of the noun is not the second noun : if the actor is the player : say "But [regarding the noun][they] [aren't] there now." ( a ) ; stop the action . |__ check an actor removing something from ( this is the can't remove from people rule ) : let the owner be the holder of the noun ; if the owner is a person : if the owner is the actor , convert to the taking off action on the noun ; if the actor is the player : say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a ) ; stop the action . |__ check an actor removing something from ( this is the convert remove to take rule ) : convert to the taking action on the noun . |__ the can't take component parts rule is listed before the can't remove what's not inside rule in the check removing it from rules . |__ dropping is an action applying to one thing . the dropping action translates into i6 as Drop . |__ the specification of the dropping action is Dropping is one of five actions
by which an actor can get rid of something carried: the others are inserting
(into a container), putting (onto a supporter), giving (to someone else) and
eating. Dropping means dropping onto the actor's current floor, which is
usually the floor of a room - but might be the inside of a box if the actor
is also inside that box, and so on.The can't drop clothes being worn rule silently tries the taking off action
on any clothing being dropped: unlisting this rule removes both this behaviour
and also the requirement that clothes cannot simply be dropped. |__ check an actor dropping ( this is the can't drop yourself rule ) : if the noun is the actor : if the actor is the player : say "[We] [lack] the dexterity." ( a ) ; stop the action . |__ check an actor dropping something which is part of the actor ( this is the can't drop body parts rule ) : if the actor is the player : say "[We] [can't drop] part of [ourselves]." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop what's already dropped rule ) : if the noun is in the holder of the actor : if the actor is the player : say "[The noun] [are] already here." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; if the actor is the player : say "[We] [haven't] got [regarding the noun][those]." ( a ) ; stop the action . |__ check an actor dropping ( this is the can't drop clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule ) : let the receptacle be the holder of the actor ; if the receptacle is a room , continue the action ; if the receptacle provides the property carrying capacity : if the receptacle is a supporter : if the number of things on the receptacle is at least the carrying capacity of the receptacle : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room on [the receptacle]." ( a ) ; stop the action ; otherwise if the receptacle is a container : if the number of things in the receptacle is at least the carrying capacity of the receptacle : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the receptacle]." ( b ) ; stop the action ; |__ carry out an actor dropping ( this is the standard dropping rule ) : now the noun is in the holder of the actor . |__ report an actor dropping ( this is the standard report dropping rule ) : if the action is not silent : if the actor is the player : say "Dropped." ( a ) ; otherwise : say "[The actor] [put] down [the noun]." ( b ) ; |__ putting it on is an action applying to two things . the putting it on action translates into i6 as PutOn . |__ the specification of the putting it on action is By this action, an actor puts
something he is holding on top of a supporter: for instance, putting an apple
on a table. |__ check an actor putting something on ( this is the convert put to drop where possible rule ) : if the second noun is down or the actor is on the second noun , convert to the dropping action on the noun . |__ check an actor putting something on ( this is the can't put what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; carry out the implicitly taking activity with the noun ; if the actor is carrying the noun , continue the action ; stop the action . |__ check an actor putting something on ( this is the can't put something on itself rule ) : let the noun-cpc be the component parts core of the noun ; let the second-cpc be the component parts core of the second noun ; let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc ; if the transfer ceiling is the noun-cpc : if the actor is the player : say "[We] [can't put] something on top of itself." ( a ) ; stop the action . |__ check an actor putting something on ( this is the can't put onto what's not a supporter rule ) : if the second noun is not a supporter : if the actor is the player : say "Putting things on [the second noun] [would achieve] nothing." ( a ) ; stop the action . |__ check an actor putting something on ( this is the can't put clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [regarding the noun][them] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action . |__ check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule ) : if the second noun provides the property carrying capacity : if the number of things on the second noun is at least the carrying capacity of the second noun : if the actor is the player : say "[There] [are] no more room on [the second noun]." ( a ) ; stop the action . |__ carry out an actor putting something on ( this is the standard putting rule ) : now the noun is on the second noun . |__ report an actor putting something on ( this is the concise report putting rule ) : if the action is not silent : if the actor is the player and the i6 parser is running multiple actions : say "Done." ( a ) ; stop the action ; continue the action . |__ report an actor putting something on ( this is the standard report putting rule ) : if the action is not silent : say "[The actor] [put] [the noun] on [the second noun]." ( a ) . |__ inserting it into is an action applying to two things . the inserting it into action translates into i6 as Insert . |__ the specification of the inserting it into action is By this action, an actor puts
something he is holding into a container: for instance, putting a coin into a
collection box. |__ check an actor inserting something into ( this is the convert insert to drop where possible rule ) : if the second noun is down or the actor is in the second noun , convert to the dropping action on the noun . |__ check an actor inserting something into ( this is the can't insert what's not held rule ) : if the actor is carrying the noun , continue the action ; if the actor is wearing the noun , continue the action ; carry out the implicitly taking activity with the noun ; if the actor is carrying the noun , continue the action ; stop the action . |__ check an actor inserting something into ( this is the can't insert something into itself rule ) : let the noun-cpc be the component parts core of the noun ; let the second-cpc be the component parts core of the second noun ; let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc ; if the transfer ceiling is the noun-cpc : if the actor is the player : say "[We] [can't put] something inside itself." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert into closed containers rule ) : if the second noun is a closed container : if the actor is the player : say "[The second noun] [are] closed." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert into what's not a container rule ) : if the second noun is not a container : if the actor is the player : say "[regarding the second noun][Those] [can't contain] things." ( a ) ; stop the action . |__ check an actor inserting something into ( this is the can't insert clothes being worn rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [regarding the noun][them] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule ) : if the second noun provides the property carrying capacity : if the number of things in the second noun is at least the carrying capacity of the second noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the second noun]." ( a ) ; stop the action . |__ carry out an actor inserting something into ( this is the standard inserting rule ) : now the noun is in the second noun . |__ report an actor inserting something into ( this is the concise report inserting rule ) : if the action is not silent : if the actor is the player and the i6 parser is running multiple actions : say "Done." ( a ) ; stop the action ; continue the action . |__ report an actor inserting something into ( this is the standard report inserting rule ) : if the action is not silent : say "[The actor] [put] [the noun] into [the second noun]." ( a ) . |__ eating is an action applying to one thing . the eating action translates into i6 as Eat . |__ the specification of the eating action is Eating is the only one of the
built-in actions which can, in effect, destroy something: the carry out
rule removes what's being eaten from play, and nothing in the Standard
Rules can then get at it again.Note that, uncontroversially, one can only eat things with the 'edible'
either/or property. Until 2011, the action also required that the foodstuff
had to be carried by the eater, which meant that a player standing next
to a bush with berries who typed EAT BERRIES would force a '(first taking
the berries)' action. This is no longer true. Taking is now only forced if
the foodstuff is portable. |__ check an actor eating ( this is the can't eat unless edible rule ) : if the noun is not a thing or the noun is not edible : if the actor is the player : say "[regarding the noun][They're] plainly inedible." ( a ) ; stop the action . |__ check an actor eating ( this is the can't eat clothing without removing it first rule ) : if the actor is wearing the noun : if the actor is the player : say "(first taking [the noun] off)[command clarification break]" ( a ) ; try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action . |__ check an actor eating ( this is the can't eat other people's food rule ) : if the noun is enclosed by a person ( called the owner ) who is not the actor : if the actor is the player : say "[The owner] [might not appreciate] that." ( a ) ; stop the action . |__ check an actor eating ( this is the can't eat portable food without carrying it rule ) : if the noun is portable and the actor is not carrying the noun : carry out the implicitly taking activity with the noun ; if the actor is not carrying the noun , stop the action . |__ carry out an actor eating ( this is the standard eating rule ) : now the noun is nowhere . |__ report an actor eating ( this is the standard report eating rule ) : if the action is not silent : if the actor is the player : say "[We] [eat] [the noun]. Not bad." ( a ) ; otherwise : say "[The actor] [eat] [the noun]." ( b ) . |__ section 3 - standard actions which move the actor |__ going is an action applying to one visible thing . the going action translates into i6 as Go . |__ the specification of the going action is This is the action which allows people
to move from one room to another, using whatever map connections and doors are
to hand. The Standard Rules are written so that the noun can be either a
direction or a door in the location of the actor: while the player's commands
only lead to going actions with directions as nouns, going actions can also
happen as a result of entering actions, and then the noun can indeed be
a door. |__ the going action has a room called the room gone from ( matched as from ) . the going action has an object called the room gone to ( matched as to ) . the going action has an object called the door gone through ( matched as through ) . the going action has an object called the vehicle gone by ( matched as by ) . the going action has an object called the thing gone with ( matched as with ) . |__ rule for setting action variables for going ( this is the standard set going variables rule ) : now the thing gone with is the item-pushed-between-rooms ; now the room gone from is the location of the actor ; if the actor is in an enterable vehicle ( called the carriage ) , now the vehicle gone by is the carriage ; let the target be nothing ; if the noun is a direction : let direction d be the noun ; let the target be the room-or-door direction d from the room gone from ; otherwise : if the noun is a door , let the target be the noun ; if the target is a door : now the door gone through is the target ; now the target is the other side of the target from the room gone from ; now the room gone to is the target . |__ check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule ) : if the actor is the player : say "(first getting off [the chaise])[command clarification break]" ( a ) ; silently try the actor exiting . |__ check an actor going ( this is the can't travel in what's not a vehicle rule ) : let nonvehicle be the holder of the actor ; if nonvehicle is the room gone from , continue the action ; if nonvehicle is the vehicle gone by , continue the action ; if the actor is the player : if nonvehicle is a supporter : say "[We] [would have] to get off [the nonvehicle] first." ( a ) ; otherwise : say "[We] [would have] to get out of [the nonvehicle] first." ( b ) ; stop the action . |__ check an actor going ( this is the can't go through undescribed doors rule ) : if the door gone through is not nothing and the door gone through is undescribed : if the actor is the player : say "[We] [can't go] that way." ( a ) ; stop the action . |__ check an actor going ( this is the can't go through closed doors rule ) : if the door gone through is not nothing and the door gone through is closed : if the actor is the player : say "(first opening [the door gone through])[command clarification break]" ( a ) ; silently try the actor opening the door gone through ; if the door gone through is open , continue the action ; stop the action . |__ check an actor going ( this is the determine map connection rule ) : let the target be nothing ; if the noun is a direction : let direction d be the noun ; let the target be the room-or-door direction d from the room gone from ; otherwise : if the noun is a door , let the target be the noun ; if the target is a door : now the target is the other side of the target from the room gone from ; now the room gone to is the target . |__ check an actor going ( this is the can't go that way rule ) : if the room gone to is nothing : if the door gone through is nothing : if the actor is the player : say "[We] [can't go] that way." ( a ) ; stop the action ; if the actor is the player : say "[We] [can't], since [the door gone through] [lead] nowhere." ( b ) ; stop the action . |__ carry out an actor going ( this is the move player and vehicle rule ) : if the vehicle gone by is nothing , surreptitiously move the actor to the room gone to during going ; otherwise surreptitiously move the vehicle gone by to the room gone to during going ; if the location is not the location of the player : now the location is the location of the player . |__ carry out an actor going ( this is the move floating objects rule ) : if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with : update backdrop positions . |__ carry out an actor going ( this is the check light in new location rule ) : if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with : surreptitiously reckon darkness . |__ report an actor going ( this is the describe room gone into rule ) : if the player is the actor : if the action is not silent : produce a room description with going spacing conventions ; otherwise : if the noun is a direction : if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with : if the room gone from is the room gone to : continue the action ; otherwise : if the noun is up : say "[The actor] [go] up" ( a ) ; otherwise if the noun is down : say "[The actor] [go] down" ( b ) ; otherwise : say "[The actor] [go] [noun]" ( c ) ; otherwise : let the back way be the opposite of the noun ; if the location is the room gone to : let the room back the other way be the room back way from the location ; let the room normally this way be the room noun from the room gone from ; if the room back the other way is the room gone from or the room back the other way is the room normally this way : if the back way is up : say "[The actor] [arrive] from above" ( d ) ; otherwise if the back way is down : say "[The actor] [arrive] from below" ( e ) ; otherwise : say "[The actor] [arrive] from [the back way]" ( f ) ; otherwise : say "[The actor] [arrive]" ( g ) ; otherwise : if the back way is up : say "[The actor] [arrive] at [the room gone to] from above" ( h ) ; otherwise if the back way is down : say "[The actor] [arrive] at [the room gone to] from below" ( i ) ; otherwise : say "[The actor] [arrive] at [the room gone to] from [the back way]" ( j ) ; otherwise if the location is the room gone from : say "[The actor] [go] through [the noun]" ( k ) ; otherwise : say "[The actor] [arrive] from [the noun]" ( l ) ; if the vehicle gone by is not nothing : say " " ; if the vehicle gone by is a supporter : say "on [the vehicle gone by]" ( m ) ; otherwise : say "in [the vehicle gone by]" ( n ) ; if the thing gone with is not nothing : if the player is within the thing gone with : say ", pushing [the thing gone with] in front, and [us] along too" ( o ) ; otherwise if the player is within the vehicle gone by : say ", pushing [the thing gone with] in front" ( p ) ; otherwise if the location is the room gone from : say ", pushing [the thing gone with] away" ( q ) ; otherwise : say ", pushing [the thing gone with] in" ( r ) ; if the player is within the vehicle gone by and the player is not within the thing gone with : say ", taking [us] along" ( s ) ; say "." ; try looking ; continue the action ; say "." ; |__ entering is an action applying to one thing . the entering action translates into i6 as Enter . |__ the specification of the entering action is Whereas the going action allows
people to move from one location to another in the model world, the entering
action is for movement inside a location: for instance, climbing into a cage
or sitting on a couch. (Entering is not allowed to change location, so any
attempt to enter a door is converted into a going action.) What makes
entering trickier than it looks is that the player may try to enter an
object which is itself inside, or part of, something else, which might in
turn be... and so on. To preserve realism, the implicitly pass through other
barriers rule automatically generates entering and exiting actions needed
to pass between anything which might be in the way: for instance, in a
room with two open cages, an actor in cage A who tries entering cage B first
has to perform an exiting action. |__ rule for supplying a missing noun while entering ( this is the find what to enter rule ) : if something enterable ( called the box ) is in the location , now the noun is the box ; otherwise continue the activity . |__ the find what to enter rule is listed last in the for supplying a missing noun rulebook . |__ check an actor entering ( this is the convert enter door into go rule ) : if the noun is a door , convert to the going action on the noun . |__ check an actor entering ( this is the convert enter compass direction into go rule ) : if the noun is a direction , convert to the going action on the noun . |__ check an actor entering ( this is the can't enter what's already entered rule ) : if the actor is the noun , make no decision ; let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the noun : if the player is the actor : if the noun is a supporter : say "But [we]['re] already on [the noun]." ( a ) ; otherwise : say "But [we]['re] already in [the noun]." ( b ) ; stop the action . |__ check an actor entering ( this is the can't enter what's not enterable rule ) : if the noun is not enterable : if the player is the actor : if the player's command includes "stand" : say "[regarding the noun][They're] not something [we] [can] stand on." ( a ) ; otherwise if the player's command includes "sit" : say "[regarding the noun][They're] not something [we] [can] sit down on." ( b ) ; otherwise if the player's command includes "lie" : say "[regarding the noun][They're] not something [we] [can] lie down on." ( c ) ; otherwise : say "[regarding the noun][They're] not something [we] [can] enter." ( d ) ; stop the action . |__ check an actor entering ( this is the can't enter closed containers rule ) : if the noun is a closed container : if the player is the actor : say "[We] [can't get] into the closed [noun]." ( a ) ; stop the action . |__ check an actor entering ( this is the can't enter if this exceeds carrying capacity rule ) : if the noun provides the property carrying capacity : if the noun is a supporter : if the number of things on the noun is at least the carrying capacity of the noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room on [the noun]." ( a ) ; stop the action ; otherwise if the noun is a container : if the number of things in the noun is at least the carrying capacity of the noun : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no more room in [the noun]." ( b ) ; stop the action ; |__ check an actor entering ( this is the can't enter something carried rule ) : let the local ceiling be the common ancestor of the actor with the noun ; if the local ceiling is the actor : if the player is the actor : say "[We] [can] only get into something free-standing." ( a ) ; stop the action . |__ check an actor entering ( this is the implicitly pass through other barriers rule ) : if the holder of the actor is the holder of the noun , continue the action ; let the local ceiling be the common ancestor of the actor with the noun ; while the holder of the actor is not the local ceiling : let the current home be the holder of the actor ; if the player is the actor : if the current home is a supporter or the current home is an animal : say "(getting off [the current home])[command clarification break]" ( a ) ; otherwise : say "(getting out of [the current home])[command clarification break]" ( b ) ; silently try the actor trying exiting ; if the holder of the actor is the current home , stop the action ; if the holder of the actor is the noun , stop the action ; if the holder of the actor is the holder of the noun , continue the action ; let the target be the holder of the noun ; if the noun is part of the target , let the target be the holder of the target ; while the target is a thing : if the holder of the target is the local ceiling : if the player is the actor : if the target is a supporter : say "(getting onto [the target])[command clarification break]" ( c ) ; otherwise if the target is a container : say "(getting into [the target])[command clarification break]" ( d ) ; otherwise : say "(entering [the target])[command clarification break]" ( e ) ; silently try the actor trying entering the target ; if the holder of the actor is not the target , stop the action ; convert to the entering action on the noun ; continue the action ; let the target be the holder of the target ; |__ carry out an actor entering ( this is the standard entering rule ) : surreptitiously move the actor to the noun . |__ report an actor entering ( this is the standard report entering rule ) : if the actor is the player : if the action is not silent : if the noun is a supporter : say "[We] [get] onto [the noun]." ( a ) ; otherwise : say "[We] [get] into [the noun]." ( b ) ; otherwise if the noun is a container : say "[The actor] [get] into [the noun]." ( c ) ; otherwise : say "[The actor] [get] onto [the noun]." ( d ) ; continue the action . |__ report an actor entering ( this is the describe contents entered into rule ) : if the actor is the player , describe locale for the noun . |__ exiting is an action applying to nothing . the exiting action translates into i6 as Exit . the exiting action has an object called the container exited from ( matched as from ) . |__ the specification of the exiting action is Whereas the going action allows
people to move from one location to another in the model world, and the
entering action is for movement deeper inside the objects in a location,
the exiting action is for movement back out towards the main floor area.
Climbing out of a cupboard, for instance, is an exiting action. Exiting
when already in the main floor area of a room with a map connection to
the outside is converted to a going action. Finally, note that whereas
entering works for either containers or supporters, exiting is purely for
getting oneself out of containers: if the actor is on top of a supporter
instead, an exiting action is converted to the getting off action. |__ setting action variables for exiting : now the container exited from is the holder of the actor . |__ check an actor exiting ( this is the convert exit into go out rule ) : let the local room be the location of the actor ; if the container exited from is the local room : if the room-or-door outside from the local room is not nothing , convert to the going action on the outside ; |__ check an actor exiting ( this is the can't exit when not inside anything rule ) : let the local room be the location of the actor ; if the container exited from is the local room : if the player is the actor : say "But [we] [aren't] in anything at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor exiting ( this is the can't exit closed containers rule ) : if the actor is in a closed container ( called the cage ) : if the player is the actor : say "You can't get out of the closed [cage]." ( a ) ; stop the action . |__ check an actor exiting ( this is the convert exit into get off rule ) : if the actor is on a supporter ( called the platform ) , convert to the getting off action on the platform . |__ carry out an actor exiting ( this is the standard exiting rule ) : let the former exterior be the not-counting-parts holder of the container exited from ; surreptitiously move the actor to the former exterior . |__ report an actor exiting ( this is the standard report exiting rule ) : if the action is not silent : if the actor is the player : if the container exited from is a supporter : say "[We] [get] off [the container exited from]." ( a ) ; otherwise : say "[We] [get] out of [the container exited from]." ( b ) ; otherwise : say "[The actor] [get] out of [the container exited from]." ( c ) ; continue the action . |__ report an actor exiting ( this is the describe room emerged into rule ) : if the actor is the player : surreptitiously reckon darkness ; produce a room description with going spacing conventions . |__ getting off is an action applying to one thing . the getting off action translates into i6 as GetOff . |__ the specification of the getting off action is The getting off action is for
actors who are currently on top of a supporter: perhaps standing on a platform,
but maybe only sitting on a chair or even lying down in bed. Unlike the similar
exiting action, getting off takes a noun: the platform, chair, bed or what
have you. |__ check an actor getting off ( this is the can't get off things rule ) : if the actor is on the noun , continue the action ; if the actor is carried by the noun , continue the action ; if the actor is the player : say "But [we] [aren't] on [the noun] at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ carry out an actor getting off ( this is the standard getting off rule ) : let the former exterior be the not-counting-parts holder of the noun ; surreptitiously move the actor to the former exterior . |__ report an actor getting off ( this is the standard report getting off rule ) : if the action is not silent : say "[The actor] [get] off [the noun]." ( a ) ; continue the action . |__ report an actor getting off ( this is the describe room stood up into rule ) : if the actor is the player , produce a room description with going spacing conventions . |__ section 4 - standard actions concerning the actor's vision |__ looking is an action applying to nothing . the looking action translates into i6 as Look . |__ the specification of the looking action is The looking action describes the
player's current room and any visible items, but is made more complicated
by the problem of visibility. Inform calculates this by dividing the room
into visibility levels. For an actor on the floor of a room, there is only
one such level: the room itself. But an actor sitting on a chair inside
a packing case which is itself on a gantry would have four visibility levels:
chair, case, gantry, room. The looking rules use a special phrase, 'the
visibility-holder of X', to go up from one level to the next: thus the
visibility-holder of the case is the gantry.The 'visibility level count' is the number of levels which the player can
actually see, and the 'visibility ceiling' is the uppermost visible level.
For a player standing on the floor of a lighted room, this will be a count
of 1 with the ceiling set to the room. But a player sitting on a chair in
a closed opaque packing case would have visibility level count 2, and
visibility ceiling equal to the case. Moreover, light has to be available
in order to see anything at all: if the player is in darkness, the level
count is 0 and the ceiling is nothing.Finally, note that several actions other than looking also produce room
descriptions in some cases. The most familiar is going, but exiting a
container or getting off a supporter will also generate a room description.
(The phrase used by the relevant rules is 'produce a room description with
going spacing conventions' and carry out or report rules for newly written
actions are welcome to use this too if they would like to. The spacing
conventions affect paragraph division, and note that the main description
paragraph may be omitted for a place not newly visited, depending on the
VERBOSE settings.) Room descriptions like this are produced by running the
check, carry out and report rules for looking, but are not subject to
before, instead or after rules: so they do not count as a new action. The
looking variable 'room-describing action' holds the action name of the
reason a room description is currently being made: if the player typed
LOOK, this will indeed be set to the looking action, but if we're
describing a room just reached by GO EAST, say, it will be set to the going
action. This can be used to customise carry out looking rules so that
different forms of description are used on going to a room as compared with
looking around while already there. |__ the looking action has an action name called the room-describing action . the looking action has a truth state called abbreviated form allowed . the looking action has a number called the visibility level count . the looking action has an object called the visibility ceiling . |__ setting action variables for looking ( this is the determine visibility ceiling rule ) : if the actor is the player , calculate visibility ceiling at low level ; now the visibility level count is the visibility ceiling count calculated ; now the visibility ceiling is the visibility ceiling calculated ; now the room-describing action is the looking action . |__ carry out looking ( this is the declare everything unmentioned rule ) : repeat with item running through things : now the item is not mentioned . |__ carry out looking ( this is the room description heading rule ) : say bold type ; if the visibility level count is 0 : begin the printing the name of a dark room activity ; if handling the printing the name of a dark room activity : say "Darkness" ( a ) ; end the printing the name of a dark room activity ; otherwise if the visibility ceiling is the location : say "[visibility ceiling]" ; otherwise : say "[The visibility ceiling]" ; say roman type ; let intermediate level be the visibility-holder of the actor ; repeat with intermediate level count running from 2 to the visibility level count : if the intermediate level is a supporter or the intermediate level is an animal : say " (on [the intermediate level])" ( b ) ; otherwise : say " (in [the intermediate level])" ( c ) ; let the intermediate level be the visibility-holder of the intermediate level ; say line break ; say run paragraph on with special look spacing . |__ carry out looking ( this is the room description body text rule ) : if the visibility level count is 0 : if set to abbreviated room descriptions , continue the action ; if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true , continue the action ; begin the printing the description of a dark room activity ; if handling the printing the description of a dark room activity : now the prior named object is nothing ; say "[It] [are] pitch dark, and [we] [can't see] a thing." ( a ) ; end the printing the description of a dark room activity ; otherwise if the visibility ceiling is the location : if set to abbreviated room descriptions , continue the action ; if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited , continue the action ; print the location's description ; |__ carry out looking ( this is the room description paragraphs about objects rule ) : if the visibility level count is greater than 0 : let the intermediate position be the actor ; let the ip count be the visibility level count ; while the ip count is greater than 0 : now the intermediate position is marked for listing ; let the intermediate position be the visibility-holder of the intermediate position ; decrease the ip count by 1 ; let the top-down ip count be the visibility level count ; while the top-down ip count is greater than 0 : let the intermediate position be the actor ; let the ip count be 0 ; while the ip count is less than the top-down ip count : let the intermediate position be the visibility-holder of the intermediate position ; increase the ip count by 1 ; describe locale for the intermediate position ; decrease the top-down ip count by 1 ; continue the action ; |__ carry out looking ( this is the check new arrival rule ) : if in darkness : now the darkness witnessed is true ; otherwise : if the location is a room , now the location is visited ; |__ report an actor looking ( this is the other people looking rule ) : if the actor is not the player : say "[The actor] [look] around." ( a ) . |__ examining is an action applying to one visible thing and requiring light . the examining action translates into i6 as Examine . |__ the specification of the examining action is The act of looking closely at
something. Note that the noun could be either a direction or a thing, which
is why the Standard Rules include the 'examine directions rule' to deal with
directions: it simply says 'You see nothing unexpected in that direction.'
and stops the action. (If you would like to handle directions differently,
list another rule instead of this one in the carry out examining rules.)Some things have no description property, or rather, have only a blank text
as one. It's possible that something interesting may be said anyway (see
the rules for directions, containers, supporters and devices), but if not,
we give up with a bland response. This is done by the examine undescribed
things rule. |__ the examining action has a truth state called examine text printed . |__ carry out examining ( this is the standard examining rule ) : if the noun provides the property description and the description of the noun is not "" : say "[description of the noun][line break]" ; now examine text printed is true . |__ carry out examining ( this is the examine directions rule ) : if the noun is a direction : say "[We] [see] nothing unexpected in that direction." ( a ) ; now examine text printed is true . |__ carry out examining ( this is the examine containers rule ) : if the noun is a container : if the noun is open or the noun is transparent : if something described which is not scenery is in the noun and something which is not the player is in the noun : say "In [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; now examine text printed is true ; otherwise if examine text printed is false : if the player is in the noun : make no decision ; say "[The noun] [are] empty." ( b ) ; now examine text printed is true ; |__ carry out examining ( this is the examine supporters rule ) : if the noun is a supporter : if something described which is not scenery is on the noun and something which is not the player is on the noun : say "On [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information ; say "." ; now examine text printed is true . |__ carry out examining ( this is the examine devices rule ) : if the noun is a device : say "[The noun] [are] [if story tense is present tense]currently [end if]switched
[if the noun is switched on]on[otherwise]off[end if]." ( a ) ; now examine text printed is true . |__ carry out examining ( this is the examine undescribed things rule ) : if examine text printed is false : say "[We] [see] nothing special about [the noun]." ( a ) . |__ report an actor examining ( this is the report other people examining rule ) : if the actor is not the player : say "[The actor] [look] closely at [the noun]." ( a ) . |__ looking under is an action applying to one visible thing and requiring light . the looking under action translates into i6 as LookUnder . |__ the specification of the looking under action is The standard Inform world
model does not have a concept of things being under other things, so this
action is only minimally provided by the Standard Rules, but it exists here
for traditional reasons (and because, after all, LOOK UNDER TABLE is the
sort of command which ought to be recognised even if it does nothing useful).
The action ordinarily either tells the player he finds nothing of interest,
or reports that somebody else has looked under something.The usual way to make this action do something useful is to write a rule
like 'Instead of looking under the cabinet for the first time: now the
player has the silver key; say ...' and so on. |__ carry out an actor looking under ( this is the standard looking under rule ) : if the player is the actor : say "[We] [find] nothing of interest." ( a ) ; stop the action . |__ report an actor looking under ( this is the report other people looking under rule ) : if the action is not silent : if the actor is not the player : say "[The actor] [look] under [the noun]." ( a ) . |__ searching is an action applying to one thing and requiring light . the searching action translates into i6 as Search . |__ the specification of the searching action is Searching looks at the contents
of an open or transparent container, or at the items on top of a supporter.
These are often mentioned in room descriptions already, and then the action
is unnecessary, but that wouldn't be true for something like a kitchen
cupboard which is scenery - mentioned in passing in a room description, but
not made a fuss of. Searching such a cupboard would then, by listing its
contents, give the player more information than the ordinary room description
shows.The usual check rules restrict searching to containers and supporters: so
the Standard Rules do not allow the searching of people, for instance. But
it is easy to add instead rules ('Instead of searching Dr Watson: ...') or
even a new carry out rule ('Check searching someone (called the suspect): ...')
to extend the way searching normally works. |__ check an actor searching ( this is the can't search unless container or supporter rule ) : if the noun is not a container and the noun is not a supporter : if the player is the actor : say "[We] [find] nothing of interest." ( a ) ; stop the action . |__ check an actor searching ( this is the can't search closed opaque containers rule ) : if the noun is a closed opaque container : if the player is the actor : say "[We] [can't see] inside, since [the noun] [are] closed." ( a ) ; stop the action . |__ report searching a container ( this is the standard search containers rule ) : if the noun contains a described thing which is not scenery : say "In [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; otherwise : say "[The noun] [are] empty." ( b ) . |__ report searching a supporter ( this is the standard search supporters rule ) : if the noun supports a described thing which is not scenery : say "On [the noun] " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are ; say "." ; otherwise : now the prior named object is nothing ; say "[There] [are] nothing on [the noun]." ( b ) . |__ report an actor searching ( this is the report other people searching rule ) : if the actor is not the player : say "[The actor] [search] [the noun]." ( a ) . |__ consulting it about is an action applying to one thing and one topic . the consulting it about action translates into i6 as Consult . |__ the specification of the consulting it about action is Consulting is a very
flexible and potentially powerful action, but only because it leaves almost
all of the work to the author to deal with directly. The idea is for it to
respond to commands such as LOOK UP HENRY FITZROY IN HISTORY BOOK, where
the topic would be the snippet of command HENRY FITZROY and the thing would
be the book.The Standard Rules simply parry such requests by saying that the player finds
nothing of interest. All interesting responses must be provided by the author,
using rules like 'Instead of consulting the history book about...' |__ report an actor consulting something about ( this is the block consulting rule ) : if the actor is the player : say "[We] [discover] nothing of interest in [the noun]." ( a ) ; otherwise : say "[The actor] [look] at [the noun]." ( b ) ; |__ section 5 - standard actions which change the state of things |__ locking it with is an action applying to one thing and one carried thing . the locking it with action translates into i6 as Lock . |__ the specification of the locking it with action is Locking is the act of
using an object such as a key to ensure that something such as a door or
container cannot be opened unless first unlocked. (Only closed things can be
locked.)Locking can be performed on any kind of thing which provides the either/or
properties lockable, locked, openable and open. The 'can't lock without a lock
rule' tests to see if the noun both provides the lockable property, and if
it is in fact lockable: it is then assumed that the other properties can
safely be checked. In the Standard Rules, the container and door kinds both
satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
A briefcase can be open. A briefcase can be lockable. A briefcase can be
locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't lock without the correct
key rule'. To satisfy this, the actor must be directly holding the second
noun, and it must be the current value of the 'matching key' property for
the noun. (This property is seldom referred to directly because it is
automatically set by assertions like 'The silver key unlocks the wicket
gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
level: they can be much enhanced using the extension Locksmith by Emily
Short, which is included with all distributions of Inform. |__ check an actor locking something with ( this is the can't lock without a lock rule ) : if the noun provides the property lockable and the noun is lockable : continue the action ; if the actor is the player : say "[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock what's already locked rule ) : if the noun is locked : if the actor is the player : say "[regarding the noun][They're] locked at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock what's open rule ) : if the noun is open : if the actor is the player : say "First [we] [would have] to close [the noun]." ( a ) ; stop the action . |__ check an actor locking something with ( this is the can't lock without the correct key rule ) : if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun : if the actor is the player : say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a ) ; stop the action . |__ carry out an actor locking something with ( this is the standard locking rule ) : now the noun is locked . |__ report an actor locking something with ( this is the standard report locking rule ) : if the actor is the player : if the action is not silent : say "[We] [lock] [the noun]." ( a ) ; otherwise : if the actor is visible : say "[The actor] [lock] [the noun]." ( b ) ; |__ unlocking it with is an action applying to one thing and one carried thing . the unlocking it with action translates into i6 as Unlock . |__ the specification of the unlocking it with action is Unlocking undoes the
effect of locking, and renders the noun openable again provided that the
actor is carrying the right key (which must be the second noun).Unlocking can be performed on any kind of thing which provides the either/or
properties lockable, locked, openable and open. The 'can't unlock without a lock
rule' tests to see if the noun both provides the lockable property, and if
it is in fact lockable: it is then assumed that the other properties can
safely be checked. In the Standard Rules, the container and door kinds both
satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
A briefcase can be open. A briefcase can be lockable. A briefcase can be
locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't unlock without the correct
key rule'. To satisfy this, the actor must be directly holding the second
noun, and it must be the current value of the 'matching key' property for
the noun. (This property is seldom referred to directly because it is
automatically set by assertions like 'The silver key unlocks the wicket
gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
level: they can be much enhanced using the extension Locksmith by Emily
Short, which is included with all distributions of Inform. |__ check an actor unlocking something with ( this is the can't unlock without a lock rule ) : if the noun provides the property lockable and the noun is lockable : continue the action ; if the actor is the player : say "[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a ) ; stop the action . |__ check an actor unlocking something with ( this is the can't unlock what's already unlocked rule ) : if the noun is not locked : if the actor is the player : say "[regarding the noun][They're] unlocked at the [if story tense is present
tense]moment[otherwise]time[end if]." ( a ) ; stop the action . |__ check an actor unlocking something with ( this is the can't unlock without the correct key rule ) : if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun : if the actor is the player : say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a ) ; stop the action . |__ carry out an actor unlocking something with ( this is the standard unlocking rule ) : now the noun is not locked . |__ report an actor unlocking something with ( this is the standard report unlocking rule ) : if the actor is the player : if the action is not silent : say "[We] [unlock] [the noun]." ( a ) ; otherwise : if the actor is visible : say "[The actor] [unlock] [the noun]." ( b ) ; |__ switching on is an action applying to one thing . the switching on action translates into i6 as SwitchOn . |__ the specification of the switching on action is The switching on and switching
off actions are for the simplest kind of machinery operation: they are for
objects representing machines (or more likely parts of machines), which are
considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
they could work just as well with any kind which can be 'switched on' or
'switched off'. |__ check an actor switching on ( this is the can't switch on unless switchable rule ) : if the noun provides the property switched on , continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a ) ; stop the action . |__ check an actor switching on ( this is the can't switch on what's already on rule ) : if the noun is switched on : if the actor is the player : say "[regarding the noun][They're] already on." ( a ) ; stop the action . |__ carry out an actor switching on ( this is the standard switching on rule ) : now the noun is switched on . |__ report an actor switching on ( this is the standard report switching on rule ) : if the action is not silent : say "[The actor] [switch] [the noun] on." ( a ) . |__ switching off is an action applying to one thing . the switching off action translates into i6 as SwitchOff . |__ the specification of the switching off action is The switching off and switching
on actions are for the simplest kind of machinery operation: they are for
objects representing machines (or more likely parts of machines), which are
considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
they could work just as well with any kind which can be 'switched on' or
'switched off'. |__ check an actor switching off ( this is the can't switch off unless switchable rule ) : if the noun provides the property switched on , continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a ) ; stop the action . |__ check an actor switching off ( this is the can't switch off what's already off rule ) : if the noun is switched off : if the actor is the player : say "[regarding the noun][They're] already off." ( a ) ; stop the action . |__ carry out an actor switching off ( this is the standard switching off rule ) : now the noun is switched off . |__ report an actor switching off ( this is the standard report switching off rule ) : if the action is not silent : say "[The actor] [switch] [the noun] off." ( a ) . |__ opening is an action applying to one thing . the opening action translates into i6 as Open . |__ the specification of the opening action is Opening makes something no longer
a physical barrier. The action can be performed on any kind of thing which
provides the either/or properties openable and open. The 'can't open unless
openable rule' tests to see if the noun both can be and actually is openable.
(It is assumed that anything which can be openable can also be open.)
In the Standard Rules, the container and door kinds both satisfy these
requirements.In the event that the thing to be opened is also lockable, we are forbidden
to open it when it is locked. Both containers and doors can be lockable,
but the opening and closing actions would also work fine with kinds which
cannot be.We can create a new kind on which opening and closing will work thus:
'A case file is a kind of thing. A case file can be openable.
A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
When a container is closed, that means people outside cannot reach in,
and vice versa; when a door is closed, people cannot use the 'going' action
to pass through it. If we were to create a new kind such as 'case file',
we would also need to write rules to make the open and closed properties
interesting for this kind. |__ check an actor opening ( this is the can't open unless openable rule ) : if the noun provides the property openable and the noun is openable : continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] open." ( a ) ; stop the action . |__ check an actor opening ( this is the can't open what's locked rule ) : if the noun provides the property lockable and the noun is locked : if the actor is the player : say "[regarding the noun][They] [seem] to be locked." ( a ) ; stop the action . |__ check an actor opening ( this is the can't open what's already open rule ) : if the noun is open : if the actor is the player : say "[regarding the noun][They're] already open." ( a ) ; stop the action . |__ carry out an actor opening ( this is the standard opening rule ) : now the noun is open . |__ report an actor opening ( this is the reveal any newly visible interior rule ) : if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor : if the action is not silent : if the actor is the player : say "[We] [open] [the noun], revealing " ( a ) ; list the contents of the noun , as a sentence , tersely , not listing concealed items ; say "." ; stop the action . |__ report an actor opening ( this is the standard report opening rule ) : if the actor is the player : if the action is not silent : say "[We] [open] [the noun]." ( a ) ; otherwise if the player can see the actor : say "[The actor] [open] [the noun]." ( b ) ; otherwise : say "[The noun] [open]." ( c ) ; |__ closing is an action applying to one thing . the closing action translates into i6 as Close . |__ the specification of the closing action is Closing makes something into
a physical barrier. The action can be performed on any kind of thing which
provides the either/or properties openable and open. The 'can't close unless
openable rule' tests to see if the noun both can be and actually is openable.
(It is assumed that anything which can be openable can also be open, and
hence can also be closed.) In the Standard Rules, the container and door
kinds both satisfy these requirements.We can create a new kind on which opening and closing will work thus:
'A case file is a kind of thing. A case file can be openable.
A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
When a container is closed, that means people outside cannot reach in,
and vice versa; when a door is closed, people cannot use the 'going' action
to pass through it. If we were to create a new kind such as 'case file',
we would also need to write rules to make the open and closed properties
interesting for this kind. |__ check an actor closing ( this is the can't close unless openable rule ) : if the noun provides the property openable and the noun is openable : continue the action ; if the actor is the player : say "[regarding the noun][They] [aren't] something [we] [can] close." ( a ) ; stop the action . |__ check an actor closing ( this is the can't close what's already closed rule ) : if the noun is closed : if the actor is the player : say "[regarding the noun][They're] already closed." ( a ) ; stop the action . |__ carry out an actor closing ( this is the standard closing rule ) : now the noun is closed . |__ report an actor closing ( this is the standard report closing rule ) : if the actor is the player : if the action is not silent : say "[We] [close] [the noun]." ( a ) ; otherwise if the player can see the actor : say "[The actor] [close] [the noun]." ( b ) ; otherwise : say "[The noun] [close]." ( c ) ; |__ wearing is an action applying to one carried thing . the wearing action translates into i6 as Wear . |__ the specification of the wearing action is The Standard Rules give Inform
only a simple model of clothing. A thing can be worn only if it has the
either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
wears the Homburg hat.' automatically implies that the hat is wearable,
which is why we only seldom need to use the word 'wearable' directly.)
There is no checking of how much or how little any actor is wearing, or
how incongruous this may appear: nor any distinction between under or
over-clothes.To put on an article of clothing, the actor must be directly carrying it,
as enforced by the 'can't wear what's not held rule'. |__ check an actor wearing ( this is the can't wear what's not clothing rule ) : if the noun is not a thing or the noun is not wearable : if the actor is the player : say "[We] [can't wear] [regarding the noun][those]!" ( a ) ; stop the action . |__ check an actor wearing ( this is the can't wear what's not held rule ) : if the holder of the noun is not the actor : if the actor is the player : say "[We] [aren't] holding [regarding the noun][those]!" ( a ) ; stop the action . |__ check an actor wearing ( this is the can't wear what's already worn rule ) : if the actor is wearing the noun : if the actor is the player : say "[We]['re] already wearing [regarding the noun][those]!" ( a ) ; stop the action . |__ carry out an actor wearing ( this is the standard wearing rule ) : now the actor wears the noun . |__ report an actor wearing ( this is the standard report wearing rule ) : if the actor is the player : if the action is not silent : say "[We] [put] on [the noun]." ( a ) ; otherwise : say "[The actor] [put] on [the noun]." ( b ) . |__ taking off is an action applying to one thing . the taking off action translates into i6 as Disrobe . |__ does the player mean taking off something worn : it is very likely . |__ the specification of the taking off action is The Standard Rules give Inform
only a simple model of clothing. A thing can be worn only if it has the
either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
wears the Homburg hat.' automatically implies that the hat is wearable,
which is why we only seldom need to use the word 'wearable' directly.)
There is no checking of how much or how little any actor is wearing, or
how incongruous this may appear: nor any distinction between under or
over-clothes.When an article of clothing is taken off, it becomes a thing directly
carried by its former wearer, rather than being (say) dropped onto the floor. |__ check an actor taking off ( this is the can't take off what's not worn rule ) : if the actor is not wearing the noun : if the actor is the player : say "[We] [aren't] wearing [the noun]." ( a ) ; stop the action . |__ check an actor taking off ( this is the can't exceed carrying capacity when taking off rule ) : if the number of things carried by the actor is at least the carrying capacity of the actor : if the actor is the player : say "[We]['re] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor taking off ( this is the standard taking off rule ) : now the actor carries the noun . |__ report an actor taking off ( this is the standard report taking off rule ) : if the actor is the player : if the action is not silent : say "[We] [take] off [the noun]." ( a ) ; otherwise : say "[The actor] [take] off [the noun]." ( b ) . |__ section 6 - standard actions concerning other people |__ giving it to is an action applying to one carried thing and one thing . the giving it to action translates into i6 as Give . |__ the specification of the giving it to action is This action is indexed by
Inform under 'Actions concerning other people', but it could just as easily
have gone under 'Actions concerning the actor's possessions' because -
like dropping, putting it on or inserting it into - this is an action
which gets rid of something being carried.The Standard Rules implement this action fully - if it reaches the carry
out and report rulebooks, then the item is indeed transferred to the
recipient, and this is properly reported. But giving something to
somebody is not like putting something on a shelf: the recipient has
to agree. The final check rule, the 'block giving rule', assumes that
the recipient does not consent - so the gift fails to happen. The way
to make the giving action use its abilities fully is to replace the
block giving rule with a rule which makes a more sophisticated decision
about who will accept what from whom, and only blocks some attempts,
letting others run on into the carry out and report rules. |__ check an actor giving something to ( this is the can't give what you haven't got rule ) : if the actor is not the holder of the noun : if the actor is the player : say "[We] [aren't] holding [the noun]." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give to yourself rule ) : if the actor is the second noun : if the actor is the player : say "[We] [can't give] [the noun] to [ourselves]." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give to a non-person rule ) : if the second noun is not a person : if the actor is the player : say "[The second noun] [aren't] able to receive things." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't give clothes being worn rule ) : if the actor is wearing the noun : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor giving something to ( this is the block giving rule ) : if the actor is the player : say "[The second noun] [don't] seem interested." ( a ) ; stop the action . |__ check an actor giving something to ( this is the can't exceed carrying capacity when giving rule ) : if the number of things carried by the second noun is at least the carrying capacity of the second noun : if the actor is the player : say "[The second noun] [are] carrying too many things already." ( a ) ; stop the action . |__ carry out an actor giving something to ( this is the standard giving rule ) : move the noun to the second noun . |__ report an actor giving something to ( this is the standard report giving rule ) : if the actor is the player : say "[We] [give] [the noun] to [the second noun]." ( a ) ; otherwise if the second noun is the player : say "[The actor] [give] [the noun] to [us]." ( b ) ; otherwise : say "[The actor] [give] [the noun] to [the second noun]." ( c ) . |__ showing it to is an action applying to one carried thing and one visible thing . the showing it to action translates into i6 as Show . |__ the specification of the showing it to action is Anyone can show anyone
else something which they are carrying, but not some nearby piece of
scenery, say - so this action is suitable for showing the emerald locket
to Katarina, but not showing the Orange River Rock Room to Mr Douglas.The Standard Rules implement this action in only a minimal way, checking
that it makes sense but then blocking all such attempts with a message
such as 'Katarina is not interested.' - this is the task of the 'block
showing rule'. As a result, there are no carry out or report rules. To
make it into a systematic and interesting action, we would need to
unlist the block showing rule and then to write carry out and report
rules: but usually for IF purposes we only need to make a handful of
special cases of showing work properly, and for those we can simply
write Instead rules to handle them. |__ check an actor showing something to ( this is the can't show what you haven't got rule ) : if the actor is not the holder of the noun : if the actor is the player : say "[We] [aren't] holding [the noun]." ( a ) ; stop the action . |__ check an actor showing something to ( this is the convert show to yourself to examine rule ) : if the actor is the second noun : convert to the examining action on the noun . |__ check an actor showing something to ( this is the block showing rule ) : if the actor is the player : say "[The second noun] [are] unimpressed." ( a ) ; stop the action . |__ waking is an action applying to one thing . the waking action translates into i6 as WakeOther . |__ the specification of the waking action is This is the act of jostling
a sleeping person to wake him or her up, and it finds its way into the
Standard Rules only for historical reasons. Inform does not by default
provide any model for people being asleep or awake, so this action does
not do anything in the standard implementation: instead, it is always
stopped by the block waking rule. |__ check an actor waking ( this is the block waking rule ) : if the actor is the player : now the prior named object is nothing ; say "That [seem] unnecessary." ( a ) ; stop the action . |__ throwing it at is an action applying to one carried thing and one visible thing . the throwing it at action translates into i6 as ThrowAt . |__ the specification of the throwing it at action is Throwing something at
someone or something is difficult for Inform to model. So many considerations
apply: just because the actor can see the target, does it follow that the
target can accurately hit it? What if the projectile is heavy, like an
anvil, or something not easily aimable, like a feather? What if there
is a barrier in the way, like a cage with bars spaced so that only items
of a certain size get through? And then: what should happen as a result?
Will the projectile break, or do damage, or fall to the floor, or into
a container or onto a supporter? And so on.Because it seems hopeless to try to model this in any general way,
Inform instead provides the action for the user to attach specific rules to.
The check rules in the Standard Rules simply require that the projectile
is not an item of clothing still worn (this will be relevant for women
attending a Tom Jones concert) but then, in either the 'futile to throw
things at inanimate objects rule' or the 'block throwing at rule', will
refuse to carry out the action with a bland message.To make throwing do something, then, we must either write Instead rules
for special circumstances, or else unlist these check rules and write
suitable carry out and report rules to pick up the thread. |__ check an actor throwing something at ( this is the implicitly remove thrown clothing rule ) : if the actor is wearing the noun : say "(first taking [the noun] off)[command clarification break]" ( a ) ; silently try the actor trying taking off the noun ; if the actor is wearing the noun , stop the action ; |__ check an actor throwing something at ( this is the futile to throw things at inanimate objects rule ) : if the second noun is not a person : if the actor is the player : say "Futile." ( a ) ; stop the action . |__ check an actor throwing something at ( this is the block throwing at rule ) : if the actor is the player : say "[We] [lack] the nerve when it [if story tense is the past
tense]came[otherwise]comes[end if] to the crucial moment." ( a ) ; stop the action . |__ attacking is an action applying to one thing . the attacking action translates into i6 as Attack . |__ the specification of the attacking action is Violence is seldom the answer,
and attempts to attack another person are normally blocked as being unrealistic
or not seriously meant. (I might find a shop assistant annoying, but IF is
not Grand Theft Auto, and responding by killing him is not really one of
my options.) So the Standard Rules simply block attempts to fight people,
but the action exists for rules to make exceptions. |__ check an actor attacking ( this is the block attacking rule ) : if the actor is the player : now the prior named object is nothing ; say "Violence [aren't] the answer to this one." ( a ) ; stop the action . |__ kissing is an action applying to one thing . the kissing action translates into i6 as Kiss . |__ the specification of the kissing action is Possibly because Inform was
originally written by an Englishman, attempts at kissing another person are
normally blocked as being unrealistic or not seriously meant. So the
Standard Rules simply block attempts to kiss people, but the action exists
for rules to make exceptions. |__ check an actor kissing ( this is the kissing yourself rule ) : if the noun is the actor : if the actor is the player : say "[We] [don't] get much from that." ( a ) ; stop the action . |__ check an actor kissing ( this is the block kissing rule ) : if the actor is the player : say "[The noun] [might not] like that." ( a ) ; stop the action . |__ answering it that is an action applying to one thing and one topic . the answering it that action translates into i6 as Answer . |__ the specification of the answering it that action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Answering is an action existing so that the player can say something free-form
to somebody else. A convention of IF is that a command such as DAPHNE, TAKE
MASK is a request to Daphne to perform an action: if the persuasion rules in
force mean that she consents, the action 'Daphne taking the mask' does
indeed then result. But if the player types DAPHNE, 12375 or DAPHNE, GREAT
HEAVENS - or anything else not making sense as a command - the action
'answering Daphne that ...' will be generated.The name of the action arises because it is also caused by typing, say,
ANSWER 12375 when Daphne (say) has asked a question. |__ report an actor answering something that ( this is the block answering rule ) : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no reply." ( a ) ; stop the action . |__ telling it about is an action applying to one thing and one topic . the telling it about action translates into i6 as Tell . |__ the specification of the telling it about action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Telling is an action existing only to catch commands like TELL ALEX ABOUT
GUITAR. Customarily in IF, such a command is shorthand which the player
accepts as a conventional form: it means 'tell Alex what I now know about
the guitar' and would make sense if the player had himself recently
discovered something significant about the guitar which might interest
Alex. |__ check an actor telling something about ( this is the telling yourself rule ) : if the actor is the noun : if the actor is the player : say "[We] [talk] to [ourselves] a while." ( a ) ; stop the action . |__ report an actor telling something about ( this is the block telling rule ) : if the actor is the player : now the prior named object is nothing ; say "This [provoke] no reaction." ( a ) ; stop the action . |__ asking it about is an action applying to one thing and one topic . the asking it about action translates into i6 as Ask . |__ the specification of the asking it about action is The Standard Rules do
not include any systematic way to handle conversation: instead, Inform is
set up so that it is as easy as we can make it to write specific rules
handling speech in particular games, and so that if no such rules are
written then all attempts to communicate are gracefully if not very
interestingly rejected.The topic here can be any double-quoted text, which can itself contain
tokens in square brackets: see the documentation on Understanding.Asking is an action existing only to catch commands like ASK STEPHEN ABOUT
PENELOPE. Customarily in IF, such a command is shorthand which the player
accepts as a conventional form: it means 'engage Mary in conversation and
try to find out what she might know about'. It's understood as a convention
of the genre that Mary should not be expected to respond in cases where
there is no reason to suppose that she has anything relevant to pass on -
ASK JANE ABOUT RICE PUDDING, for instance, need not conjure up a recipe
even if Jane is a 19th-century servant and therefore almost certainly
knows one. |__ report an actor asking something about ( this is the block asking rule ) : if the actor is the player : now the prior named object is nothing ; say "[There] [are] no reply." ( a ) ; stop the action . |__ asking it for is an action applying to two things . the asking it for action translates into i6 as AskFor . |__ the specification of the asking it for action is The Standard Rules do
not include any systematic way to handle conversation, but this is
action is not quite conversation: it doesn't involve any spoken text as
such. It exists to catch commands like ASK SALLY FOR THE EGG WHISK,
where the whisk is something which Sally has and the player can see.Slightly oddly, but for historical reasons, an actor asking himself for
something is treated to an inventory listing instead. All other cases
are converted to the giving action: that is, ASK SALLY FOR THE EGG WHISK
is treated as if it were SALLY, GIVE ME THE EGG WHISK - an action for
Sally to perform and which then follows rules for giving.To ask for information or something intangible, see the asking it about
action. |__ check an actor asking something for ( this is the asking yourself for something rule ) : if the actor is the noun and the actor is the player : try taking inventory instead . |__ check an actor asking something for ( this is the translate asking for to giving rule ) : convert to request of the noun to perform giving it to action with the second noun and the actor . |__ section 7 - standard actions which are checked but then do nothing unless rules intervene |__ waiting is an action applying to nothing . the waiting action translates into i6 as Wait . |__ the specification of the waiting action is The inaction action: where would
we be without waiting? Waiting does not cause time to pass by - that happens
anyway - but represents a positive choice by the actor not to fill that time.
It is an action so that rules can be attached to it: for instance, we could
imagine that a player who consciously decides to sit and wait might notice
something which a busy player does not, and we could write a rule accordingly.Note the absence of check or carry out rules - anyone can wait, at any time,
and it makes nothing happen. |__ report an actor waiting ( this is the standard report waiting rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Time [pass]." ( a ) ; otherwise : say "[The actor] [wait]." ( b ) . |__ touching is an action applying to one thing . the touching action translates into i6 as Touch . |__ the specification of the touching action is Touching is just that, touching
something without applying pressure: a touch-sensitive screen or a living
creature might react, but a standard push-button or lever will probably not.In the Standard Rules there are no check touching rules, since touchability
is already a requirement of the noun for the action anyway, and no carry out
rules because nothing in the standard Inform world model reacts to
a mere touch - though report rules do mean that attempts to touch other
people provoke a special reply. |__ report an actor touching ( this is the report touching yourself rule ) : if the noun is the actor : if the actor is the player : if the action is not silent : say "[We] [achieve] nothing by this." ( a ) ; otherwise : say "[The actor] [touch] [themselves]." ( b ) ; stop the action ; continue the action . |__ report an actor touching ( this is the report touching other people rule ) : if the noun is a person : if the actor is the player : if the action is not silent : say "[The noun] [might not like] that." ( a ) ; otherwise if the noun is the player : say "[The actor] [touch] [us]." ( b ) ; otherwise : say "[The actor] [touch] [the noun]." ( c ) ; stop the action ; continue the action . |__ report an actor touching ( this is the report touching things rule ) : if the actor is the player : if the action is not silent : say "[We] [feel] nothing unexpected." ( a ) ; otherwise : say "[The actor] [touch] [the noun]." ( b ) . |__ waving is an action applying to one thing . the waving action translates into i6 as Wave . |__ the specification of the waving action is Waving in this sense is like
waving a sceptre: the item to be waved must be directly held (or worn)
by the actor.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, waving a particular rusty iron rod with a star on the end. |__ check an actor waving ( this is the can't wave what's not held rule ) : if the actor is not the holder of the noun : if the actor is the player : say "But [we] [aren't] holding [regarding the noun][those]." ( a ) ; stop the action . |__ report an actor waving ( this is the report waving things rule ) : if the actor is the player : if the action is not silent : say "[We] [wave] [the noun]." ( a ) ; otherwise : say "[The actor] [wave] [the noun]." ( b ) . |__ pulling is an action applying to one thing . the pulling action translates into i6 as Pull . |__ the specification of the pulling action is Pulling is the act of pulling
something not grossly larger than the actor by an amount which would not
substantially move it.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, pulling a lever. ('The big red lever is a fixed in place device.
Instead of pulling the big red lever, try switching on the lever. Instead
of pushing the big red lever, try switching off the lever.') |__ check an actor pulling ( this is the can't pull what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor pulling ( this is the can't pull scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor pulling ( this is the can't pull people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor pulling ( this is the report pulling rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [pull] [the noun]." ( b ) . |__ pushing is an action applying to one thing . the pushing action translates into i6 as Push . |__ the specification of the pushing action is Pushing is the act of pushing
something not grossly larger than the actor by an amount which would not
substantially move it. (See also the pushing it to action, which involves
a longer-distance push between rooms.)In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, pulling a lever. ('The big red lever is a fixed in place device.
Instead of pulling the big red lever, try switching on the lever. Instead
of pushing the big red lever, try switching off the lever.') |__ check an actor pushing something ( this is the can't push what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor pushing something ( this is the can't push scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor pushing something ( this is the can't push people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor pushing something ( this is the report pushing rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [push] [the noun]." ( b ) . |__ turning is an action applying to one thing . the turning action translates into i6 as Turn . |__ the specification of the turning action is Turning is the act of rotating
something - say, a dial.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases: say, turning a capstan. |__ check an actor turning ( this is the can't turn what's fixed in place rule ) : if the noun is fixed in place : if the actor is the player : say "[regarding the noun][They] [are] fixed in place." ( a ) ; stop the action . |__ check an actor turning ( this is the can't turn scenery rule ) : if the noun is scenery : if the actor is the player : say "[We] [are] unable to." ( a ) ; stop the action . |__ check an actor turning ( this is the can't turn people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor turning ( this is the report turning rule ) : if the actor is the player : if the action is not silent : now the prior named object is nothing ; say "Nothing obvious [happen]." ( a ) ; otherwise : say "[The actor] [turn] [the noun]." ( b ) . |__ pushing it to is an action applying to one thing and one visible thing . the pushing it to action translates into i6 as PushDir . |__ the specification of the pushing it to action is This action covers pushing
a large object, not being carried, so that the actor pushes it from one room
to another: for instance, pushing a bale of hay to the east.This is rapidly converted into a special form of the going action. If the
noun object has the either/or property 'pushable between rooms', then the
action is converted to going by the 'standard pushing in directions rule'.
If that going action succeeds, then the original pushing it to action
stops; it's only if that fails that we run on into the 'block pushing in
directions rule', which then puts an end to the matter. |__ check an actor pushing something to ( this is the can't push unpushable things rule ) : if the noun is not pushable between rooms : if the actor is the player : say "[The noun] [cannot] be pushed from place to place." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push to non-directions rule ) : if the second noun is not a direction : if the actor is the player : say "[regarding the noun][They] [aren't] a direction." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push vertically rule ) : if the second noun is up or the second noun is down : if the actor is the player : say "[The noun] [cannot] be pushed up or down." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the can't push from within rule ) : if the noun encloses the actor : if the actor is the player : say "[The noun] [cannot] be pushed from here." ( a ) ; stop the action . |__ check an actor pushing something to ( this is the standard pushing in directions rule ) : convert to special going-with-push action . |__ check an actor pushing something to ( this is the block pushing in directions rule ) : if the actor is the player : say "[The noun] [cannot] be pushed from place to place." ( a ) ; stop the action . |__ squeezing is an action applying to one thing . the squeezing action translates into i6 as Squeeze . |__ the specification of the squeezing action is Squeezing is an action which
can conveniently vary from squeezing something hand-held, like a washing-up
liquid bottle, right up to squeezing a pillar in a bear hug.In the Standard Rules there are no carry out rules for this action because
nothing in the standard Inform world model which reacts to it. The action
is provided for authors to hang more interesting behaviour onto for special
cases. A mildly fruity message is produced to players who attempt to
squeeze people, which is blocked by a check squeezing rule. |__ check an actor squeezing ( this is the innuendo about squeezing people rule ) : if the noun is a person : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor squeezing ( this is the report squeezing rule ) : if the actor is the player : if the action is not silent : say "[We] [achieve] nothing by this." ( a ) ; otherwise : say "[The actor] [squeeze] [the noun]." ( b ) . |__ section 8 - standard actions which always do nothing unless rules intervene |__ saying yes is an action applying to nothing . the saying yes action translates into i6 as Yes . |__ the specification of the saying yes action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying yes ( this is the block saying yes rule ) : if the actor is the player : say "That was a rhetorical question." ( a ) ; stop the action . |__ saying no is an action applying to nothing . the saying no action translates into i6 as No . |__ the specification of the saying no action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying no ( this is the block saying no rule ) : if the actor is the player : say "That was a rhetorical question." ( a ) ; stop the action . |__ burning is an action applying to one thing . the burning action translates into i6 as Burn . |__ the specification of the burning action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor burning ( this is the block burning rule ) : if the actor is the player : say "This dangerous act [would achieve] little." ( a ) ; stop the action . |__ waking up is an action applying to nothing . the waking up action translates into i6 as Wake . |__ the specification of the waking up action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor waking up ( this is the block waking up rule ) : if the actor is the player : now the prior named object is nothing ; say "The dreadful truth [are], this [are not] a dream." ( a ) ; stop the action . |__ thinking is an action applying to nothing . the thinking action translates into i6 as Think . |__ the specification of the thinking action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor thinking ( this is the block thinking rule ) : if the actor is the player : say "What a good idea." ( a ) ; stop the action . |__ smelling is an action applying to nothing or one thing . the smelling action translates into i6 as Smell . |__ the specification of the smelling action is The Standard Rules define this action in only a minimal way, replying only
that the player smells nothing unexpected. |__ report an actor smelling ( this is the report smelling rule ) : if the actor is the player : if the action is not silent : say "[We] [smell] nothing unexpected." ( a ) ; otherwise : say "[The actor] [sniff]." ( b ) . |__ listening to is an action applying to nothing or one thing and abbreviable . the listening to action translates into i6 as Listen . |__ the specification of the listening to action is The Standard Rules define this action in only a minimal way, replying only
that the player hears nothing unexpected. |__ report an actor listening to ( this is the report listening rule ) : if the actor is the player : if the action is not silent : say "[We] [hear] nothing unexpected." ( a ) ; otherwise : say "[The actor] [listen]." ( b ) . |__ tasting is an action applying to one thing . the tasting action translates into i6 as Taste . |__ the specification of the tasting action is The Standard Rules define this action in only a minimal way, replying only
that the player tastes nothing unexpected. |__ report an actor tasting ( this is the report tasting rule ) : if the actor is the player : if the action is not silent : say "[We] [taste] nothing unexpected." ( a ) ; otherwise : say "[The actor] [taste] [the noun]." ( b ) . |__ cutting is an action applying to one thing . the cutting action translates into i6 as Cut . |__ the specification of the cutting action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor cutting ( this is the block cutting rule ) : if the actor is the player : say "Cutting [regarding the noun][them] up [would achieve] little." ( a ) ; stop the action . |__ jumping is an action applying to nothing . the jumping action translates into i6 as Jump . |__ the specification of the jumping action is The Standard Rules define this action in only a minimal way, simply reporting
a little jump on the spot. |__ report an actor jumping ( this is the report jumping rule ) : if the actor is the player : if the action is not silent : say "[We] [jump] on the spot." ( a ) ; otherwise : say "[The actor] [jump] on the spot." ( b ) . |__ tying it to is an action applying to two things . the tying it to action translates into i6 as Tie . |__ the specification of the tying it to action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor tying something to ( this is the block tying rule ) : if the actor is the player : say "[We] [would achieve] nothing by this." ( a ) ; stop the action . |__ drinking is an action applying to one thing . the drinking action translates into i6 as Drink . |__ the specification of the drinking action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor drinking ( this is the block drinking rule ) : if the actor is the player : now the prior named object is nothing ; say "[There's] nothing suitable to drink here." ( a ) ; stop the action . |__ saying sorry is an action applying to nothing . the saying sorry action translates into i6 as Sorry . |__ the specification of the saying sorry action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor saying sorry ( this is the block saying sorry rule ) : if the actor is the player : say "Oh, don't [if American dialect option is
active]apologize[otherwise]apologise[end if]." ( a ) ; stop the action . |__ swinging is an action applying to one thing . the swinging action translates into i6 as Swing . |__ the specification of the swinging action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor swinging ( this is the block swinging rule ) : if the actor is the player : now the prior named object is nothing ; say "[There's] nothing sensible to swing here." ( a ) ; stop the action . |__ rubbing is an action applying to one thing . the rubbing action translates into i6 as Rub . |__ the specification of the rubbing action is The Standard Rules define this action in only a minimal way, simply reporting
that it has happened. |__ check an actor rubbing ( this is the can't rub another person rule ) : if the noun is a person who is not the actor : if the actor is the player : say "[The noun] [might not like] that." ( a ) ; stop the action . |__ report an actor rubbing ( this is the report rubbing rule ) : if the actor is the player : if the action is not silent : say "[We] [rub] [the noun]." ( a ) ; otherwise : say "[The actor] [rub] [the noun]." ( b ) . |__ setting it to is an action applying to one thing and one topic . the setting it to action translates into i6 as SetTo . |__ the specification of the setting it to action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor setting something to ( this is the block setting it to rule ) : if the actor is the player : say "No, [we] [can't set] [regarding the noun][those] to anything." ( a ) ; stop the action . |__ waving hands is an action applying to nothing . the waving hands action translates into i6 as WaveHands . |__ the specification of the waving hands action is The Standard Rules define this action in only a minimal way, simply reporting
a little wave of the hands. |__ report an actor waving hands ( this is the report waving hands rule ) : if the actor is the player : if the action is not silent : say "[We] [wave]." ( a ) ; otherwise : say "[The actor] [wave]." ( b ) . |__ buying is an action applying to one thing . the buying action translates into i6 as Buy . |__ the specification of the buying action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor buying ( this is the block buying rule ) : if the actor is the player : now the prior named object is nothing ; say "Nothing [are] on sale." ( a ) ; stop the action . |__ climbing is an action applying to one thing . the climbing action translates into i6 as Climb . |__ the specification of the climbing action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor climbing ( this is the block climbing rule ) : if the actor is the player : say "Little [are] to be achieved by that." ( a ) ; stop the action . |__ sleeping is an action applying to nothing . the sleeping action translates into i6 as Sleep . |__ the specification of the sleeping action is The Standard Rules define this action in only a minimal way, blocking it
with a check rule which stops it in all cases. It exists so that before
or instead rules can be written to make it do interesting things in special
cases. (Or to reconstruct the action as something more substantial, unlist
the block rule and supply carry out and report rules, together perhaps
with some further check rules.) |__ check an actor sleeping ( this is the block sleeping rule ) : if the actor is the player : say "[We] [aren't] feeling especially drowsy." ( a ) ; stop the action . |__ section 9 - standard actions which happen out of world |__ quitting the game is an action out of world and applying to nothing . the quitting the game action translates into i6 as Quit . |__ the quit the game rule is listed in the carry out quitting the game rulebook . the quit the game rule translates into i6 as QUIT_THE_GAME_R with "Are you sure you want to quit? " ( a ) . |__ saving the game is an action out of world and applying to nothing . the saving the game action translates into i6 as Save . |__ the save the game rule is listed in the carry out saving the game rulebook . the save the game rule translates into i6 as SAVE_THE_GAME_R with "Save failed." ( a ) , "Ok." ( b ) . |__ restoring the game is an action out of world and applying to nothing . the restoring the game action translates into i6 as Restore . |__ the restore the game rule is listed in the carry out restoring the game rulebook . the restore the game rule translates into i6 as RESTORE_THE_GAME_R with "Restore failed." ( a ) , "Ok." ( b ) . |__ restarting the game is an action out of world and applying to nothing . the restarting the game action translates into i6 as Restart . |__ the restart the game rule is listed in the carry out restarting the game rulebook . the restart the game rule translates into i6 as RESTART_THE_GAME_R with "Are you sure you want to restart? " ( a ) , "Failed." ( b ) . |__ verifying the story file is an action out of world and applying to nothing . the verifying the story file action translates into i6 as Verify . |__ the verify the story file rule is listed in the carry out verifying the story file rulebook . the verify the story file rule translates into i6 as VERIFY_THE_STORY_FILE_R with "The game file has verified as intact." ( a ) , "The game file did not verify as intact, and may be corrupt." ( b ) . |__ switching the story transcript on is an action out of world and applying to nothing . the switching the story transcript on action translates into i6 as ScriptOn . |__ the switch the story transcript on rule is listed in the carry out switching the story transcript on rulebook . the switch the story transcript on rule translates into i6 as SWITCH_TRANSCRIPT_ON_R with "Transcripting is already on." ( a ) , "Start of a transcript of" ( b ) , "Attempt to begin transcript failed." ( c ) . |__ switching the story transcript off is an action out of world and applying to nothing . the switching the story transcript off action translates into i6 as ScriptOff . |__ the switch the story transcript off rule is listed in the carry out switching the story transcript off rulebook . the switch the story transcript off rule translates into i6 as SWITCH_TRANSCRIPT_OFF_R with "Transcripting is already off." ( a ) , "[line break]End of transcript." ( b ) , "Attempt to end transcript failed." ( c ) . |__ |__ requesting the story file version is an action out of world and applying to nothing . the requesting the story file version action translates into i6 as Version . |__ the announce the story file version rule is listed in the carry out requesting the story file version rulebook . the announce the story file version rule translates into i6 as ANNOUNCE_STORY_FILE_VERSION_R . |__ requesting the score is an action out of world and applying to nothing . the requesting the score action translates into i6 as Score . |__ the announce the score rule is listed in the carry out requesting the score rulebook . the announce the score rule translates into i6 as ANNOUNCE_SCORE_R with "[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
[score] out of a possible [maximum score], in [turn count] turn[s]" ( a ) , ", earning you the rank of " ( b ) , "[There] [are] no score in this story." ( c ) , "[bracket]Your score has just gone up by [number understood in words]
point[s].[close bracket]" ( d ) , "[bracket]Your score has just gone down by [number understood in words]
point[s].[close bracket]" ( e ) . |__ preferring abbreviated room descriptions is an action out of world and applying to nothing . the preferring abbreviated room descriptions action translates into i6 as LMode3 . |__ the prefer abbreviated room descriptions rule is listed in the carry out preferring abbreviated room descriptions rulebook . the prefer abbreviated room descriptions rule translates into i6 as PREFER_ABBREVIATED_R . |__ the standard report preferring abbreviated room descriptions rule is listed in the report preferring abbreviated room descriptions rulebook . the standard report preferring abbreviated room descriptions rule translates into i6 as REP_PREFER_ABBREVIATED_R with " is now in its 'superbrief' mode, which always gives short descriptions
of locations (even if you haven't been there before)." ( a ) . |__ preferring unabbreviated room descriptions is an action out of world and applying to nothing . the preferring unabbreviated room descriptions action translates into i6 as LMode2 . |__ the prefer unabbreviated room descriptions rule is listed in the carry out preferring unabbreviated room descriptions rulebook . the prefer unabbreviated room descriptions rule translates into i6 as PREFER_UNABBREVIATED_R . |__ the standard report preferring unabbreviated room descriptions rule is listed in the report preferring unabbreviated room descriptions rulebook . the standard report preferring unabbreviated room descriptions rule translates into i6 as REP_PREFER_UNABBREVIATED_R with " is now in its 'verbose' mode, which always gives long descriptions of
locations (even if you've been there before)." ( a ) . |__ preferring sometimes abbreviated room descriptions is an action out of world and applying to nothing . the preferring sometimes abbreviated room descriptions action translates into i6 as LMode1 . |__ the prefer sometimes abbreviated room descriptions rule is listed in the carry out preferring sometimes abbreviated room descriptions rulebook . the prefer sometimes abbreviated room descriptions rule translates into i6 as PREFER_SOMETIMES_ABBREVIATED_R . |__ the standard report preferring sometimes abbreviated room descriptions rule is listed in the report preferring sometimes abbreviated room descriptions rulebook . the standard report preferring sometimes abbreviated room descriptions rule translates into i6 as REP_PREFER_SOMETIMES_ABBR_R with " is now in its 'brief' printing mode, which gives long descriptions
of places never before visited and short descriptions otherwise." ( a ) . |__ switching score notification on is an action out of world and applying to nothing . the switching score notification on action translates into i6 as NotifyOn . |__ the switch score notification on rule is listed in the carry out switching score notification on rulebook . the switch score notification on rule translates into i6 as SWITCH_SCORE_NOTIFY_ON_R . |__ the standard report switching score notification on rule is listed in the report switching score notification on rulebook . the standard report switching score notification on rule translates into i6 as REP_SWITCH_NOTIFY_ON_R with "Score notification on." ( a ) . |__ switching score notification off is an action out of world and applying to nothing . the switching score notification off action translates into i6 as NotifyOff . |__ the switch score notification off rule is listed in the carry out switching score notification off rulebook . the switch score notification off rule translates into i6 as SWITCH_SCORE_NOTIFY_OFF_R . |__ the standard report switching score notification off rule is listed in the report switching score notification off rulebook . the standard report switching score notification off rule translates into i6 as REP_SWITCH_NOTIFY_OFF_R with "Score notification off." ( a ) . |__ requesting the pronoun meanings is an action out of world and applying to nothing . the requesting the pronoun meanings action translates into i6 as Pronouns . |__ the announce the pronoun meanings rule is listed in the carry out requesting the pronoun meanings rulebook . the announce the pronoun meanings rule translates into i6 as ANNOUNCE_PRONOUN_MEANINGS_R with "At the moment, " ( a ) , "means " ( b ) , "is unset" ( c ) , "no pronouns are known to the game." ( d ) . |__ part six - grammar |__ understand "take [things]" as taking . understand "take off [something]" as taking off . understand "take [something] off" as taking off . understand "take [things inside] from [something]" as removing it from . understand "take [things inside] off [something]" as removing it from . understand "take inventory" as taking inventory . understand the commands carry and hold as take . |__ understand "get in/on" as entering . understand "get out/off/down/up" as exiting . understand "get [things]" as taking . understand "get in/into/on/onto [something]" as entering . understand "get off/down [something]" as getting off . understand "get [things inside] from [something]" as removing it from . |__ understand "pick up [things]" or "pick [things] up" as taking . |__ understand "stand" or "stand up" as exiting . understand "stand on [something]" as entering . |__ understand "remove [something preferably held]" as taking off . understand "remove [things inside] from [something]" as removing it from . |__ understand "shed [something preferably held]" as taking off . understand the commands doff and disrobe as shed . |__ understand "wear [something preferably held]" as wearing . understand the command don as wear . |__ understand "put [other things] in/inside/into [something]" as inserting it into . understand "put [other things] on/onto [something]" as putting it on . understand "put on [something preferably held]" as wearing . understand "put [something preferably held] on" as wearing . understand "put down [things preferably held]" or "put [things preferably held] down" as dropping . |__ understand "insert [other things] in/into [something]" as inserting it into . |__ understand "drop [things preferably held]" as dropping . understand "drop [other things] in/into/down [something]" as inserting it into . understand "drop [other things] on/onto [something]" as putting it on . understand "drop [something preferably held] at/against [something]" as throwing it at . understand the commands throw and discard as drop . |__ understand "give [something preferably held] to [someone]" as giving it to . understand "give [someone] [something preferably held]" as giving it to ( with nouns reversed ) . understand the commands pay and offer and feed as give . |__ understand "show [someone] [something preferably held]" as showing it to ( with nouns reversed ) . understand "show [something preferably held] to [someone]" as showing it to . understand the commands present and display as show . |__ understand "go" as going . understand "go [direction]" as going . understand "go [something]" as entering . understand "go into/in/inside/through [something]" as entering . understand the commands walk and run as go . |__ understand "inventory" as taking inventory . understand the commands i and inv as inventory . |__ understand "look" as looking . understand "look at [something]" as examining . understand "look [something]" as examining . understand "look inside/in/into/through [something]" as searching . understand "look under [something]" as looking under . understand "look up [text] in [something]" as consulting it about ( with nouns reversed ) . understand the command l as look . |__ understand "consult [something] on/about [text]" as consulting it about . |__ understand "open [something]" as opening . understand "open [something] with [something preferably held]" as unlocking it with . understand the commands unwrap , uncover as open . |__ understand "close [something]" as closing . understand "close up [something]" as closing . understand "close off [something]" as switching off . understand the commands shut and cover as close . |__ understand "enter" as entering . understand "enter [something]" as entering . understand the command cross as enter . |__ understand "sit on top of [something]" as entering . understand "sit on/in/inside [something]" as entering . |__ understand "exit" as exiting . understand the commands leave and out as exit . |__ understand "examine [something]" as examining . understand the commands x , watch , describe and check as examine . |__ understand "read [something]" as examining . understand "read about [text] in [something]" as consulting it about ( with nouns reversed ) . understand "read [text] in [something]" as consulting it about ( with nouns reversed ) . |__ understand "yes" as saying yes . understand the command y as yes . |__ understand "no" as saying no . |__ understand "sorry" as saying sorry . |__ understand "search [something]" as searching . |__ understand "wave" as waving hands . |__ understand "wave [something]" as waving . |__ understand "set [something] to [text]" as setting it to . understand the command adjust as set . |__ understand "pull [something]" as pulling . understand the command drag as pull . |__ understand "push [something]" as pushing . understand "push [something] [direction]" or "push [something] to [direction]" as pushing it to . understand the commands move , shift , clear and press as push . |__ understand "turn [something]" as turning . understand "turn [something] on" or "turn on [something]" as switching on . understand "turn [something] off" or "turn off [something]" as switching off . understand the commands rotate , twist , unscrew and screw as turn . |__ understand "switch [something switched on]" as switching off . understand "switch [something]" or "switch on [something]" or "switch [something] on" as switching on . understand "switch [something] off" or "switch off [something]" as switching off . |__ understand "lock [something] with [something preferably held]" as locking it with . |__ understand "unlock [something] with [something preferably held]" as unlocking it with . |__ understand "attack [something]" as attacking . understand the commands break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump as attack . |__ understand "wait" as waiting . understand the command z as wait . |__ understand "answer [text] to [someone]" as answering it that ( with nouns reversed ) . understand the commands say , shout and speak as answer . |__ understand "tell [someone] about [text]" as telling it about . |__ understand "ask [someone] about [text]" as asking it about . understand "ask [someone] for [something]" as asking it for . |__ understand "eat [something preferably held]" as eating . |__ understand "sleep" as sleeping . understand the command nap as sleep . |__ understand "climb [something]" or "climb up/over [something]" as climbing . understand the command scale as climb . |__ understand "buy [something]" as buying . understand the command purchase as buy . |__ understand "squeeze [something]" as squeezing . understand the command squash as squeeze . |__ understand "swing [something]" or "swing on [something]" as swinging . |__ understand "wake" or "wake up" as waking up . understand "wake [someone]" or "wake [someone] up" or "wake up [someone]" as waking . understand the commands awake and awaken as wake . |__ understand "kiss [someone]" as kissing . understand the commands embrace and hug as kiss . |__ understand "think" as thinking . |__ understand "smell" as smelling . understand "smell [something]" as smelling . understand the command sniff as smell . |__ understand "listen" as listening to . understand "hear [something]" as listening to . understand "listen to [something]" as listening to . |__ understand "taste [something]" as tasting . |__ understand "touch [something]" as touching . understand the command feel as touch . |__ understand "rub [something]" as rubbing . understand the commands shine , polish , sweep , clean , dust , wipe and scrub as rub . |__ understand "tie [something] to [something]" as tying it to . understand the commands attach and fasten as tie . |__ understand "burn [something]" as burning . understand the command light as burn . |__ understand "drink [something]" as drinking . understand the commands swallow and sip as drink . |__ understand "cut [something]" as cutting . understand the commands slice , prune and chop as cut . |__ understand "jump" as jumping . understand the commands skip and hop as jump . |__ understand "score" as requesting the score . understand "quit" or "q" as quitting the game . understand "save" as saving the game . understand "restart" as restarting the game . understand "restore" as restoring the game . understand "verify" as verifying the story file . understand "version" as requesting the story file version . understand "script" or "script on" or "transcript" or "transcript on" as switching the story transcript on . understand "script off" or "transcript off" as switching the story transcript off . understand "superbrief" or "short" as preferring abbreviated room descriptions . understand "verbose" or "long" as preferring unabbreviated room descriptions . understand "brief" or "normal" as preferring sometimes abbreviated room descriptions . understand "nouns" or "pronouns" as requesting the pronoun meanings . understand "notify" or "notify on" as switching score notification on . understand "notify off" as switching score notification off . |__ the understand token a time period translates into i6 as RELATIVE_TIME_TOKEN . |__ part seven - phrasebook |__ chapter 1 - saying |__ section 1 - time values |__ to say ( something - time ) in words ( documented at phs_timewords ) : (-  print (PrintTimeOfDayEnglish) {something};  . to say here ( documented at phs_here ) : say "[if story tense is present tense]here[otherwise]there" . to say now ( documented at phs_now ) : say "[if story tense is present tense]now[otherwise]then" . |__ section 2 - boxed quotations |__ to display the boxed quotation ( q - text ) ( documented at ph_boxed ) : (-  DisplayBoxedQuotation({-box-quotation-text:Q});  . |__ section 3 - some built-in texts |__ to say the/-- banner text ( documented at phs_banner ) : (-  Banner();  . to say the/-- list of extension credits ( documented at phs_extcredits ) : (-  ShowExtensionVersions();  . to say the/-- complete list of extension credits ( documented at phs_compextcredits ) : (-  ShowFullExtensionVersions();  . to say the/-- player's surroundings ( documented at phs_surroundings ) : (-  SL_Location(true);  . to say run paragraph on with special look spacing -- running on ( documented at phs_runparaonsls ) : (-  SpecialLookSpacingBreak();  . to say command clarification break -- running on ( documented at phs_clarifbreak ) : (-  CommandClarificationBreak();  . |__ section 4 - responses |__ to say text of ( r - response ) ( documented at phs_response ) : carry out the issuing the response text activity with r . |__ section 5 - saying lists of things |__ to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized ( documented at ph_listcontents ) : (-  WriteListFrom(child({O}), {phrase options});  . |__ to say a list of ( os - description of objects ) ( documented at phs_alistof ) : (- 
	 	objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT);
	 . to say a list of ( os - description of objects ) ( documented at phs_alistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		TEXT_TY_Say_Capitalised((+ "[list-writer list of marked objects]" +));
	 . |__ to say list of ( os - description of objects ) ( documented at phs_listof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+NOARTICLE_BIT);
	 . to say the list of ( os - description of objects ) ( documented at phs_thelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);
	 . to say the list of ( os - description of objects ) ( documented at phs_thelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		TEXT_TY_Say_Capitalised((+ "[list-writer articled list of marked objects]" +));
	 . to say is-are a list of ( os - description of objects ) ( documented at phs_isalistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT);
	 . to say is-are list of ( os - description of objects ) ( documented at phs_islistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT+NOARTICLE_BIT);
	 . to say is-are the list of ( os - description of objects ) ( documented at phs_isthelistof ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+ISARE_BIT);
	 . to say a list of ( os - description of objects ) including contents ( documented at phs_alistofconts ) : (- 
		objectloop({-my:1} ofclass Object)
			if ({-matches-description:1:OS})
				give {-my:1} workflag2;
			else
				give {-my:1} ~workflag2;
		WriteListOfMarkedObjects(ENGLISH_BIT+RECURSE_BIT+PARTINV_BIT+
			TERSE_BIT+CONCEAL_BIT);
	 . |__ section 6 - group in and omit from lists |__ to group ( os - description of objects ) together ( documented at ph_group ) : (- 
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-list-together:unarticled});
	 . to group ( os - description of objects ) together giving articles ( documented at ph_groupart ) : (- 
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-list-together:articled});
	 . to group ( os - description of objects ) together as ( t - text ) ( documented at ph_grouptext ) : (- 
		{-my:2} = BlkValueCreate(TEXT_TY);
		{-my:2} = TEXT_TY_SubstitutedForm({-my:2}, {-by-reference:T});
		objectloop({-my:1} provides list_together)
			if ({-matches-description:1:OS})
				BlkValueCopy({-my:1}.list_together, {-my:2});
		BlkValueFree({-my:2});
	 . to omit contents in listing ( documented at ph_omit ) : (-  c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT);  . |__ section 7 - filtering contents of lists - unindexed |__ to filter list recursion to ( d - description of objects ) : (-  list_filter_routine = {D};  . to unfilter list recursion : (-  list_filter_routine = 0;  . |__ chapter 2 - multimedia |__ section 1 - figures ( for figures language element only ) |__ to display ( f - figure name ) , one time only ( documented at ph_displayfigure ) : (-  DisplayFigure(ResourceIDsOfFigures-->{F}, {phrase options});  . to decide which number is the glulx resource id of ( f - figure name ) ( documented at ph_figureid ) : (-  ResourceIDsOfFigures-->{F}  . |__ section 2 - sound effects ( for sounds language element only ) |__ to play ( sfx - sound name ) , one time only ( documented at ph_playsf ) : (-  PlaySound(ResourceIDsOfSounds-->{SFX}, {phrase options});  . to decide which number is the glulx resource id of ( sfx - sound name ) ( documented at ph_soundid ) : (-  ResourceIDsOfSounds-->{SFX}  . |__ chapter 3 - actions , activities and rules |__ section 1 - trying actions |__ to try ( s - action ) ( documented at ph_try ) : (-  {-try-action:S}  . to silently try ( s - action ) ( documented at ph_trysilently ) : (-  {-try-action-silently:S}  . to try silently ( s - action ) ( documented at ph_trysilently ) : (-  {-try-action-silently:S}  . to decide whether the action is not silent : (-  (keep_silent == false)  . |__ section 2 - action requirements |__ to decide whether the action requires a touchable noun ( documented at ph_requirestouch ) : (-  (NeedToTouchNoun())  . to decide whether the action requires a touchable second noun ( documented at ph_requirestouch2 ) : (-  (NeedToTouchSecondNoun())  . to decide whether the action requires a carried noun ( documented at ph_requirescarried ) : (-  (NeedToCarryNoun())  . to decide whether the action requires a carried second noun ( documented at ph_requirescarried2 ) : (-  (NeedToCarrySecondNoun())  . to decide whether the action requires light ( documented at ph_requireslight ) : (-  (NeedLightForAction())  . |__ to anonymously abide by ( rl - a rule ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL})) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . to anonymously abide by ( rl - value of kind k based rule producing a value ) for ( v - k ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL}, {V}, true)) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . to anonymously abide by ( rl - a nothing based rule ) ( documented at ph_abideanon ) : (-  if (temporary_value = FollowRulebook({RL})) {
		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
		else ActRulebookFails(temporary_value);
		return 2;
	}  - in to only . |__ section 3 - stop or continue |__ to stop the action ( documented at ph_stopaction ) : (-  rtrue;  - in to only . to continue the action ( documented at ph_continueaction ) : (-  rfalse;  - in to only . |__ section 4 - actions as values |__ to decide what action is the current action ( documented at ph_currentaction ) : (-  STORED_ACTION_TY_Current({-new:action})  . to decide what action is the action of ( a - action ) ( documented at ph_actionof ) : (-  {A}  . to decide if ( act - a action ) involves ( x - an object ) ( documented at ph_involves ) : (-  (STORED_ACTION_TY_Involves({-by-reference:act}, {X}))  . to decide what action name is the action name part of ( act - a action ) ( documented at ph_actionpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTION_F))  . to decide what object is the noun part of ( act - a action ) ( documented at ph_nounpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_NOUN_F))  . to decide what object is the second noun part of ( act - a action ) ( documented at ph_secondpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_SECOND_F))  . to decide what object is the actor part of ( act - a action ) ( documented at ph_actorpart ) : (-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTOR_F))  . |__ chapter 4 - the model world |__ section 1 - ending the story |__ to end the story ( documented at ph_end ) : (-  deadflag=3; story_complete=false;  . to end the story finally ( documented at ph_endfinally ) : (-  deadflag=3; story_complete=true;  . to end the story saying ( finale - text ) ( documented at ph_endsaying ) : (-  deadflag={-by-reference:finale}; story_complete=false;  . to end the story finally saying ( finale - text ) ( documented at ph_endfinallysaying ) : (-  deadflag={-by-reference:finale}; story_complete=true;  . to decide whether the story has ended ( documented at ph_ended ) : (-  (deadflag~=0)  . to decide whether the story has ended finally ( documented at ph_finallyended ) : (-  (story_complete)  . to decide whether the story has not ended ( documented at ph_notended ) : (-  (deadflag==0)  . to decide whether the story has not ended finally ( documented at ph_notfinallyended ) : (-  (story_complete==false)  . to resume the story ( documented at ph_resume ) : (-  resurrect_please = true;  . |__ section 2 - times of day |__ to decide which number is the minutes part of ( t - time ) ( documented at ph_minspart ) : (-  ({t}%ONE_HOUR)  . to decide which number is the hours part of ( t - time ) ( documented at ph_hourspart ) : (-  ({t}/ONE_HOUR)  . |__ to decide if ( t - time ) is before ( t2 - time ) ( documented at ph_timebefore ) : (-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))<(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS)))  . to decide if ( t - time ) is after ( t2 - time ) ( documented at ph_timeafter ) : (-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))>(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS)))  . to decide which time is ( t - time ) before ( t2 - time ) ( documented at ph_shiftbefore ) : (-  (({t2}-{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS))  . to decide which time is ( t - time ) after ( t2 - time ) ( documented at ph_shiftafter ) : (-  (({t2}+{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS))  . |__ section 3 - durations |__ to decide which time is ( n - number ) minutes ( documented at ph_durationmins ) : (-  (({n})%(TWENTY_FOUR_HOURS))  . to decide which time is ( n - number ) hours ( documented at ph_durationhours ) : (-  (({n}*ONE_HOUR)%(TWENTY_FOUR_HOURS))  . |__ section 4 - timed events |__ to ( r - rule ) in ( t - number ) turn/turns from now ( documented at ph_turnsfromnow ) : (-  SetTimedEvent({-mark-event-used:R}, {t}+1, 0);  . to ( r - rule ) at ( t - time ) ( documented at ph_attime ) : (-  SetTimedEvent({-mark-event-used:R}, {t}, 1);  . to ( r - rule ) in ( t - time ) from now ( documented at ph_timefromnow ) : (-  SetTimedEvent({-mark-event-used:R}, (the_time+{t})%(TWENTY_FOUR_HOURS), 1);  . |__ section 5 - scenes |__ to decide if ( sc - scene ) has happened ( documented at ph_hashappened ) : (-  (scene_endings-->({sc}-1))  . to decide if ( sc - scene ) has not happened ( documented at ph_hasnothappened ) : (-  (scene_endings-->({sc}-1) == 0)  . to decide if ( sc - scene ) has ended ( documented at ph_hasended ) : (-  (scene_endings-->({sc}-1) > 1)  . to decide if ( sc - scene ) has not ended ( documented at ph_hasnotended ) : (-  (scene_endings-->({sc}-1) <= 1)  . |__ section 6 - timing of scenes |__ to decide which time is the time since ( sc - scene ) began ( documented at ph_scenetimesincebegan ) : (-  (SceneUtility({sc}, 1))  . to decide which time is the time when ( sc - scene ) began ( documented at ph_scenetimewhenbegan ) : (-  (SceneUtility({sc}, 2))  . to decide which time is the time since ( sc - scene ) ended ( documented at ph_scenetimesinceended ) : (-  (SceneUtility({sc}, 3))  . to decide which time is the time when ( sc - scene ) ended ( documented at ph_scenetimewhenended ) : (-  (SceneUtility({sc}, 4))  . |__ section 7 - player's identity and location |__ to decide whether in darkness ( documented at ph_indarkness ) : (-  (location==thedark)  . |__ section 8 - moving and removing things |__ to move ( something - object ) to ( something else - object ) , without printing a room description or printing an abbreviated room description ( documented at ph_move ) : (-  MoveObject({something}, {something else}, {phrase options}, false);  . to remove ( something - object ) from play ( deprecated ) ( documented at ph_remove ) : (-  RemoveFromPlay({something});  . to move ( o - object ) backdrop to all ( d - description of objects ) ( documented at ph_movebackdrop ) : (-  MoveBackdrop({O}, {D});  . to update backdrop positions ( documented at ph_updatebackdrop ) : (-  MoveFloatingObjects();  . |__ section 9 - the map |__ to decide which room is location of ( o - object ) ( documented at ph_locationof ) : (-  LocationOf({O})  . to decide which room is room ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomdirof ) : (-  MapConnection({R1},{D})  . to decide which door is door ( d - direction ) from/of ( r1 - room ) ( documented at ph_doordirof ) : (-  DoorFrom({R1},{D})  . to decide which object is the other side of ( d - door ) from ( r1 - room ) ( documented at ph_othersideof ) : (-  OtherSideOfDoor({D},{R1})  . to decide which object is the direction of ( d - door ) from ( r1 - room ) ( documented at ph_directionofdoor ) : (-  DirectionDoorLeadsIn({D},{R1})  . to decide which object is room-or-door ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomordoor ) : (-  RoomOrDoorFrom({R1},{D})  . to change ( d - direction ) exit of ( r1 - room ) to ( r2 - room ) ( documented at ph_changeexit ) : (-  AssertMapConnection({R1},{D},{R2});  . to change ( d - direction ) exit of ( r1 - room ) to nothing/nowhere ( documented at ph_changenoexit ) : (-  AssertMapConnection({R1},{D},nothing);  . to decide which room is the front side of ( d - object ) ( documented at ph_frontside ) : (-  FrontSideOfDoor({D})  . to decide which room is the back side of ( d - object ) ( documented at ph_backside ) : (-  BackSideOfDoor({D})  . |__ section 10 - route-finding |__ to decide which object is best route from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroute ) : (-  MapRouteTo({R1},{R2},0,{phrase options})  . to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroutelength ) : (-  MapRouteTo({R1},{R2},0,{phrase options},true)  . to decide which object is best route from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethrough ) : (-  MapRouteTo({R1},{R2},{RS},{phrase options})  . to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethroughlength ) : (-  MapRouteTo({R1},{R2},{RS},{phrase options},true)  . |__ section 11 - the object tree |__ to decide which object is holder of ( something - object ) ( documented at ph_holder ) : (-  (HolderOf({something}))  . to decide which object is next thing held after ( something - object ) ( documented at ph_nextheld ) : (-  (sibling({something}))  . to decide which object is first thing held by ( something - object ) ( documented at ph_firstheld ) : (-  (child({something}))  . |__ chapter 5 - understanding |__ section 1 - asking yes/no questions |__ to decide whether player consents ( documented at ph_consents ) : (-  YesOrNo()  . |__ section 2 - the player's command |__ to decide if ( s - a snippet ) matches ( t - a topic ) ( documented at ph_snippetmatches ) : (-  (SnippetMatches({S}, {T}))  . to decide if ( s - a snippet ) does not match ( t - a topic ) ( documented at ph_snippetdoesnotmatch ) : (-  (SnippetMatches({S}, {T}) == false)  . to decide if ( s - a snippet ) includes ( t - a topic ) ( documented at ph_snippetincludes ) : (-  (matched_text=SnippetIncludes({T},{S}))  . to decide if ( s - a snippet ) does not include ( t - a topic ) ( documented at ph_snippetdoesnotinclude ) : (-  (SnippetIncludes({T},{S})==0)  . |__ section 3 - changing the player's command |__ to change the text of the player's command to ( t - text ) ( documented at ph_changecommand ) : (-  SetPlayersCommand({-by-reference:T});  . to replace ( s - a snippet ) with ( t - text ) ( documented at ph_replacesnippet ) : (-  SpliceSnippet({S}, {-by-reference:T});  . to cut ( s - a snippet ) ( documented at ph_cutsnippet ) : (-  SpliceSnippet({S}, 0);  . to reject the player's command ( documented at ph_rejectcommand ) : (-  RulebookFails(); rtrue;  - in to only . |__ section 4 - scope and pronouns |__ to place ( o - an object ) in scope , but not its contents ( documented at ph_placeinscope ) : (-  PlaceInScope({O}, {phrase options});  . to place the/-- contents of ( o - an object ) in scope ( documented at ph_placecontentsinscope ) : (-  ScopeWithin({O});  . to set pronouns from ( o - an object ) ( documented at ph_setpronouns ) : (-  PronounNotice({O});  . |__ section 5 - the multiple object list |__ to decide what list of objects is the multiple object list ( documented at ph_multipleobjectlist ) : (-  LIST_OF_TY_Mol({-new:list of objects})  . to alter the multiple object list to ( l - list of objects ) ( documented at ph_altermultipleobjectlist ) : (-  LIST_OF_TY_Set_Mol({-by-reference:L});  . |__ section sr5/8/1 - message support - issuance - unindexed |__ to issue score notification message : (-  NotifyTheScore();  . to say pronoun dictionary word : (-  print (address) pronoun_word;  . to say recap of command : (-  PrintCommand();  . the pronoun reference object is an object that varies . the pronoun reference object variable translates into i6 as pronoun_obj . |__ to say pronoun i6 dictionary word : (-  print (address) pronoun_word;  . |__ to say parser command so far : (-  PrintCommand();  . |__ chapter 6 - deprecated or private phrases - unindexed |__ section 1 - spatial modelling - unindexed |__ to decide which object is the component parts core of ( x - an object ) : (-  CoreOf({X})  . to decide which object is the common ancestor of ( o - an object ) with ( p - an object ) : (-  (CommonAncestor({O}, {P}))  . to decide which object is the not-counting-parts holder of ( o - an object ) : (-  (CoreOfParentOfCoreOf({O}))  . to decide which object is the visibility-holder of ( o - object ) : (-  VisibilityParent({O})  . to calculate visibility ceiling at low level : (-  FindVisibilityLevels();  . to decide which object is the touchability ceiling of ( o - object ) : (-  TouchabilityCeiling({O})  . |__ to decide which number is the visibility ceiling count calculated : (-  visibility_levels  . to decide which object is the visibility ceiling calculated : (-  visibility_ceiling  . |__ section 2 - room descriptions - unindexed |__ to produce a room description with going spacing conventions : (-  LookAfterGoing();  . |__ to print the location's description : (-  PrintOrRun(location, description);  . |__ to decide if set to sometimes abbreviated room descriptions : (-  (lookmode == 1)  . to decide if set to unabbreviated room descriptions : (-  (lookmode == 2)  . to decide if set to abbreviated room descriptions : (-  (lookmode == 3)  . |__ section 3 - action conversion - unindexed |__ to convert to ( an - an action name ) on ( o - an object ) : (-  return GVS_Convert({AN},{O},0);  - in to only . to convert to request of ( x - object ) to perform ( an - action name ) with ( y - object ) and ( z - object ) : (-  return ConvertToRequest({X}, {AN}, {Y}, {Z});  . to convert to special going-with-push action : (-  return ConvertToGoingWithPush();  . |__ section 4 - surreptitious violation of invariants - unindexed |__ to surreptitiously move ( something - object ) to ( something else - object ) : (-  move {something} to {something else};  . to surreptitiously move ( something - object ) to ( something else - object ) during going : (-  MoveDuringGoing({something}, {something else});  . to surreptitiously reckon darkness : (-  SilentlyConsiderLight();  . |__ section 5 - capitalised list-writing - unindexed |__ to say list-writer list of marked objects : (- 
	 	WriteListOfMarkedObjects(ENGLISH_BIT);
	 . to say list-writer articled list of marked objects : (- 
	 	WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+CFIRSTART_BIT);
	 . |__ section 6 - printing names - unindexed |__ to decide if expanding text for comparison purposes : (-  say__comp  . |__ section 7 - command parsing - unindexed |__ to decide whether the i6 parser is running multiple actions : (-  (multiflag==1)  . |__ section 8 - deprecated inform - unindexed |__ to yes ( documented at ph_yes ) : (-  rtrue;  - in to decide if only . to no ( documented at ph_no ) : (-  rfalse;  - in to decide if only . |__ section 9 - debugging inform - unindexed |__ to *** : (-  {-primitive-definition:verbose-checking}  . to *** ( t - text ) : (-  {-primitive-definition:verbose-checking}  . |__ the standard rules end here . |__> ==>  DS: 00000800
   <if-start-of-paragraph> equation {...}       0/6221:  ==>  DS: 00000800
   include the {...} by {...}       0/6221:  ==>  DS: 00000800
   include {...} by {...}       18/6221: <include locksmith by emily short . |__ understand "go to/toward/into [any room]" as going toward . understand "enter [any room]" as going toward . |__ a person has a room called the destination . |__ going toward is an action applying to one thing . |__ check going toward : if the noun is the location , say "You're already in [the location]." instead . |__ carry out going toward : now the destination of the player is the noun ; let heading be the best route from the location to the noun , using even locked doors ; if heading is not a direction , say "You can't think how to get there from here." instead ; try going heading ; if the location is the destination of the player , now the destination of the player is blank . |__ instead of waiting when the destination of the player is not blank : if the destination of the player is the location : now the destination of the player is blank ; otherwise : try going toward destination of the player ; if the location is the destination of the player , now the destination of the player is blank . |__ understand "stop" or "cease" as stopping . stopping is an action applying to nothing . carry out stopping : now the destination of the player is blank . report stopping : say "You stop in your tracks." |__ after going to an air-conditioned room : say "You step into the mercifully air-conditioned surroundings of..." ; continue the action . |__ after going from an air-conditioned room : say "You emerge from the air-conditioning into heat like a wall..." ; continue the action . |__ instead of listening to an air-conditioned room : say "The air-conditioning hums softly." |__ the alfred cralle pool hall is a room . "The town's most popular gathering-place, the pool hall is decorated in honor of the inventor of the ice cream scoop." the air conditioner is a device in the pool hall . "[if switched off]An air conditioner sits in the corner, unhappily inert[otherwise]The air conditioner hums briskly[end if]." |__ the felt door is west of the pool hall . the felt door is a door . the felt door is open . the felt door is lockable and unlocked . the key to the city unlocks the felt door . the description of the felt door is "It has a prominent lock, designed for an old-fashioned key." |__ after locking a door with something in the presence of an other person ( called audience ) : say "[The audience] looks a little non-plussed when you lock [the noun], but shrugs." |__ nancy johnson memorial square is west of the felt door . the description of nancy johnson memorial square is "Waves of August heat rise from the pavement: more than once you've had the fancy that your shoes are simply going to stick. At the center of the square, rubbed to a brownish polish by many adoring hands, is the statue of Mrs. Nancy Johnson of New Jersey." |__ the statue is scenery in memorial square . understand "nancy" or "johnson" or "mrs" as the statue . the description of the statue is "Mrs. Johnson is pictured with a hand-cranked ice cream freezer tucked under one arm. Her other hand grips an ice cream scoop, ready to serve frozen dessert to the huddled masses." a hand-cranked ice cream freezer is part of the statue . the description is "The hand-cranked ice cream freezer was Mrs. Johnson's invention in 1846, though it was William Young who had the sense to patent the thing in 1848." the scoop is part of the statue . the description of the scoop is "An anachronism: Alfred Cralle would not invent the tool until 1897." |__ the post office is northwest of nancy johnson memorial square . "Service at the post office is on the slow side since everything went automated." the slot is scenery in the post office . the slot is a container . carry out inserting something into the slot : now the noun is nowhere . report inserting something into the slot : say "[The noun] falls out of sight, and you know you will never see it again." |__ hamwi street is northeast of an iron gate . "A U-shaped street running from Main Street around to the Memorial Square, Hamwi Street was recently added by ambitious city planners. The small and straggly line of trees has yet to grow enough to provide perceptible shade, so the street is even hotter and more unforgiving than the other parts of town." |__ the iron gate is northeast of nancy johnson memorial square . the iron gate is a door . it is lockable and unlocked . |__ before printing the name of the iron gate while not opening or closing or locking or unlocking : if the person asked is the player : if the gate is open , say "open " ; otherwise if the gate is locked : say "locked " ; otherwise if the gate is closed : say "closed " . |__ cold comfort ice cream is north of a metal door . the metal door is north of hamwi street . a poster is fixed in place in cold comfort . "A poster fills one wall with the blazing promise of treats to come." the description of the poster is "Coming soon! Thai ice creams! Durian, jackfruit, taro, and coconut flavors!" |__ the metal door is a door . "A frosty metallic door separates [the location] from [the other side of the metal door]." the metal door is lockable and unlocked . the key to the city unlocks the metal door . |__ |__ marciony street is southeast of nancy johnson memorial square . "A semi-circular terrace, named somewhat fancifully after one claimant to the invention of the ice cream cone -- though Hamwi Street competes for the same honor. There are wedges of cool shadow here and there thanks to the buildings, but for the most part the southern exposure keeps Marciony unpleasantly hot." |__ the movie rental store is west of a glass door . the glass door is a door . it is west of marciony street . the glass door is lockable and unlocked . the key to the city unlocks the glass door . |__ main street is southeast of hamwi street . main street is northeast of some bronze gates . |__ the emergency box is in main street . the emergency box is fixed in place . "A fire-red box with a glass front faces the sidewalk, with 'In case of emergency, BREAK GLASS' lettered on it." the emergency box is closed and transparent . understand "glass" as the box . instead of attacking the closed emergency box : say "You hit the emergency box, which shatters open." ; now the emergency box is open . instead of attacking the open emergency box : say "The glass has already been thoroughly broken." |__ the syringe is in the emergency box . the description of the syringe is "It contains the cure for Gelato's Syndrome. You can inject anyone you like with it." |__ the bronze gates are northeast of marciony street . the bronze gates are a door . the bronze gates are lockable and unlocked . the description of the bronze gates is "Erected during the milk-taint revolution of 1937, they were designed to keep Main Street safe from the depredations of dairy-starved rioters." |__ the public library is east of main street . "Built in the 1920s during the height of the dairy boom, the public library has lush pink velvet seats, marble walls the color of fresh cream, and a motif of cherries carved around every doorframe. An incongruous sign hangs from the ceiling." the incongruous sign is scenery in the public library . the description of the incongruous sign is "Eating and drinking in the library is STRICTLY PROHIBITED." |__ town hall is southeast of main street . "Town Hall was built during the slow days of the ice-cream bust, and therefore it is as joyless and utilitarian as the Public Library is ridiculous. Unwilling to be reminded of their pain, the inhabitants steered clear of any decoration that might remotely be construed to resemble a scoop of anything: so there are no curves, only disciplined right angles." the key to the city is in town hall . it unlocks the iron gate . it unlocks the bronze gates . the description of the key to the city is "A skeleton key." |__ a room can be indoors or outdoors . the post office , the alfred cralle pool hall , the store , cold comfort , town hall , and the library are indoors . |__ use full-length room descriptions . |__ after looking in an outdoors room : let started printing be false ; now every proximate door is not mentioned ; if an indoors room is adjacent : let started printing be true ; say "From here you can head into [the list of adjacent indoors rooms][if a proximate door is not mentioned], or go through [the list of proximate doors which are not mentioned][end if]. [run paragraph on]" ; if an outdoors room is adjacent : say "You could[if started printing is true] also[end if] go " ; let count be the number of adjacent outdoors rooms ; let index be count ; repeat with next room running through adjacent outdoors rooms : let way be the best route from the location to the next room ; say "[way] to [the next room]" ; decrement index ; make delimiter index of count , continuing ; if a proximate door is not mentioned : let started printing be true ; say "[if started printing is true]Also available[otherwise]Your available exits[end if] [is-are the list of proximate doors which are not mentioned]." ; otherwise : if started printing is true , say paragraph break . |__ definition : a door is proximate : if the front side of it is the location , yes ; if the back side of it is the location , yes ; no . |__ before exiting when the player is in an indoors room : if the player can see a door ( called nearest exit ) , try entering the nearest exit instead ; repeat with way running through directions : let next room be the room way from the location ; if the next room is a room , try going way instead . |__ blank is a room . the destination of the player is blank . blank contains 15 ice cream cones . |__ |__ section 4 - other players |__ vanessa is a woman in cold comfort . vanessa owns cold comfort . |__ francine is a woman in the public library . francine carries a book called phlox for phyllis . francine carries a stamped envelope called a pink stamped envelope . |__ lewis is a man in the alfred cralle pool hall . lewis carries 3 stamped envelopes . lewis carries a book called idiot's guide to dating . lewis carries a book called how to meet women . lewis carries a book called seduction in three easy steps . lewis carries a dvd called sleepless in seattle . |__ gene is a man in nancy johnson memorial square . gene carries a stamped envelope . gene carries a dvd called casablanca . gene carries a coupon . |__ rhoda is a woman in marciony street . rhoda carries a book called the marciony street murders . rhoda carries a dvd called unsolved serial killings xviii . rhoda carries a stamped envelope called a squashy package . |__ martin is a man in main street . martin carries a dvd called the lifecycle of the south sea tortoise . martin carries a coupon . |__ antony is a man in movie rental . antony carries a coupon . antony carries a stamped envelope called a postcard . |__ shelby is a man in the town hall . shelby carries a dvd called conducting an orderly meeting . shelby carries 5 stamped envelopes . shelby carries an ice cream cone . shelby carries a coupon . |__ christopher is a man in the library . christopher owns the library . |__ linnea is a woman in the alfred cralle pool hall . linnea owns the alfred cralle pool hall . |__ ned is a man in the movie rental store . ned owns the movie rental . |__ after printing the name of someone ( called target ) while listing contents : if the target owns the location of the target , say " (the owner)" . |__ the description of a person is usually "[The noun] [if the noun is clean]looks healthy[otherwise]is the color of [infection color of the noun][end if]." |__ after examining another person who is carrying something : say "[if the noun is female]She[otherwise]He[end if] is carrying [a list of things carried by the noun]." |__ when play begins : let patient zero be a random other person ; now patient zero is infected . |__ section 5 - conversation |__ a person has a table name called conversation . |__ instead of asking someone about something : let the source be the conversation of the noun ; if topic understood is a topic listed in source : if there is a turn stamp entry : say "You have already heard that [summary entry]." ; otherwise : now turn stamp entry is the turn count ; now the character entry is the noun ; say "[reply entry][paragraph break]" ; otherwise : say "[The noun] stares at you blankly." . |__ instead of telling someone about something : try asking the noun about it . |__ understand "recap" or "recall" or "review" as recalling conversations . |__ recalling conversations is an action applying to nothing . |__ carry out recalling conversations : repeat with speaker running through other people : let source be the conversation of the speaker ; sort source in turn stamp order ; say "[The speaker] has so far told you: [line break]" ; let index be 0 ; repeat through source : if there is a turn stamp entry and the speaker is character entry : let index be 1 ; say "  [summary entry][line break]" ; if index is 0 , say "  absolutely nothing[line break]" ; say line break . |__ the conversation of a person is usually table of general chitchat . |__ table of general chitchat topic reply summary turn stamp character "weather/heat/warmth" "'It's appalling, isn't it? You'd think we didn't pay our taxes.'" "that the weather is appalling" a number a person "sun/sunlight" "'Good thing the town mostly switched to solar power, har, har.'" "that the town is mostly relying on solar power" "rain" "'Nope, there isn't going to be rain for 132 days,' replies [the noun]." "that rain is not expected for another 132 days" "snow/hail/ice" "This hilarious sally is greeted with hoots of laughter only." "that the concept of snow is downright laughable" "disease/sickness/illness/syndrome" "You get a cold, fixed stare in response. 'That's not funny,' [the noun] replies finally." "that discussing the disease is more or less taboo" "cold comfort" "'If you haven't tried it, you should,' says [the noun]. 'Best ice cream in town, and that's saying something, you bet.'" "that Cold Comfort has the best ice cream in town" "town/city/village" "'Yeah, it's a mite odd,' allows [the noun]. 'Not to everyone's taste, like...' [the noun as pronoun] considers for a moment. 'Like ginger ice cream. Big pieces of crystallized ginger... not everyone likes that.'" "that the town is a mite odd" "forecast/weatherman" or "weather forecast/man" "'Oh, the weather man's gotten a lot more reliable since the gummint started making it for us,' says [the noun]. 'Now he just reads off the schedule on the air every morning. Pretty much takes the fun right out of the news, if you ask me.'" "that the weather is all generated by schedule" "taxes/tax" or "weather tax" "A snort. 'You'd think for the rates we pay we'd get something a little pleasanter, don't you?'" "that the weather tax really ought to be paying for something nicer than what you get" "job/employment/work" "'[if the noun owns a room (called the shop)]I own [the shop],' replies [the noun][otherwise]Work at the creamery, like most folk around here,' answers [the noun]." "this and that about employment in town" "book/books/reading" "'The Public Library has a good selection, excepting only the cookbook section,' says [the noun]. 'That got censored way back when-- well, way back.'" "that the Public Library has a good collection, except for the cookbook section" |__ the conversation of vanessa is the table of vanessa chatter . |__ table of vanessa chatter topic reply summary turn stamp character "ice cream" or "sorbet/sherbet/flavor/flavors/flavour/flavours/ice/ices" "'The flavors are [list of flavors],' she responds promptly, without needing to draw breath." "that the flavors are [list of flavors]" a number a person |__ after reading a command : while player's command includes "the" : cut the matched text . |__ section 6 - movement description |__ a person has some text called walk style . the walk style of a man is usually "stride" . the walk style of a woman is usually "strut" . the walk style of gene is "[one of]wander[or]stroll[purely at random]" . the walk style of francine is "waddle" . the walk style of antony is "scamper" . the walk style of rhoda is "sashay" . |__ table of visible exits character second third heading chosen total a person a person a person a direction a number with 10 blank rows . |__ table of visible entrances character second third heading chosen total a person a person a person a direction a number with 10 blank rows . |__ to clear ( current table - a table name ) : repeat through current table : blank out the whole row . |__ to tidy departures of ( current table - a table name ) : let next direction be up ; repeat through current table : if heading chosen entry is next direction : let accomplice be character entry ; choose row with heading chosen of next direction in the current table ; if total entry is 1 : now second entry is accomplice ; now total entry is 2 ; if total entry is 2 : unless the second entry is accomplice : now third entry is accomplice ; now total entry is 3 ; choose row with character of accomplice in the current table ; blank out the whole row ; otherwise : let next direction be heading chosen entry . |__ a door has a person called last opener . |__ report someone opening a door : now group size is 1 ; now the last opener of the noun is the person asked ; if the person asked is visible , say "[The person asked] opens [the noun]. [run paragraph on]" instead ; otherwise say "[The noun] opens from the other side. [run paragraph on]" instead . |__ report someone going through a door ( called route ) : if the person asked is not the last opener of the route , continue the action ; if the person asked is the last person named , say "[The person asked as pronoun]" ; otherwise say "[The person asked]" ; say " [if the person asked is in the location]comes[otherwise]goes[end if] through[if the last thing named is not the route] [the route][end if]." instead . |__ the last thing named is a thing that varies . before printing the name of something ( called target ) which is not a person : now the last thing named is the target . |__ report someone going a direction : if the person asked is in the location , choose a blank row in the table of visible entrances ; otherwise choose a blank row in the table of visible exits ; now character entry is the person asked ; now total entry is 1 ; if the person asked is in the location , now heading chosen entry is the opposite of the noun ; otherwise now heading chosen entry is the noun ; stop the action . |__ this is the movement reporting rule : sort the table of visible entrances in heading chosen order ; tidy departures of the table of visible entrances ; sort the table of visible exits in heading chosen order ; tidy departures of the table of visible exits ; let total row count be the number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits ; if total row count is 0 , rule succeeds ; generate descriptions from the table of visible entrances ; generate descriptions from the table of visible exits ; clear the table of visible entrances ; clear the table of visible exits . |__ to generate descriptions from ( current table - a table name ) : let count be the number of filled rows in the current table ; if count is 0 , rule succeeds ; let index be count ; repeat through the current table : let accomplice be character entry ; if character entry is a person , now character entry is marked for listing ; if there is a second entry and second entry is a person , now second entry is marked for listing ; if there is a third entry and third entry is a person , now third entry is marked for listing ; let target be the room the heading chosen entry from the location ; if total entry is 3 , say "[The character entry], [the second entry][optional comma] and [the third entry] " ; if total entry is 2 , say "[The character entry] and [the second entry] " ; if total entry is 1 : if the character entry is the last person named , say "[The character entry as pronoun] " ; otherwise say "[The character entry] " ; if total entry is 1 , say "[walk style of the character entry]s " ; otherwise say "walk[if total entry is 1]s[end if] " ; if the character entry is in the location : if location is indoors and target is indoors , say "over from " ; if location is outdoors and target is indoors , say "out of " ; if location is indoors and target is outdoors , say "in from " ; if location is outdoors and target is outdoors , say "over from " ; otherwise : if location is indoors and target is indoors , say "over to " ; if location is outdoors and target is indoors , say "into " ; if location is indoors and target is outdoors , say "out [if a door is visible][the random visible door][end if] to " ; if location is outdoors and target is outdoors , say "over to " ; if target is outdoors , say "[the heading chosen entry]" ; otherwise say "[the target]" ; if the total entry is 1 and count is 1 and accomplice carries something , say ", carrying [a list of things carried by the accomplice]" ; decrement index ; make delimiter index of count , continuing ; now group size is total entry ; if a marked for listing person is infected : if looking and a marked for listing person is not in the location : clear marked people ; say paragraph break ; otherwise : describe patients ; otherwise : clear marked people ; say paragraph break . |__ the last person named is a person that varies . before printing the name of a person ( called target ) : now the last person named is the target . group size is a number that varies . group size is 1 . |__ to clear marked people : repeat with named party running through people : now the named party is not marked for listing . |__ before listing nondescript items : if the number of people who are marked for listing is 0 , make no decision ; say "You can see [a list of people who are marked for listing] here. " ; now group size is the number of people who are marked for listing ; describe patients ; now every marked for listing person is not marked for listing . |__ to describe patients : if every marked for listing person is infected and at least three people are marked for listing : say "They are all sick as dogs, every one." ; clear marked people ; rule succeeds ; otherwise : if the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing : say "Only [the list of clean people who are marked for listing] currently remain[if the number of clean people who are marked for listing is 1]s[end if] untainted." ; clear marked people ; rule succeeds ; let count be the number of marked for listing other people who are infected ; if count is 0 : say paragraph break ; make no decision ; let index be count ; repeat with patient running through marked for listing other people who are infected : if index is count : if count is 1 and the patient is the last person named : say "[The patient as pronoun]" ; otherwise : say "[The patient]" ; otherwise : say "[the patient]" ; say " [looks as though dipped in for index] [infection color of the patient]" ; decrement index ; make delimiter index of count ; clear marked people . |__ to say ( named character - a man ) as pronoun : if group size is 1 , say "He" ; if group size is 2 , say "The latter" ; if group size is greater than 2 , say "The last" . |__ to say ( named character - a woman ) as pronoun : if group size is 1 , say "She" ; if group size is 2 , say "The latter" ; if group size is greater than 2 , say "The last" . |__ to say looks as though dipped in for ( index - a number ) : let divider be the number of filled rows in the table of dipping phrases ; if index is greater than 4 , let index be the remainder after dividing index by divider ; choose row index in the table of dipping phrases ; say dipping entry . |__ table of dipping phrases dipping "looks as though dipped in" "could have been rolling in" "has a bad case of" "suffers from" "contracted a virulent" |__ a door is usually scenery . |__ to make delimiter ( index - a number ) of ( count - a number ) , continuing or halting : if index is 0 : if continuing , say ". [run paragraph on]" ; otherwise say "." ; otherwise if index is 1 : if count is 2 , say " and " ; otherwise say "[optional comma] and " ; otherwise : say ", " . |__ to say optional comma : if the serial comma option is active : say "," . |__ test me with go to cold comfort / z / z / z / z / ask vanessa for french vanilla / ask vanessa for chocolate / ask vanessa about flavors / ask vanessa for chocolate chocolate chip . |__ use fast route-finding . |__ |__ |__ |__ |__> ==>  DS: 00000800
   include (- {...}       0/6203:  ==>  DS: 00000800
  min 1, max 1000000000

9/2780: <comma-divisible-sentence>:  DS: 00001000
  English:
   instead of {...}       0/1057:  ==>  DS: 00001000
   every turn {***}       1/1057: <every turn rules is a rulebook> ==>  DS: 00001000
   before {...}       2/1056: <before printing the name of an artwork , say italic type> ==>  DS: 00001000
   after {...}       2/1054: <after printing the name of an artwork , say roman type> ==>  DS: 00001000
   when {...}       4/1052: <when scene begins is a scene based rulebook> ==>  DS: 00001000
  min 2, max 1000000000

0/12510: <language-modifying-sentence>:  DS: 00000400
  English:
   include (- {###} in the preform grammar       0/6255:  ==>  DS: 00000400
   use {...} language element/elements       0/6255:  ==>  DS: 00000400
  min 4, max 1000000000

30/442: <heading-qualifier>:  DS: 00080000
  English:
   {...} ( <bracketed-heading-qualifier> )       13/221: <section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only )> ==>  DS: 00080000
   {...} not for release       1/208: <volume 6 - unlocking all - not for release> ==>  DS: 00080000
   {...} for release only       0/207:  ==>  DS: 00080000
   {...} unindexed       16/207: <section 7 - unindexed standard rules variables - unindexed> ==>  DS: 00080000
  min 2, max 1000000000

13/26: <bracketed-heading-qualifier>:  DW: 00068000
  English:
   not for release       0/0:  ==>  CS: 00040000
   for release only       0/0:  ==>  CS: 00040000
   unindexed       0/0:  ==>  CS: 00040000
   <platform-qualifier>       13/13: <not for interactive fiction language element> ==>  DS: 00008000
   <extension-qualifier>       0/0:  ==>  DS: 00030000
  min 1, max 1000000000

13/26: <platform-qualifier>:  DS: 00008000
  English:
   for <platform-identifier> only       5/13: <for interactive fiction language element only> ==>  DS: 00008000
   not for <platform-identifier>       8/8: <not for interactive fiction language element> ==>  DS: 00008000
  min 3, max 1000000000

13/26: <platform-identifier>: 
  English:
   <language-element> language element       6/6: <interactive fiction language element> ==>  DS: 00006000 CW: 00006000
   {......} language element       0/0:  ==>  DS: 00004000
   <current-virtual-machine>       7/7: <z-machine> ==> 
   {......}       0/0:  ==> 
  min 1, max 1000000000

0/0: <extension-qualifier>:  DS: 00030000
  English:
   for use with <extension-identifier>       0/0:  ==>  DS: 00030000
   for use without <extension-identifier>       0/0:  ==>  DS: 00030000
   not for use with <extension-identifier>       0/0:  ==>  DS: 00030000
   in place of ( <quoted-text> ) in <extension-identifier>       0/0:  ==>  DS: 00030000
   in place of {......} in <extension-identifier>       0/0:  ==>  DS: 00030000
  min 6, max 1000000000

0/0: <extension-identifier>:  DS: 00010000
  English:
   {......} by {......}       0/0:  ==>  DS: 00010000
  min 3, max 1000000000

7/14: <current-virtual-machine>: 
  (internal)
  min 1, max 1000000000

0/0: <titling-line>: 
  English:
   <plain-titling-line> ( in <natural-language> )       0/0:  ==>  DS: 00200000
   <plain-titling-line>       0/0:  ==> 
  min 1, max 1000000000

0/0: <plain-titling-line>: 
  English:
   {<quoted-text-without-subs>} by {...}       0/0:  ==>  DS: 00100000
   {<quoted-text-without-subs>}       0/0:  ==> 
  min 1, max 1000000000

0/0: <use-option-sentence-shape>:  DS: 00400000
  English:
   use {...} .       0/0:  ==>  DS: 00400000
  min 3, max 1000000000

10/20: <extension-title-and-version>: 
  English:
   version <extension-version> of <definite-article> <extension-unversioned>       1/1: <version 6 of the standard rules> ==>  DS: 01000004
   version <extension-version> of <extension-unversioned>       3/3: <version 1 of basic inform> ==>  DS: 01000000
   <definite-article> <extension-unversioned>       0/0:  ==>  DS: 00000004
   <extension-unversioned>       6/6: <basic inform> ==> 
  min 1, max 1000000000

10/20: <extension-unversioned>: 
  English:
   <extension-unversioned-inner> ( {...} )       0/0:  ==>  DS: 00800000
   <extension-unversioned-inner>       10/10: <basic inform> ==> 
  min 1, max 1000000000

10/20: <extension-unversioned-inner>: 
  English:
   <quoted-text> {***}       0/10:  ==> 
   {...}       10/10: <basic inform> ==> 
  min 1, max 1000000000

4/8: <extension-version>: 
  (internal)
  min 1, max 1

4/8: <begins-here-sentence-subject>: 
  English:
   <extension-title-and-version> by {...}       4/4: <version 6 of the standard rules by graham nelson> ==>  DS: 02000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

1/8: <the-prefix-for-extensions>:  DS: 04000000
  English:
   the {...}       1/1: <the standard rules> ==>  DS: 04000000
  min 2, max 1000000000

2873/18796: <control-structure-phrase>:  DS: 08000000
  English:
   if {...} is begin       0/4749:  ==>  DS: 08000000
   if {...} is       0/4749:  ==>  DS: 08000000
   if/unless {...}       2123/4749: <if contents form of list is true and the common holder is not nothing , list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only> ==>  DS: 08000000
   repeat {...}       101/2626: <repeat with item running through not handled things on the tabletop which provide the property initial appearance> ==>  DS: 08000000
   while {...}       31/2525: <while the owner is not nothing and the owner is not the local ceiling> ==>  DS: 08000000
   else/otherwise       330/891: <otherwise> ==>  CS: 08000000
   else/otherwise if/unless {...}       231/2164: <otherwise if the item is a male person and item is not neuter> ==>  DS: 08000000
   else/otherwise {...}       57/1933: <otherwise now the total is the function applied to the total and the item> ==>  DS: 08000000
   -- otherwise       0/447:  ==>  CS: 08000000
   -- {...}       0/1876:  ==>  DS: 08000000
  min 1, max 1000000000

0/12004: <end-control-structure-phrase>:  CS: 10000000
  English:
   end if/unless       0/0:  ==>  CS: 10000000
   end while       0/0:  ==>  CS: 10000000
   end repeat       0/0:  ==>  CS: 10000000
  min 2, max 2

756/14584: <other-significant-phrase>:  DS: 20000000
  English:
   say {...}       584/3091: <say run paragraph on with special look spacing> ==>  DS: 20000000
   now {...}       172/2507: <now every dvd carried by the person asked is in the location of the person asked> ==>  DS: 20000000
  min 2, max 1000000000

2306/7528: <phrase-with-comma-notation>:  DS: 40000000
  English:
   {......} , {......}       2306/2580: <if contents form of list is true and the common holder is not nothing , list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only> ==>  DS: 40000000
  min 3, max 1000000000

30/9858: <instead-keyword>:  DS: 80000000
  English:
   instead {...}       0/1679:  ==>  DS: 80000000
   {...} instead       30/1679: <try the person asked approaching the public library instead> ==>  DS: 80000000
  min 2, max 1000000000

0/880: <phrase-beginning-block>:  DS: 00000040
  English:
   {...} begin       0/432:  ==>  DS: 00000040
  min 2, max 1000000000

0/0: <version-number>: 
  (internal)
  min 1, max 1

7/14: <virtual-machine>: 
  (internal)
  min 1, max 1000000000

0/0: <natural-language>: 
  (internal)
  min 1, max 1000000000

4/1112: <plural-sentence-subject>:  DW: 00000084 DS: 00000080
  English:
   <article> plural of <nounphrase-articled>       4/206: <the plural of person> ==>  DS: 00000084
   plural of <nounphrase-articled>       0/232:  ==>  DS: 00000080
  min 3, max 1000000000

0/4684: <adaptive-adjective>: 
  (internal)
  min 1, max 1000000000

0/0: <specifies-sentence-subject>: 
  English:
   {...} ( {<literal-pattern-group-list>} )       0/0:  ==>  DS: 00000400
   <k-kind-articled> times <k-kind-articled>       0/0:  ==>  DS: 00000420 CW: 00000424
   <s-type-expression> times <s-type-expression>       0/0:  ==>  DS: 00000400
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-group-list>: 
  English:
   <literal-pattern-group> <literal-pattern-group-tail>       0/0:  ==>  DS: 00000200
   <literal-pattern-group>       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-group-tail>:  DS: 00000200
  English:
   , and <literal-pattern-group-list>       0/0:  ==>  DS: 00000200
   ,/and <literal-pattern-group-list>       0/0:  ==>  DS: 00000200
  min 2, max 1000000000

0/0: <literal-pattern-group>: 
  English:
   singular       0/0:  ==>  CS: 00000100
   plural       0/0:  ==>  CS: 00000100
   <literal-pattern-group-name>       0/0:  ==> 
   in {......}       0/0:  ==>  DS: 00000100
   {......}       0/0:  ==> 
  min 1, max 1000000000

0/0: <specifies-sentence-object>: 
  English:
   <kind-specified> <literal-pattern-specification-tail>       0/0:  ==>  DW: 01010000
   <kind-specified>       0/0:  ==> 
  min 1, max 1000000000

0/0: <kind-specified>: 
  English:
   <k-kind-articled>       0/0:  ==>  DS: 00000020 CW: 00000024
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-specification-tail>:  DW: 01010000
  English:
   with parts <literal-pattern-part-list>       0/0:  ==>  DS: 01000000
   <scaling-instruction>       0/0:  ==>  DS: 00010000
   <scaling-instruction> offset by <s-literal>       0/0:  ==>  DS: 01010000
   offset by <s-literal>       0/0:  ==>  DS: 01000000
   equivalent to <s-literal>       0/0:  ==>  DS: 01000000
  min 3, max 1000000000

0/0: <scaling-instruction>:  DS: 00010000
  English:
   scaled up by <cardinal-number>       0/0:  ==>  DS: 00010001 CW: 00010001
   scaled up by <s-literal-real-number>       0/0:  ==>  DS: 00010000
   scaled down by <cardinal-number>       0/0:  ==>  DS: 00010001 CW: 00010001
   scaled down by <s-literal-real-number>       0/0:  ==>  DS: 00010000
   scaled at <cardinal-number>       0/0:  ==>  DS: 00010001 CW: 00010001
   scaled at <s-literal-real-number>       0/0:  ==>  DS: 00010000
  min 3, max 1000000000

0/0: <literal-pattern-part-list>: 
  English:
   <literal-pattern-part> , and <literal-pattern-part-list>       0/0:  ==>  DS: 00004000
   <literal-pattern-part> , <literal-pattern-part-list>       0/0:  ==>  DS: 00004000
   <literal-pattern-part> and <literal-pattern-part-list>       0/0:  ==>  DS: 00004000
   <literal-pattern-part>       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-part>: 
  English:
   <np-balanced> ( <literal-pattern-part-option-list> )       0/0:  ==>  DS: 00002000
   <np-balanced>       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-part-option-list>: 
  English:
   <literal-pattern-part-option> <literal-pattern-part-option-tail>       0/0:  ==>  DS: 00001000
   <literal-pattern-part-option>       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-part-option-tail>:  DS: 00001000
  English:
   , and <literal-pattern-part-option-list>       0/0:  ==>  DS: 00001000
   ,/and <literal-pattern-part-option-list>       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

0/0: <literal-pattern-part-option>: 
  English:
   optional       0/0:  ==>  CS: 00000800
   preamble optional       0/0:  ==>  CS: 00000800
   without leading zeros       0/0:  ==>  CS: 00000800
   {......}       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-pattern-group-name>: 
  (internal)
  min 1, max 1000000000

0/6078: <s-literal-time>:  DW: 00600001
  English:
   minus <elapsed-time>       0/0:  ==>  DS: 00500001 CW: 00500001
   <elapsed-time>       0/0:  ==>  DS: 00100001 CW: 00100001 FS: 00000001
   <clock-time>       0/2116:  ==>  DW: 00200001 DS: 00200000
  min 2, max 5

0/0: <elapsed-time>:  DS: 00100001 CW: 00100001 FS: 00000001
  English:
   <cardinal-number> hour/hours       0/0:  ==>  DS: 00100001 CW: 00100001 FS: 00000001
   <cardinal-number> minute/minutes       0/0:  ==>  DS: 00100001 CW: 00100001 FS: 00000001
   <cardinal-number> hour/hours <cardinal-number> minute/minutes       0/0:  ==>  DS: 00100001 CW: 00100001 FS: 00000001
  min 2, max 4

0/2156: <clock-time>:  DW: 00200001 DS: 00200000
  English:
   <cardinal-number> <am-pm>       0/0:  ==>  DS: 00200001 CW: 00200001 FS: 00000001
   <digital-clock-time> <am-pm>       0/1078:  ==>  DS: 00200000
  min 2, max 2

0/0: <am-pm>:  CS: 00200000
  English:
   am       0/0:  ==>  CS: 00200000
   pm       0/0:  ==>  CS: 00200000
  min 1, max 1

0/2156: <digital-clock-time>: 
  (internal)
  min 1, max 1

0/0: <continental-clock-time>: 
  (internal)
  min 1, max 1

0/3284: <event-rule-preamble>:  DS: 02000000
  English:
   at <clock-time>       0/1514:  ==>  DS: 02200000
   at the time when {...}       0/1642:  ==>  DS: 02000000
   at the time that {...}       0/1642:  ==>  DS: 02000000
   at {...}       0/1642:  ==>  DS: 02000000
  min 2, max 1000000000

0/0: <translates-into-unicode-sentence-subject>: 
  English:
   <unicode-character-name>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <translates-into-unicode-sentence-object>: 
  English:
   <cardinal-number-unlimited>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <s-unicode-character>: 
  English:
   <cardinal-number-unlimited>       0/0:  ==> 
   <unicode-character-name>       0/0:  ==> 
  min 1, max 1000000000

0/0: <unicode-character-name>: 
  (internal)
  min 1, max 1000000000

0/0: <translates-into-nl-sentence-subject>: 
  English:
   <k-kind>       0/0:  ==>  DS: 00000020 CW: 00000024
   <instance>       0/0:  ==> 
  min 1, max 1000000000

0/0: <instance-of-object>: 
  (internal)
  min 1, max 1000000000

4/252: <instance-of-non-object>: 
  (internal)
  min 1, max 1000000000

0/0: <instance>: 
  (internal)
  min 1, max 1000000000

4/186: <notable-variables>:  CS: 04000000
  English:
   i6-varying-global       1/5: <i6-varying-global> ==>  CS: 04000000
   i6-nothing-constant       1/4: <i6-nothing-constant> ==>  CS: 04000000
   command prompt       1/3: <command prompt> ==>  CS: 04000000
   parameter-object       1/2: <parameter-object> ==>  CS: 04000000
  min 1, max 2

0/0: <value-understood-variable-name>:  DS: 08000020 CW: 08000024
  English:
   <k-kind> understood       0/0:  ==>  DS: 08000020 CW: 08000024
  min 2, max 1000000000

43/96: <relation-name>: 
  (internal)
  min 1, max 1000000000

0/0: <relation-names>:  CS: 10000000
  English:
   equality       0/0:  ==>  CS: 10000000
   universal       0/0:  ==>  CS: 10000000
   meaning       0/0:  ==>  CS: 10000000
   provision       0/0:  ==>  CS: 10000000
   numerically-greater-than-or-equal-to       0/0:  ==>  CS: 10000000
   numerically-greater-than       0/0:  ==>  CS: 10000000
   numerically-less-than-or-equal-to       0/0:  ==>  CS: 10000000
   numerically-less-than       0/0:  ==>  CS: 10000000
   adjacency       0/0:  ==>  CS: 10000000
   regional-containment       0/0:  ==>  CS: 10000000
   containment       0/0:  ==>  CS: 10000000
   support       0/0:  ==>  CS: 10000000
   incorporation       0/0:  ==>  CS: 10000000
   carrying       0/0:  ==>  CS: 10000000
   holding       0/0:  ==>  CS: 10000000
   wearing       0/0:  ==>  CS: 10000000
   possession       0/0:  ==>  CS: 10000000
   visibility       0/0:  ==>  CS: 10000000
   touchability       0/0:  ==>  CS: 10000000
   concealment       0/0:  ==>  CS: 10000000
   enclosure       0/0:  ==>  CS: 10000000
   room-containment       0/0:  ==>  CS: 10000000
  min 1, max 1

5/12: <new-relation-sentence-object>:  DS: 20000000
  English:
   <nounphrase> to <nounphrase>       5/6: <a door ( called x ) to a room ( called y ) when the front side of x is y or the back side of x is y> ==>  DS: 20000000
  min 3, max 1000000000

5/10: <relates-sentence-subject>: 
  English:
   <relation-name>       0/5:  ==> 
   {...}       5/5: <leading-through> ==> 
  min 1, max 1000000000

5/10: <relates-sentence-left-object>: 
  English:
   <relation-term-basic> ( called {...} )       3/3: <one room ( called the other side )> ==>  DS: 80000000
   <relation-term-basic>       2/2: <one person> ==> 
  min 1, max 1000000000

5/10: <relates-sentence-right-object>: 
  English:
   <relation-term-right-named> with fast route-finding       0/1:  ==>  DS: 00000100
   <relation-term-right-named> when {...}       1/1: <a room ( called y ) when the front side of x is y or the back side of x is y> ==>  DS: 00000100
   <relation-term-right-named>       4/4: <various doors> ==> 
  min 1, max 1000000000

5/10: <relation-term-right-named>: 
  English:
   <relation-term-right> ( called {...} )       1/1: <a room ( called y )> ==>  DS: 00000080
   <relation-term-right>       4/4: <various doors> ==> 
  min 1, max 1000000000

5/10: <relation-term-right>: 
  English:
   {another}       0/0:  ==>  CS: 00000040
   {each other}       0/0:  ==>  CS: 00000040
   {each other in groups}       0/0:  ==>  CS: 00000040
   <relation-term-basic>       5/5: <various doors> ==> 
  min 1, max 1000000000

10/20: <relation-term-basic>: 
  English:
   one {...}       4/10: <one room> ==>  DS: 40000000
   various {...}       4/6: <various doors> ==>  DS: 40000000
   {...}       2/2: <a door> ==> 
  min 1, max 1000000000

0/0: <relation-storage-construction>:  DS: 00000200
  English:
   {...} relation storage       0/0:  ==>  DS: 00000200
  min 3, max 1000000000

0/0: <inequality-conjugations>:  CS: 00000400
  English:
   <       0/0:  ==>  CS: 00000400
   >       0/0:  ==>  CS: 00000400
   <=       0/0:  ==>  CS: 00000400
   >=       0/0:  ==>  CS: 00000400
  min 1, max 1

152/304: <verb-implies-sentence-subject>: 
  English:
   in <natural-language> <infinitive-declaration>       0/152:  ==>  DS: 00002000
   <infinitive-declaration>       152/152: <to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing )> ==> 
  min 1, max 1000000000

152/304: <infinitive-declaration>: 
  English:
   to <infinitive-usage> ( {...} )       1/152: <to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing )> ==>  DS: 00001000
   to <infinitive-usage>       151/151: <to be able to be> ==>  DS: 00001000
   <infinitive-usage> ( {...} )       0/0:  ==>  DS: 00001000
   <infinitive-usage>       0/0:  ==> 
  min 1, max 1000000000

152/304: <infinitive-usage>: 
  English:
   {be able to ...}       3/62: <be able to be> ==>  DS: 00000800
   {be able to}       1/30: <be able to> ==>  CS: 00000800
   {...}       148/148: <translate into + as> ==> 
  min 1, max 1000000000

5/10: <conjugation>:  DS: 04000000
  English:
   <nominative-pronoun> is/are {...}       2/2: <it is concealed> ==>  DS: 04004000
   <nominative-pronoun> {...}       3/3: <he conceals> ==>  DS: 04000000
  min 2, max 1000000000

1/4: <participle-like>: 
  English:
   <probable-participle> {***}       1/2: <concealing> ==> 
   {***} <probable-participle>       0/1:  ==> 
  min 1, max 1000000000

78/156: <verb-implies-sentence-object>: 
  English:
   reversed <relation-name> relation       18/78: <reversed mapping up relation> ==>  DS: 00008000
   <relation-name> relation       25/60: <equality relation> ==>  DS: 00008000
   to <instance-of-infinitive-form>       0/35:  ==>  DS: 00008000
   {...} property       0/35:  ==>  DS: 00008000
   built-in {...} meaning       35/35: <built-in new-verb meaning> ==>  DS: 00008000
   {...} relation       0/0:  ==>  DS: 00008000
   {relation}       0/0:  ==>  CS: 00008000
   {...}       0/0:  ==> 
  min 1, max 1000000000

74/1260: <new-verb-sentence-object>:  DW: 00010004 DS: 00010000
  English:
   <indefinite-article> <new-verb-sentence-object-unarticled>       74/225: <a verb> ==>  DS: 00010004
   <new-verb-sentence-object-unarticled>       0/165:  ==>  DS: 00010000
  min 1, max 1000000000

74/728: <new-verb-sentence-object-unarticled>:  DS: 00010000
  English:
   verb       74/115: <verb> ==>  CS: 00010000
   verb implying/meaning <nounphrase-definite>       0/290:  ==>  DS: 00010000
  min 1, max 1000000000

78/160: <verb-means-sentence-subject>:  DW: 00020004 DS: 00020000
  English:
   <definite-article> <verb-means-sentence-subject-unarticled>       78/80: <the verb to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing )> ==>  DS: 00020004
   <verb-means-sentence-subject-unarticled>       0/2:  ==>  DS: 00020000
  min 2, max 1000000000

78/164: <verb-means-sentence-subject-unarticled>:  DS: 00020000
  English:
   verb to       0/22:  ==>  CS: 00020000
   verb <nounphrase> in the imperative       7/80: <verb to include + in in the imperative> ==>  DS: 00020000
   verb <nounphrase>       71/73: <verb to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing )> ==>  DS: 00020000
  min 2, max 1000000000

0/0: <bootstrap-verb>:  CS: 00040000
  English:
   be       0/0:  ==>  CS: 00040000
   mean       0/0:  ==>  CS: 00040000
   imply       0/0:  ==>  CS: 00040000
  min 1, max 1

0/856: <new-adjective-sentence-object>:  DW: 00080004 DS: 00080000
  English:
   <indefinite-article> <new-adjective-sentence-object-unarticled>       0/123:  ==>  DS: 00080004
   <new-adjective-sentence-object-unarticled>       0/142:  ==>  DS: 00080000
  min 1, max 1000000000

0/350: <new-adjective-sentence-object-unarticled>:  DS: 00080000
  English:
   adjective       0/21:  ==>  CS: 00080000
   adjective implying/meaning <nounphrase-definite>       0/175:  ==>  DS: 00080000
  min 1, max 1000000000

0/0: <adjective-definition-subject>: 
  English:
   in <natural-language> {...}       0/0:  ==>  DS: 00100000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <the-debugging-log>:  CS: 00200000
  English:
   the debugging log       0/0:  ==>  CS: 00200000
  min 3, max 3

0/0: <include-in-debugging-sentence-subject>: 
  English:
   only <debugging-log-request>       0/0:  ==>  DS: 00800000
   <debugging-log-request>       0/0:  ==> 
  min 1, max 1000000000

0/0: <debugging-log-request>: 
  English:
   everything       0/0:  ==>  CS: 00400000
   nothing       0/0:  ==>  CS: 00400000
   <preform-nonterminal>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

1353/2734: <nonstructural-sentence>: 
  English:
   <sentence>       1353/1367: <the command parser errors are didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error> ==> 
  min 1, max 1000000000

2/690: <nounphrase-figure>:  DS: 01000000
  English:
   figure {...}       2/300: <figure of cover> ==>  DS: 01000000
  min 2, max 1000000000

1/688: <nounphrase-sound>:  DS: 02000000
  English:
   sound {...}       1/226: <sound name understood> ==>  DS: 02000000
  min 2, max 1000000000

0/688: <nounphrase-external-file>:  DW: 18000004
  English:
   <external-file-sentence-subject>       0/326:  ==>  DW: 18000004
  min 2, max 1000000000

90/182: <nounphrase-actionable>: 
  English:
   ^<variable-creation-tail>       90/91: <applying to one carried thing and one visible thing> ==> 
  min 1, max 1000000000

1/182: <variable-creation-tail>:  DS: 20000000
  English:
   {***} that/which vary/varies       1/91: <name based rule producing nothing that varies> ==>  DS: 20000000
   {***} variable       0/90:  ==>  DS: 20000000
  min 1, max 1000000000

0/444: <translation-target-unicode>:  CS: 40000000
  English:
   unicode       0/0:  ==>  CS: 40000000
  min 1, max 1

220/442: <translation-target-i6>:  CS: 80000000
  English:
   i6       220/220: <i6> ==>  CS: 80000000
   inform 6       0/0:  ==>  CS: 80000000
  min 1, max 2

0/0: <translation-target-language>: 
  English:
   <natural-language>       0/0:  ==> 
  min 1, max 1000000000

0/28: <bad-nonstructural-sentence-diagnosis>:  DW: 10000c00
  English:
   {...} <bad-nonstructural-sentence-diagnosis-tail>       0/0:  ==>  DW: 10000c00
  min 3, max 1000000000

0/0: <bad-nonstructural-sentence-diagnosis-tail>:  DW: 10000c00
  English:
   <relative-clause-marker> <certainty> <meaningful-nonimperative-verb> {...}       0/0:  ==>  DS: 10001040
   <relative-clause-marker> <meaningful-nonimperative-verb> {...}       0/0:  ==>  DS: 10000040
   <past-tense-verb> {...}       0/0:  ==>  FS: 00000800
   <negated-verb> {...}       0/0:  ==>  FS: 00000400
  min 2, max 1000000000

0/12: <np-relative-phrase-implicit>:  CS: 00100000
  English:
   worn       0/6:  ==>  CS: 00100000
   carried       0/6:  ==>  CS: 00100000
   initially carried       0/6:  ==>  CS: 00100000
   here       0/6:  ==>  CS: 00100000
  min 1, max 2

235/950: <prohibited-property-owners>:  DW: 000001c0
  English:
   <action-name-formal>       158/158: <unlocking keylessly action> ==>  DS: 00000040
   <activity-name-formal>       0/0:  ==>  DS: 00000080
   <rulebook-name-formal>       77/77: <specific action-processing rulebook> ==>  DS: 00000100
  min 2, max 1000000000

158/316: <action-name-formal>:  DS: 00000040
  English:
   {...} action       158/158: <unlocking keylessly action> ==>  DS: 00000040
  min 2, max 1000000000

0/0: <activity-name-formal>:  DS: 00000080
  English:
   {...} activity       0/0:  ==>  DS: 00000080
  min 2, max 1000000000

0/0: <relation-name-formal>:  DS: 00000200
  English:
   {...} relation       0/0:  ==>  DS: 00000200
  min 2, max 1000000000

1191/2382: <rule-name-formal>:  DS: 00000400
  English:
   {...} rule       1191/1191: <set pronouns from items from multiple object lists rule> ==>  DS: 00000400
  min 2, max 1000000000

84/168: <rulebook-name-formal>:  DS: 00000100
  English:
   {...} rulebook       84/84: <specific action-processing rulebook> ==>  DS: 00000100
  min 2, max 1000000000

216/432: <has-properties-called-sentence-object>: 
  English:
   <has-property-name> <has-property-name-tail>       0/40:  ==>  DS: 00001000
   <has-property-name>       216/216: <variable initial value> ==> 
  min 1, max 1000000000

0/0: <has-property-name-tail>:  DS: 00001000
  English:
   , _{and} <has-properties-called-sentence-object>       0/0:  ==>  DS: 00001000
   _{,/and} <has-properties-called-sentence-object>       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

216/432: <has-property-name>: 
  English:
   <bad-property-name-diagnosis>       0/216:  ==> 
   {...}       216/216: <variable initial value> ==> 
  min 1, max 1000000000

0/432: <bad-property-name-diagnosis>: 
  English:
   <article>       0/0:  ==>  CS: 00000004
   presence       0/0:  ==>  CS: 00000800
   {***} , {***}       0/0:  ==>  DS: 00000800
   {***} <quoted-text> {***}       0/216:  ==> 
  min 1, max 1000000000

0/10908: <sentence-needing-second-look>: 
  English:
   {***} <ambiguous-property-name> {***}       0/5454:  ==> 
  min 1, max 1000000000

438/876: <verify-expanded-text-substitution>: 
  English:
   {***} . {***}       0/438:  ==>  DS: 00002000
   , {***}       0/438:  ==>  DS: 00002000
   {***} ,       0/438:  ==>  DS: 00002000
   {***} , , {***}       0/438:  ==>  DS: 00002000
   {...}       438/438: <"From here you can head into " , the list of adjacent indoors rooms , "" , if a proximate door is not mentioned , ", or go through " , the list of proximate doors which are not mentioned , "" , end if , ". " , run paragraph on , ""> ==> 
  min 1, max 1000000000

0/0: <no-verb-diagnosis>: 
  English:
   before/every/after/when/instead/check/carry/report {...}       0/0:  ==>  DS: 00004000
   if {...}       0/0:  ==>  DS: 00004000
   {...} , {...}       0/0:  ==>  DS: 00004000
   {...}       0/0:  ==> 
  min 1, max 1000000000

104/2408: <newfound-property-of>:  DS: 00008000
  English:
   in the presence of {...}       0/310:  ==>  DS: 00008000
   {...} that varies       0/264:  ==>  DS: 00008000
   {...} variable       0/264:  ==>  DS: 00008000
   {<property-name-v>} of {...}       104/264: <adaptive text viewpoint of the english language> ==>  DS: 00008000
  min 2, max 1000000000

734/1956: <assertion-np-as-value>: 
  English:
   variable       0/16:  ==>  CS: 00010000
   action of <s-explicit-action>       0/161:  ==>  DS: 00010000
   <s-descriptive-type-expression>       728/978: <action name based rule producing nothing that varies> ==> 
   <s-global-variable>       6/250: <language of play> ==> 
  min 1, max 1000000000

0/514: <grammatical-gender-marker>:  DS: 00060000
  English:
   {...} ( <grammatical-gender-abbreviation> )       0/26:  ==>  DS: 00060000
  min 4, max 1000000000

0/0: <grammatical-gender-abbreviation>:  CS: 00020000
  English:
   n       0/0:  ==>  CS: 00020000
   m       0/0:  ==>  CS: 00020000
   f       0/0:  ==>  CS: 00020000
  min 1, max 1

0/546: <creation-problem-diagnosis>: 
  English:
   <article>       0/1:  ==>  CS: 00000004
   (/)/(- {***}       0/31:  ==>  DS: 00080000
   {***} (/)/(-       0/31:  ==>  DS: 00080000
   {...} (/)/(- {...}       0/31:  ==>  DS: 00080000
   ni--crash--1       0/2:  ==>  CS: 00080000
   ni--crash--10       0/2:  ==>  CS: 00080000
   ni--crash--11       0/2:  ==>  CS: 00080000
   , {...}       0/31:  ==>  DS: 00080000
   {...} ,       0/31:  ==>  DS: 00080000
   {...} when/while {...}       0/31:  ==>  DS: 00080000
   {***} <quoted-text> {***}       0/273:  ==> 
   condition       0/2:  ==>  CS: 00080000
   conditions       0/2:  ==>  CS: 00080000
   storage       0/2:  ==>  CS: 00080000
   storages       0/2:  ==>  CS: 00080000
   variable       0/2:  ==>  CS: 00080000
   variables       0/2:  ==>  CS: 00080000
   property-value       0/2:  ==>  CS: 00080000
   property-values       0/2:  ==>  CS: 00080000
   table-reference       0/2:  ==>  CS: 00080000
   table-references       0/2:  ==>  CS: 00080000
   list-entry       0/2:  ==>  CS: 00080000
   list-entries       0/2:  ==>  CS: 00080000
  min 1, max 1000000000

0/18: <text-ending-with-a-calling>:  DS: 00100000
  English:
   {...} ( called the {...} )       0/0:  ==>  DS: 00100000
   {...} ( called {...} )       0/0:  ==>  DS: 00100000
  min 5, max 1000000000

19/2150: <text-including-a-calling>:  DS: 00200000
  English:
   {...} ( called {...} ) {***}       19/605: <an infected person ( called typhoid mary ) can see a clean person ( called random bystander ) and a random chance of 1 in 3 succeeds> ==>  DS: 00200000
  min 5, max 1000000000

0/1474: <unsuitable-name>: 
  English:
   <article>       0/0:  ==>  CS: 00000004
   {***} (/)/{/}/,/./(- {***}       0/212:  ==>  DS: 00400000
   {***} <quoted-text> {***}       0/667:  ==> 
  min 1, max 1000000000

0/1612: <unsuitable-name-for-locals>: 
  English:
   <definite-article>       0/13:  ==>  CS: 00000004
   {***} (/)/{/}/,/. {***}       0/27:  ==>  DS: 00800000
   {***} <quoted-text> {***}       0/806:  ==> 
  min 1, max 1000000000

0/50: <unfortunate-name>: 
  English:
   {...} with/having/and/or {...}       0/9:  ==>  DS: 01000000
   <unsuitable-name>       0/25:  ==> 
  min 1, max 1000000000

0/0: <something-loose-diagnosis>:  DS: 02000000
  English:
   {***} something {***}       0/0:  ==>  DS: 02000000
  min 1, max 1000000000

0/856: <either-sentence-object>:  DS: 04000000
  English:
   either <nounphrase>       0/161:  ==>  DS: 04000000
  min 2, max 1000000000

0/86: <forbidden-property-owners>:  CW: 0c000004
  English:
   <article> kind       0/0:  ==>  DS: 08000004 CW: 08000004
   kind       0/0:  ==>  CS: 08000000
   <pronoun>       0/0:  ==>  CW: 0c000000
  min 1, max 2

43/86: <can-be-sentence-object>: 
  English:
   either <nounphrase-alternative-list> ( <condition-name> )       0/30:  ==>  DS: 40000000
   <nounphrase-alternative-list> ( <condition-name> )       0/30:  ==>  DS: 40000000
   either <nounphrase-alternative-list>       0/30:  ==>  DS: 40000000
   <nounphrase-alternative-list>       43/43: <marked for listing or unmarked for listing> ==> 
  min 1, max 1000000000

0/0: <condition-name>: 
  English:
   this is <condition-name-inner>       0/0:  ==>  DS: 20000000
   <condition-name-inner>       0/0:  ==> 
  min 1, max 1000000000

0/0: <condition-name-inner>: 
  English:
   <article> <condition-name-innermost>       0/0:  ==>  DS: 00000004
   <possessive-third-person> <condition-name-innermost>       0/0:  ==>  DS: 40000000
   <condition-name-innermost>       0/0:  ==> 
  min 1, max 1000000000

0/0: <condition-name-innermost>: 
  English:
   <nounphrase> property       0/0:  ==>  DS: 10000000
   <nounphrase>       0/0:  ==> 
  min 1, max 1000000000

4/8: <s-plain-text>: 
  (internal)
  min 1, max 1000000000

4/16: <s-plain-text-with-equals>: 
  (internal)
  min 1, max 1000000000

3198/8146: <s-value>: 
  (internal)
  min 1, max 1000000000

1093/2190: <s-condition>: 
  (internal)
  min 1, max 1000000000

4/8: <s-non-action-condition>: 
  (internal)
  min 1, max 1000000000

1945/5100: <s-type-expression>: 
  (internal)
  min 1, max 1000000000

1272/3058: <s-descriptive-type-expression>: 
  (internal)
  min 1, max 1000000000

529/1072: <s-phrase-token-type>: 
  (internal)
  min 1, max 1000000000

217/1600: <s-type-expression-or-value>: 
  English:
   <s-type-expression>       172/730: <something which is on a keychain which is carried by the actor> ==> 
   <s-value>       45/558: <best route from the location of the person asked to the noun ,> ==> 
  min 1, max 1000000000

0/244: <s-explicit-action>: 
  (internal)
  min 1, max 1000000000

0/244: <s-constant-action>: 
  (internal)
  min 1, max 1000000000

2097/23834: <s-literal>: 
  English:
   <cardinal-number>       171/289: <100> ==>  CS: 00000001
   minus <cardinal-number>       0/118:  ==>  DS: 00800001 CW: 00800001
   <quoted-text> ( <response-letter> )       273/4155: <"[current item from the multiple object list]: [run paragraph on]" ( a )> ==>  DS: 00800000
   <quoted-text>       1564/11473: <Represents geographical locations, both indoor
and outdoor, which are not necessarily areas in a building. A player in one
room is mostly unable to sense, or interact with, anything in a different room.
Rooms are arranged in a map.> ==> 
   <s-literal-real-number>       11/9909: <plus infinity> ==> 
   <s-literal-truth-state>       78/456: <false> ==>  CS: 00020000
   <s-literal-list>       0/3430:  ==>  DS: 00080000
   unicode <s-unicode-character>       0/3878:  ==>  DS: 00800000
   <s-literal-time>       0/3913:  ==>  DW: 00600001
   <s-literal-unit-notation>       0/9820:  ==> 
  min 1, max 1000000000

0/19640: <s-literal-unit-notation>: 
  (internal)
  min 1, max 1000000000

680/1360: <response-letter>: 
  (internal)
  min 1, max 1

78/462: <s-literal-truth-state>:  CS: 00020000
  English:
   false       29/231: <false> ==>  CS: 00020000
   true       49/202: <true> ==>  CS: 00020000
  min 1, max 1

11/19818: <s-literal-real-number>: 
  English:
   _pi       1/262: <pi> ==>  CS: 00008000
   _e       1/261: <e> ==>  CS: 00008000
   plus infinity       4/260: <plus infinity> ==>  CS: 00008000
   minus infinity       4/256: <minus infinity> ==>  CS: 00008000
   <literal-real-in-digits>       1/9899: <0.5> ==> 
  min 1, max 1000000000

1/19798: <literal-real-in-digits>: 
  (internal)
  min 1, max 1000000000

2367/20792: <s-constant-value>: 
  English:
   <s-literal>       1797/10396: <"[current item from the multiple object list]: [run paragraph on]" ( a )> ==> 
   nothing       97/389: <nothing> ==>  CS: 80000000
   <s-miscellaneous-proper-noun>       446/8502: <printing the name of a dark room> ==> 
   <s-rulebook-outcome-name> outcome       0/1340:  ==>  DS: 80000000
   <s-use-option-name> option       26/1340: <serial comma option> ==>  DS: 80000000
   verb <instance-of-verb>       1/1314: <verb are> ==>  DS: 80000000
   <s-rule-name> response ( <response-letter> )       0/1313:  ==>  DS: 80000000
  min 1, max 1000000000

446/17004: <s-miscellaneous-proper-noun>: 
  (internal)
  min 1, max 1000000000

0/244: <s-named-constant>: 
  (internal)
  min 1, max 1000000000

0/0: <s-rulebook-outcome-name>: 
  (internal)
  min 1, max 1000000000

26/52: <s-use-option-name>: 
  (internal)
  min 1, max 1000000000

0/0: <s-rule-name>: 
  (internal)
  min 1, max 1000000000

165/18530: <s-table-column-name>: 
  (internal)
  min 1, max 1000000000

34/1592: <property-name-as-noun-phrase>:  DW: 00000044 DS: 00000040
  English:
   <definite-article> <property-name-construction>       34/101: <the property initial appearance> ==>  DS: 00000044
   <property-name-construction>       0/97:  ==>  DS: 00000040
  min 2, max 1000000000

796/21352: <s-property-name>: 
  (internal)
  min 1, max 1000000000

651/3134: <s-adjective-list-as-desc>:  DW: 0000018c DS: 00000008
  English:
   <s-adjective-list>       651/1567: <unmarked for listing> ==>  DW: 0000018c DS: 00000008
  min 1, max 1000000000

1441/6414: <s-adjective-list>:  DW: 0000018c DS: 00000008
  English:
   not <indefinite-article> <s-adjective-list-unarticled>       0/637:  ==>  DS: 0000010c
   <indefinite-article> <s-adjective-list-unarticled>       0/678:  ==>  DS: 0000000c
   <s-adjective-list-unarticled>       1441/3205: <marked for listing other> ==>  DW: 00000088 DS: 00000008
  min 1, max 1000000000

1511/7564: <s-adjective-list-unarticled>:  DW: 00000088 DS: 00000008
  English:
   not <s-adjective>       12/393: <not lockable> ==>  DS: 00000088 CW: 00000088
   <s-adjective>       1429/2224: <unmarked for listing> ==>  CS: 00000008
   not <s-adjective> <s-adjective-list-unarticled>       0/1106:  ==>  DS: 00000088
   <s-adjective> <s-adjective-list-unarticled>       70/1163: <marked for listing other> ==>  FS: 00000008
  min 1, max 1000000000

1971/5982: <s-adjective>:  CS: 00000008
  (internal)
  min 1, max 1000000000

2691/21210: <s-qualifiable-noun>:  DS: 00000020 CW: 00000024
  English:
   <k-kind>       1798/4389: <value of kind l> ==>  DS: 00000020 CW: 00000024
   <s-instance-name>       893/2591: <the alfred cralle pool hall> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

2/198: <s-qualifiable-common-noun>:  DS: 00000020 CW: 00000024
  English:
   <k-kind>       2/53: <person> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

61/3360: <s-qualifiable-proper-noun>:  DS: 00000020 CW: 00000024
  English:
   <s-instance-name>       61/323: <alfred cralle pool hall> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

954/5828: <s-instance-name>:  DS: 00000020 CW: 00000024
  (internal)
  min 1, max 1000000000

768/3132: <s-applicable-adjective-list>:  DW: 0000018c DS: 00000008
  English:
   <s-adjective-list>       768/1544: <marked for listing other> ==>  DW: 0000018c DS: 00000008
  min 1, max 1000000000

1652/38642: <s-description>: 
  English:
   <s-description-uncomposite-inner>       1392/19321: <a player's holdall ( called the current working sack )> ==> 
   <s-np-with-relative-clause>       260/10709: <number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits> ==>  DW: 10006000
  min 1, max 1000000000

257/2044: <s-description-uncomposite>: 
  English:
   <s-description-uncomposite-inner>       257/1022: <thing ( called the item being printed )> ==> 
  min 1, max 1000000000

1649/40686: <s-description-uncomposite-inner>: 
  English:
   <s-description-uncalled> ( called <s-calling-name> )       118/3829: <a player's holdall ( called the current working sack )> ==>  DS: 00000200
   <s-description-uncalled>       1531/20225: <the alfred cralle pool hall> ==> 
  min 1, max 1000000000

1649/40686: <s-description-uncalled>: 
  English:
   <s-specifier> <s-description-unspecified>       51/10008: <at least two stamped envelopes> ==>  DW: 000001ac DS: 00000020
   <s-specifying-noun>       156/20292: <something> ==> 
   <s-specifying-noun> <s-adjective-list>       22/3241: <something switched on> ==>  DW: 0000018c DS: 00000008
   <if-trying-omission-permitted> <definite-article> <s-common-description-unspecified>       2/5741: <the person> ==>  DS: 00000024
   ^<if-trying-omission-permitted> ^<if-multiplicitous> <definite-article> <s-common-description-unspecified>       0/5739:  ==>  DS: 00000024
   <definite-article> <s-proper-description-unspecified>       56/5739: <the alfred cralle pool hall> ==>  DS: 00000024
   <indefinite-article> <s-description-unspecified>       617/5683: <a marked for listing person> ==>  DS: 00000024
   <s-description-unspecified>       745/9265: <marked for listing other people> ==>  DW: 000001ac DS: 00000020
  min 1, max 1000000000

1413/20304: <s-description-unspecified>:  DW: 000001ac DS: 00000020
  English:
   <s-qualifiable-noun>       1029/1819: <nancy johnson memorial square> ==>  DS: 00000020 CW: 00000024
   <s-applicable-adjective-list> <s-qualifiable-noun>       384/2249: <marked for listing other people> ==>  DW: 0000018c DS: 00000028
  min 1, max 1000000000

2/146: <s-common-description-unspecified>:  DW: 000001ac DS: 00000020
  English:
   <s-qualifiable-common-noun>       2/48: <person> ==>  DS: 00000020 CW: 00000024
   <s-applicable-adjective-list> <s-qualifiable-common-noun>       0/13:  ==>  DW: 0000018c DS: 00000028
  min 1, max 1000000000

56/7040: <s-proper-description-unspecified>:  DW: 000001ac DS: 00000020
  English:
   <s-qualifiable-proper-noun>       56/161: <alfred cralle pool hall> ==>  DS: 00000020 CW: 00000024
   <s-applicable-adjective-list> <s-qualifiable-proper-noun>       0/300:  ==>  DW: 0000018c DS: 00000028
  min 1, max 1000000000

428/21748: <if-trying-omission-permitted>: 
  (internal)
  min 0, max 0

4743/9674: <if-multiplicitous>: 
  (internal)
  min 0, max 0

101/542: <s-description-nounless>: 
  English:
   <s-description-nounless-uncomposite>       101/271: <cold comfort> ==> 
   <s-np-with-relative-clause>       0/170:  ==> 
  min 1, max 1000000000

101/542: <s-description-nounless-uncomposite>: 
  English:
   <s-description-nounless-uncalled> ( called <s-calling-name> )       0/136:  ==>  DS: 00000400
   <s-description-nounless-uncalled>       101/271: <cold comfort> ==> 
  min 1, max 1000000000

101/542: <s-description-nounless-uncalled>: 
  English:
   <s-specifier> <s-description-nounless-unspecified>       8/257: <every dvd> ==>  DW: 000001ac
   <s-specifying-noun>       0/263:  ==> 
   <s-specifying-noun> <s-adjective-list>       0/56:  ==>  DW: 0000018c DS: 00000008
   <if-trying-omission-permitted> <definite-article> <s-common-description-unspecified>       0/115:  ==>  DS: 00000024
   ^<if-trying-omission-permitted> ^<if-multiplicitous> <definite-article> <s-common-description-unspecified>       0/115:  ==>  DS: 00000024
   <indefinite-article> <s-description-nounless-unspecified>       0/116:  ==>  DS: 00000004
   <definite-article> <s-proper-description-unspecified>       0/115:  ==>  DS: 00000024
   <s-description-nounless-unspecified>       93/249: <cold comfort> ==>  DW: 000001ac
  min 1, max 1000000000

101/536: <s-description-nounless-unspecified>:  DW: 000001ac
  English:
   <s-qualifiable-noun>       101/143: <cold comfort> ==>  DS: 00000020 CW: 00000024
   <s-applicable-adjective-list> <s-qualifiable-noun>       0/46:  ==>  DW: 0000018c DS: 00000028
   <s-adjective-list>       0/56:  ==>  DW: 0000018c DS: 00000008
  min 1, max 1000000000

118/236: <s-calling-name>: 
  English:
   <article> {...}       83/83: <the item being printed> ==>  DS: 00000004
   {...}       35/35: <random bystander> ==> 
  min 1, max 1000000000

79/18664: <s-specifier>: 
  (internal)
  min 1, max 1000000000

286/45796: <s-specifying-noun>: 
  (internal)
  min 1, max 1000000000

1940/4790: <s-type-expression-uncached>: 
  English:
   <article> <s-type-expression-unarticled>       109/177: <a thing ( called the item being printed )> ==>  DS: 00000004
   <s-type-expression-unarticled>       1831/2286: <something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

3118/7704: <s-type-expression-unarticled>: 
  English:
   <s-variable-scope> variable/variables       2/670: <text variables> ==>  DS: 00020000
   <s-variable-scope> that/which vary/varies       59/668: <action name based rule producing nothing that varies> ==>  DS: 00020000
   <k-kind>       2436/2620: <phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n> ==>  DS: 00000020 CW: 00000024
   <s-literal>       221/1355: <Represents geographical locations, both indoor
and outdoor, which are not necessarily areas in a building. A player in one
room is mostly unable to sense, or interact with, anything in a different room.
Rooms are arranged in a map.> ==> 
   <s-constant-value>       113/1134: <for deciding whether all includes rules> ==> 
   <s-description-uncomposite>       257/1021: <thing ( called the item being printed )> ==> 
   <s-action-pattern-as-value>       3/764: <smelling> ==> 
   <s-description>       27/761: <something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

1252/3018: <s-descriptive-type-expression-uncached>: 
  English:
   <article> <s-descriptive-type-expression-unarticled>       162/202: <an ice cream cone> ==>  DS: 00000004
   <s-descriptive-type-expression-unarticled>       1090/1347: <phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n> ==> 
  min 1, max 1000000000

1252/3018: <s-descriptive-type-expression-unarticled>: 
  English:
   <s-adjective-list-as-desc>       74/148: <unmarked for listing> ==>  DW: 0000018c DS: 00000008
   <s-type-expression-unarticled>       1178/1435: <phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n> ==> 
  min 1, max 1000000000

61/124: <s-variable-scope>: 
  English:
   global       0/4:  ==>  CS: 00010000
   global <s-variable-contents>       0/11:  ==>  DS: 00010000
   <s-variable-contents>       61/62: <action name based rule producing nothing> ==> 
  min 1, max 1000000000

61/124: <s-variable-contents>: 
  English:
   <k-kind>       61/61: <action name based rule producing nothing> ==>  DS: 00000020 CW: 00000024
   <s-literal>       0/1:  ==> 
   <s-constant-value>       0/1:  ==> 
   <s-description-uncomposite>       0/1:  ==> 
   <s-description>       0/1:  ==> 
  min 1, max 1000000000

8/18384: <if-let-equation-mode>: 
  (internal)
  min 0, max 0

0/4492: <if-pronoun-present>: 
  (internal)
  min 0, max 0

9/18492: <if-table-column-expected>: 
  (internal)
  min 0, max 0

0/18492: <if-property-name-expected>: 
  (internal)
  min 0, max 0

8448/18780: <s-value-uncached>: 
  English:
   ( <s-value-uncached> )       0/4052:  ==>  DS: 00002000
   <s-variable>       144/9390: <the person reaching> ==> 
   <if-table-column-expected> <s-table-column-name>       0/9246:  ==> 
   <if-property-name-expected> <s-property-name>       0/9246:  ==> 
   <s-constant-value>       54/9246: <abs function> ==> 
   <s-equation-usage>       0/9192:  ==> 
   <s-property-name>       18/9192: <fixed in place> ==> 
   <s-action-pattern-as-value>       0/9174:  ==> 
   <s-value-phrase-non-of>       20/9174: <the remainder after dividing it by 2> ==> 
   <s-adjective-list-as-desc>       9/1417: <active> ==>  DW: 0000018c DS: 00000008
   <s-purely-physical-description>       116/9145: <a supporter ( called the chaise )> ==> 
   <s-table-reference>       0/4136:  ==>  DS: 00001000
   member/members of <s-description>       0/3908:  ==>  DS: 00002000
   member/members of <s-local-variable>       0/3908:  ==>  DS: 00002000
   <s-property-name> of <s-value-uncached>       2/3908: <the destination of the player> ==>  DS: 00002000
   <if-pronoun-present> <possessive-third-person> <s-property-name>       0/2346:  ==>  DS: 40000000
   entry <s-value-uncached> of/in/from <s-value-uncached>       0/3906:  ==>  DS: 00002000
   <s-description>       0/9027:  ==> 
   <s-table-column-name>       0/9027:  ==> 
   <s-value-phrase>       0/9027:  ==> 
  min 1, max 1000000000

4/18384: <s-equation-usage>: 
  English:
   <if-let-equation-mode> <s-plain-text-with-equals> where <s-plain-text>       4/3210: <x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number> ==>  DS: 00000800
   <s-value-uncached> where <s-plain-text>       0/3206:  ==>  DS: 00000800
   <if-let-equation-mode> <s-plain-text-with-equals>       0/9188:  ==> 
  min 1, max 1000000000

5811/24024: <s-variable>: 
  English:
   <definite-article> <s-variable>       1637/3346: <the room back the other way> ==>  DS: 00000004
   <s-local-variable>       1066/10375: <room back the other way> ==> 
   <s-stacked-variable>       897/9309: <within the player's sight> ==> 
   <s-global-variable>       2211/8412: <current item from the multiple object list> ==> 
  min 1, max 1000000000

0/0: <s-nonglobal-variable>: 
  English:
   ( <s-nonglobal-variable> )       0/0:  ==>  DS: 00040000
   <s-local-variable>       0/0:  ==> 
   <s-stacked-variable>       0/0:  ==> 
  min 1, max 1000000000

173/1122: <s-variable-as-value>: 
  English:
   <s-variable>       173/561: <the second noun> ==> 
  min 1, max 1000000000

1137/27148: <s-local-variable>: 
  (internal)
  min 1, max 1000000000

897/18618: <s-stacked-variable>: 
  (internal)
  min 1, max 1000000000

2296/19438: <s-global-variable>: 
  (internal)
  min 1, max 1000000000

105/18348: <property-of-shape>:  DS: 00080000
  English:
   <s-property-name> of {...}       105/1385: <other side of the target from the room gone from> ==>  DS: 00080000
  min 3, max 1000000000

490/18348: <s-value-phrase-non-of>: 
  (internal)
  min 1, max 1000000000

474/18054: <s-value-phrase>: 
  (internal)
  min 1, max 1000000000

139/7214: <s-table-reference>:  DS: 00001000
  English:
   <s-table-column-name> entry       135/3607: <a final response rule entry> ==>  DS: 00001000
   <s-table-column-name> in row <s-value-uncached> of <s-value-uncached>       0/3472:  ==>  DS: 00001000
   <s-table-column-name> listed in <s-value-uncached>       2/3472: <a topic listed in source> ==>  DS: 00001000
   <s-table-column-name> corresponding to <s-table-column-name> of <s-value-uncached> in <s-value-uncached>       0/3470:  ==>  DS: 00001000
   <s-table-column-name> of <s-value-uncached> in <s-value-uncached>       2/3470: <a notable-object of o in the table of locale priorities> ==>  DS: 00001000
  min 2, max 1000000000

3/19876: <s-action-pattern-as-value>: 
  (internal)
  min 1, max 1000000000

1074/2214: <s-sentence>:  DW: 08000240
  English:
   <s-existential-np> <s-existential-verb-tail>       0/1038:  ==>  DS: 08000080
   <s-noun-phrase> <s-general-verb-tail>       1074/1096: <the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==>  DW: 00000240
  min 3, max 1000000000

11/22: <s-existential-verb-tail>:  FS: 00000080
  English:
   <copular-verb> <s-noun-phrase-nounless>       11/11: <is a notable-object of o in the table of locale priorities> ==>  FS: 00000080
  min 2, max 1000000000

2149/6586: <s-general-verb-tail>:  FW: 00000240
  English:
   <universal-verb> <s-universal-relation-term>       0/1480:  ==>  DS: 00008200 FS: 00000200
   <meaningful-nonimperative-verb> <permitted-preposition> <s-noun-phrase>       220/2390: <is enclosed by a person ( called the owner ) who is not the actor> ==>  DS: 00004040 FS: 00000040
   <meaningful-nonimperative-verb> <s-noun-phrase>       1929/2202: <is the other side of the target from the room gone from> ==>  FS: 00000040
  min 2, max 1000000000

0/0: <s-universal-relation-term>:  DS: 00008000
  English:
   <s-noun-phrase> to <s-noun-phrase>       0/0:  ==>  DS: 00008000
  min 3, max 1000000000

260/9684: <s-np-with-relative-clause>:  DW: 10006000
  English:
   <s-noun-phrase-nounless> <s-implied-relative-verb-tail>       169/4336: <number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits> ==>  DW: 00006000 DS: 00002000
   <s-noun-phrase> <s-relative-verb-tail>       91/3193: <a person ( called the owner ) who is not the actor> ==>  DS: 10000000
  min 3, max 1000000000

447/31280: <s-implied-relative-verb-tail>:  DW: 00006000 DS: 00002000
  English:
   <copular-preposition> <s-noun-phrase-nounless>       446/9624: <in the table of visible entrances plus the number of filled rows in the table of visible exits> ==>  DS: 00002000
   not <copular-preposition> <s-noun-phrase-nounless>       1/8870: <not carried by the person asked> ==>  DS: 00006000
  min 2, max 1000000000

183/19442: <s-relative-verb-tail>:  DS: 10000000
  English:
   <relative-clause-marker> <universal-verb> <s-universal-relation-term>       0/4475:  ==>  DS: 10008200
   <relative-clause-marker> <meaningful-nonimperative-verb> <permitted-preposition> <s-noun-phrase>       32/4883: <which is on a keychain which is carried by the actor> ==>  DS: 10004040
   <relative-clause-marker> <meaningful-nonimperative-verb> <s-noun-phrase>       151/4906: <which provide the property initial appearance> ==>  DS: 10000040
  min 3, max 1000000000

791/18290: <s-purely-physical-description>: 
  (internal)
  min 1, max 1000000000

1206/34548: <if-forced-physical>: 
  (internal)
  min 0, max 0

4662/9648: <s-noun-phrase>: 
  English:
   <if-forced-physical> <s-variable-as-value>       30/4824: <the person asked> ==> 
   <if-forced-physical> <s-description>       30/4794: <a person ( called the owner )> ==> 
   ^<if-forced-physical> <s-value-uncached>       4602/4764: <a person ( called the owner ) who is not the actor> ==> 
  min 1, max 1000000000

796/2186: <s-noun-phrase-nounless>: 
  English:
   <if-forced-physical> <s-variable-as-value>       143/1093: <the second noun> ==> 
   <if-forced-physical> <s-description-nounless>       101/950: <cold comfort> ==> 
   ^<if-forced-physical> <s-value-uncached>       552/849: <the table of visible entrances plus the number of filled rows in the table of visible exits> ==> 
  min 1, max 1000000000

2/496: <s-descriptive-np>: 
  English:
   ( <s-descriptive-np> )       0/30:  ==>  DS: 00100000
   <cardinal-number>       0/0:  ==>  CS: 00000001
   <s-description>       0/248:  ==> 
   <s-adjective-list-as-desc>       2/2: <switched off> ==>  DW: 0000018c DS: 00000008
  min 1, max 1000000000

1071/2634: <s-condition-uncached>: 
  English:
   <s-condition-pure>       1069/1317: <number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==> 
   <s-descriptive-np>       2/248: <switched off> ==> 
  min 1, max 1000000000

1325/3170: <s-condition-pure>: 
  English:
   ( <s-condition-pure> )       0/1300:  ==>  DS: 20000000
   <s-condition-pure> , and <s-condition-pure>       0/1300:  ==>  DS: 20000000
   <s-condition-pure> and <s-condition-pure>       97/1300: <number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==>  DS: 20000000
   <s-condition-pure> , or <s-condition-pure>       0/1203:  ==>  DS: 20000000
   <s-condition-pure> or <s-condition-pure>       31/1203: <holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun> ==>  DS: 20000000
   <s-condition-with-chronology>       0/1457:  ==> 
   <s-condition-atomic>       1197/1457: <the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==> 
  min 1, max 1000000000

0/2914: <s-condition-with-chronology>: 
  (internal)
  min 1, max 1000000000

1197/2914: <s-condition-atomic>: 
  English:
   <s-phrase-option-in-use>       1/1457: <continuing> ==> 
   not <s-phrase-option-in-use>       0/764:  ==>  DS: 10000000
   <s-nonexistential-phrase-to-decide>       83/1456: <handling the printing the name of a dark room activity> ==> 
   <s-past-action-pattern-as-condition>       0/859:  ==>  DS: 00800000
   <s-past-action-pattern-as-negated-condition>       0/859:  ==>  DS: 01000000
   <s-action-pattern-as-condition>       28/1373: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
   <s-action-pattern-as-negated-condition>       0/777:  ==>  DS: 04000000
   <s-sentence>       1074/1108: <the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==>  DW: 08000240
   <s-existential-phrase-to-decide>       11/271: <there is a notable-object of o in the table of locale priorities> ==> 
  min 1, max 1000000000

83/2912: <s-nonexistential-phrase-to-decide>: 
  English:
   <existential-verb-phrase>       0/1100:  ==>  DS: 08200000
   <s-phrase-to-decide>       83/1445: <handling the printing the name of a dark room activity> ==> 
   not <s-phrase-to-decide>       0/1084:  ==>  DS: 00400000
  min 1, max 1000000000

11/542: <s-existential-phrase-to-decide>: 
  English:
   ^<existential-verb-phrase>       0/11:  ==> 
   <s-phrase-to-decide>       11/11: <there is a notable-object of o in the table of locale priorities> ==> 
   not <s-phrase-to-decide>       0/0:  ==>  DS: 08000000
  min 1, max 1000000000

22/2764: <existential-verb-phrase>:  DS: 08200000
  English:
   <s-existential-np> is/are {...}       22/1123: <there is a notable-object of o in the table of locale priorities> ==>  DS: 08200000
  min 3, max 1000000000

94/2912: <s-phrase-to-decide>: 
  (internal)
  min 1, max 1000000000

1/2914: <s-phrase-option-in-use>: 
  (internal)
  min 1, max 1000000000

28/2746: <s-action-pattern-as-condition>: 
  English:
   <we-are-action-pattern>       28/1373: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/1554: <s-action-pattern-as-negated-condition>:  DS: 04000000
  English:
   <action-pattern-negated>       0/777:  ==>  DS: 04000000
  min 2, max 1000000000

0/1718: <s-past-action-pattern-as-condition>:  DS: 00800000
  English:
   <action-pattern-past>       0/859:  ==>  DS: 00800000
  min 3, max 1000000000

0/1666: <s-past-action-pattern-as-negated-condition>:  DS: 01000000
  English:
   <action-pattern-past-negated>       0/833:  ==>  DS: 01000000
  min 4, max 1000000000

1374/2748: <s-command>: 
  English:
   ( <s-command> )       0/1199:  ==>  DS: 40000000
   <s-to-phrase>       1374/1374: <if the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing> ==> 
  min 1, max 1000000000

2627/5254: <s-say-command>: 
  English:
   ( <s-say-command> )       0/1030:  ==>  DS: 00000040
   <s-adaptive-text>       239/2627: <might not appreciate> ==> 
   <s-text-substitution>       2388/2388: <if the number of clean people who are marked for listing is 1> ==> 
  min 1, max 1000000000

239/5254: <s-adaptive-text>: 
  English:
   <s-local-variable>       0/2581:  ==> 
   <adaptive-verb> verb       0/430:  ==>  DS: 80000000
   <adaptive-adjective> adjective       0/430:  ==>  DS: 80000000
   <adaptive-verb>       210/2581: <do not fit> ==> 
   <modal-verb> <adaptive-verb-infinitive> verb       0/390:  ==>  DS: 80000000
   <modal-verb> <adaptive-verb-infinitive>       29/2371: <might not appreciate> ==> 
   <adaptive-adjective>       0/2342:  ==> 
  min 1, max 1000000000

1374/2748: <s-to-phrase>: 
  (internal)
  min 1, max 1000000000

2388/4776: <s-text-substitution>: 
  (internal)
  min 1, max 1000000000

0/0: <structural-phrase-problem-diagnosis>:  CS: 00000080
  English:
   continue       0/0:  ==>  CS: 00000080
  min 1, max 1

0/0: <failed-text-substitution-diagnosis>: 
  English:
   a list of {...}       0/0:  ==>  DS: 00000100
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <condition-problem-diagnosis>: 
  English:
   <condition-problem-part> <condition-problem-part-tail>       0/0:  ==>  DS: 00000400
   <condition-problem-part>       0/0:  ==> 
  min 1, max 1000000000

0/0: <condition-problem-part-tail>:  DS: 00000400
  English:
   , and/or <condition-problem-diagnosis>       0/0:  ==>  DS: 00000400
   ,/and/or <condition-problem-diagnosis>       0/0:  ==>  DS: 00000400
  min 2, max 1000000000

0/0: <condition-problem-part>: 
  English:
   <s-condition>       0/0:  ==> 
   <s-value>       0/0:  ==> 
   {...} begins/ends       0/0:  ==>  DS: 00000200
   when/while {***}       0/0:  ==>  DS: 00000200
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <unknown-text-shape>: 
  English:
   say {...}       0/0:  ==>  DS: 00000800
   {...} and/or {...}       0/0:  ==>  DS: 00000800
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <unknown-text-substitution-problem-diagnosis>: 
  English:
   , {...}       0/0:  ==>  DS: 00001000
   unicode {...}       0/0:  ==>  DS: 00001000
   {...} condition       0/0:  ==>  DS: 00001000
   otherwise/else {***}       0/0:  ==>  DS: 00001000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <unknown-value-problem-diagnosis>: 
  English:
   turns       0/0:  ==>  CS: 00002000
   {...} is/are out of play       0/0:  ==>  DS: 00002000
   unicode {...}       0/0:  ==>  DS: 00002000
   {...} condition       0/0:  ==>  DS: 00002000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <unknown-use-option-diagnosis>: 
  English:
   {...} ^option       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <unknown-activity-diagnosis>: 
  English:
   {...} of       0/0:  ==>  DS: 00004000
   {...} for       0/0:  ==>  DS: 00004000
   {...}       0/0:  ==> 
  min 1, max 1000000000

4/292: <notable-properties>:  CS: 00008000
  English:
   description       1/5: <description> ==>  CS: 00008000
   specification       1/4: <specification> ==>  CS: 00008000
   indefinite appearance text       1/3: <indefinite appearance text> ==>  CS: 00008000
   variable initial value       1/2: <variable initial value> ==>  CS: 00008000
  min 1, max 3

34/354: <property-name-construction>:  DS: 00000040
  English:
   property {...}       34/135: <property initial appearance> ==>  DS: 00000040
  min 2, max 1000000000

69/340: <property-name>: 
  (internal)
  min 1, max 1000000000

0/44: <either-or-property-name>: 
  (internal)
  min 1, max 1000000000

127/2212: <value-property-name>: 
  (internal)
  min 1, max 1000000000

104/228: <property-name-v>: 
  (internal)
  min 1, max 1000000000

0/292: <name-looking-like-property-test>:  DS: 00010000
  English:
   {***} of {***}       0/13:  ==>  DS: 00010000
  min 1, max 1000000000

0/82192: <ambiguous-property-name>: 
  (internal)
  min 1, max 1000000000

0/82: <measurement-adjective-definition>:  DS: 40040000
  English:
   <possessive-third-person> {...} is/are not {...}       0/34:  ==>  DS: 40040000
   <possessive-third-person> {<property-name>} is/are <measurement-range>       0/34:  ==>  DS: 40040000
   <possessive-third-person> {...} is/are <measurement-range>       0/34:  ==>  DS: 40040000
  min 4, max 1000000000

0/0: <measurement-range>: 
  English:
   {...} or more       0/0:  ==>  DS: 00020000
   {...} or less       0/0:  ==>  DS: 00020000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <comparative-property-construction>:  DS: 00080000
  English:
   {...} than       0/0:  ==>  DS: 00080000
  min 2, max 1000000000

0/0: <same-property-as-construction>:  DS: 00100000
  English:
   the same {...} as       0/0:  ==>  DS: 00100000
  min 4, max 1000000000

22/44: <relation-property-name>: 
  English:
   <either-or-property-name>       0/22:  ==> 
   <value-property-name>       22/22: <variable initial value> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/6482: <s-literal-list>:  DS: 00080000
  English:
   { }       0/122:  ==>  CS: 00080000
   { <literal-list-contents> }       0/3241:  ==>  DS: 00080000
  min 2, max 1000000000

0/0: <literal-list-contents>: 
  English:
   <literal-list-entry> , <literal-list-contents>       0/0:  ==>  DS: 00040000
   <literal-list-entry>       0/0:  ==> 
  min 1, max 1000000000

0/0: <literal-list-entry>: 
  English:
   <s-value>       0/0:  ==> 
   {......}       0/0:  ==> 
  min 1, max 1000000000

28/56: <table-column-heading>: 
  English:
   ( {***} )       0/2:  ==>  DS: 00400000
   <s-table-column-name> ( {...} )       0/2:  ==>  DS: 00400000
   <table-column-heading-unbracketed> ( {...} )       2/2: <locale description priority ( a number )> ==>  DS: 00400000
   <s-table-column-name>       12/26: <turn stamp> ==> 
   <table-column-heading-unbracketed>       14/14: <final question wording> ==> 
  min 1, max 1000000000

16/32: <table-column-heading-unbracketed>: 
  English:
   <article>       0/0:  ==>  CS: 00000004
   {topic}       1/1: <topic> ==>  CS: 00200000
   {<property-name>}       0/15:  ==> 
   {<s-constant-value>}       0/15:  ==> 
   {...}       15/15: <final question wording> ==> 
  min 1, max 1000000000

0/0: <table-column-name-construction>:  DS: 00800000
  English:
   {...} column       0/0:  ==>  DS: 00800000
  min 2, max 1000000000

7/14: <table-header>:  DS: 01000000
  English:
   <table-new-name> ( continued )       0/0:  ==>  DS: 03000000
   <table-new-name> ( amended )       0/0:  ==>  DS: 03000000
   <table-new-name> ( replaced )       0/0:  ==>  DS: 03000000
   <table-new-name>       7/7: <table of final question options> ==>  DS: 01000000
  min 2, max 1000000000

7/14: <table-new-name>:  DS: 01000000
  English:
   table {...} - {...}       0/7:  ==>  DS: 01000000
   table {###}       0/7:  ==>  DS: 01000000
   table of {...}       7/7: <table of final question options> ==>  DS: 01000000
   table {...}       0/0:  ==>  DS: 01000000
  min 2, max 1000000000

0/0: <table-names-construction>:  DS: 04000000
  English:
   table {...}       0/0:  ==>  DS: 04000000
   table of {...}       0/0:  ==>  DS: 04000000
  min 2, max 1000000000

3/14: <table-footer>:  DS: 08000000
  English:
   {***} with <cardinal-number> blank row/rows       2/7: <table of visible exits character second third heading chosen total a person a person a person a direction a number with 10 blank rows> ==>  DS: 08000001
   {***} with {...} blank row/rows       0/5:  ==>  DS: 08000000
   {***} with blank row/rows for each/every {...}       1/5: <table of locale priorities notable-object ( an object ) locale description priority ( a number ) -- -- with blank rows for each thing> ==>  DS: 08000000
  min 4, max 1000000000

164/328: <table-cell>: 
  English:
   <table-cell-blank>       14/14: <--> ==>  CS: 10000000
   <k-kind-articled>       28/28: <a number> ==>  DS: 00000020 CW: 00000024
   <s-named-constant>       0/122:  ==> 
   <s-global-variable>       0/122:  ==> 
   <table-cell-value>       116/122: <immediately restart the vm rule> ==> 
   <list-of-double-quotes>       6/6: <"forecast/weatherman" or "weather forecast/man"> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

14/28: <table-cell-blank>:  CS: 10000000
  English:
   --       14/14: <--> ==>  CS: 10000000
  min 1, max 1

116/244: <table-cell-value>: 
  English:
   the action of <s-constant-action>       0/8:  ==>  DS: 20000000
   <s-constant-action>       0/122:  ==> 
   the action of <s-explicit-action>       0/8:  ==>  DS: 20000000
   <s-explicit-action>       0/122:  ==> 
   <instance-of-non-object>       0/122:  ==> 
   <s-type-expression>       116/122: <immediately restart the vm rule> ==> 
  min 1, max 1000000000

12/24: <list-of-double-quotes>: 
  English:
   <quoted-text> or <list-of-double-quotes>       6/6: <"forecast/weatherman" or "weather forecast/man"> ==>  DS: 40000000
   <quoted-text>       6/6: <"weather forecast/man"> ==> 
  min 1, max 1000000000

0/0: <defined-by-sentence-subject>: 
  English:
   kind/kinds of <s-type-expression>       0/0:  ==>  DS: 80000000
   <s-type-expression>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <defined-by-sentence-object-inner>: 
  English:
   <s-value>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/856: <defined-by-sentence-object>:  DS: 00000040
  English:
   defined by <nounphrase-as-object>       0/160:  ==>  DS: 00000040
  min 3, max 1000000000

0/0: <unfortunate-table-column-property>:  CS: 00000080
  English:
   location       0/0:  ==>  CS: 00000080
  min 1, max 1

0/0: <equation-name>:  DS: 00000100
  English:
   equation {<cardinal-number>} - {...}       0/0:  ==>  DS: 00000101
   equation {<cardinal-number>}       0/0:  ==>  DS: 00000101 CW: 00000101
   equation - {...}       0/0:  ==>  DS: 00000100
   equation {***}       0/0:  ==>  DS: 00000100
  min 1, max 1000000000

0/8: <text-ending-in-comma>:  DS: 00000200
  English:
   {...} ,       0/3:  ==>  DS: 00000200
  min 2, max 1000000000

0/0: <equation-names-construction>:  DS: 00000400
  English:
   equation {...}       0/0:  ==>  DS: 00000400
   {...} equation       0/0:  ==>  DS: 00000400
  min 2, max 1000000000

0/0: <equation-where>:  DS: 00000800
  English:
   {...} where {...}       0/0:  ==>  DS: 00000800
  min 3, max 1000000000

4/8: <equation-where-list>: 
  English:
   {...}       0/4:  ==> 
   <equation-where-setting-entry> <equation-where-tail>       0/4:  ==>  DS: 00002000
   <equation-where-setting-entry>       4/4: <x is a real number> ==> 
  min 1, max 1000000000

0/32: <equation-where-tail>:  DS: 00002000
  English:
   , _and <equation-where-list>       0/8:  ==>  DS: 00002000
   _,/and <equation-where-list>       0/8:  ==>  DS: 00002000
  min 2, max 1000000000

4/8: <equation-where-setting-entry>: 
  English:
   <equation-where-setting>       4/4: <x is a real number> ==> 
  min 1, max 1000000000

4/8: <equation-where-setting>: 
  English:
   <equation-symbol> is/are <k-kind>       4/4: <x is a real number> ==>  DS: 00001020
   <equation-symbol> is/are <s-value>       0/0:  ==>  DS: 00001000
   <equation-symbol> is/are {...}       0/0:  ==>  DS: 00001000
   <equation-symbol> = <k-kind>       0/0:  ==>  DS: 00001020
   <equation-symbol> = <s-value>       0/0:  ==>  DS: 00001000
   <equation-symbol> = {...}       0/0:  ==>  DS: 00001000
   <equation-symbol>       0/0:  ==> 
  min 1, max 1000000000

4/8: <equation-symbol>: 
  English:
   <valid-equation-symbol>       4/4: <x> ==> 
   {###}       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

4/8: <valid-equation-symbol>: 
  (internal)
  min 1, max 1000000000

431/862: <new-rulebook-name>: 
  English:
   <definite-article> <new-rulebook-name>       0/110:  ==>  DS: 00000004
   <new-rulebook-name> rules/rulebook       24/416: <does the player mean rules> ==>  DS: 00004000
   at {***}       0/392:  ==>  DS: 00004000
   to {***}       0/392:  ==>  DS: 00004000
   definition {***}       0/392:  ==>  DS: 00004000
   {...}       407/407: <before printing a refusal to act in the dark> ==> 
  min 1, max 1000000000

0/0: <rulebook-name-construction>:  DS: 00008000
  English:
   {...} rules       0/0:  ==>  DS: 00008000
   {...} rulebook       0/0:  ==>  DS: 00008000
  min 2, max 1000000000

7/14: <rulebook-variable-name>: 
  English:
   <unfortunate-name>       0/7:  ==> 
   {...}       7/7: <specific carry out rulebook> ==> 
  min 1, max 1000000000

371/790: <rulebook-stem>: 
  (internal)
  min 1, max 1000000000

395/790: <rulebook-stem-inner>: 
  English:
   <indefinite-article> <rulebook-stem-inner-unarticled>       19/329: <a first turn sequence rule> ==>  DS: 00000004
   <definite-article> <rulebook-stem-inner-unarticled>       3/310: <the last specific action-processing rule> ==>  DS: 00000004
   <rulebook-stem-inner-unarticled>       373/373: <after locking a door with something in the presence of an other person ( called audience )> ==> 
  min 1, max 1000000000

395/790: <rulebook-stem-inner-unarticled>: 
  English:
   rule for/about/on <rulebook-stem-name>       13/203: <rule for printing a number of something ( called the item )> ==>  DS: 00020000
   rule <rulebook-stem-name>       0/190:  ==>  DS: 00020000
   first rule <rulebook-stem-name>       0/190:  ==>  DS: 00020000
   first <rulebook-stem-name>       3/190: <first turn sequence rule> ==>  DS: 00020000
   last rule <rulebook-stem-name>       0/187:  ==>  DS: 00020000
   last <rulebook-stem-name>       3/187: <last turn sequence rule> ==>  DS: 00020000
   <rulebook-stem-name>       376/376: <after locking a door with something in the presence of an other person ( called audience )> ==> 
  min 1, max 1000000000

395/790: <rulebook-stem-name>: 
  English:
   {when ... begins}       4/94: <when a scene ( called the event ) begins> ==>  DS: 00010000
   {when ... ends}       0/90:  ==>  DS: 00010000
   {...}       391/391: <after locking a door with something in the presence of an other person ( called audience )> ==> 
  min 1, max 1000000000

7/14: <rulebook-property>: 
  English:
   outcome/outcomes <rulebook-outcome-list>       7/7: <outcomes it is very likely , it is likely , it is possible , it is unlikely and it is very unlikely> ==>  DS: 00200000
   default <rulebook-default-outcome>       0/0:  ==>  DS: 00200000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <rulebook-default-outcome>: 
  English:
   <rule-outcome>       0/0:  ==>  CS: 00040000
   {...}       0/0:  ==> 
  min 1, max 1000000000

18/36: <rule-outcome>:  CS: 00040000
  English:
   success       10/18: <success> ==>  CS: 00040000
   failure       8/8: <failure> ==>  CS: 00040000
   no outcome       0/0:  ==>  CS: 00040000
  min 1, max 2

27/54: <rulebook-outcome-list>: 
  English:
   {...}       10/27: <it is likely , it is possible , it is unlikely and it is very unlikely> ==> 
   <rulebook-outcome-setting-entry> <rulebook-outcome-tail>       10/16: <it is very likely , it is likely , it is possible , it is unlikely and it is very unlikely> ==>  DS: 00100000
   <rulebook-outcome-setting-entry>       7/7: <there is insufficient light ( success )> ==> 
  min 1, max 1000000000

20/164: <rulebook-outcome-tail>:  DS: 00100000
  English:
   , _and/or <rulebook-outcome-list>       0/76:  ==>  DS: 00100000
   _,/and/or <rulebook-outcome-list>       20/76: <, it is likely , it is possible , it is unlikely and it is very unlikely> ==>  DS: 00100000
  min 2, max 1000000000

27/54: <rulebook-outcome-setting-entry>: 
  English:
   <form-of-named-rule-outcome>       27/27: <there is sufficient light ( failure )> ==> 
  min 1, max 1000000000

27/54: <form-of-named-rule-outcome>: 
  English:
   {...} ( <rule-outcome> - the default )       0/18:  ==>  DS: 000c0000
   {...} ( <rule-outcome> - default )       0/18:  ==>  DS: 000c0000
   {...} ( <rule-outcome> )       18/18: <there is sufficient light ( failure )> ==>  DS: 000c0000
   {...} ( {...} )       0/0:  ==>  DS: 00080000
   {...}       9/9: <it is very likely> ==> 
  min 1, max 1000000000

5/30: <notable-rulebook-outcomes>:  CS: 00400000
  English:
   it is very likely       1/5: <it is very likely> ==>  CS: 00400000
   it is likely       1/4: <it is likely> ==>  CS: 00400000
   it is possible       1/3: <it is possible> ==>  CS: 00400000
   it is unlikely       1/2: <it is unlikely> ==>  CS: 00400000
   it is very unlikely       1/1: <it is very unlikely> ==>  CS: 00400000
  min 3, max 4

8/1226: <named-rulebook-outcome>: 
  (internal)
  min 1, max 1000000000

82/164: <rulebook-name>: 
  (internal)
  min 1, max 1000000000

123/246: <rule-name>: 
  (internal)
  min 1, max 1000000000

83/166: <listed-in-sentence-object>:  DS: 00800000
  English:
   listed <nounphrase>       82/83: <listed instead of the can't unlock without the correct key rule in the check unlocking it with rulebook> ==>  DS: 00800000
   not listed <nounphrase>       1/1: <not listed in any rulebook> ==>  DS: 00800000
  min 2, max 1000000000

113/932: <nounphrase-rule-list>: 
  English:
   {...}       30/466: <only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to> ==> 
   <nounphrase-rule> <np-rule-tail>       0/316:  ==>  DS: 03000000
   <nounphrase-rule>       83/391: <the set pronouns from items from multiple object lists rule> ==>  DS: 01000000
  min 1, max 1000000000

30/2592: <np-rule-tail>:  DS: 02000000
  English:
   , _{and} <nounphrase-rule-list>       1/569: <, and the library> ==>  DS: 02000000
   _{,/and} <nounphrase-rule-list>       29/568: <, only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to> ==>  DS: 02000000
  min 2, max 1000000000

83/838: <nounphrase-rule>:  DS: 01000000
  English:
   {...} rule       83/419: <the set pronouns from items from multiple object lists rule> ==>  DS: 01000000
  min 2, max 1000000000

0/0: <substitutes-for-sentence-object>:  DS: 01000000
  English:
   <nounphrase-rule>       0/0:  ==>  DS: 01000000
   <nounphrase-rule> if/when <nounphrase>       0/0:  ==>  DS: 05000000
   <nounphrase-rule> unless <nounphrase>       0/0:  ==>  DS: 05000000
  min 2, max 1000000000

0/0: <substitutes-for-sentence-subject>: 
  English:
   <rule-name>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <substitutes-for-sentence-object-inner>: 
  English:
   <rule-name>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <does-nothing-sentence-object>:  CS: 08000000
  English:
   nothing       0/0:  ==>  CS: 08000000
  min 1, max 1

0/0: <does-nothing-sentence-subject>: 
  English:
   <rule-name>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

83/166: <listed-in-sentence-subject>: 
  English:
   <rule-name>       83/83: <the set pronouns from items from multiple object lists rule> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

83/166: <listed-in-sentence-object-inner>: 
  English:
   in any rulebook       1/9: <in any rulebook> ==>  CS: 10000000
   in <destination-rulebook>       32/82: <in the carry out switching the story transcript on rulebook> ==>  DS: 10000000
   first in <destination-rulebook>       16/50: <first in for starting the virtual machine> ==>  DS: 10000000
   last in <destination-rulebook>       30/34: <last in the for printing the plural name rulebook> ==>  DS: 10000000
   instead of <rule-name> in <rulebook-name>       3/4: <instead of the can't unlock without the correct key rule in the check unlocking it with rulebook> ==>  DS: 10000000
   instead of <rule-name> in {...}       0/1:  ==>  DS: 10000000
   instead of {...} in {...}       0/1:  ==>  DS: 10000000
   before <rule-name> in <rulebook-name>       1/1: <before the can't remove what's not inside rule in the check removing it from rules> ==>  DS: 10000000
   before <rule-name> in {...}       0/0:  ==>  DS: 10000000
   before {...} in {...}       0/0:  ==>  DS: 10000000
   after <rule-name> in <rulebook-name>       0/0:  ==>  DS: 10000000
   after <rule-name> in {...}       0/0:  ==>  DS: 10000000
   after {...} in {...}       0/0:  ==>  DS: 10000000
   instead of {...}       0/0:  ==>  DS: 10000000
   before {...}       0/0:  ==>  DS: 10000000
   after {...}       0/0:  ==>  DS: 10000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

78/156: <destination-rulebook>: 
  English:
   <rulebook-name>       78/78: <the carry out switching the story transcript on rulebook> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

34/1104: <bare-activity-sentence-object>:  DS: 20000000 CW: 20000004
  English:
   <article> activity       34/34: <an activity> ==>  DS: 20000004 CW: 20000004
   activity       0/0:  ==>  CS: 20000000
  min 1, max 2

35/70: <activity-sentence-subject>: 
  English:
   <activity-noted> ( <documentation-symbol> )       32/34: <clarifying the parser's choice of something ( future action ) ( documented at act_clarify )> ==>  DS: 000000c0
   <activity-noted> -- <documentation-symbol> --       1/2: <issuing the response text of something -- documented at act_resp --> ==>  DS: 000000c0
   <activity-noted>       2/2: <handling the final question> ==> 
  min 1, max 1000000000

35/70: <activity-noted>: 
  English:
   <activity-new-name> ( future action )       4/25: <clarifying the parser's choice of something ( future action )> ==>  DS: 80000000
   <activity-new-name> ( {...} )       0/21:  ==>  DS: 80000000
   <activity-new-name>       31/31: <printing a refusal to act in the dark> ==> 
  min 1, max 1000000000

35/70: <activity-new-name>: 
  English:
   {...} of/for something/anything       14/31: <printing the plural name of something> ==>  DS: 40000000
   {...} something/anything       5/17: <printing a locale paragraph about something> ==>  DS: 40000000
   {...}       16/16: <printing a refusal to act in the dark> ==> 
  min 1, max 1000000000

0/0: <activity-name-construction>:  DS: 00000100
  English:
   {...} activity       0/0:  ==>  DS: 00000100
  min 2, max 1000000000

0/0: <activity-variable-name>: 
  English:
   <unfortunate-name>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

41/82: <run-time-context>: 
  English:
   not <activity-list-unnegated>       1/30: <not opening or closing or locking or unlocking> ==>  DS: 00001000
   <activity-list-unnegated>       40/40: <dropping or throwing or inserting or putting> ==> 
  min 1, max 1000000000

41/82: <activity-list-unnegated>: 
  English:
   {...}       14/41: <throwing or inserting or putting> ==> 
   <activity-list-entry> <activity-tail>       14/14: <dropping or throwing or inserting or putting> ==>  DS: 00000800
   <activity-list-entry>       13/13: <an actor smelling> ==> 
  min 1, max 1000000000

28/64: <activity-tail>:  DS: 00000800
  English:
   , _or <run-time-context>       0/32:  ==>  DS: 00000800
   _,/or <run-time-context>       28/32: <or throwing or inserting or putting> ==>  DS: 00000800
  min 2, max 1000000000

41/82: <activity-list-entry>: 
  English:
   <activity-name>       1/41: <listing contents> ==> 
   <activity-name> of/for <activity-operand>       0/3:  ==>  DS: 00000400
   <activity-name> <activity-operand>       0/40:  ==> 
   ^<if-parsing-al-conditions> {...}       0/40:  ==> 
   <if-parsing-al-conditions> <s-condition>       40/40: <an actor smelling> ==> 
  min 1, max 1000000000

3/30: <activity-operand>: 
  English:
   something/anything       0/2:  ==>  CS: 00000200
   something/anything else       0/2:  ==>  CS: 00000200
   <s-type-expression-or-value>       3/15: <smelling> ==> 
  min 1, max 1000000000

1/88: <activity-name>: 
  (internal)
  min 1, max 1000000000

80/160: <if-parsing-al-conditions>: 
  (internal)
  min 0, max 0

432/1426: <inline-phrase-definition>:  DS: 00002000
  English:
   (- {###} - in to only       16/500: <(-  rtrue;  - in to only> ==>  DS: 00002000
   (- {###} - in to decide if only       4/484: <(-  rtrue;  - in to decide if only> ==>  DS: 00002000
   (- {###} - in to decide only       0/480:  ==>  DS: 00002000
   (- {###}       412/480: <(-  {-say:val:K} > ==>  DS: 00002000
   (- {###} {...}       0/68:  ==>  DS: 00002000
  min 2, max 1000000000

1880/3760: <rule-preamble>: 
  English:
   definition       88/1508: <definition> ==>  CS: 00004000
   this is the {... rule}       58/1792: <this is the set pronouns from items from multiple object lists rule> ==>  DS: 00004000
   this is the rule       0/1414:  ==>  CS: 00004000
   this is {...} rule       0/1734:  ==>  DS: 00004000
   this is {...} rules       0/1734:  ==>  DS: 00004000
   <event-rule-preamble>       0/1642:  ==>  DS: 02000000
   to       0/1414:  ==>  CS: 00004000
   to {...} ( called {...} )       0/1734:  ==>  DS: 00004000
   {to ...} ( this is the {### function} inverse to {###} )       32/1734: <to decide which real number is the real square root of ( r - a real number ) ( arithmetic operation 7 ) ( documented at ph_realsquareroot ) ( this is the root function inverse to rsqr )> ==>  DS: 00004000
   {to ...} ( this is the {### function} )       8/1702: <to decide which real number is the absolute value of ( r - a real number ) ( documented at ph_absolutevalue ) ( this is the abs function )> ==>  DS: 00004000
   {to ...} ( this is {...} )       0/1694:  ==>  DS: 00004000
   to {...}       952/1694: <to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized ( documented at ph_listcontents )> ==>  DS: 00004000
   {...} ( this is the {... rule} )       562/742: <rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule )> ==>  DS: 00004000
   {...} ( this is the rule )       0/180:  ==>  DS: 00004000
   {...} ( this is {...} rule )       0/180:  ==>  DS: 00004000
   {...} ( this is {...} rules )       0/180:  ==>  DS: 00004000
   {...}       180/180: <instead of someone resolving a stamped envelope when the person asked carries at least two stamped envelopes> ==> 
  min 1, max 1000000000

2/1984: <now-phrase-preamble>:  DS: 00008000
  English:
   to now {...}       2/990: <to now ( cn - condition ) ( documented at ph_now )> ==>  DS: 00008000
  min 3, max 1000000000

0/1984: <begin-phrase-preamble>:  CS: 00010000
  English:
   to begin       0/0:  ==>  CS: 00010000
  min 2, max 2

371/742: <rule-preamble-fine>: 
  English:
   <rule-preamble-finer> during <s-scene-description>       0/173:  ==>  DS: 00080000
   <rule-preamble-finer>       371/371: <rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing> ==> 
  min 1, max 1000000000

371/742: <rule-preamble-finer>: 
  English:
   {<rulebook-stem-embellished>} {when/while ...}       23/88: <rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing> ==>  DS: 00040000
   {<rulebook-stem-embellished>}       348/348: <after locking a door with something in the presence of an other person ( called audience )> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

371/750: <rulebook-stem-embellished>: 
  English:
   <rulebook-stem> {***}       359/371: <after locking a door with something in the presence of an other person ( called audience )> ==> 
   <article> rule for <rulebook-stem> {***}       0/10:  ==>  DS: 00020004
   <article> rule <rulebook-stem> {***}       0/10:  ==>  DS: 00020004
   rule for <rulebook-stem> {***}       0/12:  ==>  DS: 00020000
   rule <rulebook-stem> {***}       12/12: <rule for printing a number of something ( called the item )> ==>  DS: 00020000
  min 1, max 1000000000

92/1496: <rulebook-bud>:  DS: 00100000
  English:
   of/for {...}       48/200: <of putting something which is not a passkey on a keychain> ==>  DS: 00100000
   rule about/for/on {...}       0/152:  ==>  DS: 00100000
   rule       44/66: <rule> ==>  CS: 00100000
  min 1, max 1000000000

0/0: <unrecognised-rule-stem-diagnosis>: 
  English:
   when {***}       0/0:  ==>  DS: 00200000
   {...}       0/0:  ==> 
  min 1, max 1000000000

3/464: <when-while-clause>:  DS: 00400000
  English:
   {...} when/while {...}       3/64: <an actor going when the actor is on a supporter ( called the chaise )> ==>  DS: 00400000
  min 3, max 1000000000

0/0: <parametric-problem-diagnosis>: 
  English:
   when the play begins/ends       0/0:  ==>  CS: 00800000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <action-problem-diagnosis>:  DS: 01000000
  English:
   in the presence of {...}       0/0:  ==>  DS: 01000000
   in {...}       0/0:  ==>  DS: 01000000
  min 2, max 1000000000

0/0: <action-when-diagnosis>:  DS: 02000000
  English:
   {...} called {...} {when/while ...}       0/0:  ==>  DS: 02000000
   {...} {when/while *** nothing ***}       0/0:  ==>  DS: 02000000
   {...} {when/while *** nowhere ***}       0/0:  ==>  DS: 02000000
   {...} and {when/while ...}       0/0:  ==>  DS: 02000000
   {...} {when/while ...}       0/0:  ==>  DS: 02000000
  min 3, max 1000000000

0/0: <anl-diagnosis>: 
  English:
   <anl-inner-diagnosis> when/while {...}       0/0:  ==>  DS: 08000000
   <anl-inner-diagnosis>       0/0:  ==> 
  min 1, max 1000000000

0/0: <anl-inner-diagnosis>: 
  English:
   <anl-entry-diagnosis> <anl-tail-diagnosis>       0/0:  ==>  DS: 04000000
   <anl-entry-diagnosis>       0/0:  ==> 
  min 1, max 1000000000

0/0: <anl-tail-diagnosis>:  DS: 04000000
  English:
   , _or <anl-inner-diagnosis>       0/0:  ==>  DS: 04000000
   _,/or <anl-inner-diagnosis>       0/0:  ==>  DS: 04000000
  min 2, max 1000000000

0/0: <anl-entry-diagnosis>: 
  English:
   {......}       0/0:  ==> 
  min 1, max 1000000000

517/1034: <phrase-preamble>: 
  English:
   <phrase-preamble> ( deprecated )       1/420: <remove ( something - object ) from play ( deprecated )> ==>  DS: 40000000
   <say-preamble>       138/462: <say adapt ( v - verb ) in ( t - grammatical tense ) from ( p - narrative viewpoint )> ==>  DS: 10000000
   <to-preamble>       378/378: <list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==> 
  min 1, max 1000000000

400/800: <to-preamble>: 
  English:
   <to-preamble> ( arithmetic operation <cardinal-number> )       16/248: <total ( p - arithmetic value valued property ) of ( s - description of values ) ( arithmetic operation 12 )> ==>  DS: 20000001
   <to-preamble> ( assignment operation )       6/359: <let ( t - nonexisting variable ) be ( u - description of relations of values of kind k to values of kind l ) ( assignment operation )> ==>  DS: 20000000
   {let ... be given by ...}       2/353: <let ( t - nonexisting variable ) be given by ( q - equation name )> ==>  DS: 20000000
   {let ...}       4/351: <let ( t - nonexisting variable ) be ( u - description of relations of values of kind k to values of kind l )> ==>  DS: 20000000
   {...} -- end       0/347:  ==>  DS: 20000000
   {...} -- end conditional       3/347: <if ( v - value ) is begin -- end conditional> ==>  DS: 20000000
   {...} -- end loop       9/344: <repeat with ( loopvar - nonexisting k variable ) running from ( v - arithmetic value of kind k ) to ( w - k ) begin -- end loop> ==>  DS: 20000000
   {...} -- in loop       2/335: <break -- in loop> ==>  DS: 20000000
   {...} -- in {###}       0/333:  ==>  DS: 20000000
   {...}       358/358: <list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==> 
  min 1, max 1000000000

0/1032: <phrase-vetting>:  DS: 80002080
  English:
   ( {......} ) <copular-verb> {<copular-preposition>} ( {......} )       0/338:  ==>  DS: 80002080
  min 8, max 1000000000

154/954: <say-preamble>:  DS: 10000000
  English:
   <say-preamble> -- running on       16/477: <say run paragraph on with special look spacing -- running on> ==>  DS: 10000000
   {say otherwise/else}       2/271: <say otherwise> ==>  CS: 10000000
   {say otherwise/else if/unless ...}       0/459:  ==>  DS: 10000000
   {say if/unless ...}       2/459: <say if ( c - condition )> ==>  DS: 10000000
   {say end if/unless}       2/269: <say end if> ==>  CS: 10000000
   {say ...} -- beginning {###}       2/455: <say one of -- beginning say_one_of> ==>  DS: 10000000
   {say ...} -- continuing {###}       1/453: <say or -- continuing say_one_of> ==>  DS: 10000000
   {say ...} -- ending {###} with marker {###}       9/452: <say then purely at random -- ending say_one_of with marker i7_soo_tpar> ==>  DS: 10000000
   {say ...} -- ending {###}       1/443: <say only -- ending say_first_time> ==>  DS: 10000000
   {say ...}       119/442: <say adapt ( v - verb ) in ( t - grammatical tense ) from ( p - narrative viewpoint )> ==>  DS: 10000000
  min 2, max 1000000000

516/1032: <to-return-data>:  DS: 00000040
  English:
   to {decide yes/no}       2/360: <to decide yes> ==>  CS: 00000040
   to {decide on ...}       1/514: <to decide on ( something - value )> ==>  DS: 00000040
   to decide whether/if the {...}       12/513: <to decide whether the action requires a touchable second noun> ==>  DS: 00000040
   to decide whether/if {...}       39/501: <to decide whether ( name of kind of value k ) relates to ( y - l ) by ( r - relation of ks to values of kind l )> ==>  DS: 00000040
   to decide what/which <return-kind> is the {...}       86/462: <to decide what l is the ( name of kind l ) produced by ( rl - value of kind k based rule producing a value of kind l ) for ( v - k )> ==>  DS: 00000040
   to decide what/which <return-kind> is {...}       74/376: <to decide what n is ( function - phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n ) applied to ( input - k ) and ( second input - l ) and ( third input - m )> ==>  DS: 00000040
   to {...}       302/302: <to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==>  DS: 00000040
  min 2, max 1000000000

160/320: <return-kind>: 
  English:
   <k-kind-for-template>       160/160: <relation of objects> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

2231/4462: <phrase-definition-word-or-token>: 
  English:
   ( ) {***}       0/1883:  ==>  DS: 00000100
   ( <phrase-token-declaration> ) {***}       579/1883: <( function - phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n ) applied to ( input - k ) and ( second input - l ) and ( third input - m )> ==>  DS: 00000100
   ( {***}       0/1304:  ==>  DS: 00000100
   ) {***}       0/1304:  ==>  DS: 00000100
   {###} {***}       1652/1652: <apply ( function - phrase ( value of kind k , value of kind l , value of kind m ) -> nothing ) to ( input - k ) and ( second input - l ) and ( third input - m )> ==> 
  min 1, max 1000000000

579/1168: <phrase-token-declaration>: 
  English:
   {***} ( {***} - {......}       0/584:  ==>  DS: 00000080
   {......} - a nonexisting variable       0/584:  ==>  DS: 00000080
   {......} - a nonexisting <k-kind-for-template> variable       0/584:  ==>  DS: 00000080
   {......} - a nonexisting <k-kind-for-template> that/which varies       0/584:  ==>  DS: 00000080
   {......} - nonexisting variable       4/584: <t - nonexisting variable> ==>  DS: 00000080
   {......} - nonexisting <k-kind-for-template> variable       4/580: <loopvar - nonexisting k variable> ==>  DS: 00000080
   {......} - nonexisting <k-kind-for-template> that/which varies       0/576:  ==>  DS: 00000080
   {......} - {an existing variable}       0/576:  ==>  DS: 00000080
   {......} - {an existing <k-kind-for-template> variable}       0/576:  ==>  DS: 00000080
   {......} - {an existing <k-kind-for-template> that/which varies}       0/576:  ==>  DS: 00000080
   {......} - {existing variable}       2/576: <t - existing variable> ==>  DS: 00000080
   {......} - {existing <k-kind-for-template> variable}       0/574:  ==>  DS: 00000080
   {......} - {existing <k-kind-for-template> that/which varies}       0/574:  ==>  DS: 00000080
   {......} - a condition       0/574:  ==>  DS: 00000080
   {......} - condition       9/574: <c - condition> ==>  DS: 00000080
   {......} - a phrase       0/565:  ==>  DS: 00000080
   {......} - phrase       0/565:  ==>  DS: 00000080
   {......} - storage       4/565: <s - storage> ==>  DS: 00000080
   {......} - a table-reference       0/561:  ==>  DS: 00000080
   {......} - table-reference       3/561: <tr - table-reference> ==>  DS: 00000080
   {......} - <s-phrase-token-type>       529/558: <function - phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n> ==>  DS: 00000080
   {......} - <s-kind-as-name-token>       2/29: <v - name of kind of value of kind k> ==>  DS: 00000080
   {......} - {......}       0/27:  ==>  DS: 00000080
   <s-kind-as-name-token>       22/27: <name of kind of enumerated value k> ==> 
   {......}       0/5:  ==> 
  min 1, max 1000000000

24/68: <s-kind-as-name-token>: 
  (internal)
  min 1, max 1000000000

65/130: <phrase-option-declaration-list>: 
  English:
   {...}       20/65: <indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==> 
   <phrase-option-declaration-setting-entry> <phrase-option-declaration-tail>       20/25: <with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==>  DS: 00000200
   <phrase-option-declaration-setting-entry>       25/25: <printing an abbreviated room description> ==> 
  min 1, max 1000000000

40/178: <phrase-option-declaration-tail>:  DS: 00000200
  English:
   , _or <phrase-option-declaration-list>       0/82:  ==>  DS: 00000200
   , and/or <phrase-option-declaration-list>       2/82: <, and/or capitalized> ==>  DS: 00000200
   _,/or <phrase-option-declaration-list>       38/80: <, indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized> ==>  DS: 00000200
   and/or <phrase-option-declaration-list>       0/42:  ==>  DS: 00000200
  min 2, max 1000000000

65/130: <phrase-option-declaration-setting-entry>: 
  English:
   {...}       65/65: <without printing a room description> ==> 
  min 1, max 1000000000

102/204: <phrase-option-list>: 
  English:
   {...}       43/102: <including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only> ==> 
   <phrase-option-setting-entry> <phrase-option-tail>       43/46: <as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only> ==>  DS: 00000400
   <phrase-option-setting-entry>       16/16: <listing marked items only> ==> 
  min 1, max 1000000000

86/332: <phrase-option-tail>:  DS: 00000400
  English:
   , _and <phrase-option-list>       0/163:  ==>  DS: 00000400
   _,/and <phrase-option-list>       86/163: <, including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only> ==>  DS: 00000400
  min 2, max 1000000000

102/204: <phrase-option-setting-entry>: 
  English:
   <phrase-option>       102/102: <giving brief inventory information> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

102/3322: <phrase-option>: 
  (internal)
  min 1, max 1000000000

0/0: <heading-with-parenthesis>: 
  English:
   {<heading-name-hyphenated>} ( <definite-article> {...} )       0/0:  ==>  DS: 00001004
   {<heading-name-hyphenated>} ( {...} )       0/0:  ==>  DS: 00001000
   {<heading-name-hyphenated>}       0/0:  ==> 
  min 1, max 1000000000

0/0: <heading-name-hyphenated>: 
  English:
   {...} - {...} - {...}       0/0:  ==>  DS: 00000800
   {...} - {...}       0/0:  ==>  DS: 00000800
   {...}       0/0:  ==> 
  min 1, max 1000000000

44/1880: <definition-header>:  CS: 00002000
  English:
   definition       44/44: <definition> ==>  CS: 00002000
  min 1, max 1

44/88: <adjective-definition>:  DS: 00010000
  English:
   <adjective-domain> is/are <adjective-wording> if {...}       41/44: <a relation is symmetric if i6 routine RELATION_TY_SymmetricAdjective makes it so ( it is a symmetric relation , that is , it's always true that x is related to y if and only if y is related to x )> ==>  DS: 00010000
   <adjective-domain> is/are <adjective-wording> unless {...}       0/3:  ==>  DS: 00010000
   <adjective-domain> is/are <adjective-wording>       3/3: <a room is air-conditioned> ==>  DS: 00010000
  min 3, max 1000000000

44/88: <adjective-domain>: 
  English:
   {...} ( called the {...} )       1/37: <a thing ( called the item )> ==>  DS: 00004000
   {...} ( called {...} )       0/36:  ==>  DS: 00004000
   {...}       43/43: <a list of values> ==> 
  min 1, max 1000000000

44/88: <adjective-wording>: 
  English:
   {...} rather than {...}       18/19: <even rather than odd> ==>  DS: 00008000
   {...}       26/26: <going on> ==> 
  min 1, max 1000000000

18/86: <inform6-routine-adjective-definition>:  DS: 00020000
  English:
   i6 routine {<quoted-text-without-subs>} says so ( {...} )       10/24: <i6 routine VerbIsMeaningful says so ( it has a meaning in inform as a relation , rather than existing only to be printed out )> ==>  DS: 00020000
   i6 routine {<quoted-text-without-subs>} makes it so ( {...} )       8/14: <i6 routine RELATION_TY_SymmetricAdjective makes it so ( it is a symmetric relation , that is , it's always true that x is related to y if and only if y is related to x )> ==>  DS: 00020000
  min 8, max 1000000000

1/80: <inform6-condition-adjective-definition>:  DS: 00040000
  English:
   i6 condition <quoted-text-without-subs> says so ( {...} )       1/24: <i6 condition scene_status-->(*1-1)==1 says so ( it is currently taking place )> ==>  DS: 00040000
  min 8, max 1000000000

209/418: <new-called-name>: 
  English:
   <definite-article> <new-called-name-unarticled>       14/14: <the current working sack> ==>  DS: 00000004
   <new-called-name-unarticled>       195/195: <item being printed> ==> 
  min 1, max 1000000000

209/418: <new-called-name-unarticled>: 
  English:
   {***} - {***}       0/0:  ==>  DS: 00080000
   <existing-local-name>       136/209: <item being printed> ==> 
   <s-type-expression-or-value>       0/73:  ==> 
   {...}       73/73: <item being printed> ==> 
  min 1, max 1000000000

136/418: <existing-local-name>: 
  (internal)
  min 1, max 1000000000

0/0: <end-phrase-construction>:  DS: 00100000
  English:
   end {...}       0/0:  ==>  DS: 00100000
  min 2, max 1000000000

1576/3152: <inline-substitution>: 
  English:
   phrase options       17/17: <phrase options> ==>  CS: 00200000
   <phrase-option>       0/1559:  ==> 
   <name-local-to-inline-stack-frame>       1559/1559: <something else> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

1559/3118: <name-local-to-inline-stack-frame>: 
  (internal)
  min 1, max 1000000000

0/0: <inform6-inclusion-location>:  DW: 00c00000
  English:
   <inclusion-side> {<quoted-text-without-subs>}       0/0:  ==>  DS: 00400000
   <inclusion-side> {<quoted-text-without-subs>} in {<quoted-text-without-subs>}       0/0:  ==>  DS: 00c00000
   when defining <s-type-expression>       0/0:  ==>  DS: 00800000
   when defining {...}       0/0:  ==>  DS: 00800000
   before the library       0/0:  ==>  CS: 00800000
   in the preform grammar       0/0:  ==>  CS: 00800000
  min 2, max 1000000000

0/0: <inclusion-side>:  CS: 00400000
  English:
   before       0/0:  ==>  CS: 00400000
   instead of       0/0:  ==>  CS: 00400000
   after       0/0:  ==>  CS: 00400000
  min 1, max 2

29/58: <use-translates-as-sentence-subject>:  DS: 01000000
  English:
   use <nounphrase>       29/29: <use maximum things understood at once of at least 100> ==>  DS: 01000000
  min 2, max 1000000000

29/58: <use-translates-as-sentence-object>: 
  English:
   (- {###}       29/29: <(-  ! Use ineffectual does nothing. > ==>  DS: 02000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

73/146: <use-sentence-object>: 
  English:
   {...} of at least <cardinal-number-unlimited>       8/39: <maximum things understood at once of at least 100> ==>  DS: 04000000
   {###} of <cardinal-number-unlimited>       28/31: <alloc_chunk_size of 32000> ==>  DS: 04000000
   <definite-article> {...}       1/1: <the serial comma> ==>  DS: 00000004
   {...}       36/36: <unabbreviated object names> ==> 
  min 1, max 1000000000

0/88: <use-inter-pipeline>:  DS: 08000000
  English:
   inter pipeline {<quoted-text>}       0/0:  ==>  DS: 08000000
  min 3, max 3

34/82: <notable-use-option-name>:  CS: 10000000
  English:
   authorial modesty       5/34: <authorial modesty> ==>  CS: 10000000
   dynamic memory allocation       3/29: <dynamic memory allocation> ==>  CS: 10000000
   memory economy       1/26: <memory economy> ==>  CS: 10000000
   no deprecated features       1/25: <no deprecated features> ==>  CS: 10000000
   numbered rules       1/24: <numbered rules> ==>  CS: 10000000
   telemetry recordings       1/23: <telemetry recordings> ==>  CS: 10000000
   scoring       1/22: <scoring> ==>  CS: 10000000
   no scoring       3/21: <no scoring> ==>  CS: 10000000
   engineering notation       1/18: <engineering notation> ==>  CS: 10000000
   unabbreviated object names       1/17: <unabbreviated object names> ==>  CS: 10000000
   index figure thumbnails       1/16: <index figure thumbnails> ==>  CS: 10000000
   gn testing version       1/15: <gn testing version> ==>  CS: 10000000
   undo prevention       1/14: <undo prevention> ==>  CS: 10000000
   serial comma       3/13: <serial comma> ==>  CS: 10000000
   predictable randomisation       1/10: <predictable randomisation> ==>  CS: 10000000
   command line echoing       1/9: <command line echoing> ==>  CS: 10000000
   american dialect       1/8: <american dialect> ==>  CS: 10000000
   full-length room descriptions       3/7: <full-length room descriptions> ==>  CS: 10000000
   abbreviated room descriptions       1/4: <abbreviated room descriptions> ==>  CS: 10000000
   verbose room descriptions       1/3: <verbose room descriptions> ==>  CS: 10000000
   brief room descriptions       1/2: <brief room descriptions> ==>  CS: 10000000
   superbrief room descriptions       1/1: <superbrief room descriptions> ==>  CS: 10000000
  min 1, max 3

16/32: <immediate-use>: 
  English:
   {...}       0/16:  ==> 
   <immediate-use-entry> <immediate-use-tail>       0/0:  ==>  DS: 20000000
   <immediate-use-entry>       16/16: <maximum things understood at once> ==> 
  min 1, max 1000000000

0/0: <immediate-use-tail>:  DS: 20000000
  English:
   , _and <immediate-use>       0/0:  ==>  DS: 20000000
   _,/and <immediate-use>       0/0:  ==>  DS: 20000000
  min 2, max 1000000000

16/32: <immediate-use-entry>: 
  English:
   <notable-use-option-name>       12/12: <dynamic memory allocation> ==>  CS: 10000000
   {......}       4/4: <maximum things understood at once> ==> 
  min 1, max 1000000000

440/880: <translates-into-i6-sentence-subject>: 
  English:
   {...} property       70/440: <printed plural name property> ==>  DS: 40000000
   {...} object/kind       6/370: <inside object> ==>  DS: 40000000
   {... rule}       138/364: <standard report preferring sometimes abbreviated room descriptions rule> ==>  DS: 40000000
   {...} variable       70/226: <current item from the multiple object list variable> ==>  DS: 40000000
   {...} action       154/156: <switching the story transcript on action> ==>  DS: 40000000
   understand token {...}       2/2: <understand token a time period> ==>  DS: 40000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

220/440: <translates-into-i6-sentence-object>: 
  English:
   <quoted-text> with <nounphrase-articled-list>       36/36: <LIST_WRITER_INTERNAL_R with " (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )> ==>  DS: 80000000
   <quoted-text>       184/184: <article> ==> 
  min 1, max 1000000000

134/268: <extra-response>:  DS: 00000040
  English:
   <quoted-text> ( <response-letter> )       134/134: <"[It] [are] [if story tense is present tense]now [end if]pitch dark in
[if story tense is present tense]here[else]there[end if]!" ( a )> ==>  DS: 00000040
  min 4, max 4

6/12: <plugin-name>:  CS: 00002000
  English:
   core       0/6:  ==>  CS: 00002000
   instance counting       0/6:  ==>  CS: 00002000
   interactive fiction       3/6: <interactive fiction> ==>  CS: 00002000
   multimedia       0/3:  ==>  CS: 00002000
   naming       0/3:  ==>  CS: 00002000
   command       0/3:  ==>  CS: 00002000
   actions       0/3:  ==>  CS: 00002000
   spatial model       0/3:  ==>  CS: 00002000
   mapping       0/3:  ==>  CS: 00002000
   persons       0/3:  ==>  CS: 00002000
   player       0/3:  ==>  CS: 00002000
   regions       0/3:  ==>  CS: 00002000
   backdrops       0/3:  ==>  CS: 00002000
   devices       0/3:  ==>  CS: 00002000
   showme       0/3:  ==>  CS: 00002000
   times of day       0/3:  ==>  CS: 00002000
   scenes       0/3:  ==>  CS: 00002000
   figures       2/3: <figures> ==>  CS: 00002000
   sounds       1/1: <sounds> ==>  CS: 00002000
   glulx external files       0/0:  ==>  CS: 00002000
   bibliographic data       0/0:  ==>  CS: 00002000
   scoring       0/0:  ==>  CS: 00002000
   chronology       0/0:  ==>  CS: 00002000
  min 1, max 3

6/12: <language-element>:  CS: 00002000
  English:
   <plugin-name>       6/6: <interactive fiction> ==>  CS: 00002000
  min 1, max 3

1/2: <test-sentence-subject>: 
  English:
   <internal-test-case-name> ( internal )       0/0:  ==>  DS: 00000180 CW: 00000180
   {###} ( internal )       0/0:  ==>  DS: 00000100
   <quoted-text>       0/1:  ==> 
   {###}       1/1: <me> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <internal-test-case-name>:  CS: 00000080
  English:
   headline       0/0:  ==>  CS: 00000080
   sentence       0/0:  ==>  CS: 00000080
   description       0/0:  ==>  CS: 00000080
   dimensions       0/0:  ==>  CS: 00000080
   evaluation       0/0:  ==>  CS: 00000080
   equation       0/0:  ==>  CS: 00000080
   verb       0/0:  ==>  CS: 00000080
   adjective       0/0:  ==>  CS: 00000080
   participle       0/0:  ==>  CS: 00000080
   kind       0/0:  ==>  CS: 00000080
   map       0/0:  ==>  CS: 00000080
   dash       0/0:  ==>  CS: 00000080
   dashlog       0/0:  ==>  CS: 00000080
  min 1, max 1

1/2: <test-sentence-object>: 
  English:
   <quoted-text>       1/1: <go to cold comfort / z / z / z / z / ask vanessa for french vanilla / ask vanessa for chocolate / ask vanessa about flavors / ask vanessa for chocolate chocolate chip> ==> 
   <quoted-text> <test-case-circumstance-list>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <test-case-circumstance-list>: 
  English:
   {...}       0/0:  ==> 
   <test-case-circumstance-list> <test-case-circumstance>       0/0:  ==>  DS: 00000200
   <test-case-circumstance>       0/0:  ==>  DS: 00000200
  min 1, max 1000000000

0/0: <test-case-circumstance>:  DS: 00000200
  English:
   in <instance-of-object>       0/0:  ==>  DS: 00000200
   holding/and/, <instance-of-object>       0/0:  ==>  DS: 00000200
   in {...}       0/0:  ==>  DS: 00000200
   holding/and/, {...}       0/0:  ==>  DS: 00000200
   with {...}       0/0:  ==>  DS: 00000200
  min 2, max 1000000000

7/186: <notable-bibliographic-variables>:  CS: 00000400
  English:
   story title       1/8: <story title> ==>  CS: 00000400
   story author       1/7: <story author> ==>  CS: 00000400
   story headline       1/6: <story headline> ==>  CS: 00000400
   story genre       1/5: <story genre> ==>  CS: 00000400
   story description       1/4: <story description> ==>  CS: 00000400
   story creation year       1/3: <story creation year> ==>  CS: 00000400
   release number       1/2: <release number> ==>  CS: 00000400
  min 2, max 3

0/688: <episode-sentence-subject>:  DS: 00000800 CW: 00000804
  English:
   <definite-article> story       0/0:  ==>  DS: 00000804 CW: 00000804
   this story       0/1:  ==>  CS: 00000800
   story       0/1:  ==>  CS: 00000800
  min 1, max 2

0/0: <episode-sentence-object>:  DS: 00001000
  English:
   episode <cardinal-number> of <quoted-text-without-subs>       0/0:  ==>  DS: 00001001
   episode {...}       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

0/0: <release-sentence-object>:  DW: 0000e000
  English:
   <privacy-indicator> <exposed-innards>       0/0:  ==>  DS: 00006000 CW: 00006000
   <privacy-indicator> {...}       0/0:  ==>  DS: 00002000
   <exposed-innards>       0/0:  ==>  CS: 00004000
   cover art ( <quoted-text> )       0/0:  ==>  DS: 00008000
   cover art       0/0:  ==>  CS: 00008000
   existing story file       0/0:  ==>  CS: 00008000
   existing story file called {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   file of {<quoted-text-without-subs>} called {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   file {<quoted-text-without-subs>} in {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   file {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   style sheet {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   javascript {<quoted-text-without-subs>}       0/0:  ==>  DS: 00008000
   introductory booklet       0/0:  ==>  CS: 00008000
   introductory postcard       0/0:  ==>  CS: 00008000
   website       0/0:  ==>  CS: 00008000
   separate figures       0/0:  ==>  CS: 00008000
   separate sounds       0/0:  ==>  CS: 00008000
   {<quoted-text-without-subs>} website       0/0:  ==>  DS: 00008000
   interpreter       0/0:  ==>  CS: 00008000
   {<quoted-text-without-subs>} interpreter       0/0:  ==>  DS: 00008000
  min 1, max 1000000000

0/0: <privacy-indicator>:  CS: 00002000
  English:
   private       0/0:  ==>  CS: 00002000
   public       0/0:  ==>  CS: 00002000
  min 1, max 1

0/0: <exposed-innards>:  CS: 00004000
  English:
   solution       0/0:  ==>  CS: 00004000
   source text       0/0:  ==>  CS: 00004000
   library card       0/0:  ==>  CS: 00004000
  min 1, max 2

10/292: <notable-naming-properties>:  CS: 00010000
  English:
   indefinite article       1/10: <indefinite article> ==>  CS: 00010000
   plural-named       1/9: <plural-named> ==>  CS: 00010000
   proper-named       1/8: <proper-named> ==>  CS: 00010000
   printed name       1/7: <printed name> ==>  CS: 00010000
   printed plural name       1/6: <printed plural name> ==>  CS: 00010000
   publicly-named       1/5: <publicly-named> ==>  CS: 00010000
   privately-named       1/4: <privately-named> ==>  CS: 00010000
   adaptive text viewpoint       1/3: <adaptive text viewpoint> ==>  CS: 00010000
   neuter       1/2: <neuter> ==>  CS: 00010000
   female       1/1: <female> ==>  CS: 00010000
  min 1, max 3

12/200: <notable-spatial-kinds>:  CS: 00020000
  English:
   room       2/12: <room> ==>  CS: 00020000
   thing       2/10: <thing> ==>  CS: 00020000
   container       2/8: <container> ==>  CS: 00020000
   supporter       2/6: <supporter> ==>  CS: 00020000
   person       2/4: <person> ==>  CS: 00020000
   player's holdall       2/2: <player's holdall> ==>  CS: 00020000
  min 1, max 2

4/292: <notable-spatial-properties>:  CS: 00040000
  English:
   initial appearance       1/6: <initial appearance> ==>  CS: 00040000
   wearable       1/5: <wearable> ==>  CS: 00040000
   fixed in place       1/4: <fixed in place> ==>  CS: 00040000
   matching key       1/3: <matching key> ==>  CS: 00040000
  min 1, max 3

286/45064: <spatial-specifying-nouns>:  DS: 00080000
  English:
   _something/anything {***}       205/8338: <something which is on a keychain which is carried by the actor> ==>  DS: 00080000
   _somewhere/anywhere {***}       0/8133:  ==>  DS: 00080000
   _someone/anyone/somebody/anybody {***}       57/8133: <someone> ==>  DS: 00080000
   _everything {***}       0/8076:  ==>  DS: 00080000
   _everywhere {***}       0/8076:  ==>  DS: 00080000
   _everyone/everybody {***}       0/8076:  ==>  DS: 00080000
   _nowhere {***}       24/8076: <nowhere> ==>  DS: 00080000
   _nobody/no-one {***}       0/8052:  ==>  DS: 00080000
   _no _one {***}       0/8052:  ==>  DS: 00080000
  min 1, max 1000000000

0/2166: <notable-spatial-noun-phrases>:  CS: 00100000
  English:
   nowhere       0/2:  ==>  CS: 00100000
  min 1, max 1

1/334: <notable-player-instances>:  CS: 00200000
  English:
   yourself       1/1: <yourself> ==>  CS: 00200000
  min 1, max 1

6/6508: <notable-player-variables>:  CS: 00400000
  English:
   player       2/17: <player> ==>  CS: 00400000
   score       2/15: <score> ==>  CS: 00400000
   time of day       2/13: <time of day> ==>  CS: 00400000
  min 1, max 3

0/0: <implicit-player-relationship>:  CS: 00800000
  English:
   worn       0/0:  ==>  CS: 00800000
   carried       0/0:  ==>  CS: 00800000
   initially carried       0/0:  ==>  CS: 00800000
  min 1, max 2

1/120: <notable-device-kinds>:  CS: 01000000
  English:
   device       1/1: <device> ==>  CS: 01000000
  min 1, max 1

1/122: <notable-backdrops-kinds>:  CS: 02000000
  English:
   backdrop       1/1: <backdrop> ==>  CS: 02000000
  min 1, max 1

1/292: <notable-backdrops-properties>:  CS: 04000000
  English:
   scenery       1/1: <scenery> ==>  CS: 04000000
  min 1, max 1

0/0: <notable-backdrops-noun-phrases>:  CS: 08000000
  English:
   everywhere       0/0:  ==>  CS: 08000000
  min 1, max 1

2/184: <notable-regions-kinds>:  CS: 10000000
  English:
   region       2/4: <region> ==>  CS: 10000000
  min 1, max 1

1/292: <notable-regions-properties>:  CS: 20000000
  English:
   map region       1/1: <map region> ==>  CS: 20000000
  min 2, max 2

19/2328: <notable-map-kinds>:  CS: 40000000
  English:
   direction       13/20: <direction> ==>  CS: 40000000
   door       6/7: <door> ==>  CS: 40000000
  min 1, max 1

2/24: <notable-map-directions>:  CS: 80000000
  English:
   up       1/2: <up> ==>  CS: 80000000
   down       1/1: <down> ==>  CS: 80000000
  min 1, max 1

2/292: <notable-map-properties>:  CS: 00000040
  English:
   opposite       1/7: <opposite> ==>  CS: 00000040
   other side       1/6: <other side> ==>  CS: 00000040
  min 1, max 2

0/2166: <notable-map-noun-phrases>:  CS: 00000080
  English:
   below       0/25:  ==>  CS: 00000080
   above       0/25:  ==>  CS: 00000080
  min 1, max 1

0/0: <mapping-relation-construction>:  DS: 00000100
  English:
   mapping {...}       0/0:  ==>  DS: 00000100
  min 2, max 1000000000

0/0: <mapping-preposition-construction>:  DS: 00000200
  English:
   mapped {...} of       0/0:  ==>  DS: 00000200
   mapped {...}       0/0:  ==>  DS: 00000200
   {...} of       0/0:  ==>  DS: 00000200
   {...} from       0/0:  ==>  DS: 00000200
  min 2, max 1000000000

2/24: <notable-directions>:  CS: 00000400
  English:
   inside       1/2: <inside> ==>  CS: 00000400
   outside       1/1: <outside> ==>  CS: 00000400
  min 1, max 1

0/0: <map-name-abbreviation-omission-words>:  CW: 00000804
  English:
   in       0/0:  ==>  CS: 00000800
   of       0/0:  ==>  CS: 00000800
   <article>       0/0:  ==>  CS: 00000004
  min 1, max 1

0/0: <direction-name>: 
  English:
   <instance-of-object>       0/0:  ==> 
  min 1, max 1000000000

0/0: <index-map-sentence-subject>: 
  English:
   eps file       0/0:  ==>  CS: 00010000
   <direction-name> mapped as <direction-name>       0/0:  ==>  DS: 00010000
   {...} mapped as {...}       0/0:  ==>  DS: 00010000
   <instance-of-object> mapped <map-positioning>       0/0:  ==>  DS: 00011000
   {...} mapped {...}       0/0:  ==>  DS: 00010000
   <map-setting> set to <map-setting-value>       0/0:  ==>  DS: 00010000
   <map-setting> set to {...}       0/0:  ==>  DS: 00010000
   {...} set to {...}       0/0:  ==>  DS: 00010000
   rubric {<quoted-text-without-subs>} {***}       0/0:  ==>  DS: 00010000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <map-positioning>:  DS: 00001000
  English:
   <instance-of-object> of/from <instance-of-object>       0/0:  ==>  DS: 00001000
   above <instance-of-object>       0/0:  ==>  DS: 00001000
   below <instance-of-object>       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

0/0: <map-setting>: 
  English:
   <map-parameter> of <map-setting-scope>       0/0:  ==>  DS: 00004000
   <map-parameter>       0/0:  ==> 
   {...} of <map-setting-scope>       0/0:  ==>  DS: 00004000
  min 1, max 1000000000

0/0: <map-setting-scope>: 
  English:
   <definite-article> <map-setting-scope-unarticled>       0/0:  ==>  DS: 00000004
   <map-setting-scope-unarticled>       0/0:  ==> 
  min 1, max 1000000000

0/0: <map-setting-scope-unarticled>: 
  English:
   first room       0/0:  ==>  CS: 00002000
   level <cardinal-number>       0/0:  ==>  DS: 00002001 CW: 00002001
   <k-kind>       0/0:  ==>  DS: 00000020 CW: 00000024
   <instance-of-object>       0/0:  ==> 
  min 1, max 1000000000

0/0: <map-parameter>: 
  (internal)
  min 1, max 1000000000

0/0: <map-setting-value>: 
  English:
   <cardinal-number>       0/0:  ==>  CS: 00000001
   <quoted-text>       0/0:  ==> 
   <map-setting-boolean>       0/0:  ==>  CS: 00008000
   <map-offset>       0/0:  ==> 
   {###}       0/0:  ==> 
  min 1, max 1

0/0: <map-setting-boolean>:  CS: 00008000
  English:
   on       0/0:  ==>  CS: 00008000
   off       0/0:  ==>  CS: 00008000
  min 1, max 1

0/0: <map-offset>: 
  (internal)
  min 1, max 1

0/0: <map-rubric>:  DS: 00020000
  English:
   size <cardinal-number> {***}       0/0:  ==>  DS: 00020001
   font {<quoted-text-without-subs>} {***}       0/0:  ==>  DS: 00020000
   colour {<quoted-text-without-subs>} {***}       0/0:  ==>  DS: 00020000
   at <map-offset> from {...}       0/0:  ==>  DS: 00020000
   at <map-offset> {***}       0/0:  ==>  DS: 00020000
  min 2, max 1000000000

1/292: <notable-scene-properties>:  CS: 00040000
  English:
   recurring       1/3: <recurring> ==>  CS: 00040000
  min 1, max 1

1/2: <notable-scenes>:  CS: 00080000
  English:
   entire game       1/1: <entire game> ==>  CS: 00080000
  min 2, max 2

4/8: <scene-ends-sentence-subject>: 
  English:
   <scene-name>       4/4: <the entire game> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <scene-ends-sentence-adverb>: 
  English:
   <scene-end-name-creating>       0/0:  ==> 
  min 1, max 1000000000

0/4: <scene-ends-sentence-object>: 
  English:
   <text-including-a-calling>       0/2:  ==>  DS: 00200000
   play begins       0/0:  ==>  CS: 00100000
   play ends       0/0:  ==>  CS: 00100000
   <scene-name> begins       0/2:  ==>  DS: 00100000
   <scene-name> ends       0/2:  ==>  DS: 00100000
   <scene-name> ends <scene-end-name>       0/2:  ==>  DS: 00100000
   <scene-name> ends {...}       0/2:  ==>  DS: 00100000
   <s-condition>       0/2:  ==> 
  min 1, max 1000000000

4/8: <scene-name>: 
  English:
   <definite-article> <scene-name-unarticled>       4/4: <the entire game> ==>  DS: 00000004
   <scene-name-unarticled>       0/0:  ==> 
  min 1, max 1000000000

4/8: <scene-name-unarticled>: 
  English:
   <instance-of-non-object>       4/4: <entire game> ==> 
  min 1, max 1000000000

0/0: <scene-end-name>: 
  (internal)
  min 1, max 1000000000

0/0: <scene-end-name-creating>: 
  (internal)
  min 1, max 1000000000

0/0: <s-scene-description>: 
  English:
   <s-value>       0/0:  ==> 
  min 1, max 1000000000

0/14: <rankings-table-name>:  CS: 00200000
  English:
   rankings       0/0:  ==>  CS: 00200000
  min 1, max 1

2/180: <notable-actions>:  CS: 00400000
  English:
   waiting       1/2: <waiting> ==>  CS: 00400000
   going       1/1: <going> ==>  CS: 00400000
  min 1, max 1

0/0: <action-name-construction>:  DS: 00800000
  English:
   {...} action       0/0:  ==>  DS: 00800000
  min 2, max 1000000000

490/20500: <action-pronoun>:  CS: 08000000
  English:
   <accusative-pronoun>       490/557: <it> ==>  CS: 08000000
  min 1, max 1

227/664: <action-name>: 
  (internal)
  min 1, max 1000000000

378/10710: <action-optional-trailing-prepositions>:  DS: 01000000
  English:
   {...} to       378/967: <giving it to> ==>  DS: 01000000
  min 2, max 1000000000

13/26: <action-variable>: 
  English:
   <action-variable-name> ( matched as {<quoted-text-without-subs>} )       6/6: <room gone from ( matched as from )> ==>  DS: 02000000
   <action-variable-name> ( {...} )       0/0:  ==>  DS: 02000000
   <action-variable-name>       7/7: <abbreviated form allowed> ==> 
  min 1, max 1000000000

13/26: <action-variable-name>: 
  English:
   <unfortunate-name>       0/13:  ==> 
   {...}       13/13: <room gone from> ==> 
  min 1, max 1000000000

90/1036: <new-action-sentence-object>:  DW: 04000004 DS: 04000000
  English:
   <indefinite-article> <new-action-sentence-object-unarticled>       90/236: <an action applying to one carried thing and one visible thing> ==>  DS: 04000004
   <new-action-sentence-object-unarticled>       0/164:  ==>  DS: 04000000
  min 1, max 1000000000

90/620: <new-action-sentence-object-unarticled>:  DS: 04000000
  English:
   action <nounphrase-actionable>       90/290: <action applying to one carried thing and one visible thing> ==>  DS: 04000000
   action       0/24:  ==>  CS: 04000000
  min 1, max 1000000000

90/180: <action-sentence-subject>: 
  English:
   <action-name>       0/90:  ==> 
   {...}       90/90: <switching the story transcript on> ==> 
  min 1, max 1000000000

128/828: <action-clause>:  DS: 20000000
  English:
   out of world       16/109: <out of world> ==>  CS: 20000000
   abbreviable       2/93: <abbreviable> ==>  CS: 20000000
   with past participle {...}       0/386:  ==>  DS: 20000000
   applying to <action-applications>       104/386: <applying to one carried thing and one visible thing> ==>  DS: 20000000
   requiring light       6/91: <requiring light> ==>  CS: 20000000
  min 1, max 1000000000

104/208: <action-applications>: 
  English:
   nothing       45/45: <nothing> ==>  CS: 10000000
   one <act-req> and one <act-req>       11/59: <one carried thing and one visible thing> ==>  DS: 10000020 CW: 18000024
   one <act-req> and <act-req>       0/48:  ==>  DS: 10000020 CW: 18000024
   <act-req> and one <act-req>       0/48:  ==>  DS: 10000020 CW: 18000024
   <act-req> and <act-req>       0/48:  ==>  DS: 10000020 CW: 18000024
   nothing or one <act-req>       2/48: <nothing or one thing> ==>  DS: 10000020 CW: 18000024
   one <act-req>       40/46: <one visible thing> ==>  DS: 10000020 CW: 18000024
   two <act-req>       6/6: <two things> ==>  DS: 10000020 CW: 18000024
   <act-req>       0/0:  ==>  DS: 00000020 CW: 08000024
   {...}       0/0:  ==> 
  min 1, max 1000000000

70/140: <act-req>:  DS: 00000020 CW: 08000024
  English:
   <action-access> <k-kind>       12/12: <visible thing> ==>  DS: 08000020 CW: 08000024
   <k-kind>       58/58: <infection color> ==>  DS: 00000020 CW: 00000024
  min 1, max 1000000000

12/24: <action-access>:  CS: 08000000
  English:
   visible       6/12: <visible> ==>  CS: 08000000
   touchable       0/6:  ==>  CS: 08000000
   carried       6/6: <carried> ==>  CS: 08000000
  min 1, max 1

90/180: <action-sentence-object>: 
  English:
   <action-clauses>       90/90: <applying to one carried thing and one visible thing> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

128/256: <action-clauses>: 
  English:
   {...}       19/128: <applying to nothing or one thing and> ==> 
   <action-clauses> <action-clause-terminated>       19/109: <applying to one visible thing and requiring light> ==>  DS: 20000000
   <action-clause-terminated>       90/90: <applying to one carried thing and one visible thing> ==>  DS: 20000000
  min 1, max 1000000000

128/1002: <action-clause-terminated>:  DS: 20000000
  English:
   <action-clause> , and       0/299:  ==>  DS: 60000000
   <action-clause> and       19/299: <applying to nothing or one thing and> ==>  DS: 60000000
   <action-clause> ,       0/280:  ==>  DS: 60000000
   <action-clause>       109/349: <applying to one carried thing and one visible thing> ==>  DS: 20000000
  min 1, max 1000000000

958/2310: <action-list>: 
  English:
   doing something/anything other than <anl-excluded>       0/662:  ==>  DS: 00000200
   doing something/anything except <anl-excluded>       0/662:  ==>  DS: 00000200
   doing something/anything to/with <anl-to-tail>       0/662:  ==>  DS: 00000200
   doing something/anything       0/249:  ==>  CS: 00000200
   doing something/anything {...}       0/662:  ==>  DS: 00000200
   <anl>       958/1155: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/0: <anl-excluded>: 
  English:
   <anl> to/with {<anl-minimal-common-operand>}       0/0:  ==>  DS: 00000100
   <anl>       0/0:  ==> 
  min 1, max 1000000000

0/0: <anl-minimal-common-operand>: 
  English:
   _,/or {...}       0/0:  ==>  DS: 00000080
   {...} to/with {...}       0/0:  ==>  DS: 00000080
   {...}       0/0:  ==> 
  min 1, max 1000000000

326/652: <anl-to-tail>: 
  English:
   <anl-operand> <anl-in-tail>       0/104:  ==>  DS: 80000000
   <anl-operand>       326/326: <something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

326/652: <anl-operand>: 
  English:
   {...}       326/326: <something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

12/3600: <anl-in-tail>:  DS: 80000000
  English:
   fixed in place {***}       0/950:  ==>  DS: 80000000
   is/are/was/were/been/listed in {***}       0/950:  ==>  DS: 80000000
   in {...}       12/950: <in the public library> ==>  DS: 80000000
  min 2, max 1000000000

958/2310: <anl>: 
  English:
   <anl-entry> <anl-tail>       0/392:  ==>  DS: 00000040
   <anl-entry>       958/1155: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/2930: <anl-tail>:  DS: 00000040
  English:
   , _or <anl>       0/994:  ==>  DS: 00000040
   _,/or <anl>       0/994:  ==>  DS: 00000040
  min 2, max 1000000000

958/2310: <anl-entry>: 
  English:
   <named-action-pattern>       0/1155:  ==> 
   <named-action-pattern> <anl-in-tail>       0/360:  ==>  DS: 80000000
   <anl-entry-with-action>       958/1155: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/2330: <named-action-pattern>: 
  (internal)
  min 1, max 1000000000

958/2310: <anl-entry-with-action>: 
  (internal)
  min 1, max 1000000000

556/21216: <action-pattern>: 
  English:
   asking <action-parameter> to try <action-pattern-core>       0/4789:  ==>  DS: 00000400
   <action-parameter> trying <action-pattern-core>       23/4789: <someone trying locking an open thing ( called the door ajar ) with something> ==>  DS: 00000400
   an actor trying <action-pattern-core>       0/4766:  ==>  DS: 00000400
   an actor <action-pattern-core>       408/4766: <an actor going when the actor is on a supporter ( called the chaise )> ==>  DS: 00000400
   trying <action-pattern-core>       0/4358:  ==>  DS: 00000400
   <action-pattern-core-actor>       125/10177: <locking a door with something in the presence of an other person ( called audience )> ==> 
  min 1, max 1000000000

28/2746: <we-are-action-pattern>: 
  English:
   we are asking <action-parameter> to try <action-pattern-core>       0/716:  ==>  DS: 02000000
   asking <action-parameter> to try <action-pattern-core>       0/716:  ==>  DS: 02000000
   <action-parameter> trying <action-pattern-core>       0/716:  ==>  DS: 02000000
   an actor trying <action-pattern-core>       0/716:  ==>  DS: 02000000
   an actor <action-pattern-core>       3/716: <an actor smelling> ==>  DS: 02000000
   we are trying <action-pattern-core>       0/713:  ==>  DS: 02000000
   trying <action-pattern-core>       0/713:  ==>  DS: 02000000
   we are <action-pattern-core>       0/713:  ==>  DS: 02000000
   <action-pattern-core-actor>       25/1370: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/1554: <action-pattern-negated>:  DS: 04000000
  English:
   we are not asking <action-parameter> to try <action-pattern-core>       0/777:  ==>  DS: 04000000
   not asking <action-parameter> to try <action-pattern-core>       0/777:  ==>  DS: 04000000
   <action-parameter> not trying <action-pattern-core>       0/777:  ==>  DS: 04000000
   an actor not trying <action-pattern-core>       0/777:  ==>  DS: 04000000
   an actor not <action-pattern-core>       0/777:  ==>  DS: 04000000
   we are not trying <action-pattern-core>       0/777:  ==>  DS: 04000000
   not trying <action-pattern-core>       0/777:  ==>  DS: 04000000
   we are not <action-pattern-core>       0/777:  ==>  DS: 04000000
   not <action-pattern-core-actor>       0/777:  ==>  DS: 04000000
  min 2, max 1000000000

0/1718: <action-pattern-past>:  DS: 00800000
  English:
   we have asked <action-parameter> to try <action-pattern-core>       0/859:  ==>  DS: 00800000
   <action-parameter> has tried <action-pattern-core>       0/859:  ==>  DS: 00800000
   an actor has tried <action-pattern-core>       0/859:  ==>  DS: 00800000
   an actor has <action-pattern-past-core>       0/859:  ==>  DS: 00800000
   we have tried <action-pattern-core>       0/859:  ==>  DS: 00800000
   we have <action-pattern-past-core>       0/859:  ==>  DS: 00800000
  min 3, max 1000000000

0/1666: <action-pattern-past-negated>:  DS: 01000000
  English:
   we have not asked <action-parameter> to try <action-pattern-core>       0/833:  ==>  DS: 01000000
   <action-parameter> has not tried <action-pattern-core>       0/833:  ==>  DS: 01000000
   an actor has not tried <action-pattern-core>       0/833:  ==>  DS: 01000000
   an actor has not <action-pattern-past-core>       0/833:  ==>  DS: 01000000
   we have not tried <action-pattern-core>       0/833:  ==>  DS: 01000000
   we have not <action-pattern-past-core>       0/833:  ==>  DS: 01000000
  min 4, max 1000000000

150/23094: <action-pattern-core-actor>: 
  English:
   <action-pattern-core>       85/11547: <locking a door with something in the presence of an other person ( called audience )> ==> 
   <actor-description> <action-pattern-core>       65/11462: <someone resolving a stamped envelope when the person asked is not in the post office> ==> 
  min 1, max 1000000000

76/13028: <actor-description>: 
  (internal)
  min 1, max 1000000000

584/24114: <action-pattern-core>: 
  (internal)
  min 1, max 1000000000

0/0: <action-pattern-past-core>: 
  (internal)
  min 1, max 1000000000

0/1390: <action-pronominal>:  CS: 00000800
  English:
   doing it       0/0:  ==>  CS: 00000800
  min 2, max 2

584/1390: <ap-common-core>: 
  English:
   <ap-common-core-inner> when/while <condition-in-ap>       11/593: <resolving a stamped envelope when the person asked is not in the post office> ==>  DS: 00004000
   <ap-common-core-inner>       573/684: <locking a door with something in the presence of an other person ( called audience )> ==> 
   {...} when/while <condition-in-ap>       0/100:  ==>  DS: 00004000
   {...} when/while {...}       0/100:  ==>  DS: 00004000
  min 1, max 1000000000

19/38: <condition-in-ap>: 
  (internal)
  min 1, max 1000000000

584/1406: <ap-common-core-inner>: 
  English:
   <ap-common-core-inner-inner> in the presence of <action-parameter>       1/595: <locking a door with something in the presence of an other person ( called audience )> ==>  DS: 00002000
   <ap-common-core-inner-inner>       583/702: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

584/1406: <ap-common-core-inner-inner>: 
  English:
   in <action-parameter>       0/595:  ==>  DS: 00001000
   <ap-common-core-inner-inner-inner>       584/703: <unlocking something with something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

584/1406: <ap-common-core-inner-inner-inner>: 
  (internal)
  min 1, max 1000000000

194/444: <action-operand>: 
  English:
   something/anything       78/93: <something> ==>  CS: 00008000
   something/anything else       0/15:  ==>  CS: 00008000
   <action-parameter>       116/144: <something which is on a keychain which is carried by the actor> ==> 
  min 1, max 1000000000

0/18: <going-action-irregular-operand>:  CS: 00010000
  English:
   nowhere       0/3:  ==>  CS: 00010000
   somewhere       0/3:  ==>  CS: 00010000
  min 1, max 1

5/10: <understanding-action-irregular-operand>:  CS: 00020000
  English:
   something/anything       4/5: <something> ==>  CS: 00020000
   it       1/1: <it> ==>  CS: 00020000
  min 1, max 1

276/1144: <action-parameter>: 
  English:
   ^<if-nonconstant-action-context> <s-local-variable>       0/572:  ==> 
   ^<if-nonconstant-action-context> <s-global-variable>       0/572:  ==> 
   <s-local-variable>       25/572: <the current working sack> ==> 
   <s-global-variable>       42/547: <the second noun> ==> 
   <s-type-expression-or-value>       209/505: <best route from the location of the person asked to the noun ,> ==> 
  min 1, max 1000000000

1144/2288: <if-nonconstant-action-context>: 
  (internal)
  min 0, max 0

208/416: <understand-sentence-subject>: 
  English:
   nothing       0/2:  ==>  CS: 00200000
   <understand-property-list>       1/208: <the infection color property> ==> 
   the command/commands <understand-regular-list>       40/40: <the commands break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==>  DS: 00200000
   the verb/verbs {...}       0/0:  ==>  DS: 00200000
   <understand-regular-list>       167/167: <"ice cream" or "cream" or "ice" or "sherbet" or "sorbet"> ==> 
  min 1, max 1000000000

383/766: <understand-regular-list>: 
  English:
   {...}       88/383: <smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==> 
   <understand-regular-entry> <understand-regular-tail>       88/88: <break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==>  DS: 00100000
   <understand-regular-entry>       207/207: <"n"> ==> 
  min 1, max 1000000000

176/352: <understand-regular-tail>:  DS: 00100000
  English:
   , _and/or <understand-regular-list>       0/176:  ==>  DS: 00100000
   _,/and/or <understand-regular-list>       176/176: <, smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==>  DS: 00100000
  min 2, max 1000000000

383/766: <understand-regular-entry>: 
  English:
   {...}       383/383: <"n"> ==> 
  min 1, max 1000000000

50/514: <understand-property-list>: 
  English:
   {...}       49/257: <smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==> 
   <understand-property-entry> <understand-property-tail>       0/25:  ==>  DS: 000c0000
   <understand-property-entry>       1/25: <the infection color property> ==>  DS: 00040000
  min 1, max 1000000000

49/298: <understand-property-tail>:  DS: 00080000
  English:
   , _and/or <understand-property-list>       0/122:  ==>  DS: 00080000
   _,/and/or <understand-property-list>       49/122: <, smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump> ==>  DS: 00080000
  min 2, max 1000000000

1/148: <understand-property-entry>:  DS: 00040000
  English:
   <property-name> property       1/50: <the infection color property> ==>  DS: 00040000
   {...} property       0/49:  ==>  DS: 00040000
  min 2, max 1000000000

167/334: <understand-sentence-object>: 
  English:
   <understand-sentence-object-uncond> when/while {...}       1/44: <yourself when the player is not yourself> ==>  DS: 01000000
   <understand-sentence-object-uncond>       166/166: <giving it to ( with nouns reversed )> ==> 
  min 1, max 1000000000

167/334: <understand-sentence-object-uncond>: 
  English:
   {...}       0/167:  ==> 
   <understand-sentence-entry> <understand-sentence-object-tail>       0/28:  ==>  DS: 00800000
   <understand-sentence-entry>       167/167: <giving it to ( with nouns reversed )> ==> 
  min 1, max 1000000000

0/168: <understand-sentence-object-tail>:  DS: 00800000
  English:
   , _and/or <understand-sentence-object-uncond>       0/53:  ==>  DS: 00800000
   _,/and/or <understand-sentence-object-uncond>       0/53:  ==>  DS: 00800000
  min 2, max 1000000000

167/334: <understand-sentence-entry>: 
  English:
   <understand-as-this>       167/167: <giving it to ( with nouns reversed )> ==> 
  min 1, max 1000000000

167/334: <understand-as-this>: 
  English:
   {...}       0/167:  ==> 
   a mistake       0/3:  ==>  CS: 00400000
   a mistake ( <quoted-text> )       0/65:  ==>  DS: 00400000
   a mistake {...}       0/65:  ==>  DS: 00400000
   the plural of <understand-ref>       0/65:  ==>  DS: 00400000
   plural of <understand-ref>       0/65:  ==>  DS: 00400000
   <quoted-text>       2/167: <"[ice cream]"> ==> 
   <understand-ref> ( with nouns reversed )       6/65: <giving it to ( with nouns reversed )> ==>  DS: 00400000
   <understand-ref>       159/159: <requesting the story file version> ==> 
  min 1, max 1000000000

165/330: <understand-ref>: 
  English:
   <action-name>       150/165: <requesting the story file version> ==> 
   <s-descriptive-type-expression>       15/15: <the statue> ==> 
   <s-variable>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

40/80: <understand-command-sentence-object>: 
  English:
   {...} when/while {...}       0/3:  ==>  DS: 02000000
   something new       3/3: <something new> ==>  CS: 02000000
   <quoted-text>       37/37: <take> ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

1/2: <understand-property-sentence-object>: 
  English:
   <understand-property-sentence-object-unconditional> when/while {...}       0/0:  ==>  DS: 08000000
   <understand-property-sentence-object-unconditional>       1/1: <referring to an ice cream cone> ==> 
  min 1, max 1000000000

1/2: <understand-property-sentence-object-unconditional>: 
  English:
   referring to <understand-property-reference>       1/1: <referring to an ice cream cone> ==>  DS: 04000000
   describing <understand-property-reference>       0/0:  ==>  DS: 04000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

1/2: <understand-property-reference>: 
  English:
   <k-kind>       1/1: <an ice cream cone> ==>  DS: 00000020 CW: 00000024
   <instance-of-object>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

22/186: <notable-parsing-variables>:  DS: 10000000 CW: 10000024
  English:
   <k-kind> understood       16/18: <command parser error understood> ==>  DS: 10000020 CW: 10000024
   noun       1/7: <noun> ==>  CS: 10000000
   location       1/6: <location> ==>  CS: 10000000
   actor-location       1/5: <actor-location> ==>  CS: 10000000
   second noun       1/4: <second noun> ==>  CS: 10000000
   person asked       1/3: <person asked> ==>  CS: 10000000
   maximum score       1/2: <maximum score> ==>  CS: 10000000
  min 1, max 1000000000

4/8: <understand-condition>: 
  English:
   <s-non-action-condition>       4/4: <the player is not yourself> ==> 
   <s-condition>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

910/1820: <grammar-token-breaking>: 
  English:
   {...} , {...}       340/340: <unlock , a locked lockable thing , with , something , > ==>  DS: 20000000
   <quoted-text>       400/570: <n> ==> 
   {...}       170/170: <a locked lockable thing> ==> 
  min 1, max 1000000000

163/326: <grammar-token>: 
  English:
   <named-grammar-token>       3/163: <flavored ice cream> ==> 
   any things       0/92:  ==>  CS: 80000000
   any <s-description>       2/128: <any room> ==>  DS: 80000000
   anything       0/92:  ==>  CS: 80000000
   anybody       0/92:  ==>  CS: 80000000
   anyone       0/92:  ==>  CS: 80000000
   anywhere       0/92:  ==>  CS: 80000000
   something related by reversed <relation-name>       0/126:  ==>  DS: 80000000
   something related by <relation-name>       0/126:  ==>  DS: 80000000
   something related by {...}       0/126:  ==>  DS: 80000000
   <standard-grammar-token>       138/141: <something preferably held> ==>  CS: 40000000
   <definite-article> <k-kind>       0/0:  ==>  DS: 00000024 CW: 00000024
   <s-description>       20/20: <an unlocked lockable thing> ==> 
   <s-type-expression>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

138/282: <standard-grammar-token>:  CS: 40000000
  English:
   something       88/141: <something> ==>  CS: 40000000
   things       4/53: <things> ==>  CS: 40000000
   things inside       4/49: <things inside> ==>  CS: 40000000
   things preferably held       3/45: <things preferably held> ==>  CS: 40000000
   something preferably held       11/42: <something preferably held> ==>  CS: 40000000
   other things       5/31: <other things> ==>  CS: 40000000
   someone       15/26: <someone> ==>  CS: 40000000
   somebody       0/11:  ==>  CS: 40000000
   text       8/11: <text> ==>  CS: 40000000
   topic       0/3:  ==>  CS: 40000000
   a topic       0/3:  ==>  CS: 40000000
   object       0/3:  ==>  CS: 40000000
   an object       0/3:  ==>  CS: 40000000
   something held       0/3:  ==>  CS: 40000000
   things held       0/3:  ==>  CS: 40000000
  min 1, max 3

3/326: <named-grammar-token>: 
  (internal)
  min 1, max 1000000000

1/4: <new-figure-sentence-object>:  DW: 00000044 DS: 00000040
  English:
   <definite-article> <new-figure-sentence-object-unarticled>       1/2: <the file of cover art ( The cover art. )> ==>  DS: 00000044
   <new-figure-sentence-object-unarticled>       0/1:  ==>  DS: 00000040
  min 2, max 1000000000

1/4: <new-figure-sentence-object-unarticled>:  DS: 00000040
  English:
   file <nounphrase>       1/2: <file of cover art ( The cover art. )> ==>  DS: 00000040
  min 2, max 1000000000

1/2: <figure-sentence-object>: 
  English:
   <figure-source> ( <quoted-text> )       1/1: <of cover art ( The cover art. )> ==>  DS: 00000100
   <figure-source>       0/0:  ==> 
  min 1, max 1000000000

1/2: <figure-source>: 
  English:
   of cover art       1/1: <of cover art> ==>  CS: 00000080
   <quoted-text>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <notable-figures>:  CS: 00000200
  English:
   of cover art       0/0:  ==>  CS: 00000200
  min 3, max 3

0/2: <new-sound-sentence-object>:  DW: 00000404 DS: 00000400
  English:
   <definite-article> <new-sound-sentence-object-unarticled>       0/0:  ==>  DS: 00000404
   <new-sound-sentence-object-unarticled>       0/0:  ==>  DS: 00000400
  min 2, max 1000000000

0/0: <new-sound-sentence-object-unarticled>:  DS: 00000400
  English:
   file <nounphrase>       0/0:  ==>  DS: 00000400
  min 2, max 1000000000

0/0: <sound-sentence-object>: 
  English:
   <sound-source> ( <quoted-text> )       0/0:  ==>  DS: 00000800
   <sound-source>       0/0:  ==> 
  min 1, max 1000000000

0/0: <sound-source>: 
  English:
   <quoted-text>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/1070: <external-file-sentence-subject>:  DW: 18000004
  English:
   <definite-article> <external-file-sentence-subject>       0/381:  ==>  DS: 00000004
   text <external-file-name>       0/83:  ==>  DS: 18000000
   binary <external-file-name>       0/83:  ==>  DS: 18000000
   <external-file-name>       0/91:  ==>  DS: 08000000
  min 2, max 1000000000

0/182: <external-file-name>:  DS: 08000000
  English:
   {file ...} ( owned by <external-file-owner> )       0/91:  ==>  DS: 08000000
   {file ...}       0/91:  ==>  DS: 08000000
  min 2, max 1000000000

0/0: <external-file-owner>: 
  English:
   another project       0/0:  ==>  CS: 04000000
   project {<quoted-text-without-subs>}       0/0:  ==>  DS: 04000000
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <external-file-sentence-object>: 
  English:
   <quoted-text>       0/0:  ==> 
   {...}       0/0:  ==> 
  min 1, max 1000000000

0/0: <new-file-sentence-object>:  DW: 00001004 DS: 00001000
  English:
   <indefinite-article> <new-file-sentence-object-unarticled>       0/0:  ==>  DS: 00001004
   <new-file-sentence-object-unarticled>       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

0/0: <new-file-sentence-object-unarticled>:  DS: 00001000
  English:
   called <nounphrase>       0/0:  ==>  DS: 00001000
  min 2, max 1000000000

451/2552: <documentation-symbol-tail>:  DS: 00002040
  English:
   {...} ( <documentation-symbol> )       424/900: <to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized ( documented at ph_listcontents )> ==>  DS: 00002040
   {...} -- <documentation-symbol> --       27/476: <issuing the response text of something -- documented at act_resp --> ==>  DS: 00002040
  min 6, max 1000000000

484/1196: <documentation-symbol>:  DS: 00000040
  English:
   documented at {###}       484/497: <documented at act_startvm> ==>  DS: 00000040
  min 3, max 3

