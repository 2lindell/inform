ROOT_NT
    HEADING_NT'implied inclusions' (level 0)
        INCLUSION_NT'include basic inform by graham nelson'
            HEADING_NT'version 1 of basic inform by graham nelson begins here' (level 0)
                BEGINHERE_NT'version 1 of basic inform by graham nelson'
                SENTENCE_NT'Basic Inform, included in every project, defines the basic framework
                of Inform as a programming language.'
                HEADING_NT'part one - preamble' (level 3)
                    SENTENCE_NT'the verb to be means the built-in new-verb meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-verb meaning'
                    SENTENCE_NT'the verb to be means the built-in new-plural meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-plural meaning'
                    SENTENCE_NT'the verb to be means the built-in new-activity meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-activity meaning'
                    SENTENCE_NT'the verb to be means the built-in new-action meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-action meaning'
                    SENTENCE_NT'the verb to be means the built-in new-adjective meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-adjective meaning'
                    SENTENCE_NT'the verb to be means the built-in new-either-or meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-either-or meaning'
                    SENTENCE_NT'the verb to be means the built-in defined-by-table meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in defined-by-table meaning'
                    SENTENCE_NT'the verb to be means the built-in rule-listed-in meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in rule-listed-in meaning'
                    SENTENCE_NT'the verb to be means the built-in new-figure meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-figure meaning'
                    SENTENCE_NT'the verb to be means the built-in new-sound meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-sound meaning'
                    SENTENCE_NT'the verb to be means the built-in new-file meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in new-file meaning'
                    SENTENCE_NT'the verb to be means the built-in episode meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'built-in episode meaning'
                    SENTENCE_NT'the verb to be means the equality relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be'
                        PROPER_NOUN_NT'equality relation'
                    SENTENCE_NT'the verb to mean means the meaning relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to mean'
                        PROPER_NOUN_NT'meaning relation'
                    SENTENCE_NT'the verb to imply means the built-in verb-means meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to imply'
                        PROPER_NOUN_NT'built-in verb-means meaning'
                    SENTENCE_NT'the verb to imply means the meaning relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to imply'
                        PROPER_NOUN_NT'meaning relation'
                    SENTENCE_NT'the verb to be able to be means the built-in can-be meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be able to be'
                        PROPER_NOUN_NT'built-in can-be meaning'
                    SENTENCE_NT'the verb to have means the possession relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to have'
                        PROPER_NOUN_NT'possession relation'
                    SENTENCE_NT'the verb to specify means the built-in specifies-notation meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to specify'
                        PROPER_NOUN_NT'built-in specifies-notation meaning'
                    SENTENCE_NT'the verb to relate means the built-in new-relation meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to relate'
                        PROPER_NOUN_NT'built-in new-relation meaning'
                    SENTENCE_NT'the verb to relate means the universal relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to relate'
                        PROPER_NOUN_NT'universal relation'
                    SENTENCE_NT'the verb to substitute for means the built-in rule-substitutes-for meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to substitute for'
                        PROPER_NOUN_NT'built-in rule-substitutes-for meaning'
                    SENTENCE_NT'the verb to do means the built-in rule-does-nothing meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to do'
                        PROPER_NOUN_NT'built-in rule-does-nothing meaning'
                    SENTENCE_NT'the verb to do + if means the built-in rule-does-nothing-if meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to do + if'
                        PROPER_NOUN_NT'built-in rule-does-nothing-if meaning'
                    SENTENCE_NT'the verb to do + when means the built-in rule-does-nothing-if meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to do + when'
                        PROPER_NOUN_NT'built-in rule-does-nothing-if meaning'
                    SENTENCE_NT'the verb to do + unless means the built-in rule-does-nothing-unless meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to do + unless'
                        PROPER_NOUN_NT'built-in rule-does-nothing-unless meaning'
                    SENTENCE_NT'the verb to translate into + as means the built-in translates-into-unicode meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to translate into + as'
                        PROPER_NOUN_NT'built-in translates-into-unicode meaning'
                    SENTENCE_NT'the verb to translate into + as means the built-in translates-into-i6 meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to translate into + as'
                        PROPER_NOUN_NT'built-in translates-into-i6 meaning'
                    SENTENCE_NT'the verb to translate into + as means the built-in translates-into-language meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to translate into + as'
                        PROPER_NOUN_NT'built-in translates-into-language meaning'
                    SENTENCE_NT'the verb to translate as means the built-in use-translates meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to translate as'
                        PROPER_NOUN_NT'built-in use-translates meaning'
                    SENTENCE_NT'the verb to provide means the provision relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to provide'
                        PROPER_NOUN_NT'provision relation'
                    SENTENCE_NT'the verb to use in the imperative means the built-in use meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to use'
                        PROPER_NOUN_NT'built-in use meaning'
                    SENTENCE_NT'the verb to include + in in the imperative means the built-in include-in meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to include + in'
                        PROPER_NOUN_NT'built-in include-in meaning'
                    SENTENCE_NT'the verb to omit + from in the imperative means the built-in omit-from meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to omit + from'
                        PROPER_NOUN_NT'built-in omit-from meaning'
                    SENTENCE_NT'the verb to be greater than means the numerically-greater-than relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be greater than'
                        PROPER_NOUN_NT'numerically-greater-than relation'
                    SENTENCE_NT'the verb to be less than means the numerically-less-than relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be less than'
                        PROPER_NOUN_NT'numerically-less-than relation'
                    SENTENCE_NT'the verb to be at least means the numerically-greater-than-or-equal-to relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be at least'
                        PROPER_NOUN_NT'numerically-greater-than-or-equal-to relation'
                    SENTENCE_NT'the verb to be at most means the numerically-less-than-or-equal-to relation'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to be at most'
                        PROPER_NOUN_NT'numerically-less-than-or-equal-to relation'
                    SENTENCE_NT'use ineffectual translates as (-  ! Use ineffectual does nothing. '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'ineffectual'
                        PROPER_NOUN_NT'(-  ! Use ineffectual does nothing. '
                    SENTENCE_NT'use american dialect translates as (-  Constant DIALECT_US; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'american dialect'
                        PROPER_NOUN_NT'(-  Constant DIALECT_US; '
                    SENTENCE_NT'use the serial comma translates as (-  Constant SERIAL_COMMA; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'the serial comma'
                        PROPER_NOUN_NT'(-  Constant SERIAL_COMMA; '
                    SENTENCE_NT'use memory economy translates as (-  Constant MEMORY_ECONOMY; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'memory economy'
                        PROPER_NOUN_NT'(-  Constant MEMORY_ECONOMY; '
                    SENTENCE_NT'use engineering notation translates as (-  Constant USE_E_NOTATION = 0; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'engineering notation'
                        PROPER_NOUN_NT'(-  Constant USE_E_NOTATION = 0; '
                    SENTENCE_NT'use unabbreviated object names translates as (-  Constant UNABBREVIATED_OBJECT_NAMES = 0; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'unabbreviated object names'
                        PROPER_NOUN_NT'(-  Constant UNABBREVIATED_OBJECT_NAMES = 0; '
                    SENTENCE_NT'use predictable randomisation translates as (-  Constant FIX_RNG; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'predictable randomisation'
                        PROPER_NOUN_NT'(-  Constant FIX_RNG; '
                    SENTENCE_NT'use fast route-finding translates as (-  Constant FAST_ROUTE_FINDING; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'fast route-finding'
                        PROPER_NOUN_NT'(-  Constant FAST_ROUTE_FINDING; '
                    SENTENCE_NT'use slow route-finding translates as (-  Constant SLOW_ROUTE_FINDING; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'slow route-finding'
                        PROPER_NOUN_NT'(-  Constant SLOW_ROUTE_FINDING; '
                    SENTENCE_NT'use numbered rules translates as (-  Constant NUMBERED_RULES; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'numbered rules'
                        PROPER_NOUN_NT'(-  Constant NUMBERED_RULES; '
                    SENTENCE_NT'use telemetry recordings translates as (-  Constant TELEMETRY_ON; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'telemetry recordings'
                        PROPER_NOUN_NT'(-  Constant TELEMETRY_ON; '
                    SENTENCE_NT'use no deprecated features translates as (-  Constant NO_DEPRECATED_FEATURES; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'no deprecated features'
                        PROPER_NOUN_NT'(-  Constant NO_DEPRECATED_FEATURES; '
                    SENTENCE_NT'use gn testing version translates as (-  Constant GN_TESTING_VERSION; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'gn testing version'
                        PROPER_NOUN_NT'(-  Constant GN_TESTING_VERSION; '
                    SENTENCE_NT'use authorial modesty translates as (-  Constant AUTHORIAL_MODESTY; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'authorial modesty'
                        PROPER_NOUN_NT'(-  Constant AUTHORIAL_MODESTY; '
                    SENTENCE_NT'use dynamic memory allocation of at least 8192 translates as (-  Constant DynamicMemoryAllocation = {N}; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'dynamic memory allocation of at least 8192'
                        PROPER_NOUN_NT'(-  Constant DynamicMemoryAllocation = {N}; '
                    SENTENCE_NT'use maximum text length of at least 1024 translates as (-  Constant TEXT_TY_BufferSize = {N}+3; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'maximum text length of at least 1024'
                        PROPER_NOUN_NT'(-  Constant TEXT_TY_BufferSize = {N}+3; '
                    SENTENCE_NT'use index figure thumbnails of at least 50 translates as (-  Constant MAX_FIGURE_THUMBNAILS_IN_INDEX = {N}; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'index figure thumbnails of at least 50'
                        PROPER_NOUN_NT'(-  Constant MAX_FIGURE_THUMBNAILS_IN_INDEX = {N}; '
                    SENTENCE_NT'use dynamic memory allocation of at least 8192'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'dynamic memory allocation of at least 8192'
                    SENTENCE_NT'use alloc_chunk_size of 32000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'alloc_chunk_size of 32000'
                    SENTENCE_NT'use max_arrays of 10000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_arrays of 10000'
                    SENTENCE_NT'use max_classes of 200'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_classes of 200'
                    SENTENCE_NT'use max_verbs of 255'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_verbs of 255'
                    SENTENCE_NT'use max_labels of 10000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_labels of 10000'
                    SENTENCE_NT'use max_zcode_size of 500000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_zcode_size of 500000'
                    SENTENCE_NT'use max_static_data of 180000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_static_data of 180000'
                    SENTENCE_NT'use max_prop_table_size of 200000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_prop_table_size of 200000'
                    SENTENCE_NT'use max_indiv_prop_table_size of 20000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_indiv_prop_table_size of 20000'
                    SENTENCE_NT'use max_stack_size of 65536'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_stack_size of 65536'
                    SENTENCE_NT'use max_symbols of 20000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_symbols of 20000'
                    SENTENCE_NT'use max_expression_nodes of 256'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_expression_nodes of 256'
                    SENTENCE_NT'use max_labels of 200000'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_labels of 200000'
                    SENTENCE_NT'use max_local_variables of 256'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'max_local_variables of 256'
                HEADING_NT'part two - miscellaneous definitions' (level 3)
                    SENTENCE_NT'an object has a value called variable initial value'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'value'
                                PROPER_NOUN_NT'variable initial value'
                    SENTENCE_NT'an object has a text called specification'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'text'
                                PROPER_NOUN_NT'specification'
                    SENTENCE_NT'an object has a text called indefinite appearance text'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'text'
                                PROPER_NOUN_NT'indefinite appearance text'
                    SENTENCE_NT'an object has a text called printed name'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'text'
                                PROPER_NOUN_NT'printed name'
                    SENTENCE_NT'an object has a text called printed plural name'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'text'
                                PROPER_NOUN_NT'printed plural name'
                    SENTENCE_NT'an object has a text called an indefinite article'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'object'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'text'
                                PROPER_NOUN_NT'indefinite article'
                    SENTENCE_NT'an object can be plural-named or singular-named'
                        AVERB_NT'can be'
                        COMMON_NOUN_NT'an object'
                        PROPER_NOUN_NT'plural-named or singular-named'
                            AND_NT'or'
                                PROPER_NOUN_NT'plural-named'
                                PROPER_NOUN_NT'singular-named'
                    SENTENCE_NT'an object is usually singular-named'
                        AVERB_NT'is usually'
                        COMMON_NOUN_NT'object'
                        ADJECTIVE_NT'singular-named'
                    SENTENCE_NT'an object can be proper-named or improper-named'
                        AVERB_NT'can be'
                        COMMON_NOUN_NT'an object'
                        PROPER_NOUN_NT'proper-named or improper-named'
                            AND_NT'or'
                                PROPER_NOUN_NT'proper-named'
                                PROPER_NOUN_NT'improper-named'
                    SENTENCE_NT'an object is usually improper-named'
                        AVERB_NT'is usually'
                        COMMON_NOUN_NT'object'
                        ADJECTIVE_NT'improper-named'
                    SENTENCE_NT'an object can be ambiguously plural'
                        AVERB_NT'can be'
                        COMMON_NOUN_NT'an object'
                        PROPER_NOUN_NT'ambiguously plural'
                            PROPER_NOUN_NT'ambiguously plural'
                    SENTENCE_NT'the indefinite article property translates into i6 as article'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'indefinite article property'
                        PROPER_NOUN_NT'article'
                    SENTENCE_NT'the printed plural name property translates into i6 as plural'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'printed plural name property'
                        PROPER_NOUN_NT'plural'
                    SENTENCE_NT'the printed name property translates into i6 as short_name'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'printed name property'
                        PROPER_NOUN_NT'short_name'
                    SENTENCE_NT'the plural-named property translates into i6 as pluralname'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'plural-named property'
                        PROPER_NOUN_NT'pluralname'
                    SENTENCE_NT'the ambiguously plural property translates into i6 as ambigpluralname'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'ambiguously plural property'
                        PROPER_NOUN_NT'ambigpluralname'
                    SENTENCE_NT'the proper-named property translates into i6 as proper'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'proper-named property'
                        PROPER_NOUN_NT'proper'
                    SENTENCE_NT'a natural language is a kind of value'
                        AVERB_NT'is'
                        COMMON_NOUN_NT'natural language'
                        KIND_NT'kind of value'
                            COMMON_NOUN_NT'value'
                    SENTENCE_NT'the language of play is a natural language that varies'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'language of play'
                        COMMON_NOUN_NT'natural language that varies'
                    SENTENCE_NT'the parameter-object is an object that varies'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'parameter-object'
                        COMMON_NOUN_NT'object that varies'
                    SENTENCE_NT'the parameter-object variable translates into i6 as parameter_value'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'parameter-object variable'
                        PROPER_NOUN_NT'parameter_value'
                    SENTENCE_NT'startup rules is a rulebook'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'startup rules'
                        COMMON_NOUN_NT'rulebook'
                    SENTENCE_NT'startup rules have outcomes allow startup ( success ) and deny startup ( failure )'
                        AVERB_NT'have'
                        PROPER_NOUN_NT'startup rules'
                        PROPERTY_LIST_NT'and'
                            PROPER_NOUN_NT'outcomes allow startup ( success )'
                            PROPER_NOUN_NT'deny startup ( failure )'
                    SENTENCE_NT'shutdown rules is a rulebook'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'shutdown rules'
                        COMMON_NOUN_NT'rulebook'
                    SENTENCE_NT'starting the virtual machine ( documented at act_startvm ) is an activity'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'starting the virtual machine ( documented at act_startvm )'
                        PROPER_NOUN_NT'an activity'
                    SENTENCE_NT'the enable glulx acceleration rule is listed first in for starting the virtual machine'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'the enable glulx acceleration rule'
                        PROPER_NOUN_NT'first in for starting the virtual machine'
                    SENTENCE_NT'the enable glulx acceleration rule translates into i6 as ENABLE_GLULX_ACCEL_R'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'enable glulx acceleration rule'
                        PROPER_NOUN_NT'ENABLE_GLULX_ACCEL_R'
                    SENTENCE_NT'printing the name of something ( documented at act_pn ) is an activity'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'printing the name of something ( documented at act_pn )'
                        PROPER_NOUN_NT'an activity'
                    SENTENCE_NT'the standard name printing rule is listed last in the for printing the name rulebook'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'the standard name printing rule'
                        PROPER_NOUN_NT'last in the for printing the name rulebook'
                    SENTENCE_NT'the standard name printing rule translates into i6 as STANDARD_NAME_PRINTING_R'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'standard name printing rule'
                        PROPER_NOUN_NT'STANDARD_NAME_PRINTING_R'
                    SENTENCE_NT'printing the plural name of something ( documented at act_ppn ) is an activity'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'printing the plural name of something ( documented at act_ppn )'
                        PROPER_NOUN_NT'an activity'
                    SENTENCE_NT'the standard printing the plural name rule is listed last in the for printing the plural name rulebook'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'the standard printing the plural name rule'
                        PROPER_NOUN_NT'last in the for printing the plural name rulebook'
                    SENTENCE_NT'the standard printing the plural name rule translates into i6 as STANDARD_PLURAL_NAME_PRINTING_R'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'standard printing the plural name rule'
                        PROPER_NOUN_NT'STANDARD_PLURAL_NAME_PRINTING_R'
                HEADING_NT'part three - phrasebook' (level 3)
                    HEADING_NT'chapter 1 - saying' (level 4)
                        HEADING_NT'section 1 - saying values' (level 5)
                            ROUTINE_NT'to say ( val - sayable value of kind k ) ( documented at ph_say )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-say:val:K} '
                            ROUTINE_NT'to say ( something - number ) in words ( documented at phs_numwords )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (number) say__n=({something}); '
                            ROUTINE_NT'to say s ( documented at phs_s )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  STextSubstitution(); '
                            ROUTINE_NT'to showme ( val - value ) ( documented at ph_showme )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-show-me:val} '
                        HEADING_NT'section 2 - saying names' (level 5)
                            ROUTINE_NT'to say a ( something - object ) ( documented at phs_a )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (a) {something}; '
                            ROUTINE_NT'to say an ( something - object ) ( documented at phs_a )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (a) {something}; '
                            ROUTINE_NT'to say a ( something - object ) ( documented at phs_a )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CIndefArt({something}); '
                            ROUTINE_NT'to say an ( something - object ) ( documented at phs_a )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CIndefArt({something}); '
                            ROUTINE_NT'to say the ( something - object ) ( documented at phs_the )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (the) {something}; '
                            ROUTINE_NT'to say the ( something - object ) ( documented at phs_the )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (The) {something}; '
                        HEADING_NT'section 3 - saying special characters' (level 5)
                            ROUTINE_NT'to say bracket -- running on ( documented at phs_bracket )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "["; '
                            ROUTINE_NT'to say close bracket -- running on ( documented at phs_closebracket )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "]"; '
                            ROUTINE_NT'to say apostrophe/' -- running on ( documented at phs_apostrophe )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "'"; '
                            ROUTINE_NT'to say quotation mark -- running on ( documented at phs_quotemark )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print "~"; '
                        HEADING_NT'section 4 - saying line and paragraph breaks' (level 5)
                            ROUTINE_NT'to say line break -- running on ( documented at phs_linebreak )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  new_line; '
                            ROUTINE_NT'to say no line break -- running on ( documented at phs_nolinebreak )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'do nothing'
                                        INVOCATION_NT'do nothing'
                            ROUTINE_NT'to say conditional paragraph break -- running on ( documented at phs_condparabreak )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DivideParagraphPoint(); '
                            ROUTINE_NT'to say paragraph break -- running on ( documented at phs_parabreak )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DivideParagraphPoint(); new_line; '
                            ROUTINE_NT'to say run paragraph on -- running on ( documented at phs_runparaon )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RunParagraphOn(); '
                            ROUTINE_NT'to decide if a paragraph break is pending ( documented at ph_breakpending )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (say__p) '
                        HEADING_NT'section 5 - saying if and otherwise' (level 5)
                            ROUTINE_NT'to say if ( c - condition ) ( documented at phs_if )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	if (~~({c})) jump {-label:Say};
                                    		'
                            ROUTINE_NT'to say unless ( c - condition ) ( documented at phs_unless )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	if ({c}) jump {-label:Say};
                                    		'
                            ROUTINE_NT'to say otherwise/else if ( c - condition ) ( documented at phs_elseif )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say}; if (~~({c})) jump {-label:Say};
                                    		'
                            ROUTINE_NT'to say otherwise/else unless ( c - condition ) ( documented at phs_elseunless )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say}; if ({c}) jump {-label:Say};
                                    		'
                            ROUTINE_NT'to say otherwise ( documented at phs_otherwise )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say};
                                    		'
                            ROUTINE_NT'to say else ( documented at phs_otherwise )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	jump {-label:SayX}; .{-label:Say}{-counter-up:Say};
                                    		'
                            ROUTINE_NT'to say end if ( documented at phs_endif )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	.{-label:Say}{-counter-up:Say}; .{-label:SayX}{-counter-up:SayX};
                                    		'
                            ROUTINE_NT'to say end unless ( documented at phs_endunless )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	.{-label:Say}{-counter-up:Say}; .{-label:SayX}{-counter-up:SayX};
                                    		'
                        HEADING_NT'section 6 - saying one of' (level 5)
                            ROUTINE_NT'to say one of -- beginning say_one_of ( documented at phs_oneof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	{-counter-makes-array:say_one_of}
                                    	{-counter-makes-array:say_one_flag}
                                    	if ({-counter-storage:say_one_flag}-->{-counter:say_one_flag} == false) {
                                    		{-counter-storage:say_one_of}-->{-counter:say_one_of} = {-final-segment-marker}({-counter-storage:say_one_of}-->{-counter:say_one_of}, {-segment-count});
                                    	 	{-counter-storage:say_one_flag}-->{-counter:say_one_flag} = true;
                                    	}
                                    	if (say__comp == false) {-counter-storage:say_one_flag}-->{-counter:say_one_flag}{-counter-up:say_one_flag} = false;
                                    	switch (({-counter-storage:say_one_of}-->{-counter:say_one_of}{-counter-up:say_one_of})%({-segment-count}+1)-1)
                                    {-open-brace}
                                    		0: '
                            ROUTINE_NT'to say or -- continuing say_one_of ( documented at phs_or )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  @nop; {-segment-count}: '
                            ROUTINE_NT'to say at random -- ending say_one_of with marker i7_soo_ran ( documented at phs_random )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say purely at random -- ending say_one_of with marker i7_soo_par ( documented at phs_purelyrandom )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say then at random -- ending say_one_of with marker i7_soo_tran ( documented at phs_thenrandom )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say then purely at random -- ending say_one_of with marker i7_soo_tpar ( documented at phs_thenpurelyrandom )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say sticky random -- ending say_one_of with marker i7_soo_sti ( documented at phs_sticky )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say as decreasingly likely outcomes -- ending say_one_of with marker i7_soo_tap ( documented at phs_decreasing )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say in random order -- ending say_one_of with marker i7_soo_shu ( documented at phs_order )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say cycling -- ending say_one_of with marker i7_soo_cyc ( documented at phs_cycling )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say stopping -- ending say_one_of with marker i7_soo_stop ( documented at phs_stopping )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                            ROUTINE_NT'to say first time -- beginning say_first_time ( documented at phs_firsttime )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-counter-makes-array:say_first_time}
                                    	if ((say__comp == false) && (({-counter-storage:say_first_time}-->{-counter:say_first_time}{-counter-up:say_first_time})++ == 0)) {-open-brace}
                                    		'
                            ROUTINE_NT'to say only -- ending say_first_time ( documented at phs_firsttime )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-close-brace} '
                        HEADING_NT'section 7 - saying fonts and visual effects' (level 5)
                            ROUTINE_NT'to say bold type -- running on ( documented at phs_bold )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style bold; '
                            ROUTINE_NT'to say italic type -- running on ( documented at phs_italic )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style underline; '
                            ROUTINE_NT'to say roman type -- running on ( documented at phs_roman )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  style roman; '
                            ROUTINE_NT'to say fixed letter spacing -- running on ( documented at phs_fixedspacing )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  font off; '
                            ROUTINE_NT'to say variable letter spacing -- running on ( documented at phs_varspacing )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  font on; '
                        HEADING_NT'section 8 - saying lists of values' (level 5)
                            ROUTINE_NT'to say ( l - a list of values ) in brace notation ( documented at phs_listbraced )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 1); '
                            ROUTINE_NT'to say ( l - a list of objects ) with definite articles ( documented at phs_listdef )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 2); '
                            ROUTINE_NT'to say ( l - a list of objects ) with indefinite articles ( documented at phs_listindef )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Say({-by-reference:L}, 3); '
                    HEADING_NT'chapter 2 - conditions and variables' (level 4)
                        HEADING_NT'section 1 - conditions' (level 5)
                            ROUTINE_NT'to now ( cn - condition ) ( documented at ph_now )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {cn} '
                            ROUTINE_NT'to decide what truth state is whether or not ( c - condition ) ( documented at ph_whether )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({C}) '
                        HEADING_NT'section 2 - assigning temporary variables' (level 5)
                            ROUTINE_NT'to let ( t - nonexisting variable ) be ( u - value ) ( assignment operation ) ( documented at ph_let )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-copy:t:u}
                                    	'
                            ROUTINE_NT'to let ( t - nonexisting variable ) be ( u - name of kind of value ) ( assignment operation ) ( documented at ph_letdefault )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-initialise:t}
                                    	'
                            ROUTINE_NT'to let ( t - nonexisting variable ) be ( u - description of relations of values of kind k to values of kind l ) ( assignment operation ) ( documented at ph_letrelation )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-initialise:t}
                                    		{-now-matches-description:t:u};
                                    	'
                            ROUTINE_NT'to let ( t - nonexisting variable ) be given by ( q - equation name ) ( documented at ph_letequation )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-unprotect:t}
                                    		{-primitive-definition:solve-equation};
                                    	'
                            ROUTINE_NT'to let ( t - existing variable ) be ( u - value ) ( assignment operation ) ( documented at ph_let )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	{-copy:t:u}
                                    	'
                            ROUTINE_NT'to let ( t - existing variable ) be given by ( q - equation name ) ( documented at ph_letequation )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-primitive-definition:solve-equation};
                                    	'
                        HEADING_NT'section 3 - increase and decrease' (level 5)
                            ROUTINE_NT'to increase ( s - storage ) by ( w - value ) ( assignment operation ) ( documented at ph_increase )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:+w};
                                    	'
                            ROUTINE_NT'to decrease ( s - storage ) by ( w - value ) ( assignment operation ) ( documented at ph_decrease )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:-w};
                                    	'
                            ROUTINE_NT'to increment ( s - storage ) ( documented at ph_increment )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:+};
                                    	'
                            ROUTINE_NT'to decrement ( s - storage ) ( documented at ph_decrement )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-copy:S:-};
                                    	'
                    HEADING_NT'chapter 2 - arithmetic' (level 4)
                        HEADING_NT'section 1 - arithmetic operations' (level 5)
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) + ( y - arithmetic value ) ( arithmetic operation 0 ) ( documented at ph_plus )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) plus ( y - arithmetic value ) ( arithmetic operation 0 ) ( documented at ph_plus )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) - ( y - arithmetic value ) ( arithmetic operation 1 ) ( documented at ph_minus )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) minus ( y - arithmetic value ) ( arithmetic operation 1 ) ( documented at ph_minus )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) * ( y - arithmetic value ) ( arithmetic operation 2 ) ( documented at ph_times )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) times ( y - arithmetic value ) ( arithmetic operation 2 ) ( documented at ph_times )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) multiplied by ( y - arithmetic value ) ( arithmetic operation 2 ) ( documented at ph_times )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) / ( y - arithmetic value ) ( arithmetic operation 3 ) ( documented at ph_divide )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) divided by ( y - arithmetic value ) ( arithmetic operation 3 ) ( documented at ph_divide )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is remainder after dividing ( x - arithmetic value ) by ( y - arithmetic value ) ( arithmetic operation 4 ) ( documented at ph_remainder )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is ( x - arithmetic value ) to the nearest ( y - arithmetic value ) ( arithmetic operation 5 ) ( documented at ph_nearest )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X:Y}) '
                            ROUTINE_NT'to decide which arithmetic value is the square root of ( x - arithmetic value ) ( arithmetic operation 6 ) ( documented at ph_squareroot )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X}) '
                            ROUTINE_NT'to decide which arithmetic value is the cube root of ( x - arithmetic value ) ( arithmetic operation 8 ) ( documented at ph_cuberoot )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-arithmetic-operation:X}) '
                            ROUTINE_NT'to decide which arithmetic value is total ( p - arithmetic value valued property ) of ( s - description of values ) ( arithmetic operation 12 ) ( documented at ph_total )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:total-of} '
                        HEADING_NT'section 2 - saying real numbers ( not for z-machine )' (level 5)
                            ROUTINE_NT'to say ( r - a real number ) to ( n - number ) decimal places ( documented at phs_realplaces )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  Float({R}, {N}); '
                            ROUTINE_NT'to say ( r - a real number ) in decimal notation ( documented at phs_decimal )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatDec({R}); '
                            ROUTINE_NT'to say ( r - a real number ) to ( n - number ) decimal places in decimal notation ( documented at phs_decimalplaces )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatDec({R}, {N}); '
                            ROUTINE_NT'to say ( r - a real number ) in scientific notation ( documented at phs_scientific )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatExp({R}); '
                            ROUTINE_NT'to say ( r - a real number ) to ( n - number ) decimal places in scientific notation ( documented at phs_scientificplaces )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FloatExp({R}, {N}); '
                        HEADING_NT'section 3 - real arithmetic ( not for z-machine )' (level 5)
                            ROUTINE_NT'to decide which real number is the reciprocal of ( r - a real number ) ( documented at ph_reciprocal )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Reciprocal({R}) '
                            ROUTINE_NT'to decide which real number is the absolute value of ( r - a real number ) ( documented at ph_absolutevalue ) ( this is the abs function )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Abs({R}) '
                            ROUTINE_NT'to decide which real number is the real square root of ( r - a real number ) ( arithmetic operation 7 ) ( documented at ph_realsquareroot ) ( this is the root function inverse to rsqr )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Root({R}) '
                            ROUTINE_NT'to decide which real number is the real square of ( r - a real number ) ( this is the rsqr function inverse to root )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = r^2 where x is a real number'
                                        INVOCATION_NT'let x be given by x = r^2 where x is a real number'
                                            NEW_LOCAL_CONTEXT_NT'x'
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = r^2 where x is a real number'
                                                CONSTANT_NT'x = r^2 where x is a real number'-equation name
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x'
                                            RVALUE_CONTEXT_NT'x'
                                                LOCAL_VARIABLE_NT'x'(tmp_0;real number)
                            ROUTINE_NT'to decide which real number is the ceiling of ( r - a real number ) ( documented at ph_ceiling ) ( this is the ceiling function )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Ceiling({R}) '
                            ROUTINE_NT'to decide which real number is the floor of ( r - a real number ) ( documented at ph_floor ) ( this is the floor function )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Floor({R}) '
                            ROUTINE_NT'to decide which number is ( r - a real number ) to the nearest whole number ( documented at ph_nearestwholenumber ) ( this is the int function )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_to_NUMBER_TY({R}) '
                        HEADING_NT'section 4 - exponential functions ( not for z-machine )' (level 5)
                            ROUTINE_NT'to decide which real number is the natural/-- logarithm of ( r - a real number ) ( documented at ph_logarithm ) ( this is the log function inverse to exp )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Log({R}) '
                            ROUTINE_NT'to decide which real number is the logarithm to base ( n - a number ) of ( r - a real number ) ( documented at ph_logarithmto )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_BLog({R}, {N}) '
                            ROUTINE_NT'to decide which real number is the exponential of ( r - a real number ) ( documented at ph_exp ) ( this is the exp function inverse to log )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Exp({R}) '
                            ROUTINE_NT'to decide which real number is ( r - a real number ) to the power ( p - a real number ) ( documented at ph_power )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Pow({R}, {P}) '
                        HEADING_NT'section 5 - trigonometric functions ( not for z-machine )' (level 5)
                            ROUTINE_NT'to decide which real number is ( r - a real number ) degrees ( documented at ph_degrees )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Times({R}, $+0.0174532925) '
                            ROUTINE_NT'to decide which real number is the sine of ( r - a real number ) ( documented at ph_sine ) ( this is the sin function inverse to arcsin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Sin({R}) '
                            ROUTINE_NT'to decide which real number is the cosine of ( r - a real number ) ( documented at ph_cosine ) ( this is the cos function inverse to arccos )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Cos({R}) '
                            ROUTINE_NT'to decide which real number is the tangent of ( r - a real number ) ( documented at ph_tangent ) ( this is the tan function inverse to arctan )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Tan({R}) '
                            ROUTINE_NT'to decide which real number is the arcsine of ( r - a real number ) ( documented at ph_arcsine ) ( this is the arcsin function inverse to sin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arcsin({R}) '
                            ROUTINE_NT'to decide which real number is the arccosine of ( r - a real number ) ( documented at ph_arccosine ) ( this is the arccos function inverse to cos )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arccos({R}) '
                            ROUTINE_NT'to decide which real number is the arctangent of ( r - a real number ) ( documented at ph_arctangent ) ( this is the arctan function inverse to tan )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Arctan({R}) '
                        HEADING_NT'section 6 - trigonometric functions ( not for z-machine )' (level 5)
                            ROUTINE_NT'to decide which real number is the hyperbolic sine of ( r - a real number ) ( documented at ph_hyperbolicsine ) ( this is the sinh function inverse to arcsinh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Sinh({R}) '
                            ROUTINE_NT'to decide which real number is the hyperbolic cosine of ( r - a real number ) ( documented at ph_hyperboliccosine ) ( this is the cosh function inverse to arccosh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Cosh({R}) '
                            ROUTINE_NT'to decide which real number is the hyperbolic tangent of ( r - a real number ) ( documented at ph_hyperbolictangent ) ( this is the tanh function inverse to arctanh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  REAL_NUMBER_TY_Tanh({R}) '
                            ROUTINE_NT'to decide which real number is the hyperbolic arcsine of ( r - a real number ) ( documented at ph_hyperbolicarcsine ) ( this is the arcsinh function inverse to sinh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = log ( r + root ( r^2 + 1 ) ) where x is a real number'
                                        INVOCATION_NT'let x be given by x = log ( r + root ( r^2 + 1 ) ) where x is a real number'
                                            NEW_LOCAL_CONTEXT_NT'x'
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = log ( r + root ( r^2 + 1 ) ) where x is a real number'
                                                CONSTANT_NT'x = log ( r + root ( r^2 + 1 ) ) where x is a real number'-equation name
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x'
                                            RVALUE_CONTEXT_NT'x'
                                                LOCAL_VARIABLE_NT'x'(tmp_0;real number)
                            ROUTINE_NT'to decide which real number is the hyperbolic arccosine of ( r - a real number ) ( documented at ph_hyperbolicarccosine ) ( this is the arccosh function inverse to cosh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = log ( r + root ( r^2 - 1 ) ) where x is a real number'
                                        INVOCATION_NT'let x be given by x = log ( r + root ( r^2 - 1 ) ) where x is a real number'
                                            NEW_LOCAL_CONTEXT_NT'x'
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = log ( r + root ( r^2 - 1 ) ) where x is a real number'
                                                CONSTANT_NT'x = log ( r + root ( r^2 - 1 ) ) where x is a real number'-equation name
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x'
                                            RVALUE_CONTEXT_NT'x'
                                                LOCAL_VARIABLE_NT'x'(tmp_0;real number)
                            ROUTINE_NT'to decide which real number is the hyperbolic arctangent of ( r - a real number ) ( documented at ph_hyperbolicarctangent ) ( this is the arctanh function inverse to tanh )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number'
                                        INVOCATION_NT'let x be given by x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number'
                                            NEW_LOCAL_CONTEXT_NT'x'
                                                UNKNOWN_NT'x'
                                            RVALUE_CONTEXT_NT'x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number'
                                                CONSTANT_NT'x = 0.5* ( log ( 1+r ) - log ( 1-r ) ) where x is a real number'-equation name
                                    INVOCATION_LIST_NT'decide on x'
                                        INVOCATION_NT'decide on x'
                                            RVALUE_CONTEXT_NT'x'
                                                LOCAL_VARIABLE_NT'x'(tmp_0;real number)
                    HEADING_NT'chapter 3 - control' (level 4)
                        HEADING_NT'section 1 - deciding outcomes' (level 5)
                            ROUTINE_NT'to decide yes ( documented at ph_yes )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to decide if only'
                            ROUTINE_NT'to decide no ( documented at ph_no )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to decide if only'
                            ROUTINE_NT'to stop ( documented at ph_stop )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to only'
                            ROUTINE_NT'to decide on ( something - value ) ( documented at ph_decideon )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return {-return-value:something}; '
                        HEADING_NT'section 2 - if and unless' (level 5)
                            ROUTINE_NT'to if ( c - condition ) begin -- end conditional ( documented at ph_if )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {c}  '
                            ROUTINE_NT'to unless ( c - condition ) begin -- end conditional ( documented at ph_unless )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~{c})  '
                            ROUTINE_NT'to if ( v - value ) is begin -- end conditional ( documented at ph_switch )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-   '
                            ROUTINE_NT'to do nothing ( documented at ph_nothing )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ; '
                        HEADING_NT'section 3 - while and repeat' (level 5)
                            ROUTINE_NT'to while ( c - condition ) begin -- end loop ( documented at ph_while )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  while {c}  '
                            ROUTINE_NT'to repeat with ( loopvar - nonexisting k variable ) running from ( v - arithmetic value of kind k ) to ( w - k ) begin -- end loop ( documented at ph_repeat )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  for ({loopvar}={v}: {loopvar}<={w}: {loopvar}++)  '
                            ROUTINE_NT'to repeat with ( loopvar - nonexisting k variable ) running from ( v - enumerated value of kind k ) to ( w - k ) begin -- end loop ( documented at ph_repeat )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  for ({loopvar}={v}: {loopvar}<={w}: {loopvar}++)  '
                            ROUTINE_NT'to repeat with ( loopvar - nonexisting k variable ) running through ( os - description of values of kind k ) begin -- end loop ( documented at ph_runthrough )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:repeat-through} '
                            ROUTINE_NT'to repeat with ( loopvar - nonexisting object variable ) running through ( l - list of values ) begin -- end loop ( documented at ph_repeatlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:repeat-through-list} '
                            ROUTINE_NT'to repeat through ( t - table name ) begin -- end loop ( documented at ph_repeattable )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}, {-my:2}=1, ct_0={-my:1}, ct_1={-my:2}:
                                    			{-my:2}<=TableRows({-my:1}):
                                    			{-my:2}++, ct_0={-my:1}, ct_1={-my:2})
                                    			if (TableRowIsBlank(ct_0, ct_1)==false)
                                    				{-block}
                                    		@pull {-my:ct_1}; @pull {-my:ct_0};
                                    	'
                            ROUTINE_NT'to repeat through ( t - table name ) in reverse order begin -- end loop ( documented at ph_repeattablereverse )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}, {-my:2}=TableRows({-my:1}), ct_0={-my:1}, ct_1={-my:2}:
                                    			{-my:2}>=1:
                                    			{-my:2}--, ct_0={-my:1}, ct_1={-my:2})
                                    			if (TableRowIsBlank(ct_0, ct_1)==false)
                                    				{-block}
                                    		@pull {-my:ct_1}; @pull {-my:ct_0};
                                    	'
                            ROUTINE_NT'to repeat through ( t - table name ) in ( tc - table column ) order begin -- end loop ( documented at ph_repeattablecol )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}, {-my:2}=TableNextRow({-my:1}, {TC}, 0, 1), ct_0={-my:1}, ct_1={-my:2}:
                                    			{-my:2}~=0:
                                    			{-my:2}=TableNextRow({-my:1}, {TC}, {-my:2}, 1), ct_0={-my:1}, ct_1={-my:2})
                                    				{-block}
                                    		@pull {-my:ct_1}; @pull {-my:ct_0};
                                    	'
                            ROUTINE_NT'to repeat through ( t - table name ) in reverse ( tc - table column ) order begin -- end loop ( documented at ph_repeattablecolreverse )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		@push {-my:ct_0}; @push {-my:ct_1};
                                    		for ({-my:1}={T}, {-my:2}=TableNextRow({-my:1}, {TC}, 0, -1), ct_0={-my:1}, ct_1={-my:2}:
                                    			{-my:2}~=0:
                                    			{-my:2}=TableNextRow({-my:1}, {TC}, {-my:2}, -1), ct_0={-my:1}, ct_1={-my:2})
                                    				{-block}
                                    		@pull {-my:ct_1}; @pull {-my:ct_0};
                                    	'
                        HEADING_NT'section 4 - loop flow' (level 5)
                            ROUTINE_NT'to break -- in loop ( documented at ph_break )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:break} '
                            ROUTINE_NT'to next -- in loop ( documented at ph_next )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  continue; '
                    HEADING_NT'chapter 4 - values' (level 4)
                        HEADING_NT'section 1 - enumerations' (level 5)
                            ROUTINE_NT'to decide which number is number of ( s - description of values ) ( documented at ph_numberof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:number-of} '
                            ROUTINE_NT'to decide which k is ( name of kind of enumerated value k ) after ( x - k ) ( documented at ph_enumafter )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-next-routine:K}({X}) '
                            ROUTINE_NT'to decide which k is ( name of kind of enumerated value k ) before ( x - k ) ( documented at ph_enumbefore )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-previous-routine:K}({X}) '
                            ROUTINE_NT'to decide which k is the first value of ( name of kind of enumerated value k ) ( documented at ph_enumfirst )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'decide on the default value of k'
                            ROUTINE_NT'to decide which k is the last value of ( name of kind of enumerated value k ) ( documented at ph_enumlast )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'decide on k before the default value of k'
                        HEADING_NT'section 2 - randomness' (level 5)
                            ROUTINE_NT'to decide which k is a/-- random ( s - description of values of kind k ) ( documented at ph_randomdesc )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:random-of} '
                            ROUTINE_NT'to decide which k is a random ( name of kind of arithmetic value k ) between ( first value - k ) and ( second value - k ) ( documented at ph_randombetween )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            ROUTINE_NT'to decide which k is a random ( name of kind of arithmetic value k ) from ( first value - k ) to ( second value - k ) ( documented at ph_randombetween )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            ROUTINE_NT'to decide which k is a random ( name of kind of enumerated value k ) between ( first value - k ) and ( second value - k ) ( documented at ph_randombetween )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            ROUTINE_NT'to decide which k is a random ( name of kind of enumerated value k ) from ( first value - k ) to ( second value - k ) ( documented at ph_randombetween )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-ranger-routine:K}({first value}, {second value}) '
                            ROUTINE_NT'to decide whether a random chance of ( n - number ) in ( m - number ) succeeds ( documented at ph_randomchance )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (GenerateRandomNumber(1, {M}) <= {N}) '
                            ROUTINE_NT'to seed the random-number generator with ( n - number ) ( documented at ph_seed )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  VM_Seed_RNG({N}); '
                        HEADING_NT'section 3 - default values' (level 5)
                            ROUTINE_NT'to decide what k is the default value of ( v - name of kind of value of kind k ) ( documented at ph_defaultvalue )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-new:K} '
                    HEADING_NT'chapter 5 - text' (level 4)
                        HEADING_NT'section 1 - breaking down text' (level 5)
                            ROUTINE_NT'to decide what number is the number of characters in ( t - text ) ( documented at ph_numchars )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, CHR_BLOB) '
                            ROUTINE_NT'to decide what number is the number of words in ( t - text ) ( documented at ph_numwords )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, WORD_BLOB) '
                            ROUTINE_NT'to decide what number is the number of punctuated words in ( t - text ) ( documented at ph_numpwords )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, PWORD_BLOB) '
                            ROUTINE_NT'to decide what number is the number of unpunctuated words in ( t - text ) ( documented at ph_numupwords )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, UWORD_BLOB) '
                            ROUTINE_NT'to decide what number is the number of lines in ( t - text ) ( documented at ph_numlines )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, LINE_BLOB) '
                            ROUTINE_NT'to decide what number is the number of paragraphs in ( t - text ) ( documented at ph_numparas )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_BlobAccess({-by-reference:T}, PARA_BLOB) '
                            ROUTINE_NT'to decide what text is character number ( n - a number ) in ( t - text ) ( documented at ph_charnum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, CHR_BLOB) '
                            ROUTINE_NT'to decide what text is word number ( n - a number ) in ( t - text ) ( documented at ph_wordnum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, WORD_BLOB) '
                            ROUTINE_NT'to decide what text is punctuated word number ( n - a number ) in ( t - text ) ( documented at ph_pwordnum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, PWORD_BLOB) '
                            ROUTINE_NT'to decide what text is unpunctuated word number ( n - a number ) in ( t - text ) ( documented at ph_upwordnum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, UWORD_BLOB) '
                            ROUTINE_NT'to decide what text is line number ( n - a number ) in ( t - text ) ( documented at ph_linenum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, LINE_BLOB) '
                            ROUTINE_NT'to decide what text is paragraph number ( n - a number ) in ( t - text ) ( documented at ph_paranum )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_GetBlob({-new:text}, {-by-reference:T}, {N}, PARA_BLOB) '
                            ROUTINE_NT'to decide what text is the substituted form of ( t - text ) ( documented at ph_subform )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_SubstitutedForm({-new:text}, {-by-reference:T}) '
                        HEADING_NT'section 2 - matching and replacing' (level 5)
                            ROUTINE_NT'to decide if ( t - text ) exactly matches the text ( find - text ) , case insensitively ( documented at ph_exactlymatches )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-reference:find},0,{phrase options},1) '
                            ROUTINE_NT'to decide if ( t - text ) matches the text ( find - text ) , case insensitively ( documented at ph_matches )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-reference:find},0,{phrase options}) '
                            ROUTINE_NT'to decide what number is number of times ( t - text ) matches the text ( find - text ) , case insensitively ( documented at ph_nummatches )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB,{-by-reference:T},{-by-reference:find},1,{phrase options}) '
                            ROUTINE_NT'to replace the text ( find - text ) in ( t - text ) with ( replace - text ) , case insensitively ( documented at ph_replace )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(CHR_BLOB, {-lvalue-by-reference:T}, {-by-reference:find},
                                    		{-by-reference:replace}, {phrase options}); '
                            ROUTINE_NT'to replace the word ( find - text ) in ( t - text ) with ( replace - text ) ( documented at ph_replacewordin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceText(WORD_BLOB, {-lvalue-by-reference:T}, {-by-reference:find}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace the punctuated word ( find - text ) in ( t - text ) with ( replace - text ) ( documented at ph_replacepwordin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceText(PWORD_BLOB, {-lvalue-by-reference:T}, {-by-reference:find}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace character number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replacechar )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(CHR_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace word number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replaceword )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(WORD_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace punctuated word number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replacepword )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(PWORD_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace unpunctuated word number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replaceupword )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(UWORD_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace line number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replaceline )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(LINE_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                            ROUTINE_NT'to replace paragraph number ( n - a number ) in ( t - text ) with ( replace - text ) ( documented at ph_replacepara )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_ReplaceBlob(PARA_BLOB, {-lvalue-by-reference:T}, {N}, {-by-reference:replace}); '
                        HEADING_NT'section 3 - regular expressions' (level 5)
                            ROUTINE_NT'to decide if ( t - text ) exactly matches the regular expression ( find - text ) , case insensitively ( documented at ph_exactlymatchesre )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-reference:find},0,{phrase options},1) '
                            ROUTINE_NT'to decide if ( t - text ) matches the regular expression ( find - text ) , case insensitively ( documented at ph_matchesre )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-reference:find},0,{phrase options}) '
                            ROUTINE_NT'to decide what text is text matching regular expression ( documented at ph_matchtext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_RE_GetMatchVar(0) '
                            ROUTINE_NT'to decide what text is text matching subexpression ( n - a number ) ( documented at ph_subexpressiontext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_RE_GetMatchVar({N}) '
                            ROUTINE_NT'to decide what number is number of times ( t - text ) matches the regular expression ( find - text ) , case insensitively ( documented at ph_nummatchesre )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB,{-by-reference:T},{-by-reference:find},1,{phrase options}) '
                            ROUTINE_NT'to replace the regular expression ( find - text ) in ( t - text ) with ( replace - text ) , case insensitively ( documented at ph_replacere )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_Replace_RE(REGEXP_BLOB, {-lvalue-by-reference:T}, {-by-reference:find},
                                    		{-by-reference:replace}, {phrase options}); '
                        HEADING_NT'section 4 - casing of text' (level 5)
                            ROUTINE_NT'to decide what text is ( t - text ) in lower case ( documented at ph_lowercase )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T}, 0) '
                            ROUTINE_NT'to decide what text is ( t - text ) in upper case ( documented at ph_uppercase )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T}, 1) '
                            ROUTINE_NT'to decide what text is ( t - text ) in title case ( documented at ph_titlecase )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T}, 2) '
                            ROUTINE_NT'to decide what text is ( t - text ) in sentence case ( documented at ph_sentencecase )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersToCase({-new:text}, {-by-reference:T}, 3) '
                            ROUTINE_NT'to decide if ( t - text ) is in lower case ( documented at ph_inlower )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersOfCase({-by-reference:T}, 0) '
                            ROUTINE_NT'to decide if ( t - text ) is in upper case ( documented at ph_inupper )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TEXT_TY_CharactersOfCase({-by-reference:T}, 1) '
                        HEADING_NT'section 5 - adaptive text' (level 5)
                            ROUTINE_NT'to say infinitive of ( v - a verb ) ( documented at phs_infinitive )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(1); '
                            ROUTINE_NT'to say past participle of ( v - a verb ) ( documented at phs_pastpart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(2); '
                            ROUTINE_NT'to say present participle of ( v - a verb ) ( documented at phs_prespart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(3); '
                            ROUTINE_NT'to say adapt ( v - verb ) ( documented at phs_adapt )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, PNToVP(), story_tense); '
                            ROUTINE_NT'to say adapt ( v - verb ) in ( t - grammatical tense ) ( documented at phs_adaptt )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, PNToVP(), {T}); '
                            ROUTINE_NT'to say adapt ( v - verb ) from ( p - narrative viewpoint ) ( documented at phs_adaptv )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, {P}, story_tense); '
                            ROUTINE_NT'to say adapt ( v - verb ) in ( t - grammatical tense ) from ( p - narrative viewpoint ) ( documented at phs_adaptvt )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_POS, {P}, {T}); '
                            ROUTINE_NT'to say negate ( v - verb ) ( documented at phs_negate )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, PNToVP(), story_tense); '
                            ROUTINE_NT'to say negate ( v - verb ) in ( t - grammatical tense ) ( documented at phs_negatet )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, PNToVP(), {T}); '
                            ROUTINE_NT'to say negate ( v - verb ) from ( p - narrative viewpoint ) ( documented at phs_negatev )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, {P}, story_tense); '
                            ROUTINE_NT'to say negate ( v - verb ) in ( t - grammatical tense ) from ( p - narrative viewpoint ) ( documented at phs_negatevt )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_NEG, {P}, {T}); '
                            ROUTINE_NT'to decide which relation of objects is meaning of ( v - a verb )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {V}(CV_MEANING) '
                    HEADING_NT'chapter 6 - data structures' (level 4)
                        HEADING_NT'section 1 - tables' (level 5)
                            ROUTINE_NT'to choose a/the/-- row ( n - number ) in/from ( t - table name ) ( documented at ph_chooserow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = {N}; '
                            ROUTINE_NT'to choose a/the/-- row with ( tc - k valued table column ) of ( w - value of kind k ) in/from ( t - table name ) ( documented at ph_chooserowwith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableRowCorr(ct_0, {TC}, {w}); '
                            ROUTINE_NT'to choose a/the/-- blank row in/from ( t - table name ) ( documented at ph_chooseblankrow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableBlankRow(ct_0); '
                            ROUTINE_NT'to choose a/the/-- random row in/from ( t - table name ) ( documented at ph_chooserandomrow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-my:ct_0} = {T}; {-my:ct_1} = TableRandomRow(ct_0); '
                            ROUTINE_NT'to decide which number is number of rows in/from ( t - table name ) ( documented at ph_numrows )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRows({T}) '
                            ROUTINE_NT'to decide which number is number of blank rows in/from ( t - table name ) ( documented at ph_numblank )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankRows({T}) '
                            ROUTINE_NT'to decide which number is number of filled rows in/from ( t - table name ) ( documented at ph_numfilled )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableFilledRows({T}) '
                            ROUTINE_NT'to decide if there is ( tr - table-reference ) ( documented at ph_thereis )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-reference-exists:TR}) '
                            ROUTINE_NT'to decide if there is no ( tr - table-reference ) ( documented at ph_thereisno )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({-reference-exists:TR} == false) '
                            ROUTINE_NT'to blank out ( tr - table-reference ) ( documented at ph_blankout )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-by-reference-blank-out:tr}; '
                            ROUTINE_NT'to blank out the whole row ( documented at ph_blankoutrow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutRow({-my:ct_0}, {-my:ct_1}); '
                            ROUTINE_NT'to blank out the whole ( tc - table column ) in/from/of ( t - table name ) ( documented at ph_blankoutcol )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutColumn({T}, {TC}); '
                            ROUTINE_NT'to blank out the whole of ( t - table name ) ( documented at ph_blankouttable )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableBlankOutAll({T}); '
                            ROUTINE_NT'to showme the contents of ( t - table name ) ( documented at ph_showmetable )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableDebug({T}); '
                            ROUTINE_NT'to say the/-- current table row ( documented at phs_currenttablerow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRowDebug({-my:ct_0}, {-my:ct_1}); '
                            ROUTINE_NT'to say row ( n - number ) in/from ( t - table name ) ( documented at phs_tablerow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableRowDebug({T}, {N}); '
                            ROUTINE_NT'to say ( tc - table column ) in/from ( t - table name ) ( documented at phs_tablecolumn )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableColumnDebug({T}, {TC}); '
                        HEADING_NT'section 2 - sorting tables' (level 5)
                            ROUTINE_NT'to sort ( t - table name ) in/into random order ( documented at ph_sortrandom )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableShuffle({T}); '
                            ROUTINE_NT'to sort ( t - table name ) in/into ( tc - table column ) order ( documented at ph_sortcolumn )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableSort({T}, {TC}, 1); '
                            ROUTINE_NT'to sort ( t - table name ) in/into reverse ( tc - table column ) order ( documented at ph_sortcolumnreverse )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TableSort({T}, {TC}, -1); '
                        HEADING_NT'section 3 - lists' (level 5)
                            ROUTINE_NT'to add ( new entry - k ) to ( l - list of values of kind k ) , if absent ( documented at ph_addtolist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_InsertItem({-lvalue-by-reference:L}, {new entry}, 0, 0, {phrase options}); '
                            ROUTINE_NT'to add ( new entry - k ) at entry ( e - number ) in ( l - list of values of kind k ) , if absent ( documented at ph_addatentry )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_InsertItem({-lvalue-by-reference:L}, {new entry}, 1, {E}, {phrase options}); '
                            ROUTINE_NT'to add ( lx - list of ks ) to ( l - list of values of kind k ) , if absent ( documented at ph_addlisttolist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_AppendList({-lvalue-by-reference:L}, {-by-reference:LX}, 0, 0, {phrase options}); '
                            ROUTINE_NT'to add ( lx - list of ks ) at entry ( e - number ) in ( l - list of values of kind k ) ( documented at ph_addlistatentry )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_AppendList({-lvalue-by-reference:L}, {-by-reference:LX}, 1, {E}, 0); '
                            ROUTINE_NT'to remove ( existing entry - k ) from ( l - list of values of kind k ) , if present ( documented at ph_remfromlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveValue({-lvalue-by-reference:L}, {existing entry}, {phrase options}); '
                            ROUTINE_NT'to remove ( n - list of ks ) from ( l - list of values of kind k ) , if present ( documented at ph_remlistfromlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Remove_List({-lvalue-by-reference:L}, {-by-reference:N}, {phrase options}); '
                            ROUTINE_NT'to remove entry ( n - number ) from ( l - list of values ) , if present ( documented at ph_rementry )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveItemRange({-lvalue-by-reference:L}, {N}, {N}, {phrase options}); '
                            ROUTINE_NT'to remove entries ( n - number ) to ( n2 - number ) from ( l - list of values ) , if present ( documented at ph_rementries )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_RemoveItemRange({-lvalue-by-reference:L}, {N}, {N2}, {phrase options}); '
                            ROUTINE_NT'to decide if ( n - k ) is listed in ( l - list of values of kind k ) ( documented at ph_islistedin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (LIST_OF_TY_FindItem({-by-reference:L}, {N})) '
                            ROUTINE_NT'to decide if ( n - k ) is not listed in ( l - list of values of kind k ) ( documented at ph_isnotlistedin )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (LIST_OF_TY_FindItem({-by-reference:L}, {N}) == false) '
                            ROUTINE_NT'to decide what list of ks is the list of ( d - description of values of kind k ) ( documented at ph_listofdesc )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-new-list-of:list of K} '
                        HEADING_NT'section 4 - length of lists' (level 5)
                            ROUTINE_NT'to decide what number is the number of entries in/of ( l - a list of values ) ( documented at ph_numberentries )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_GetLength({-by-reference:L}) '
                            ROUTINE_NT'to truncate ( l - a list of values ) to ( n - a number ) entries/entry ( documented at ph_truncate )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, 1); '
                            ROUTINE_NT'to truncate ( l - a list of values ) to the first ( n - a number ) entries/entry ( documented at ph_truncatefirst )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, 1); '
                            ROUTINE_NT'to truncate ( l - a list of values ) to the last ( n - a number ) entries/entry ( documented at ph_truncatelast )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, -1, -1); '
                            ROUTINE_NT'to extend ( l - a list of values ) to ( n - a number ) entries/entry ( documented at ph_extend )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, 1); '
                            ROUTINE_NT'to change ( l - a list of values ) to have ( n - a number ) entries/entry ( documented at ph_changelength )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_SetLength({-lvalue-by-reference:L}, {N}, 0); '
                        HEADING_NT'section 5 - list operations' (level 5)
                            ROUTINE_NT'to reverse ( l - a list of values ) ( documented at ph_reverselist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Reverse({-lvalue-by-reference:L}); '
                            ROUTINE_NT'to rotate ( l - a list of values ) ( documented at ph_rotatelist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Rotate({-lvalue-by-reference:L}, 0); '
                            ROUTINE_NT'to rotate ( l - a list of values ) backwards ( documented at ph_rotatelistback )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Rotate({-lvalue-by-reference:L}, 1); '
                            ROUTINE_NT'to sort ( l - a list of values ) ( documented at ph_sortlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 1); '
                            ROUTINE_NT'to sort ( l - a list of values ) in/into reverse order ( documented at ph_sortlistreverse )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, -1); '
                            ROUTINE_NT'to sort ( l - a list of values ) in/into random order ( documented at ph_sortlistrandom )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 2); '
                            ROUTINE_NT'to sort ( l - a list of objects ) in/into ( p - property ) order ( documented at ph_sortlistproperty )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, 1, {P}, {-property-holds-block-value:P}); '
                            ROUTINE_NT'to sort ( l - a list of objects ) in/into reverse ( p - property ) order ( documented at ph_sortlistpropertyreverse )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Sort({-lvalue-by-reference:L}, -1, {P}, {-property-holds-block-value:P}); '
                        HEADING_NT'section 6 - relations' (level 5)
                            ROUTINE_NT'to show relation ( r - relation ) ( documented at ph_showrelation )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-show-me:R}; RelationTest({-by-reference:R}, RELS_SHOW); '
                            ROUTINE_NT'to decide which object is next step via ( r - relation of objects ) from ( o1 - object ) to ( o2 - object ) ( documented at ph_nextstep )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationRouteTo({-by-reference:R},{O1},{O2},false) '
                            ROUTINE_NT'to decide which number is number of steps via ( r - relation of objects ) from ( o1 - object ) to ( o2 - object ) ( documented at ph_numbersteps )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationRouteTo({-by-reference:R},{O1},{O2},true) '
                            ROUTINE_NT'to decide which list of ks is list of ( name of kind of value k ) that/which/whom ( r - relation of ks to values of kind l ) relates ( documented at ph_leftdomain )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of K}, RLIST_ALL_X) '
                            ROUTINE_NT'to decide which list of ls is list of ( name of kind of value l ) to which/whom ( r - relation of values of kind k to ls ) relates ( documented at ph_rightdomain )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of L}, RLIST_ALL_Y) '
                            ROUTINE_NT'to decide which list of ls is list of ( name of kind of value l ) that/which/whom ( r - relation of values of kind k to ls ) relates to ( documented at ph_rightdomain )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LIST, {-new:list of L}, RLIST_ALL_Y) '
                            ROUTINE_NT'to decide which list of ks is list of ( name of kind of value k ) that/which/who relate to ( y - l ) by ( r - relation of ks to values of kind l ) ( documented at ph_leftlookuplist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_X, {Y}, {-new:list of K}) '
                            ROUTINE_NT'to decide which list of ls is list of ( name of kind of value l ) to which/whom ( x - k ) relates by ( r - relation of values of kind k to ls ) ( documented at ph_rightlookuplist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_Y, {X}, {-new:list of L}) '
                            ROUTINE_NT'to decide which list of ls is list of ( name of kind of value l ) that/which/whom ( x - k ) relates to by ( r - relation of values of kind k to ls ) ( documented at ph_rightlookuplist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ALL_Y, {X}, {-new:list of L}) '
                            ROUTINE_NT'to decide whether ( name of kind of value k ) relates to ( y - l ) by ( r - relation of ks to values of kind l ) ( documented at ph_ifright )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {Y}, RLANY_CAN_GET_X) '
                            ROUTINE_NT'to decide whether ( x - k ) relates to ( name of kind of value l ) by ( r - relation of values of kind k to ls ) ( documented at ph_ifleft )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RLANY_CAN_GET_Y) '
                            ROUTINE_NT'to decide which k is ( name of kind of value k ) that/which/who relates to ( y - l ) by ( r - relation of ks to values of kind l ) ( documented at ph_leftlookup )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {Y}, RLANY_GET_X) '
                            ROUTINE_NT'to decide which l is ( name of kind of value l ) to which/whom ( x - k ) relates by ( r - relation of values of kind k to ls ) ( documented at ph_rightlookup )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RLANY_GET_Y) '
                            ROUTINE_NT'to decide which l is ( name of kind of value l ) that/which/whom ( x - k ) relates to by ( r - relation of values of kind k to ls ) ( documented at ph_rightlookup )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RelationTest({-by-reference:R}, RELS_LOOKUP_ANY, {X}, RLANY_GET_Y) '
                    HEADING_NT'chapter 7 - functional programming' (level 4)
                        HEADING_NT'section 1 - applying functions' (level 5)
                            ROUTINE_NT'to decide whether ( val - k ) matches ( desc - description of values of kind k ) ( documented at ph_valuematch )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:description-application} '
                            ROUTINE_NT'to decide what k is ( function - phrase nothing -> value of kind k ) applied ( documented at ph_applied0 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            ROUTINE_NT'to decide what l is ( function - phrase value of kind k -> value of kind l ) applied to ( input - k ) ( documented at ph_applied1 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            ROUTINE_NT'to decide what m is ( function - phrase ( value of kind k , value of kind l ) -> value of kind m ) applied to ( input - k ) and ( second input - l ) ( documented at ph_applied2 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            ROUTINE_NT'to decide what n is ( function - phrase ( value of kind k , value of kind l , value of kind m ) -> value of kind n ) applied to ( input - k ) and ( second input - l ) and ( third input - m ) ( documented at ph_applied3 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application} '
                            ROUTINE_NT'to apply ( function - phrase nothing -> nothing ) ( documented at ph_apply0 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            ROUTINE_NT'to apply ( function - phrase value of kind k -> nothing ) to ( input - k ) ( documented at ph_apply1 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            ROUTINE_NT'to apply ( function - phrase ( value of kind k , value of kind l ) -> nothing ) to ( input - k ) and ( second input - l ) ( documented at ph_apply2 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                            ROUTINE_NT'to apply ( function - phrase ( value of kind k , value of kind l , value of kind m ) -> nothing ) to ( input - k ) and ( second input - l ) and ( third input - m ) ( documented at ph_apply3 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:function-application}; '
                        HEADING_NT'section 2 - working with lists' (level 5)
                            ROUTINE_NT'to decide what list of l is ( function - phrase k -> value of kind l ) applied to ( original list - list of values of kind k ) ( documented at ph_appliedlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the result be a list of ls'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'repeat with item running through the original list'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'let the mapped item be the function applied to the item'
                                            INVOCATION_LIST_NT'add the mapped item to the result'
                                    INVOCATION_LIST_NT'decide on the result'
                            ROUTINE_NT'to decide what k is the ( function - phrase ( k , k ) -> k ) reduction of ( original list - list of values of kind k ) ( documented at ph_reduction )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the total be a k'
                                    INVOCATION_LIST_NT'let the count be 0'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'repeat with item running through the original list'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'increase the count by 1'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the count is 1'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now the total is the item'
                                                        CONDITION_CONTEXT_NT'the total is the item'
                                                CODE_BLOCK_NT'otherwise'
                                                    INVOCATION_LIST_NT'now the total is the function applied to the total and the item'
                                                        CONDITION_CONTEXT_NT'the total is the function applied to the total and the item'
                                    INVOCATION_LIST_NT'decide on the total'
                            ROUTINE_NT'to decide what list of k is the filter to ( criterion - description of ks ) of ( full list - list of values of kind k ) ( documented at ph_filter )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the filtered list be a list of k'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'repeat with item running through the full list'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item matches the criterion'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'add the item to the filtered list'
                                    INVOCATION_LIST_NT'decide on the filtered list'
                    HEADING_NT'chapter 8 - rulebooks and activities' (level 4)
                        HEADING_NT'section 1 - carrying out activities' (level 5)
                            ROUTINE_NT'to carry out the ( a - activity on nothing ) activity ( documented at ph_carryout )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CarryOutActivity({A}); '
                            ROUTINE_NT'to carry out the ( a - activity on value of kind k ) activity with ( val - k ) ( documented at ph_carryoutwith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CarryOutActivity({A}, {val}); '
                            ROUTINE_NT'to continue the activity ( documented at ph_continueactivity )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                        HEADING_NT'section 2 - advanced activities' (level 5)
                            ROUTINE_NT'to begin the ( a - activity on nothing ) activity ( documented at ph_beginactivity )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BeginActivity({A}); '
                            ROUTINE_NT'to begin the ( a - activity on value of kind k ) activity with ( val - k ) ( documented at ph_beginactivitywith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BeginActivity({A}, {val}); '
                            ROUTINE_NT'to decide whether handling ( a - activity ) activity ( documented at ph_handlingactivity )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~(ForActivity({A}))) '
                            ROUTINE_NT'to decide whether handling ( a - activity on value of kind k ) activity with ( val - k ) ( documented at ph_handlingactivitywith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (~~(ForActivity({A}, {val}))) '
                            ROUTINE_NT'to end the ( a - activity on nothing ) activity ( documented at ph_endactivity )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  EndActivity({A}); '
                            ROUTINE_NT'to end the ( a - activity on value of kind k ) activity with ( val - k ) ( documented at ph_endactivitywith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  EndActivity({A}, {val}); '
                            ROUTINE_NT'to abandon the ( a - activity on nothing ) activity ( documented at ph_abandonactivity )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AbandonActivity({A}); '
                            ROUTINE_NT'to abandon the ( a - activity on value of kind k ) activity with ( val - k ) ( documented at ph_abandonactivitywith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AbandonActivity({A}, {val}); '
                        HEADING_NT'section 3 - following rules' (level 5)
                            ROUTINE_NT'to follow ( rl - a rule ) ( documented at ph_follow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}); '
                            ROUTINE_NT'to follow ( rl - value of kind k based rule producing a value ) for ( v - k ) ( documented at ph_followfor )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}, {V}, true); '
                            ROUTINE_NT'to follow ( rl - a nothing based rule ) ( documented at ph_follow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FollowRulebook({RL}); '
                            ROUTINE_NT'to decide what k is the ( name of kind k ) produced by ( rl - rule producing a value of kind k ) ( documented at ph_producedby )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, 0, true, {-strong-kind:K}) '
                            ROUTINE_NT'to decide what l is the ( name of kind l ) produced by ( rl - value of kind k based rule producing a value of kind l ) for ( v - k ) ( documented at ph_producedbyfor )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, {V}, true, {-strong-kind:L}) '
                            ROUTINE_NT'to decide what k is the ( name of kind k ) produced by ( rl - nothing based rule producing a value of kind k ) ( documented at ph_producedby )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResultOfRule({RL}, 0, true, {-strong-kind:K}) '
                            ROUTINE_NT'to abide by ( rl - a rule ) ( documented at ph_abide )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL})) rtrue;  - in to only'
                            ROUTINE_NT'to abide by ( rl - value of kind k based rule producing a value ) for ( v - k ) ( documented at ph_abidefor )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL}, {V}, true)) rtrue;  - in to only'
                            ROUTINE_NT'to abide by ( rl - a nothing based rule ) ( documented at ph_abide )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (FollowRulebook({RL})) rtrue;  - in to only'
                        HEADING_NT'section 4 - success and failure' (level 5)
                            ROUTINE_NT'to make no decision ( documented at ph_nodecision )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                            ROUTINE_NT'to rule succeeds ( documented at ph_succeeds )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookSucceeds(); rtrue;  - in to only'
                            ROUTINE_NT'to rule fails ( documented at ph_fails )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookFails(); rtrue;  - in to only'
                            ROUTINE_NT'to rule succeeds with result ( val - a value ) ( documented at ph_succeedswith )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookSucceeds({-weak-kind:rule-return-kind},{-return-value-from-rule:val}); rtrue;  - in to only'
                            ROUTINE_NT'to decide if rule succeeded ( documented at ph_succeeded )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (RulebookSucceeded()) '
                            ROUTINE_NT'to decide if rule failed ( documented at ph_failed )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (RulebookFailed()) '
                            ROUTINE_NT'to decide which rulebook outcome is the outcome of the rulebook ( documented at ph_rulebookoutcome )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (ResultOfRule()) '
                    HEADING_NT'chapter 9 - external files ( not for z-machine )' (level 4)
                        HEADING_NT'section 1 - files of text' (level 5)
                            ROUTINE_NT'to write ( t - text ) to ( fn - external file ) ( documented at ph_writetext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutContents({FN}, {T}, false); '
                            ROUTINE_NT'to append ( t - text ) to ( fn - external file ) ( documented at ph_appendtext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutContents({FN}, {T}, true); '
                            ROUTINE_NT'to say text of ( fn - external file ) ( documented at ph_saytext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PrintContents({FN}); say__p = 1; '
                        HEADING_NT'section 2 - files of data' (level 5)
                            ROUTINE_NT'to read ( filename - external file ) into ( t - table name ) ( documented at ph_readtable )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_GetTable({filename}, {T}); '
                            ROUTINE_NT'to write ( filename - external file ) from ( t - table name ) ( documented at ph_writetable )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_PutTable({filename}, {T}); '
                        HEADING_NT'section 3 - file handling' (level 5)
                            ROUTINE_NT'to decide if ( filename - external file ) exists ( documented at ph_fileexists )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (FileIO_Exists({filename}, false)) '
                            ROUTINE_NT'to decide if ready to read ( filename - external file ) ( documented at ph_fileready )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (FileIO_Ready({filename}, false)) '
                            ROUTINE_NT'to mark ( filename - external file ) as ready to read ( documented at ph_markfileready )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_MarkReady({filename}, true); '
                            ROUTINE_NT'to mark ( filename - external file ) as not ready to read ( documented at ph_markfilenotready )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FileIO_MarkReady({filename}, false); '
                HEADING_NT'part four - adjectival definitions' (level 3)
                    HEADING_NT'section 1 - miscellaneous useful adjectives' (level 5)
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                    HEADING_NT'section 2 - adjectives for relations' (level 5)
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                    HEADING_NT'section 3 - adjectives for real numbers ( not for z-machine )' (level 5)
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ENDHERE_NT'basic inform'
        INCLUSION_NT'include english language by graham nelson'
            HEADING_NT'version 1 of english language by graham nelson begins here' (level 0)
                BEGINHERE_NT'version 1 of english language by graham nelson'
                SENTENCE_NT'To make English the language of play.'
                SENTENCE_NT'use authorial modesty'
                    AVERB_NT'use'
                    PROPER_NOUN_NT'authorial modesty'
                HEADING_NT'section 1 - modal verbs and contractions' (level 5)
                    SENTENCE_NT'to be able to is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to be able to'
                    SENTENCE_NT'to could is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to could'
                    SENTENCE_NT'to may is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to may'
                    SENTENCE_NT'to might is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to might'
                    SENTENCE_NT'to must is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to must'
                    SENTENCE_NT'to should is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to should'
                    SENTENCE_NT'to would is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to would'
                    SENTENCE_NT'to 're is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to 're'
                    SENTENCE_NT'to 've is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to 've'
                    SENTENCE_NT'to aren't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to aren't'
                    SENTENCE_NT'to can't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to can't'
                    SENTENCE_NT'to don't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to don't'
                    SENTENCE_NT'to haven't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to haven't'
                    SENTENCE_NT'to mustn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to mustn't'
                    SENTENCE_NT'to mightn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to mightn't'
                    SENTENCE_NT'to mayn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to mayn't'
                    SENTENCE_NT'to wouldn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to wouldn't'
                    SENTENCE_NT'to couldn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to couldn't'
                    SENTENCE_NT'to shouldn't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to shouldn't'
                    SENTENCE_NT'to won't is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to won't'
                HEADING_NT'section 2 - fallback definitions ( not for interactive fiction language element )' (level 5)
                HEADING_NT'section 1 - grammatical definitions' (level 5)
                    SENTENCE_NT'the language of play is a natural language that varies'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'language of play'
                        COMMON_NOUN_NT'natural language that varies'
                    SENTENCE_NT'the language of play is usually the english language'
                        AVERB_NT'is usually'
                        PROPER_NOUN_NT'language of play'
                        PROPER_NOUN_NT'english language'
                    SENTENCE_NT'a grammatical tense is a kind of value'
                        AVERB_NT'is'
                        COMMON_NOUN_NT'grammatical tense'
                        KIND_NT'kind of value'
                            COMMON_NOUN_NT'value'
                    SENTENCE_NT'the grammatical tenses are present tense , past tense , perfect tense , past perfect tense and future tense'
                        AVERB_NT'are'
                        COMMON_NOUN_NT'grammatical tenses'
                        AND_NT','
                            PROPER_NOUN_NT'present tense'
                            AND_NT','
                                PROPER_NOUN_NT'past tense'
                                AND_NT','
                                    PROPER_NOUN_NT'perfect tense'
                                    AND_NT'and'
                                        PROPER_NOUN_NT'past perfect tense'
                                        PROPER_NOUN_NT'future tense'
                    SENTENCE_NT'a narrative viewpoint is a kind of value'
                        AVERB_NT'is'
                        COMMON_NOUN_NT'narrative viewpoint'
                        KIND_NT'kind of value'
                            COMMON_NOUN_NT'value'
                    SENTENCE_NT'the narrative viewpoints are first person singular , second person singular , third person singular , first person plural , second person plural , and third person plural'
                        AVERB_NT'are'
                        COMMON_NOUN_NT'narrative viewpoints'
                        AND_NT','
                            PROPER_NOUN_NT'first person singular'
                            AND_NT','
                                PROPER_NOUN_NT'second person singular'
                                AND_NT','
                                    PROPER_NOUN_NT'third person singular'
                                    AND_NT','
                                        PROPER_NOUN_NT'first person plural'
                                        AND_NT','
                                            PROPER_NOUN_NT'second person plural'
                                            PROPER_NOUN_NT'third person plural'
                    SENTENCE_NT'a natural language has a narrative viewpoint called the adaptive text viewpoint'
                        AVERB_NT'has'
                        COMMON_NOUN_NT'natural language'
                        ALLOWED_NT
                            PROPERTYCALLED_NT'called'
                                PROPER_NOUN_NT'narrative viewpoint'
                                PROPER_NOUN_NT'adaptive text viewpoint'
                    SENTENCE_NT'the adaptive text viewpoint of the english language is first person plural'
                        AVERB_NT'is'
                        X_OF_Y_NT'adaptive text viewpoint of the english language'
                            PROPER_NOUN_NT'english language'
                            PROPER_NOUN_NT'adaptive text viewpoint'
                        PROPER_NOUN_NT'first person plural'
                    SENTENCE_NT'a grammatical case is a kind of value'
                        AVERB_NT'is'
                        COMMON_NOUN_NT'grammatical case'
                        KIND_NT'kind of value'
                            COMMON_NOUN_NT'value'
                    SENTENCE_NT'the grammatical cases are nominative and accusative'
                        AVERB_NT'are'
                        COMMON_NOUN_NT'grammatical cases'
                        AND_NT'and'
                            PROPER_NOUN_NT'nominative'
                            PROPER_NOUN_NT'accusative'
                    SENTENCE_NT'a grammatical gender is a kind of value'
                        AVERB_NT'is'
                        COMMON_NOUN_NT'grammatical gender'
                        KIND_NT'kind of value'
                            COMMON_NOUN_NT'value'
                    SENTENCE_NT'the grammatical genders are neuter gender , masculine gender , feminine gender'
                        AVERB_NT'are'
                        COMMON_NOUN_NT'grammatical genders'
                        AND_NT','
                            PROPER_NOUN_NT'neuter gender'
                            AND_NT','
                                PROPER_NOUN_NT'masculine gender'
                                PROPER_NOUN_NT'feminine gender'
                    SENTENCE_NT'the story tense is a grammatical tense that varies'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'story tense'
                        COMMON_NOUN_NT'grammatical tense that varies'
                    SENTENCE_NT'the story tense variable translates into i6 as story_tense'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'story tense variable'
                        PROPER_NOUN_NT'story_tense'
                    SENTENCE_NT'the story viewpoint is a narrative viewpoint that varies'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'story viewpoint'
                        COMMON_NOUN_NT'narrative viewpoint that varies'
                    SENTENCE_NT'the story viewpoint variable translates into i6 as story_viewpoint'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'story viewpoint variable'
                        PROPER_NOUN_NT'story_viewpoint'
                    ROUTINE_NT'to say regarding ( item - an object )'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingSingleObject({item}); '
                    ROUTINE_NT'to say regarding ( n - a number )'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingNumber({N}); '
                    ROUTINE_NT'to say regarding list writer internals'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  RegardingLWI(); '
                    ROUTINE_NT'to say regarding ( d - a description of objects )'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(- 
                            	 	objectloop({-my:1} ofclass Object)
                            			if ({-matches-description:1:D}) 
                            				give {-my:1} workflag2;
                            			else
                            				give {-my:1} ~workflag2;
                            		RegardingMarkedObjects();
                            	'
                    ROUTINE_NT'to decide if the prior naming context is plural'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'(-  ((prior_named_list >= 2) || (prior_named_noun && prior_named_noun has pluralname)) '
                HEADING_NT'section 2 - saying pronouns ( for interactive fiction language element only )' (level 5)
                    ROUTINE_NT'to say we'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "I"'
                                        INVOCATION_LIST_SAY_NT'"I"'
                                            INVOCATION_NT'"I"'
                                                RVALUE_CONTEXT_NT'"I"'
                                                    CONSTANT_NT'"I"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"'
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"'
                                                RVALUE_CONTEXT_NT'"you"'
                                                    CONSTANT_NT'"you"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "he"'
                                                INVOCATION_LIST_SAY_NT'"he"'
                                                    INVOCATION_NT'"he"'
                                                        RVALUE_CONTEXT_NT'"he"'
                                                            CONSTANT_NT'"he"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "she"'
                                                INVOCATION_LIST_SAY_NT'"she"'
                                                    INVOCATION_NT'"she"'
                                                        RVALUE_CONTEXT_NT'"she"'
                                                            CONSTANT_NT'"she"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "we"'
                                        INVOCATION_LIST_SAY_NT'"we"'
                                            INVOCATION_NT'"we"'
                                                RVALUE_CONTEXT_NT'"we"'
                                                    CONSTANT_NT'"we"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"'
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"'
                                                RVALUE_CONTEXT_NT'"you"'
                                                    CONSTANT_NT'"you"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"'
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"'
                                                RVALUE_CONTEXT_NT'"they"'
                                                    CONSTANT_NT'"they"'-text
                    ROUTINE_NT'to say us'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "me"'
                                        INVOCATION_LIST_SAY_NT'"me"'
                                            INVOCATION_NT'"me"'
                                                RVALUE_CONTEXT_NT'"me"'
                                                    CONSTANT_NT'"me"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"'
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"'
                                                RVALUE_CONTEXT_NT'"you"'
                                                    CONSTANT_NT'"you"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "him"'
                                                INVOCATION_LIST_SAY_NT'"him"'
                                                    INVOCATION_NT'"him"'
                                                        RVALUE_CONTEXT_NT'"him"'
                                                            CONSTANT_NT'"him"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "her"'
                                                INVOCATION_LIST_SAY_NT'"her"'
                                                    INVOCATION_NT'"her"'
                                                        RVALUE_CONTEXT_NT'"her"'
                                                            CONSTANT_NT'"her"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "us"'
                                        INVOCATION_LIST_SAY_NT'"us"'
                                            INVOCATION_NT'"us"'
                                                RVALUE_CONTEXT_NT'"us"'
                                                    CONSTANT_NT'"us"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "you"'
                                        INVOCATION_LIST_SAY_NT'"you"'
                                            INVOCATION_NT'"you"'
                                                RVALUE_CONTEXT_NT'"you"'
                                                    CONSTANT_NT'"you"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "them"'
                                        INVOCATION_LIST_SAY_NT'"them"'
                                            INVOCATION_NT'"them"'
                                                RVALUE_CONTEXT_NT'"them"'
                                                    CONSTANT_NT'"them"'-text
                    ROUTINE_NT'to say ours'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "mine"'
                                        INVOCATION_LIST_SAY_NT'"mine"'
                                            INVOCATION_NT'"mine"'
                                                RVALUE_CONTEXT_NT'"mine"'
                                                    CONSTANT_NT'"mine"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yours"'
                                        INVOCATION_LIST_SAY_NT'"yours"'
                                            INVOCATION_NT'"yours"'
                                                RVALUE_CONTEXT_NT'"yours"'
                                                    CONSTANT_NT'"yours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "his"'
                                                INVOCATION_LIST_SAY_NT'"his"'
                                                    INVOCATION_NT'"his"'
                                                        RVALUE_CONTEXT_NT'"his"'
                                                            CONSTANT_NT'"his"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "hers"'
                                                INVOCATION_LIST_SAY_NT'"hers"'
                                                    INVOCATION_NT'"hers"'
                                                        RVALUE_CONTEXT_NT'"hers"'
                                                            CONSTANT_NT'"hers"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "ours"'
                                        INVOCATION_LIST_SAY_NT'"ours"'
                                            INVOCATION_NT'"ours"'
                                                RVALUE_CONTEXT_NT'"ours"'
                                                    CONSTANT_NT'"ours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yours"'
                                        INVOCATION_LIST_SAY_NT'"yours"'
                                            INVOCATION_NT'"yours"'
                                                RVALUE_CONTEXT_NT'"yours"'
                                                    CONSTANT_NT'"yours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "theirs"'
                                        INVOCATION_LIST_SAY_NT'"theirs"'
                                            INVOCATION_NT'"theirs"'
                                                RVALUE_CONTEXT_NT'"theirs"'
                                                    CONSTANT_NT'"theirs"'-text
                    ROUTINE_NT'to say ourselves'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "myself"'
                                        INVOCATION_LIST_SAY_NT'"myself"'
                                            INVOCATION_NT'"myself"'
                                                RVALUE_CONTEXT_NT'"myself"'
                                                    CONSTANT_NT'"myself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yourself"'
                                        INVOCATION_LIST_SAY_NT'"yourself"'
                                            INVOCATION_NT'"yourself"'
                                                RVALUE_CONTEXT_NT'"yourself"'
                                                    CONSTANT_NT'"yourself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "himself"'
                                                INVOCATION_LIST_SAY_NT'"himself"'
                                                    INVOCATION_NT'"himself"'
                                                        RVALUE_CONTEXT_NT'"himself"'
                                                            CONSTANT_NT'"himself"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "herself"'
                                                INVOCATION_LIST_SAY_NT'"herself"'
                                                    INVOCATION_NT'"herself"'
                                                        RVALUE_CONTEXT_NT'"herself"'
                                                            CONSTANT_NT'"herself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "ourselves"'
                                        INVOCATION_LIST_SAY_NT'"ourselves"'
                                            INVOCATION_NT'"ourselves"'
                                                RVALUE_CONTEXT_NT'"ourselves"'
                                                    CONSTANT_NT'"ourselves"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "yourselves"'
                                        INVOCATION_LIST_SAY_NT'"yourselves"'
                                            INVOCATION_NT'"yourselves"'
                                                RVALUE_CONTEXT_NT'"yourselves"'
                                                    CONSTANT_NT'"yourselves"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "themselves"'
                                        INVOCATION_LIST_SAY_NT'"themselves"'
                                            INVOCATION_NT'"themselves"'
                                                RVALUE_CONTEXT_NT'"themselves"'
                                                    CONSTANT_NT'"themselves"'-text
                    ROUTINE_NT'to say our'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "my"'
                                        INVOCATION_LIST_SAY_NT'"my"'
                                            INVOCATION_NT'"my"'
                                                RVALUE_CONTEXT_NT'"my"'
                                                    CONSTANT_NT'"my"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "your"'
                                        INVOCATION_LIST_SAY_NT'"your"'
                                            INVOCATION_NT'"your"'
                                                RVALUE_CONTEXT_NT'"your"'
                                                    CONSTANT_NT'"your"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "his"'
                                                INVOCATION_LIST_SAY_NT'"his"'
                                                    INVOCATION_NT'"his"'
                                                        RVALUE_CONTEXT_NT'"his"'
                                                            CONSTANT_NT'"his"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "her"'
                                                INVOCATION_LIST_SAY_NT'"her"'
                                                    INVOCATION_NT'"her"'
                                                        RVALUE_CONTEXT_NT'"her"'
                                                            CONSTANT_NT'"her"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "our"'
                                        INVOCATION_LIST_SAY_NT'"our"'
                                            INVOCATION_NT'"our"'
                                                RVALUE_CONTEXT_NT'"our"'
                                                    CONSTANT_NT'"our"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "your"'
                                        INVOCATION_LIST_SAY_NT'"your"'
                                            INVOCATION_NT'"your"'
                                                RVALUE_CONTEXT_NT'"your"'
                                                    CONSTANT_NT'"your"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "their"'
                                        INVOCATION_LIST_SAY_NT'"their"'
                                            INVOCATION_NT'"their"'
                                                RVALUE_CONTEXT_NT'"their"'
                                                    CONSTANT_NT'"their"'-text
                    ROUTINE_NT'to say we'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "I"'
                                        INVOCATION_LIST_SAY_NT'"I"'
                                            INVOCATION_NT'"I"'
                                                RVALUE_CONTEXT_NT'"I"'
                                                    CONSTANT_NT'"I"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"'
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"'
                                                RVALUE_CONTEXT_NT'"You"'
                                                    CONSTANT_NT'"You"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "He"'
                                                INVOCATION_LIST_SAY_NT'"He"'
                                                    INVOCATION_NT'"He"'
                                                        RVALUE_CONTEXT_NT'"He"'
                                                            CONSTANT_NT'"He"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "She"'
                                                INVOCATION_LIST_SAY_NT'"She"'
                                                    INVOCATION_NT'"She"'
                                                        RVALUE_CONTEXT_NT'"She"'
                                                            CONSTANT_NT'"She"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "We"'
                                        INVOCATION_LIST_SAY_NT'"We"'
                                            INVOCATION_NT'"We"'
                                                RVALUE_CONTEXT_NT'"We"'
                                                    CONSTANT_NT'"We"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"'
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"'
                                                RVALUE_CONTEXT_NT'"You"'
                                                    CONSTANT_NT'"You"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"'
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"'
                                                RVALUE_CONTEXT_NT'"They"'
                                                    CONSTANT_NT'"They"'-text
                    ROUTINE_NT'to say us'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Me"'
                                        INVOCATION_LIST_SAY_NT'"Me"'
                                            INVOCATION_NT'"Me"'
                                                RVALUE_CONTEXT_NT'"Me"'
                                                    CONSTANT_NT'"Me"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"'
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"'
                                                RVALUE_CONTEXT_NT'"You"'
                                                    CONSTANT_NT'"You"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Him"'
                                                INVOCATION_LIST_SAY_NT'"Him"'
                                                    INVOCATION_NT'"Him"'
                                                        RVALUE_CONTEXT_NT'"Him"'
                                                            CONSTANT_NT'"Him"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "Her"'
                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                    INVOCATION_NT'"Her"'
                                                        RVALUE_CONTEXT_NT'"Her"'
                                                            CONSTANT_NT'"Her"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Us"'
                                        INVOCATION_LIST_SAY_NT'"Us"'
                                            INVOCATION_NT'"Us"'
                                                RVALUE_CONTEXT_NT'"Us"'
                                                    CONSTANT_NT'"Us"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You"'
                                        INVOCATION_LIST_SAY_NT'"You"'
                                            INVOCATION_NT'"You"'
                                                RVALUE_CONTEXT_NT'"You"'
                                                    CONSTANT_NT'"You"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Them"'
                                        INVOCATION_LIST_SAY_NT'"Them"'
                                            INVOCATION_NT'"Them"'
                                                RVALUE_CONTEXT_NT'"Them"'
                                                    CONSTANT_NT'"Them"'-text
                    ROUTINE_NT'to say ours'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Mine"'
                                        INVOCATION_LIST_SAY_NT'"Mine"'
                                            INVOCATION_NT'"Mine"'
                                                RVALUE_CONTEXT_NT'"Mine"'
                                                    CONSTANT_NT'"Mine"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yours"'
                                        INVOCATION_LIST_SAY_NT'"Yours"'
                                            INVOCATION_NT'"Yours"'
                                                RVALUE_CONTEXT_NT'"Yours"'
                                                    CONSTANT_NT'"Yours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "His"'
                                                INVOCATION_LIST_SAY_NT'"His"'
                                                    INVOCATION_NT'"His"'
                                                        RVALUE_CONTEXT_NT'"His"'
                                                            CONSTANT_NT'"His"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "Hers"'
                                                INVOCATION_LIST_SAY_NT'"Hers"'
                                                    INVOCATION_NT'"Hers"'
                                                        RVALUE_CONTEXT_NT'"Hers"'
                                                            CONSTANT_NT'"Hers"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Ours"'
                                        INVOCATION_LIST_SAY_NT'"Ours"'
                                            INVOCATION_NT'"Ours"'
                                                RVALUE_CONTEXT_NT'"Ours"'
                                                    CONSTANT_NT'"Ours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yours"'
                                        INVOCATION_LIST_SAY_NT'"Yours"'
                                            INVOCATION_NT'"Yours"'
                                                RVALUE_CONTEXT_NT'"Yours"'
                                                    CONSTANT_NT'"Yours"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Theirs"'
                                        INVOCATION_LIST_SAY_NT'"Theirs"'
                                            INVOCATION_NT'"Theirs"'
                                                RVALUE_CONTEXT_NT'"Theirs"'
                                                    CONSTANT_NT'"Theirs"'-text
                    ROUTINE_NT'to say ourselves'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Myself"'
                                        INVOCATION_LIST_SAY_NT'"Myself"'
                                            INVOCATION_NT'"Myself"'
                                                RVALUE_CONTEXT_NT'"Myself"'
                                                    CONSTANT_NT'"Myself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yourself"'
                                        INVOCATION_LIST_SAY_NT'"Yourself"'
                                            INVOCATION_NT'"Yourself"'
                                                RVALUE_CONTEXT_NT'"Yourself"'
                                                    CONSTANT_NT'"Yourself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Himself"'
                                                INVOCATION_LIST_SAY_NT'"Himself"'
                                                    INVOCATION_NT'"Himself"'
                                                        RVALUE_CONTEXT_NT'"Himself"'
                                                            CONSTANT_NT'"Himself"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "Herself"'
                                                INVOCATION_LIST_SAY_NT'"Herself"'
                                                    INVOCATION_NT'"Herself"'
                                                        RVALUE_CONTEXT_NT'"Herself"'
                                                            CONSTANT_NT'"Herself"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Ourselves"'
                                        INVOCATION_LIST_SAY_NT'"Ourselves"'
                                            INVOCATION_NT'"Ourselves"'
                                                RVALUE_CONTEXT_NT'"Ourselves"'
                                                    CONSTANT_NT'"Ourselves"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Yourselves"'
                                        INVOCATION_LIST_SAY_NT'"Yourselves"'
                                            INVOCATION_NT'"Yourselves"'
                                                RVALUE_CONTEXT_NT'"Yourselves"'
                                                    CONSTANT_NT'"Yourselves"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Themselves"'
                                        INVOCATION_LIST_SAY_NT'"Themselves"'
                                            INVOCATION_NT'"Themselves"'
                                                RVALUE_CONTEXT_NT'"Themselves"'
                                                    CONSTANT_NT'"Themselves"'-text
                    ROUTINE_NT'to say our'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the prior named object is the player'
                                CONDITION_CONTEXT_NT'the prior named object is the player'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person singular'
                                    INVOCATION_NT'if the story viewpoint is first person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is first person singular'(test: [ is('story viewpoint', 'first person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "My"'
                                        INVOCATION_LIST_SAY_NT'"My"'
                                            INVOCATION_NT'"My"'
                                                RVALUE_CONTEXT_NT'"My"'
                                                    CONSTANT_NT'"My"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person singular'
                                    INVOCATION_NT'if the story viewpoint is second person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is second person singular'(test: [ is('story viewpoint', 'second person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Your"'
                                        INVOCATION_LIST_SAY_NT'"Your"'
                                            INVOCATION_NT'"Your"'
                                                RVALUE_CONTEXT_NT'"Your"'
                                                    CONSTANT_NT'"Your"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person singular'
                                    INVOCATION_NT'if the story viewpoint is third person singular'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person singular'
                                            TEST_PROPOSITION_NT'story viewpoint is third person singular'(test: [ is('story viewpoint', 'third person singular') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is male'
                                            INVOCATION_NT'if the player is male'
                                                CONDITION_CONTEXT_NT'player is male'
                                                    TEST_PROPOSITION_NT'player is male'(test: [ A88'male'('player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "His"'
                                                INVOCATION_LIST_SAY_NT'"His"'
                                                    INVOCATION_NT'"His"'
                                                        RVALUE_CONTEXT_NT'"His"'
                                                            CONSTANT_NT'"His"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "Her"'
                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                    INVOCATION_NT'"Her"'
                                                        RVALUE_CONTEXT_NT'"Her"'
                                                            CONSTANT_NT'"Her"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is first person plural'
                                    INVOCATION_NT'if the story viewpoint is first person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is first person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is first person plural'(test: [ is('story viewpoint', 'first person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Our"'
                                        INVOCATION_LIST_SAY_NT'"Our"'
                                            INVOCATION_NT'"Our"'
                                                RVALUE_CONTEXT_NT'"Our"'
                                                    CONSTANT_NT'"Our"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is second person plural'
                                    INVOCATION_NT'if the story viewpoint is second person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is second person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is second person plural'(test: [ is('story viewpoint', 'second person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Your"'
                                        INVOCATION_LIST_SAY_NT'"Your"'
                                            INVOCATION_NT'"Your"'
                                                RVALUE_CONTEXT_NT'"Your"'
                                                    CONSTANT_NT'"Your"'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the story viewpoint is third person plural'
                                    INVOCATION_NT'if the story viewpoint is third person plural'
                                        CONDITION_CONTEXT_NT'story viewpoint is third person plural'
                                            TEST_PROPOSITION_NT'story viewpoint is third person plural'(test: [ is('story viewpoint', 'third person plural') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Their"'
                                        INVOCATION_LIST_SAY_NT'"Their"'
                                            INVOCATION_NT'"Their"'
                                                RVALUE_CONTEXT_NT'"Their"'
                                                    CONSTANT_NT'"Their"'-text
                HEADING_NT'section 3 - further pronouns ( for interactive fiction language element only )' (level 5)
                    ROUTINE_NT'to say those'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say those in the accusative'
                                INVOCATION_LIST_SAY_NT'those in the accusative'
                                    INVOCATION_NT'those in the accusative'
                                        RVALUE_CONTEXT_NT'accusative'
                                            CONSTANT_NT'accusative'-grammatical case(I_accusative)
                    ROUTINE_NT'to say those'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say those in the nominative'
                                INVOCATION_LIST_SAY_NT'those in the nominative'
                                    INVOCATION_NT'those in the nominative'
                                        RVALUE_CONTEXT_NT'nominative'
                                            CONSTANT_NT'nominative'-grammatical case(I_nominative)
                    ROUTINE_NT'to say those in ( case - grammatical case )'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the case is nominative'
                                    INVOCATION_NT'if the case is nominative'
                                        CONDITION_CONTEXT_NT'case is nominative'
                                            TEST_PROPOSITION_NT'case is nominative'(test: [ is('case', 'nominative') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the item be the prior named object'
                                        INVOCATION_NT'let the item be the prior named object'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object'
                                                NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "those"'
                                                INVOCATION_LIST_SAY_NT'"those"'
                                                    INVOCATION_NT'"those"'
                                                        RVALUE_CONTEXT_NT'"those"'
                                                            CONSTANT_NT'"those"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is the player'
                                                    INVOCATION_NT'if the item is the player'
                                                        CONDITION_CONTEXT_NT'item is the player'
                                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[we]"'
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we'
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                            INVOCATION_NT'if the item is a male person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "he"'
                                                                INVOCATION_LIST_SAY_NT'"he"'
                                                                    INVOCATION_NT'"he"'
                                                                        RVALUE_CONTEXT_NT'"he"'
                                                                            CONSTANT_NT'"he"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "she"'
                                                                        INVOCATION_LIST_SAY_NT'"she"'
                                                                            INVOCATION_NT'"she"'
                                                                                RVALUE_CONTEXT_NT'"she"'
                                                                                    CONSTANT_NT'"she"'-text
                                                                CODE_BLOCK_NT'otherwise'
                                                                    CODE_BLOCK_NT'say "that"'
                                                                        INVOCATION_LIST_SAY_NT'"that"'
                                                                            INVOCATION_NT'"that"'
                                                                                RVALUE_CONTEXT_NT'"that"'
                                                                                    CONSTANT_NT'"that"'-text
                                CODE_BLOCK_NT'otherwise'
                                    INVOCATION_LIST_NT'let the item be the prior named object'
                                        INVOCATION_NT'let the item be the prior named object'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object'
                                                NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "those"'
                                                INVOCATION_LIST_SAY_NT'"those"'
                                                    INVOCATION_NT'"those"'
                                                        RVALUE_CONTEXT_NT'"those"'
                                                            CONSTANT_NT'"those"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is the player'
                                                    INVOCATION_NT'if the item is the player'
                                                        CONDITION_CONTEXT_NT'item is the player'
                                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[we]"'
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we'
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                            INVOCATION_NT'if the item is a male person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "him"'
                                                                INVOCATION_LIST_SAY_NT'"him"'
                                                                    INVOCATION_NT'"him"'
                                                                        RVALUE_CONTEXT_NT'"him"'
                                                                            CONSTANT_NT'"him"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "her"'
                                                                        INVOCATION_LIST_SAY_NT'"her"'
                                                                            INVOCATION_NT'"her"'
                                                                                RVALUE_CONTEXT_NT'"her"'
                                                                                    CONSTANT_NT'"her"'-text
                                                                CODE_BLOCK_NT'otherwise'
                                                                    CODE_BLOCK_NT'say "that"'
                                                                        INVOCATION_LIST_SAY_NT'"that"'
                                                                            INVOCATION_NT'"that"'
                                                                                RVALUE_CONTEXT_NT'"that"'
                                                                                    CONSTANT_NT'"that"'-text
                    ROUTINE_NT'to say those in ( case - grammatical case )'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the case is nominative'
                                    INVOCATION_NT'if the case is nominative'
                                        CONDITION_CONTEXT_NT'case is nominative'
                                            TEST_PROPOSITION_NT'case is nominative'(test: [ is('case', 'nominative') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let the item be the prior named object'
                                        INVOCATION_NT'let the item be the prior named object'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object'
                                                NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Those"'
                                                INVOCATION_LIST_SAY_NT'"Those"'
                                                    INVOCATION_NT'"Those"'
                                                        RVALUE_CONTEXT_NT'"Those"'
                                                            CONSTANT_NT'"Those"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is the player'
                                                    INVOCATION_NT'if the item is the player'
                                                        CONDITION_CONTEXT_NT'item is the player'
                                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[We]"'
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we'
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                            INVOCATION_NT'if the item is a male person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "He"'
                                                                INVOCATION_LIST_SAY_NT'"He"'
                                                                    INVOCATION_NT'"He"'
                                                                        RVALUE_CONTEXT_NT'"He"'
                                                                            CONSTANT_NT'"He"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "She"'
                                                                        INVOCATION_LIST_SAY_NT'"She"'
                                                                            INVOCATION_NT'"She"'
                                                                                RVALUE_CONTEXT_NT'"She"'
                                                                                    CONSTANT_NT'"She"'-text
                                                                CODE_BLOCK_NT'otherwise'
                                                                    CODE_BLOCK_NT'say "That"'
                                                                        INVOCATION_LIST_SAY_NT'"That"'
                                                                            INVOCATION_NT'"That"'
                                                                                RVALUE_CONTEXT_NT'"That"'
                                                                                    CONSTANT_NT'"That"'-text
                                CODE_BLOCK_NT'otherwise'
                                    INVOCATION_LIST_NT'let the item be the prior named object'
                                        INVOCATION_NT'let the item be the prior named object'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'prior named object'
                                                NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "Those"'
                                                INVOCATION_LIST_SAY_NT'"Those"'
                                                    INVOCATION_NT'"Those"'
                                                        RVALUE_CONTEXT_NT'"Those"'
                                                            CONSTANT_NT'"Those"'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is the player'
                                                    INVOCATION_NT'if the item is the player'
                                                        CONDITION_CONTEXT_NT'item is the player'
                                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "[We]"'
                                                        INVOCATION_LIST_SAY_NT'we'
                                                            INVOCATION_NT'we'
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                            INVOCATION_NT'if the item is a male person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Him"'
                                                                INVOCATION_LIST_SAY_NT'"Him"'
                                                                    INVOCATION_NT'"Him"'
                                                                        RVALUE_CONTEXT_NT'"Him"'
                                                                            CONSTANT_NT'"Him"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                                    INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                        CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                            LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                                TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                                CODE_BLOCK_NT
                                                                    CODE_BLOCK_NT'say "Her"'
                                                                        INVOCATION_LIST_SAY_NT'"Her"'
                                                                            INVOCATION_NT'"Her"'
                                                                                RVALUE_CONTEXT_NT'"Her"'
                                                                                    CONSTANT_NT'"Her"'-text
                                                                CODE_BLOCK_NT'otherwise'
                                                                    CODE_BLOCK_NT'say "That"'
                                                                        INVOCATION_LIST_SAY_NT'"That"'
                                                                            INVOCATION_NT'"That"'
                                                                                RVALUE_CONTEXT_NT'"That"'
                                                                                    CONSTANT_NT'"That"'-text
                    ROUTINE_NT'to say they'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"'
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"'
                                                RVALUE_CONTEXT_NT'"they"'
                                                    CONSTANT_NT'"they"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[we]"'
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "he"'
                                                        INVOCATION_LIST_SAY_NT'"he"'
                                                            INVOCATION_NT'"he"'
                                                                RVALUE_CONTEXT_NT'"he"'
                                                                    CONSTANT_NT'"he"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "she"'
                                                                INVOCATION_LIST_SAY_NT'"she"'
                                                                    INVOCATION_NT'"she"'
                                                                        RVALUE_CONTEXT_NT'"she"'
                                                                            CONSTANT_NT'"she"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "it"'
                                                                INVOCATION_LIST_SAY_NT'"it"'
                                                                    INVOCATION_NT'"it"'
                                                                        RVALUE_CONTEXT_NT'"it"'
                                                                            CONSTANT_NT'"it"'-text
                    ROUTINE_NT'to say they'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"'
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"'
                                                RVALUE_CONTEXT_NT'"They"'
                                                    CONSTANT_NT'"They"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[We]"'
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "He"'
                                                        INVOCATION_LIST_SAY_NT'"He"'
                                                            INVOCATION_NT'"He"'
                                                                RVALUE_CONTEXT_NT'"He"'
                                                                    CONSTANT_NT'"He"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "She"'
                                                                INVOCATION_LIST_SAY_NT'"She"'
                                                                    INVOCATION_NT'"She"'
                                                                        RVALUE_CONTEXT_NT'"She"'
                                                                            CONSTANT_NT'"She"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "It"'
                                                                INVOCATION_LIST_SAY_NT'"It"'
                                                                    INVOCATION_NT'"It"'
                                                                        RVALUE_CONTEXT_NT'"It"'
                                                                            CONSTANT_NT'"It"'-text
                    ROUTINE_NT'to say their'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "their"'
                                        INVOCATION_LIST_SAY_NT'"their"'
                                            INVOCATION_NT'"their"'
                                                RVALUE_CONTEXT_NT'"their"'
                                                    CONSTANT_NT'"their"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[our]"'
                                                INVOCATION_LIST_SAY_NT'our'
                                                    INVOCATION_NT'our'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "his"'
                                                        INVOCATION_LIST_SAY_NT'"his"'
                                                            INVOCATION_NT'"his"'
                                                                RVALUE_CONTEXT_NT'"his"'
                                                                    CONSTANT_NT'"his"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "her"'
                                                                INVOCATION_LIST_SAY_NT'"her"'
                                                                    INVOCATION_NT'"her"'
                                                                        RVALUE_CONTEXT_NT'"her"'
                                                                            CONSTANT_NT'"her"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "its"'
                                                                INVOCATION_LIST_SAY_NT'"its"'
                                                                    INVOCATION_NT'"its"'
                                                                        RVALUE_CONTEXT_NT'"its"'
                                                                            CONSTANT_NT'"its"'-text
                    ROUTINE_NT'to say their'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Their"'
                                        INVOCATION_LIST_SAY_NT'"Their"'
                                            INVOCATION_NT'"Their"'
                                                RVALUE_CONTEXT_NT'"Their"'
                                                    CONSTANT_NT'"Their"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Our]"'
                                                INVOCATION_LIST_SAY_NT'our'
                                                    INVOCATION_NT'our'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "His"'
                                                        INVOCATION_LIST_SAY_NT'"His"'
                                                            INVOCATION_NT'"His"'
                                                                RVALUE_CONTEXT_NT'"His"'
                                                                    CONSTANT_NT'"His"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Her"'
                                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                                    INVOCATION_NT'"Her"'
                                                                        RVALUE_CONTEXT_NT'"Her"'
                                                                            CONSTANT_NT'"Her"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "Its"'
                                                                INVOCATION_LIST_SAY_NT'"Its"'
                                                                    INVOCATION_NT'"Its"'
                                                                        RVALUE_CONTEXT_NT'"Its"'
                                                                            CONSTANT_NT'"Its"'-text
                    ROUTINE_NT'to say them'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "them"'
                                        INVOCATION_LIST_SAY_NT'"them"'
                                            INVOCATION_NT'"them"'
                                                RVALUE_CONTEXT_NT'"them"'
                                                    CONSTANT_NT'"them"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[us]"'
                                                INVOCATION_LIST_SAY_NT'us'
                                                    INVOCATION_NT'us'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "him"'
                                                        INVOCATION_LIST_SAY_NT'"him"'
                                                            INVOCATION_NT'"him"'
                                                                RVALUE_CONTEXT_NT'"him"'
                                                                    CONSTANT_NT'"him"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "her"'
                                                                INVOCATION_LIST_SAY_NT'"her"'
                                                                    INVOCATION_NT'"her"'
                                                                        RVALUE_CONTEXT_NT'"her"'
                                                                            CONSTANT_NT'"her"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "it"'
                                                                INVOCATION_LIST_SAY_NT'"it"'
                                                                    INVOCATION_NT'"it"'
                                                                        RVALUE_CONTEXT_NT'"it"'
                                                                            CONSTANT_NT'"it"'-text
                    ROUTINE_NT'to say them'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Them"'
                                        INVOCATION_LIST_SAY_NT'"Them"'
                                            INVOCATION_NT'"Them"'
                                                RVALUE_CONTEXT_NT'"Them"'
                                                    CONSTANT_NT'"Them"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Us]"'
                                                INVOCATION_LIST_SAY_NT'us'
                                                    INVOCATION_NT'us'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "Him"'
                                                        INVOCATION_LIST_SAY_NT'"Him"'
                                                            INVOCATION_NT'"Him"'
                                                                RVALUE_CONTEXT_NT'"Him"'
                                                                    CONSTANT_NT'"Him"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Her"'
                                                                INVOCATION_LIST_SAY_NT'"Her"'
                                                                    INVOCATION_NT'"Her"'
                                                                        RVALUE_CONTEXT_NT'"Her"'
                                                                            CONSTANT_NT'"Her"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "It"'
                                                                INVOCATION_LIST_SAY_NT'"It"'
                                                                    INVOCATION_NT'"It"'
                                                                        RVALUE_CONTEXT_NT'"It"'
                                                                            CONSTANT_NT'"It"'-text
                    ROUTINE_NT'to say theirs'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "theirs"'
                                        INVOCATION_LIST_SAY_NT'"theirs"'
                                            INVOCATION_NT'"theirs"'
                                                RVALUE_CONTEXT_NT'"theirs"'
                                                    CONSTANT_NT'"theirs"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[ours]"'
                                                INVOCATION_LIST_SAY_NT'ours'
                                                    INVOCATION_NT'ours'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "his"'
                                                        INVOCATION_LIST_SAY_NT'"his"'
                                                            INVOCATION_NT'"his"'
                                                                RVALUE_CONTEXT_NT'"his"'
                                                                    CONSTANT_NT'"his"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "hers"'
                                                                INVOCATION_LIST_SAY_NT'"hers"'
                                                                    INVOCATION_NT'"hers"'
                                                                        RVALUE_CONTEXT_NT'"hers"'
                                                                            CONSTANT_NT'"hers"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "its"'
                                                                INVOCATION_LIST_SAY_NT'"its"'
                                                                    INVOCATION_NT'"its"'
                                                                        RVALUE_CONTEXT_NT'"its"'
                                                                            CONSTANT_NT'"its"'-text
                    ROUTINE_NT'to say theirs'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Theirs"'
                                        INVOCATION_LIST_SAY_NT'"Theirs"'
                                            INVOCATION_NT'"Theirs"'
                                                RVALUE_CONTEXT_NT'"Theirs"'
                                                    CONSTANT_NT'"Theirs"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Ours]"'
                                                INVOCATION_LIST_SAY_NT'ours'
                                                    INVOCATION_NT'ours'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "His"'
                                                        INVOCATION_LIST_SAY_NT'"His"'
                                                            INVOCATION_NT'"His"'
                                                                RVALUE_CONTEXT_NT'"His"'
                                                                    CONSTANT_NT'"His"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Hers"'
                                                                INVOCATION_LIST_SAY_NT'"Hers"'
                                                                    INVOCATION_NT'"Hers"'
                                                                        RVALUE_CONTEXT_NT'"Hers"'
                                                                            CONSTANT_NT'"Hers"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "Its"'
                                                                INVOCATION_LIST_SAY_NT'"Its"'
                                                                    INVOCATION_NT'"Its"'
                                                                        RVALUE_CONTEXT_NT'"Its"'
                                                                            CONSTANT_NT'"Its"'-text
                    ROUTINE_NT'to say themselves'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "themselves"'
                                        INVOCATION_LIST_SAY_NT'"themselves"'
                                            INVOCATION_NT'"themselves"'
                                                RVALUE_CONTEXT_NT'"themselves"'
                                                    CONSTANT_NT'"themselves"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[ourselves]"'
                                                INVOCATION_LIST_SAY_NT'ourselves'
                                                    INVOCATION_NT'ourselves'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "himself"'
                                                        INVOCATION_LIST_SAY_NT'"himself"'
                                                            INVOCATION_NT'"himself"'
                                                                RVALUE_CONTEXT_NT'"himself"'
                                                                    CONSTANT_NT'"himself"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "herself"'
                                                                INVOCATION_LIST_SAY_NT'"herself"'
                                                                    INVOCATION_NT'"herself"'
                                                                        RVALUE_CONTEXT_NT'"herself"'
                                                                            CONSTANT_NT'"herself"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "itself"'
                                                                INVOCATION_LIST_SAY_NT'"itself"'
                                                                    INVOCATION_NT'"itself"'
                                                                        RVALUE_CONTEXT_NT'"itself"'
                                                                            CONSTANT_NT'"itself"'-text
                    ROUTINE_NT'to say themselves'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Themselves"'
                                        INVOCATION_LIST_SAY_NT'"Themselves"'
                                            INVOCATION_NT'"Themselves"'
                                                RVALUE_CONTEXT_NT'"Themselves"'
                                                    CONSTANT_NT'"Themselves"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[Ourselves]"'
                                                INVOCATION_LIST_SAY_NT'ourselves'
                                                    INVOCATION_NT'ourselves'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "Himself"'
                                                        INVOCATION_LIST_SAY_NT'"Himself"'
                                                            INVOCATION_NT'"Himself"'
                                                                RVALUE_CONTEXT_NT'"Himself"'
                                                                    CONSTANT_NT'"Himself"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "Herself"'
                                                                INVOCATION_LIST_SAY_NT'"Herself"'
                                                                    INVOCATION_NT'"Herself"'
                                                                        RVALUE_CONTEXT_NT'"Herself"'
                                                                            CONSTANT_NT'"Herself"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "Itself"'
                                                                INVOCATION_LIST_SAY_NT'"Itself"'
                                                                    INVOCATION_NT'"Itself"'
                                                                        RVALUE_CONTEXT_NT'"Itself"'
                                                                            CONSTANT_NT'"Itself"'-text
                    ROUTINE_NT'to say they're'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "they"'
                                        INVOCATION_LIST_SAY_NT'"they"'
                                            INVOCATION_NT'"they"'
                                                RVALUE_CONTEXT_NT'"they"'
                                                    CONSTANT_NT'"they"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[we]"'
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "he"'
                                                        INVOCATION_LIST_SAY_NT'"he"'
                                                            INVOCATION_NT'"he"'
                                                                RVALUE_CONTEXT_NT'"he"'
                                                                    CONSTANT_NT'"he"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "she"'
                                                                INVOCATION_LIST_SAY_NT'"she"'
                                                                    INVOCATION_NT'"she"'
                                                                        RVALUE_CONTEXT_NT'"she"'
                                                                            CONSTANT_NT'"she"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "that"'
                                                                INVOCATION_LIST_SAY_NT'"that"'
                                                                    INVOCATION_NT'"that"'
                                                                        RVALUE_CONTEXT_NT'"that"'
                                                                            CONSTANT_NT'"that"'-text
                            CODE_BLOCK_NT'say "['re]"'
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say they're'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the prior naming context is plural'
                                    INVOCATION_NT'if the prior naming context is plural'
                                        CONDITION_CONTEXT_NT'prior naming context is plural'
                                            TEST_VALUE_NT'prior naming context is plural'
                                                PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                    INVOCATION_LIST_NT'prior naming context is plural'
                                                        INVOCATION_NT'prior naming context is plural'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "They"'
                                        INVOCATION_LIST_SAY_NT'"They"'
                                            INVOCATION_NT'"They"'
                                                RVALUE_CONTEXT_NT'"They"'
                                                    CONSTANT_NT'"They"'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the item is the player'
                                            INVOCATION_NT'if the item is the player'
                                                CONDITION_CONTEXT_NT'item is the player'
                                                    TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[We]"'
                                                INVOCATION_LIST_SAY_NT'we'
                                                    INVOCATION_NT'we'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if the item is a male person and item is not neuter'
                                                    INVOCATION_NT'if the item is a male person and item is not neuter'
                                                        CONDITION_CONTEXT_NT'item is a male person and item is not neuter'
                                                            LOGICAL_AND_NT'item is a male person and item is not neuter'
                                                                TEST_PROPOSITION_NT'item is a male person'(test: [ kind=person('item') ^ A88'male'('item') ])
                                                                TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                CODE_BLOCK_NT
                                                    CODE_BLOCK_NT'say "He"'
                                                        INVOCATION_LIST_SAY_NT'"He"'
                                                            INVOCATION_NT'"He"'
                                                                RVALUE_CONTEXT_NT'"He"'
                                                                    CONSTANT_NT'"He"'-text
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the item is a female person and item is not neuter'
                                                            INVOCATION_NT'if the item is a female person and item is not neuter'
                                                                CONDITION_CONTEXT_NT'item is a female person and item is not neuter'
                                                                    LOGICAL_AND_NT'item is a female person and item is not neuter'
                                                                        TEST_PROPOSITION_NT'item is a female person'(test: [ kind=person('item') ^ A87'female'('item') ])
                                                                        TEST_PROPOSITION_NT'item is not neuter'(test: [ NOT[ A89'neuter'('item') NOT] ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "She"'
                                                                INVOCATION_LIST_SAY_NT'"She"'
                                                                    INVOCATION_NT'"She"'
                                                                        RVALUE_CONTEXT_NT'"She"'
                                                                            CONSTANT_NT'"She"'-text
                                                        CODE_BLOCK_NT'otherwise'
                                                            CODE_BLOCK_NT'say "That"'
                                                                INVOCATION_LIST_SAY_NT'"That"'
                                                                    INVOCATION_NT'"That"'
                                                                        RVALUE_CONTEXT_NT'"That"'
                                                                            CONSTANT_NT'"That"'-text
                            CODE_BLOCK_NT'say "['re]"'
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say it'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]It"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"It"'
                                    INVOCATION_NT'"It"'
                                        RVALUE_CONTEXT_NT'"It"'
                                            CONSTANT_NT'"It"'-text
                    ROUTINE_NT'to say there'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]There"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"There"'
                                    INVOCATION_NT'"There"'
                                        RVALUE_CONTEXT_NT'"There"'
                                            CONSTANT_NT'"There"'-text
                    ROUTINE_NT'to say it'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]it"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"it"'
                                    INVOCATION_NT'"it"'
                                        RVALUE_CONTEXT_NT'"it"'
                                            CONSTANT_NT'"it"'-text
                    ROUTINE_NT'to say there'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]there"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"there"'
                                    INVOCATION_NT'"there"'
                                        RVALUE_CONTEXT_NT'"there"'
                                            CONSTANT_NT'"there"'-text
                    ROUTINE_NT'to say it's'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]It['re]"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"It"'
                                    INVOCATION_NT'"It"'
                                        RVALUE_CONTEXT_NT'"It"'
                                            CONSTANT_NT'"It"'-text
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say there's'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]There['re]"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"There"'
                                    INVOCATION_NT'"There"'
                                        RVALUE_CONTEXT_NT'"There"'
                                            CONSTANT_NT'"There"'-text
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say it's'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]it['re]"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"it"'
                                    INVOCATION_NT'"it"'
                                        RVALUE_CONTEXT_NT'"it"'
                                            CONSTANT_NT'"it"'-text
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say there's'
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[regarding nothing]there['re]"'
                                INVOCATION_LIST_SAY_NT'regarding nothing'
                                    INVOCATION_NT'regarding nothing'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                INVOCATION_LIST_SAY_NT'"there"'
                                    INVOCATION_NT'"there"'
                                        RVALUE_CONTEXT_NT'"there"'
                                            CONSTANT_NT'"there"'-text
                                INVOCATION_LIST_SAY_NT''re'
                                    INVOCATION_NT''re'
                    ROUTINE_NT'to say possessive'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the item is the player'
                                    INVOCATION_NT'if the item is the player'
                                        CONDITION_CONTEXT_NT'item is the player'
                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[our]"'
                                        INVOCATION_LIST_SAY_NT'our'
                                            INVOCATION_NT'our'
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[the item][apostrophe]"'
                                                INVOCATION_LIST_SAY_NT'the item'
                                                    INVOCATION_NT'the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;object)
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "[the item][apostrophe]s"'
                                                INVOCATION_LIST_SAY_NT'the item'
                                                    INVOCATION_NT'the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;object)
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe'
                                                INVOCATION_LIST_SAY_NT'"s"'
                                                    INVOCATION_NT'"s"'
                                                        RVALUE_CONTEXT_NT'"s"'
                                                            CONSTANT_NT'"s"'-text
                    ROUTINE_NT'to say possessive'
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let the item be the prior named object'
                                INVOCATION_NT'let the item be the prior named object'
                                    NEW_LOCAL_CONTEXT_NT'item'
                                        UNKNOWN_NT'item'
                                    RVALUE_CONTEXT_NT'prior named object'
                                        NONLOCAL_VARIABLE_NT'prior named object'('prior named object'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the item is the player'
                                    INVOCATION_NT'if the item is the player'
                                        CONDITION_CONTEXT_NT'item is the player'
                                            TEST_PROPOSITION_NT'item is the player'(test: [ is('item', 'the player') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[Our]"'
                                        INVOCATION_LIST_SAY_NT'our'
                                            INVOCATION_NT'our'
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the prior naming context is plural'
                                            INVOCATION_NT'if the prior naming context is plural'
                                                CONDITION_CONTEXT_NT'prior naming context is plural'
                                                    TEST_VALUE_NT'prior naming context is plural'
                                                        PHRASE_TO_DECIDE_VALUE_NT'prior naming context is plural'
                                                            INVOCATION_LIST_NT'prior naming context is plural'
                                                                INVOCATION_NT'prior naming context is plural'
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The item][apostrophe]"'
                                                INVOCATION_LIST_SAY_NT'the item'
                                                    INVOCATION_NT'the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;object)
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe'
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "[The item][apostrophe]s"'
                                                INVOCATION_LIST_SAY_NT'the item'
                                                    INVOCATION_NT'the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;object)
                                                INVOCATION_LIST_SAY_NT'apostrophe'
                                                    INVOCATION_NT'apostrophe'
                                                INVOCATION_LIST_SAY_NT'"s"'
                                                    INVOCATION_NT'"s"'
                                                        RVALUE_CONTEXT_NT'"s"'
                                                            CONSTANT_NT'"s"'-text
                    ENDHERE_NT'english language'
        INCLUSION_NT'include english language by graham nelson'
        INCLUSION_NT'include standard rules by graham nelson'
            HEADING_NT'version 6 of the standard rules by graham nelson begins here' (level 0)
                BEGINHERE_NT'version 6 of the standard rules by graham nelson'
                SENTENCE_NT'The Standard Rules, included in every project, define phrases, actions and
                activities for interactive fiction.'
                HEADING_NT'part one - preamble' (level 3)
                    SENTENCE_NT'the verb to begin when means the built-in scene-begins-when meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to begin when'
                        PROPER_NOUN_NT'built-in scene-begins-when meaning'
                    SENTENCE_NT'the verb to end when means the built-in scene-ends-when meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to end when'
                        PROPER_NOUN_NT'built-in scene-ends-when meaning'
                    SENTENCE_NT'the verb to end + when means the built-in scene-ends-when meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to end + when'
                        PROPER_NOUN_NT'built-in scene-ends-when meaning'
                    SENTENCE_NT'the verb to test + with in the imperative means the built-in test-with meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to test + with'
                        PROPER_NOUN_NT'built-in test-with meaning'
                    SENTENCE_NT'the verb to understand + as in the imperative means the built-in understand-as meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to understand + as'
                        PROPER_NOUN_NT'built-in understand-as meaning'
                    SENTENCE_NT'the verb to release along with in the imperative means the built-in release-along-with meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to release along with'
                        PROPER_NOUN_NT'built-in release-along-with meaning'
                    SENTENCE_NT'the verb to index map with in the imperative means the built-in index-map-with meaning'
                        AVERB_NT'means'
                        PROPER_NOUN_NT'to index map with'
                        PROPER_NOUN_NT'built-in index-map-with meaning'
                    SENTENCE_NT'use command line echoing translates as (-  Constant ECHO_COMMANDS; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'command line echoing'
                        PROPER_NOUN_NT'(-  Constant ECHO_COMMANDS; '
                    SENTENCE_NT'use full-length room descriptions translates as (-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 2; #ENDIF; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'full-length room descriptions'
                        PROPER_NOUN_NT'(-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 2; #ENDIF; '
                    SENTENCE_NT'use abbreviated room descriptions translates as (-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 3; #ENDIF; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'abbreviated room descriptions'
                        PROPER_NOUN_NT'(-  #IFNDEF I7_LOOKMODE; Constant I7_LOOKMODE = 3; #ENDIF; '
                    SENTENCE_NT'use scoring translates as (-  #IFNDEF USE_SCORING; Constant USE_SCORING = 1; #ENDIF; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'scoring'
                        PROPER_NOUN_NT'(-  #IFNDEF USE_SCORING; Constant USE_SCORING = 1; #ENDIF; '
                    SENTENCE_NT'use no scoring translates as (-  #IFNDEF USE_SCORING; Constant USE_SCORING = 0; #ENDIF; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'no scoring'
                        PROPER_NOUN_NT'(-  #IFNDEF USE_SCORING; Constant USE_SCORING = 0; #ENDIF; '
                    SENTENCE_NT'use manual pronouns translates as (-  Constant MANUAL_PRONOUNS; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'manual pronouns'
                        PROPER_NOUN_NT'(-  Constant MANUAL_PRONOUNS; '
                    SENTENCE_NT'use undo prevention translates as (-  Constant PREVENT_UNDO; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'undo prevention'
                        PROPER_NOUN_NT'(-  Constant PREVENT_UNDO; '
                    SENTENCE_NT'use verbose room descriptions translates as (-  Constant DEFAULT_VERBOSE_DESCRIPTIONS; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'verbose room descriptions'
                        PROPER_NOUN_NT'(-  Constant DEFAULT_VERBOSE_DESCRIPTIONS; '
                    SENTENCE_NT'use brief room descriptions translates as (-  Constant DEFAULT_BRIEF_DESCRIPTIONS; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'brief room descriptions'
                        PROPER_NOUN_NT'(-  Constant DEFAULT_BRIEF_DESCRIPTIONS; '
                    SENTENCE_NT'use superbrief room descriptions translates as (-  Constant DEFAULT_SUPERBRIEF_DESCRIPTIONS; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'superbrief room descriptions'
                        PROPER_NOUN_NT'(-  Constant DEFAULT_SUPERBRIEF_DESCRIPTIONS; '
                    SENTENCE_NT'use maximum things understood at once of at least 100 translates as (-  Constant MATCH_LIST_WORDS = {N}; '
                        AVERB_NT'translates as'
                        PROPER_NOUN_NT'maximum things understood at once of at least 100'
                        PROPER_NOUN_NT'(-  Constant MATCH_LIST_WORDS = {N}; '
                    SENTENCE_NT'use maximum things understood at once of at least 100'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'maximum things understood at once of at least 100'
                HEADING_NT'part two - the physical world model' (level 3)
                    HEADING_NT'chapter 1 - verbs and relations' (level 4)
                        SENTENCE_NT'the verb to be in means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be in'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to be inside means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be inside'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to be within means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be within'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to be held in means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be held in'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to be held inside means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be held inside'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to contain means the containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to contain'
                            PROPER_NOUN_NT'containment relation'
                        SENTENCE_NT'the verb to be contained in means the reversed containment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be contained in'
                            PROPER_NOUN_NT'reversed containment relation'
                        SENTENCE_NT'the verb to be on top of means the reversed support relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be on top of'
                            PROPER_NOUN_NT'reversed support relation'
                        SENTENCE_NT'the verb to be on means the reversed support relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be on'
                            PROPER_NOUN_NT'reversed support relation'
                        SENTENCE_NT'the verb to support means the support relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to support'
                            PROPER_NOUN_NT'support relation'
                        SENTENCE_NT'the verb to be supported on means the reversed support relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be supported on'
                            PROPER_NOUN_NT'reversed support relation'
                        SENTENCE_NT'the verb to incorporate means the incorporation relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to incorporate'
                            PROPER_NOUN_NT'incorporation relation'
                        SENTENCE_NT'the verb to be part of means the reversed incorporation relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be part of'
                            PROPER_NOUN_NT'reversed incorporation relation'
                        SENTENCE_NT'the verb to be a part of means the reversed incorporation relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be a part of'
                            PROPER_NOUN_NT'reversed incorporation relation'
                        SENTENCE_NT'the verb to be parts of means the reversed incorporation relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be parts of'
                            PROPER_NOUN_NT'reversed incorporation relation'
                        SENTENCE_NT'the verb to enclose means the enclosure relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to enclose'
                            PROPER_NOUN_NT'enclosure relation'
                        SENTENCE_NT'the verb to carry means the carrying relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to carry'
                            PROPER_NOUN_NT'carrying relation'
                        SENTENCE_NT'the verb to hold means the holding relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to hold'
                            PROPER_NOUN_NT'holding relation'
                        SENTENCE_NT'the verb to wear means the wearing relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to wear'
                            PROPER_NOUN_NT'wearing relation'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        SENTENCE_NT'the verb to be able to see means the visibility relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be able to see'
                            PROPER_NOUN_NT'visibility relation'
                        SENTENCE_NT'the verb to be able to touch means the touchability relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to be able to touch'
                            PROPER_NOUN_NT'touchability relation'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        SENTENCE_NT'the verb to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing ) means the concealment relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to conceal ( he conceals , they conceal , he concealed , it is concealed , he is concealing )'
                            PROPER_NOUN_NT'concealment relation'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'definition'
                    HEADING_NT'chapter 2 - kinds for the physical world' (level 4)
                        HEADING_NT'section 1 - kind definitions' (level 5)
                            SENTENCE_NT'a room is a kind'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'room'
                                KIND_NT'kind'
                            SENTENCE_NT'a thing is a kind'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'thing'
                                KIND_NT'kind'
                            SENTENCE_NT'a direction is a kind'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'direction'
                                KIND_NT'kind'
                            SENTENCE_NT'a door is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'door'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'a container is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'container'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'a supporter is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'supporter'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'a backdrop is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'backdrop'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'the plural of person is people'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'person'
                                PROPER_NOUN_NT'people'
                            SENTENCE_NT'the plural of person is persons'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'person'
                                PROPER_NOUN_NT'persons'
                            SENTENCE_NT'a person is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'person'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'a region is a kind'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'region'
                                KIND_NT'kind'
                        HEADING_NT'section 2 - rooms' (level 5)
                            SENTENCE_NT'the specification of room is Represents geographical locations, both indoor
                            and outdoor, which are not necessarily areas in a building. A player in one
                            room is mostly unable to sense, or interact with, anything in a different room.
                            Rooms are arranged in a map.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of room'
                                    COMMON_NOUN_NT'room'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents geographical locations, both indoor
                                and outdoor, which are not necessarily areas in a building. A player in one
                                room is mostly unable to sense, or interact with, anything in a different room.
                                Rooms are arranged in a map.'
                            SENTENCE_NT'a room can be privately-named or publicly-named'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a room'
                                PROPER_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'privately-named'
                                        PROPER_NOUN_NT'publicly-named'
                            SENTENCE_NT'a room is usually publicly-named'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'room'
                                ADJECTIVE_NT'publicly-named'
                            SENTENCE_NT'a room can be lighted or dark'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a room'
                                PROPER_NOUN_NT'lighted or dark'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'lighted'
                                        PROPER_NOUN_NT'dark'
                            SENTENCE_NT'a room is usually lighted'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'room'
                                ADJECTIVE_NT'lighted'
                            SENTENCE_NT'a room can be visited or unvisited'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a room'
                                PROPER_NOUN_NT'visited or unvisited'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'visited'
                                        PROPER_NOUN_NT'unvisited'
                            SENTENCE_NT'a room is usually unvisited'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'room'
                                ADJECTIVE_NT'unvisited'
                            SENTENCE_NT'a room has a text called description'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'room'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'text'
                                        PROPER_NOUN_NT'description'
                            SENTENCE_NT'a room has an object called map region'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'room'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'object'
                                        PROPER_NOUN_NT'map region'
                            SENTENCE_NT'the map region of a room is usually nothing'
                                AVERB_NT'is usually'
                                X_OF_Y_NT'map region of a room'
                                    COMMON_NOUN_NT'room'
                                    PROPER_NOUN_NT'map region'
                                PROPER_NOUN_NT'nothing'
                            SENTENCE_NT'the verb to be adjacent to means the reversed adjacency relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be adjacent to'
                                PROPER_NOUN_NT'reversed adjacency relation'
                            ROUTINE_NT'definition'
                            SENTENCE_NT'the verb to be regionally in means the reversed regional-containment relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be regionally in'
                                PROPER_NOUN_NT'reversed regional-containment relation'
                            SENTENCE_NT'the specification of region is Represents a broader area than a single
                            room, and allows rules to apply to a whole geographical territory. Each
                            region can contain many rooms, and regions can even be inside each other,
                            though they cannot otherwise overlap. For instance, the room Place d'Italie
                            might be inside the region 13th Arrondissement, which in turn is inside
                            the region Paris. Regions are useful mainly when the world is a large one,
                            and are optional.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of region'
                                    COMMON_NOUN_NT'region'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a broader area than a single
                                room, and allows rules to apply to a whole geographical territory. Each
                                region can contain many rooms, and regions can even be inside each other,
                                though they cannot otherwise overlap. For instance, the room Place d'Italie
                                might be inside the region 13th Arrondissement, which in turn is inside
                                the region Paris. Regions are useful mainly when the world is a large one,
                                and are optional.'
                            SENTENCE_NT'a region can be privately-named or publicly-named'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a region'
                                PROPER_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'privately-named'
                                        PROPER_NOUN_NT'publicly-named'
                            SENTENCE_NT'a region is usually publicly-named'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'region'
                                ADJECTIVE_NT'publicly-named'
                        HEADING_NT'section 3 - things' (level 5)
                            SENTENCE_NT'the specification of thing is Represents anything interactive in the model
                            world that is not a room. People, pieces of scenery, furniture, doors and
                            mislaid umbrellas might all be examples, and so might more surprising things
                            like the sound of birdsong or a shaft of sunlight.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of thing'
                                    COMMON_NOUN_NT'thing'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents anything interactive in the model
                                world that is not a room. People, pieces of scenery, furniture, doors and
                                mislaid umbrellas might all be examples, and so might more surprising things
                                like the sound of birdsong or a shaft of sunlight.'
                            SENTENCE_NT'a thing can be lit or unlit'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'lit or unlit'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'lit'
                                        PROPER_NOUN_NT'unlit'
                            SENTENCE_NT'a thing is usually unlit'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'unlit'
                            SENTENCE_NT'a thing can be edible or inedible'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'edible or inedible'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'edible'
                                        PROPER_NOUN_NT'inedible'
                            SENTENCE_NT'a thing is usually inedible'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'inedible'
                            SENTENCE_NT'a thing can be fixed in place or portable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'fixed in place or portable'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'fixed in place'
                                        PROPER_NOUN_NT'portable'
                            SENTENCE_NT'a thing is usually portable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'portable'
                            SENTENCE_NT'a thing can be scenery'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'scenery'
                                    PROPER_NOUN_NT'scenery'
                            SENTENCE_NT'a thing can be wearable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'wearable'
                                    PROPER_NOUN_NT'wearable'
                            SENTENCE_NT'a thing can be pushable between rooms'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'pushable between rooms'
                                    PROPER_NOUN_NT'pushable between rooms'
                            SENTENCE_NT'a thing can be handled'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'handled'
                                    PROPER_NOUN_NT'handled'
                            SENTENCE_NT'a thing can be privately-named or publicly-named'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'privately-named'
                                        PROPER_NOUN_NT'publicly-named'
                            SENTENCE_NT'a thing is usually publicly-named'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'publicly-named'
                            SENTENCE_NT'a thing can be undescribed or described'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'undescribed or described'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'undescribed'
                                        PROPER_NOUN_NT'described'
                            SENTENCE_NT'a thing is usually described'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'described'
                            SENTENCE_NT'a thing can be marked for listing or unmarked for listing'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'marked for listing or unmarked for listing'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'marked for listing'
                                        PROPER_NOUN_NT'unmarked for listing'
                            SENTENCE_NT'a thing is usually unmarked for listing'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'unmarked for listing'
                            SENTENCE_NT'a thing can be mentioned or unmentioned'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a thing'
                                PROPER_NOUN_NT'mentioned or unmentioned'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'mentioned'
                                        PROPER_NOUN_NT'unmentioned'
                            SENTENCE_NT'a thing is usually mentioned'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'thing'
                                ADJECTIVE_NT'mentioned'
                            SENTENCE_NT'a thing has a text called a description'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'thing'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'text'
                                        PROPER_NOUN_NT'description'
                            SENTENCE_NT'a thing has a text called an initial appearance'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'thing'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'text'
                                        PROPER_NOUN_NT'initial appearance'
                            SENTENCE_NT'scenery is usually fixed in place'
                                AVERB_NT'is usually'
                                ADJECTIVE_NT'scenery'
                                ADJECTIVE_NT'fixed in place'
                        HEADING_NT'section 4 - directions' (level 5)
                            SENTENCE_NT'the specification of direction is Represents a direction of movement, such
                            as northeast or down. They always occur in opposite, matched pairs: northeast
                            and southwest, for instance; down and up.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of direction'
                                    COMMON_NOUN_NT'direction'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a direction of movement, such
                                as northeast or down. They always occur in opposite, matched pairs: northeast
                                and southwest, for instance; down and up.'
                            SENTENCE_NT'a direction can be privately-named or publicly-named'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a direction'
                                PROPER_NOUN_NT'privately-named or publicly-named'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'privately-named'
                                        PROPER_NOUN_NT'publicly-named'
                            SENTENCE_NT'a direction is usually publicly-named'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'direction'
                                ADJECTIVE_NT'publicly-named'
                            SENTENCE_NT'a direction can be marked for listing or unmarked for listing'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a direction'
                                PROPER_NOUN_NT'marked for listing or unmarked for listing'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'marked for listing'
                                        PROPER_NOUN_NT'unmarked for listing'
                            SENTENCE_NT'a direction is usually unmarked for listing'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'direction'
                                ADJECTIVE_NT'unmarked for listing'
                            SENTENCE_NT'a direction can be scenery'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a direction'
                                PROPER_NOUN_NT'scenery'
                                    PROPER_NOUN_NT'scenery'
                            SENTENCE_NT'a direction is always scenery'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'direction'
                                ADJECTIVE_NT'scenery'
                            SENTENCE_NT'a direction has a direction called an opposite'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'direction'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'direction'
                                        PROPER_NOUN_NT'opposite'
                            SENTENCE_NT'the north is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'north'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the northeast is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'northeast'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the northwest is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'northwest'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the south is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'south'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the southeast is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'southeast'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the southwest is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'southwest'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the east is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'east'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the west is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'west'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the up is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'up'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the down is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'down'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the inside is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'inside'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the outside is a direction'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'outside'
                                COMMON_NOUN_NT'direction'
                            SENTENCE_NT'the north has opposite south'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'north'
                                PROPERTY_LIST_NT'opposite south'
                            SENTENCE_NT'understand "n" as north'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"n"'
                                PROPER_NOUN_NT'north'
                            SENTENCE_NT'the northeast has opposite southwest'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'northeast'
                                PROPERTY_LIST_NT'opposite southwest'
                            SENTENCE_NT'understand "ne" as northeast'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"ne"'
                                PROPER_NOUN_NT'northeast'
                            SENTENCE_NT'the northwest has opposite southeast'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'northwest'
                                PROPERTY_LIST_NT'opposite southeast'
                            SENTENCE_NT'understand "nw" as northwest'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"nw"'
                                PROPER_NOUN_NT'northwest'
                            SENTENCE_NT'the south has opposite north'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'south'
                                PROPERTY_LIST_NT'opposite north'
                            SENTENCE_NT'understand "s" as south'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"s"'
                                PROPER_NOUN_NT'south'
                            SENTENCE_NT'the southeast has opposite northwest'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'southeast'
                                PROPERTY_LIST_NT'opposite northwest'
                            SENTENCE_NT'understand "se" as southeast'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"se"'
                                PROPER_NOUN_NT'southeast'
                            SENTENCE_NT'the southwest has opposite northeast'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'southwest'
                                PROPERTY_LIST_NT'opposite northeast'
                            SENTENCE_NT'understand "sw" as southwest'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"sw"'
                                PROPER_NOUN_NT'southwest'
                            SENTENCE_NT'the east has opposite west'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'east'
                                PROPERTY_LIST_NT'opposite west'
                            SENTENCE_NT'understand "e" as east'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"e"'
                                PROPER_NOUN_NT'east'
                            SENTENCE_NT'the west has opposite east'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'west'
                                PROPERTY_LIST_NT'opposite east'
                            SENTENCE_NT'understand "w" as west'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"w"'
                                PROPER_NOUN_NT'west'
                            SENTENCE_NT'up has opposite down'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'up'
                                PROPERTY_LIST_NT'opposite down'
                            SENTENCE_NT'understand "u" as up'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"u"'
                                PROPER_NOUN_NT'up'
                            SENTENCE_NT'down has opposite up'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'down'
                                PROPERTY_LIST_NT'opposite up'
                            SENTENCE_NT'understand "d" as down'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"d"'
                                PROPER_NOUN_NT'down'
                            SENTENCE_NT'inside has opposite outside'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'inside'
                                PROPERTY_LIST_NT'opposite outside'
                            SENTENCE_NT'understand "in" as inside'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"in"'
                                PROPER_NOUN_NT'inside'
                            SENTENCE_NT'outside has opposite inside'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'outside'
                                PROPERTY_LIST_NT'opposite inside'
                            SENTENCE_NT'understand "out" as outside'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"out"'
                                PROPER_NOUN_NT'outside'
                            SENTENCE_NT'the inside object translates into i6 as in_obj'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'inside object'
                                PROPER_NOUN_NT'in_obj'
                            SENTENCE_NT'the outside object translates into i6 as out_obj'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'outside object'
                                PROPER_NOUN_NT'out_obj'
                            SENTENCE_NT'the verb to be above means the reversed mapping up relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be above'
                                PROPER_NOUN_NT'reversed mapping up relation'
                            SENTENCE_NT'the verb to be mapped above means the reversed mapping up relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be mapped above'
                                PROPER_NOUN_NT'reversed mapping up relation'
                            SENTENCE_NT'the verb to be below means the reversed mapping down relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be below'
                                PROPER_NOUN_NT'reversed mapping down relation'
                            SENTENCE_NT'the verb to be mapped below means the reversed mapping down relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be mapped below'
                                PROPER_NOUN_NT'reversed mapping down relation'
                        HEADING_NT'section 5 - doors' (level 5)
                            SENTENCE_NT'the specification of door is Represents a conduit joining two rooms, most
                            often a door or gate but sometimes a plank bridge, a slide or a hatchway.
                            Usually visible and operable from both sides (for instance if you write
                            'The blue door is east of the Ballroom and west of the Garden.'), but
                            sometimes only one-way (for instance if you write 'East of the Ballroom is
                            the long slide. Through the long slide is the cellar.').'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of door'
                                    COMMON_NOUN_NT'door'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a conduit joining two rooms, most
                                often a door or gate but sometimes a plank bridge, a slide or a hatchway.
                                Usually visible and operable from both sides (for instance if you write
                                'The blue door is east of the Ballroom and west of the Garden.'), but
                                sometimes only one-way (for instance if you write 'East of the Ballroom is
                                the long slide. Through the long slide is the cellar.').'
                            SENTENCE_NT'a door is always fixed in place'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'fixed in place'
                            SENTENCE_NT'a door is never pushable between rooms'
                                AVERB_NT'is never'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'pushable between rooms'
                            SENTENCE_NT'a door has an object called other side'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'door'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'object'
                                        PROPER_NOUN_NT'other side'
                            SENTENCE_NT'the other side property translates into i6 as door_to'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'other side property'
                                PROPER_NOUN_NT'door_to'
                            SENTENCE_NT'leading-through relates one room ( called the other side ) to various doors'
                                AVERB_NT'relates'
                                PROPER_NOUN_NT'leading-through'
                                PROPER_NOUN_NT'one room ( called the other side )'
                                PROPER_NOUN_NT'various doors'
                            SENTENCE_NT'the verb to be through means the leading-through relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to be through'
                                PROPER_NOUN_NT'leading-through relation'
                        HEADING_NT'section 6 - containers' (level 5)
                            SENTENCE_NT'the specification of container is Represents something into which portable
                            things can be put, such as a teachest or a handbag. Something with a really
                            large immobile interior, such as the Albert Hall, had better be a room
                            instead.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of container'
                                    COMMON_NOUN_NT'container'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents something into which portable
                                things can be put, such as a teachest or a handbag. Something with a really
                                large immobile interior, such as the Albert Hall, had better be a room
                                instead.'
                            SENTENCE_NT'a container can be enterable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'enterable'
                                    PROPER_NOUN_NT'enterable'
                            SENTENCE_NT'a container can be transparent or opaque'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'transparent or opaque'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'transparent'
                                        PROPER_NOUN_NT'opaque'
                            SENTENCE_NT'a container is usually opaque'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'container'
                                ADJECTIVE_NT'opaque'
                            SENTENCE_NT'a container has a number called carrying capacity'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'container'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'number'
                                        PROPER_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a container is usually 100'
                                AVERB_NT'is usually'
                                X_OF_Y_NT'carrying capacity of a container'
                                    COMMON_NOUN_NT'container'
                                    PROPER_NOUN_NT'carrying capacity'
                                PROPER_NOUN_NT'100'
                        HEADING_NT'section 7 - supporters' (level 5)
                            SENTENCE_NT'the specification of supporter is Represents a surface on which things can be
                            placed, such as a table.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of supporter'
                                    COMMON_NOUN_NT'supporter'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a surface on which things can be
                                placed, such as a table.'
                            SENTENCE_NT'a supporter can be enterable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a supporter'
                                PROPER_NOUN_NT'enterable'
                                    PROPER_NOUN_NT'enterable'
                            SENTENCE_NT'a supporter has a number called carrying capacity'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'supporter'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'number'
                                        PROPER_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a supporter is usually 100'
                                AVERB_NT'is usually'
                                X_OF_Y_NT'carrying capacity of a supporter'
                                    COMMON_NOUN_NT'supporter'
                                    PROPER_NOUN_NT'carrying capacity'
                                PROPER_NOUN_NT'100'
                            SENTENCE_NT'a supporter is usually fixed in place'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'supporter'
                                ADJECTIVE_NT'fixed in place'
                            SENTENCE_NT'a supporter can be transparent'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a supporter'
                                PROPER_NOUN_NT'transparent'
                                    PROPER_NOUN_NT'transparent'
                            SENTENCE_NT'a supporter is always transparent'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'supporter'
                                ADJECTIVE_NT'transparent'
                        HEADING_NT'section 8 - openability' (level 5)
                            SENTENCE_NT'a door can be open or closed'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a door'
                                PROPER_NOUN_NT'open or closed'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'open'
                                        PROPER_NOUN_NT'closed'
                            SENTENCE_NT'a door is usually closed'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'closed'
                            SENTENCE_NT'a door can be openable or unopenable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a door'
                                PROPER_NOUN_NT'openable or unopenable'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'openable'
                                        PROPER_NOUN_NT'unopenable'
                            SENTENCE_NT'a door is usually openable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'openable'
                            SENTENCE_NT'a container can be open or closed'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'open or closed'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'open'
                                        PROPER_NOUN_NT'closed'
                            SENTENCE_NT'a container is usually open'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'container'
                                ADJECTIVE_NT'open'
                            SENTENCE_NT'a container can be openable or unopenable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'openable or unopenable'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'openable'
                                        PROPER_NOUN_NT'unopenable'
                            SENTENCE_NT'a container is usually unopenable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'container'
                                ADJECTIVE_NT'unopenable'
                        HEADING_NT'section 9 - lockability' (level 5)
                            SENTENCE_NT'a door can be lockable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a door'
                                PROPER_NOUN_NT'lockable'
                                    PROPER_NOUN_NT'lockable'
                            SENTENCE_NT'a door is usually not lockable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'not lockable'
                            SENTENCE_NT'a door can be locked or unlocked'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a door'
                                PROPER_NOUN_NT'locked or unlocked'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'locked'
                                        PROPER_NOUN_NT'unlocked'
                            SENTENCE_NT'a door is usually unlocked'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'door'
                                ADJECTIVE_NT'unlocked'
                            SENTENCE_NT'a door has an object called a matching key'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'door'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'object'
                                        PROPER_NOUN_NT'matching key'
                            SENTENCE_NT'a locked door is usually lockable'
                                AVERB_NT'is usually'
                                WITH_NT'locked door'
                                    COMMON_NOUN_NT'locked door'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'lockable'
                            SENTENCE_NT'a locked door is usually closed'
                                AVERB_NT'is usually'
                                WITH_NT'locked door'
                                    COMMON_NOUN_NT'locked door'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'closed'
                            SENTENCE_NT'a lockable door is usually openable'
                                AVERB_NT'is usually'
                                WITH_NT'lockable door'
                                    COMMON_NOUN_NT'lockable door'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'openable'
                            SENTENCE_NT'a container can be lockable'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'lockable'
                                    PROPER_NOUN_NT'lockable'
                            SENTENCE_NT'a container is usually not lockable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'container'
                                ADJECTIVE_NT'not lockable'
                            SENTENCE_NT'a container can be locked or unlocked'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a container'
                                PROPER_NOUN_NT'locked or unlocked'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'locked'
                                        PROPER_NOUN_NT'unlocked'
                            SENTENCE_NT'a container is usually unlocked'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'container'
                                ADJECTIVE_NT'unlocked'
                            SENTENCE_NT'a container has an object called a matching key'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'container'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'object'
                                        PROPER_NOUN_NT'matching key'
                            SENTENCE_NT'a locked container is usually lockable'
                                AVERB_NT'is usually'
                                WITH_NT'locked container'
                                    COMMON_NOUN_NT'locked container'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'lockable'
                            SENTENCE_NT'a locked container is usually closed'
                                AVERB_NT'is usually'
                                WITH_NT'locked container'
                                    COMMON_NOUN_NT'locked container'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'closed'
                            SENTENCE_NT'a lockable container is usually openable'
                                AVERB_NT'is usually'
                                WITH_NT'lockable container'
                                    COMMON_NOUN_NT'lockable container'
                                    ADJECTIVE_NT
                                ADJECTIVE_NT'openable'
                            SENTENCE_NT'lock-fitting relates one thing ( called the matching key ) to various things'
                                AVERB_NT'relates'
                                PROPER_NOUN_NT'lock-fitting'
                                PROPER_NOUN_NT'one thing ( called the matching key )'
                                PROPER_NOUN_NT'various things'
                            SENTENCE_NT'the verb to unlock means the lock-fitting relation'
                                AVERB_NT'means'
                                PROPER_NOUN_NT'to unlock'
                                PROPER_NOUN_NT'lock-fitting relation'
                        HEADING_NT'section 10 - backdrops' (level 5)
                            SENTENCE_NT'the specification of backdrop is Represents an aspect of the landscape
                            or architecture which extends across more than one room: for instance,
                            a stream, the sky or a long carpet.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of backdrop'
                                    COMMON_NOUN_NT'backdrop'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents an aspect of the landscape
                                or architecture which extends across more than one room: for instance,
                                a stream, the sky or a long carpet.'
                            SENTENCE_NT'a backdrop is usually scenery'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'backdrop'
                                ADJECTIVE_NT'scenery'
                            SENTENCE_NT'a backdrop is always fixed in place'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'backdrop'
                                ADJECTIVE_NT'fixed in place'
                            SENTENCE_NT'a backdrop is never pushable between rooms'
                                AVERB_NT'is never'
                                COMMON_NOUN_NT'backdrop'
                                ADJECTIVE_NT'pushable between rooms'
                        HEADING_NT'section 11 - people' (level 5)
                            SENTENCE_NT'the specification of person is Despite the name, not necessarily a human
                            being, but anything animate enough to envisage having a conversation with, or
                            bartering with.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of person'
                                    COMMON_NOUN_NT'person'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Despite the name, not necessarily a human
                                being, but anything animate enough to envisage having a conversation with, or
                                bartering with.'
                            SENTENCE_NT'a person can be female or male'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a person'
                                PROPER_NOUN_NT'female or male'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'female'
                                        PROPER_NOUN_NT'male'
                            SENTENCE_NT'a person is usually male'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'person'
                                ADJECTIVE_NT'male'
                            SENTENCE_NT'a person can be neuter'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a person'
                                PROPER_NOUN_NT'neuter'
                                    PROPER_NOUN_NT'neuter'
                            SENTENCE_NT'a person is usually not neuter'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'person'
                                ADJECTIVE_NT'not neuter'
                            SENTENCE_NT'a person has a number called carrying capacity'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'person'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'number'
                                        PROPER_NOUN_NT'carrying capacity'
                            SENTENCE_NT'the carrying capacity of a person is usually 100'
                                AVERB_NT'is usually'
                                X_OF_Y_NT'carrying capacity of a person'
                                    COMMON_NOUN_NT'person'
                                    PROPER_NOUN_NT'carrying capacity'
                                PROPER_NOUN_NT'100'
                            SENTENCE_NT'a person can be transparent'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a person'
                                PROPER_NOUN_NT'transparent'
                                    PROPER_NOUN_NT'transparent'
                            SENTENCE_NT'a person is always transparent'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'person'
                                ADJECTIVE_NT'transparent'
                            SENTENCE_NT'the yourself is an undescribed person'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'yourself'
                                WITH_NT'undescribed person'
                                    COMMON_NOUN_NT'undescribed person'
                                    ADJECTIVE_NT
                            SENTENCE_NT'the yourself is proper-named'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'yourself'
                                ADJECTIVE_NT'proper-named'
                            SENTENCE_NT'the yourself is privately-named'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'yourself'
                                ADJECTIVE_NT'privately-named'
                            SENTENCE_NT'understand "your former self" or "my former self" or "former self" or "former" as yourself when the player is not yourself'
                                AVERB_NT'understand'
                                PROPER_NOUN_NT'"your former self" or "my former self" or "former self" or "former"'
                                PROPER_NOUN_NT'yourself when the player is not yourself'
                            SENTENCE_NT'the description of yourself is usually "As good-looking as ever."'
                                AVERB_NT'is usually'
                                X_OF_Y_NT'description of yourself'
                                    PROPER_NOUN_NT'yourself'
                                    PROPER_NOUN_NT'description'
                                PROPER_NOUN_NT'"As good-looking as ever."'
                            SENTENCE_NT'the yourself object translates into i6 as selfobj'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'yourself object'
                                PROPER_NOUN_NT'selfobj'
                        HEADING_NT'section 12 - animals , men and women' (level 5)
                            SENTENCE_NT'the plural of man is men'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'man'
                                PROPER_NOUN_NT'men'
                            SENTENCE_NT'the plural of woman is women'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'woman'
                                PROPER_NOUN_NT'women'
                            SENTENCE_NT'a man is a kind of person'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'man'
                                KIND_NT'kind of person'
                                    COMMON_NOUN_NT'person'
                            SENTENCE_NT'the specification of man is Represents a man or boy.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of man'
                                    COMMON_NOUN_NT'man'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a man or boy.'
                            SENTENCE_NT'a man is always male'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'man'
                                ADJECTIVE_NT'male'
                            SENTENCE_NT'a man is never neuter'
                                AVERB_NT'is never'
                                COMMON_NOUN_NT'man'
                                ADJECTIVE_NT'neuter'
                            SENTENCE_NT'a woman is a kind of person'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'woman'
                                KIND_NT'kind of person'
                                    COMMON_NOUN_NT'person'
                            SENTENCE_NT'the specification of woman is Represents a woman or girl.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of woman'
                                    COMMON_NOUN_NT'woman'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a woman or girl.'
                            SENTENCE_NT'a woman is always female'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'woman'
                                ADJECTIVE_NT'female'
                            SENTENCE_NT'a woman is never neuter'
                                AVERB_NT'is never'
                                COMMON_NOUN_NT'woman'
                                ADJECTIVE_NT'neuter'
                            SENTENCE_NT'an animal is a kind of person'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'animal'
                                KIND_NT'kind of person'
                                    COMMON_NOUN_NT'person'
                            SENTENCE_NT'the specification of animal is Represents an animal, or at any rate a
                            non-human living creature reasonably large and possible to interact with: a
                            giant Venus fly-trap might qualify, but not a patch of lichen.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of animal'
                                    COMMON_NOUN_NT'animal'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents an animal, or at any rate a
                                non-human living creature reasonably large and possible to interact with: a
                                giant Venus fly-trap might qualify, but not a patch of lichen.'
                        HEADING_NT'section 13 - devices' (level 5)
                            SENTENCE_NT'a device is a kind of thing'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'device'
                                KIND_NT'kind of thing'
                                    COMMON_NOUN_NT'thing'
                            SENTENCE_NT'a device can be switched on or switched off'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a device'
                                PROPER_NOUN_NT'switched on or switched off'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'switched on'
                                        PROPER_NOUN_NT'switched off'
                            SENTENCE_NT'a device is usually switched off'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'device'
                                ADJECTIVE_NT'switched off'
                            SENTENCE_NT'the specification of device is Represents a machine or contrivance of some
                            kind which can be switched on or off.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of device'
                                    COMMON_NOUN_NT'device'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a machine or contrivance of some
                                kind which can be switched on or off.'
                        HEADING_NT'section 14 - vehicles' (level 5)
                            SENTENCE_NT'a vehicle is a kind of container'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'vehicle'
                                KIND_NT'kind of container'
                                    COMMON_NOUN_NT'container'
                            SENTENCE_NT'the specification of vehicle is Represents a container large enough for
                            a person to enter, and which can then move between rooms at the driver's
                            instruction. (If a supporter is needed instead, try the extension
                            Rideable Vehicles by Graham Nelson.)'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of vehicle'
                                    COMMON_NOUN_NT'vehicle'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a container large enough for
                                a person to enter, and which can then move between rooms at the driver's
                                instruction. (If a supporter is needed instead, try the extension
                                Rideable Vehicles by Graham Nelson.)'
                            SENTENCE_NT'a vehicle is always enterable'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'vehicle'
                                ADJECTIVE_NT'enterable'
                            SENTENCE_NT'a vehicle is usually not portable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'vehicle'
                                ADJECTIVE_NT'not portable'
                        HEADING_NT'section 15 - player's holdall' (level 5)
                            SENTENCE_NT'a player's holdall is a kind of container'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'player's holdall'
                                KIND_NT'kind of container'
                                    COMMON_NOUN_NT'container'
                            SENTENCE_NT'the specification of player's holdall is Represents a container which the
                            player can carry around as a sort of rucksack, into which spare items are
                            automatically stowed away.'
                                AVERB_NT'is'
                                X_OF_Y_NT'specification of player's holdall'
                                    COMMON_NOUN_NT'player's holdall'
                                    PROPER_NOUN_NT'specification'
                                PROPER_NOUN_NT'Represents a container which the
                                player can carry around as a sort of rucksack, into which spare items are
                                automatically stowed away.'
                            SENTENCE_NT'a player's holdall is always portable'
                                AVERB_NT'is always'
                                COMMON_NOUN_NT'player's holdall'
                                ADJECTIVE_NT'portable'
                            SENTENCE_NT'a player's holdall is usually openable'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'player's holdall'
                                ADJECTIVE_NT'openable'
                        HEADING_NT'section 16 - inform 6 equivalents' (level 5)
                            SENTENCE_NT'the wearable property translates into i6 as clothing'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'wearable property'
                                PROPER_NOUN_NT'clothing'
                            SENTENCE_NT'the undescribed property translates into i6 as concealed'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'undescribed property'
                                PROPER_NOUN_NT'concealed'
                            SENTENCE_NT'the edible property translates into i6 as edible'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'edible property'
                                PROPER_NOUN_NT'edible'
                            SENTENCE_NT'the enterable property translates into i6 as enterable'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'enterable property'
                                PROPER_NOUN_NT'enterable'
                            SENTENCE_NT'the female property translates into i6 as female'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'female property'
                                PROPER_NOUN_NT'female'
                            SENTENCE_NT'the mentioned property translates into i6 as mentioned'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'mentioned property'
                                PROPER_NOUN_NT'mentioned'
                            SENTENCE_NT'the lit property translates into i6 as light'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'lit property'
                                PROPER_NOUN_NT'light'
                            SENTENCE_NT'the lighted property translates into i6 as light'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'lighted property'
                                PROPER_NOUN_NT'light'
                            SENTENCE_NT'the lockable property translates into i6 as lockable'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'lockable property'
                                PROPER_NOUN_NT'lockable'
                            SENTENCE_NT'the locked property translates into i6 as locked'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'locked property'
                                PROPER_NOUN_NT'locked'
                            SENTENCE_NT'the handled property translates into i6 as moved'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'handled property'
                                PROPER_NOUN_NT'moved'
                            SENTENCE_NT'the neuter property translates into i6 as neuter'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'neuter property'
                                PROPER_NOUN_NT'neuter'
                            SENTENCE_NT'the switched on property translates into i6 as on'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'switched on property'
                                PROPER_NOUN_NT'on'
                            SENTENCE_NT'the open property translates into i6 as open'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'open property'
                                PROPER_NOUN_NT'open'
                            SENTENCE_NT'the openable property translates into i6 as openable'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'openable property'
                                PROPER_NOUN_NT'openable'
                            SENTENCE_NT'the privately-named property translates into i6 as privately_named'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'privately-named property'
                                PROPER_NOUN_NT'privately_named'
                            SENTENCE_NT'the pushable between rooms property translates into i6 as pushable'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'pushable between rooms property'
                                PROPER_NOUN_NT'pushable'
                            SENTENCE_NT'the scenery property translates into i6 as scenery'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'scenery property'
                                PROPER_NOUN_NT'scenery'
                            SENTENCE_NT'the fixed in place property translates into i6 as static'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'fixed in place property'
                                PROPER_NOUN_NT'static'
                            SENTENCE_NT'the transparent property translates into i6 as transparent'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'transparent property'
                                PROPER_NOUN_NT'transparent'
                            SENTENCE_NT'the visited property translates into i6 as visited'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'visited property'
                                PROPER_NOUN_NT'visited'
                            SENTENCE_NT'the marked for listing property translates into i6 as workflag'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'marked for listing property'
                                PROPER_NOUN_NT'workflag'
                            SENTENCE_NT'the list grouping key property translates into i6 as list_together'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'list grouping key property'
                                PROPER_NOUN_NT'list_together'
                            SENTENCE_NT'the carrying capacity property translates into i6 as capacity'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'carrying capacity property'
                                PROPER_NOUN_NT'capacity'
                            SENTENCE_NT'the description property translates into i6 as description'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'description property'
                                PROPER_NOUN_NT'description'
                            SENTENCE_NT'the initial appearance property translates into i6 as initial'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'initial appearance property'
                                PROPER_NOUN_NT'initial'
                            SENTENCE_NT'the map region property translates into i6 as map_region'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'map region property'
                                PROPER_NOUN_NT'map_region'
                            SENTENCE_NT'the matching key property translates into i6 as with_key'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'matching key property'
                                PROPER_NOUN_NT'with_key'
                HEADING_NT'part three - variables and rulebooks' (level 3)
                    HEADING_NT'chapter 1 - variables' (level 4)
                        HEADING_NT'section 1 - situation' (level 5)
                            SENTENCE_NT'the player is a person that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'player'
                                COMMON_NOUN_NT'person that varies'
                            SENTENCE_NT'the player variable translates into i6 as player'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'player variable'
                                PROPER_NOUN_NT'player'
                            SENTENCE_NT'the location -- documented at var_location -- is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'location'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the score -- documented at var_score -- is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'score'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the last notified score is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'last notified score'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the maximum score is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'maximum score'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the turn count is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'turn count'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the time of day -- documented at var_time -- is a time that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'time of day'
                                COMMON_NOUN_NT'time that varies'
                            SENTENCE_NT'the darkness witnessed is a truth state that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'darkness witnessed'
                                COMMON_NOUN_NT'truth state that varies'
                            SENTENCE_NT'the location variable translates into i6 as real_location'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'location variable'
                                PROPER_NOUN_NT'real_location'
                            SENTENCE_NT'the score variable translates into i6 as score'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'score variable'
                                PROPER_NOUN_NT'score'
                            SENTENCE_NT'the last notified score variable translates into i6 as last_score'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'last notified score variable'
                                PROPER_NOUN_NT'last_score'
                            SENTENCE_NT'the maximum score variable translates into i6 as MAX_SCORE'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'maximum score variable'
                                PROPER_NOUN_NT'MAX_SCORE'
                            SENTENCE_NT'the turn count variable translates into i6 as turns'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'turn count variable'
                                PROPER_NOUN_NT'turns'
                            SENTENCE_NT'the time of day variable translates into i6 as the_time'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'time of day variable'
                                PROPER_NOUN_NT'the_time'
                        HEADING_NT'section 2 - current action' (level 5)
                            SENTENCE_NT'the noun -- documented at var_noun -- is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'noun'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the second noun is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'second noun'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the person asked -- documented at var_person_asked -- is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'person asked'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the reason the action failed -- documented at var_reason -- is an action name based rule producing nothing that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'reason the action failed'
                                COMMON_NOUN_NT'action name based rule producing nothing that varies'
                            SENTENCE_NT'the item described is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'item described'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the noun variable translates into i6 as noun'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'noun variable'
                                PROPER_NOUN_NT'noun'
                            SENTENCE_NT'the second noun variable translates into i6 as second'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'second noun variable'
                                PROPER_NOUN_NT'second'
                            SENTENCE_NT'the person asked variable translates into i6 as actor'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'person asked variable'
                                PROPER_NOUN_NT'actor'
                            SENTENCE_NT'the reason the action failed variable translates into i6 as reason_the_action_failed'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'reason the action failed variable'
                                PROPER_NOUN_NT'reason_the_action_failed'
                            SENTENCE_NT'the item described variable translates into i6 as self'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'item described variable'
                                PROPER_NOUN_NT'self'
                        HEADING_NT'section 3 - used when ruling on accessibility' (level 5)
                            SENTENCE_NT'the person reaching -- documented at var_person_reaching -- is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'person reaching'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the container in question is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'container in question'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the supporter in question is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'supporter in question'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the particular possession -- documented at var_particular -- is a thing that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'particular possession'
                                COMMON_NOUN_NT'thing that varies'
                            SENTENCE_NT'the person reaching variable translates into i6 as actor'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'person reaching variable'
                                PROPER_NOUN_NT'actor'
                            SENTENCE_NT'the container in question variable translates into i6 as parameter_object'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'container in question variable'
                                PROPER_NOUN_NT'parameter_object'
                            SENTENCE_NT'the supporter in question variable translates into i6 as parameter_object'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'supporter in question variable'
                                PROPER_NOUN_NT'parameter_object'
                            SENTENCE_NT'the particular possession variable translates into i6 as particular_possession'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'particular possession variable'
                                PROPER_NOUN_NT'particular_possession'
                        HEADING_NT'section 4 - used when understanding typed commands' (level 5)
                            SENTENCE_NT'the player's command -- documented at var_command -- is a snippet that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'player's command'
                                COMMON_NOUN_NT'snippet that varies'
                            SENTENCE_NT'the matched text is a snippet that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'matched text'
                                COMMON_NOUN_NT'snippet that varies'
                            SENTENCE_NT'the number understood -- documented at var_understood -- is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'number understood'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the real number understood -- documented at var_understood -- is a real number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'real number understood'
                                COMMON_NOUN_NT'real number that varies'
                            SENTENCE_NT'the time understood is a time that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'time understood'
                                COMMON_NOUN_NT'time that varies'
                            SENTENCE_NT'the topic understood is a snippet that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'topic understood'
                                COMMON_NOUN_NT'snippet that varies'
                            SENTENCE_NT'the truth state understood is a truth state that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'truth state understood'
                                COMMON_NOUN_NT'truth state that varies'
                            SENTENCE_NT'the current item from the multiple object list is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'current item from the multiple object list'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the player's command variable translates into i6 as players_command'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'player's command variable'
                                PROPER_NOUN_NT'players_command'
                            SENTENCE_NT'the matched text variable translates into i6 as matched_text'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'matched text variable'
                                PROPER_NOUN_NT'matched_text'
                            SENTENCE_NT'the topic understood variable translates into i6 as parsed_number'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'topic understood variable'
                                PROPER_NOUN_NT'parsed_number'
                            SENTENCE_NT'the current item from the multiple object list variable translates into i6 as multiple_object_item'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'current item from the multiple object list variable'
                                PROPER_NOUN_NT'multiple_object_item'
                        HEADING_NT'section 5 - presentation on screen' (level 5)
                            SENTENCE_NT'the command prompt -- documented at var_prompt -- is a text that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'command prompt'
                                COMMON_NOUN_NT'text that varies'
                            SENTENCE_NT'the command prompt is ">"'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'command prompt'
                                PROPER_NOUN_NT'">"'
                            SENTENCE_NT'the left hand status line -- documented at var_sl -- is a text that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'left hand status line'
                                COMMON_NOUN_NT'text that varies'
                            SENTENCE_NT'the right hand status line is a text that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'right hand status line'
                                COMMON_NOUN_NT'text that varies'
                            SENTENCE_NT'the left hand status line variable translates into i6 as left_hand_status_line'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'left hand status line variable'
                                PROPER_NOUN_NT'left_hand_status_line'
                            SENTENCE_NT'the right hand status line variable translates into i6 as right_hand_status_line'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'right hand status line variable'
                                PROPER_NOUN_NT'right_hand_status_line'
                            SENTENCE_NT'the listing group size is a number that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'listing group size'
                                COMMON_NOUN_NT'number that varies'
                            SENTENCE_NT'the listing group size variable translates into i6 as listing_size'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'listing group size variable'
                                PROPER_NOUN_NT'listing_size'
                        HEADING_NT'section 6 - language generation' (level 5)
                            SENTENCE_NT'the prior named object is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'prior named object'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the prior named object variable translates into i6 as prior_named_noun'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'prior named object variable'
                                PROPER_NOUN_NT'prior_named_noun'
                            SENTENCE_NT'an object has a text called list grouping key'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'object'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'text'
                                        PROPER_NOUN_NT'list grouping key'
                        HEADING_NT'section 7 - unindexed standard rules variables - unindexed' (level 5)
                            SENTENCE_NT'the story title , the story author , the story headline , the story genre and the story description are text variables'
                                AVERB_NT'are'
                                AND_NT','
                                    PROPER_NOUN_NT'story title'
                                    AND_NT','
                                        PROPER_NOUN_NT'story author'
                                        AND_NT','
                                            PROPER_NOUN_NT'story headline'
                                            AND_NT'and'
                                                PROPER_NOUN_NT'story genre'
                                                PROPER_NOUN_NT'story description'
                                COMMON_NOUN_NT'text variables'
                            SENTENCE_NT'the release number and the story creation year are number variables'
                                AVERB_NT'are'
                                AND_NT'and'
                                    PROPER_NOUN_NT'release number'
                                    PROPER_NOUN_NT'story creation year'
                                COMMON_NOUN_NT'number variables'
                            SENTENCE_NT'the release number is usually 1'
                                AVERB_NT'is usually'
                                PROPER_NOUN_NT'release number'
                                PROPER_NOUN_NT'1'
                            SENTENCE_NT'the story headline is usually "An Interactive Fiction"'
                                AVERB_NT'is usually'
                                PROPER_NOUN_NT'story headline'
                                PROPER_NOUN_NT'"An Interactive Fiction"'
                            SENTENCE_NT'the story genre is usually "Fiction"'
                                AVERB_NT'is usually'
                                PROPER_NOUN_NT'story genre'
                                PROPER_NOUN_NT'"Fiction"'
                            SENTENCE_NT'the story title variable translates into i6 as Story'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'story title variable'
                                PROPER_NOUN_NT'Story'
                        HEADING_NT'section sr2/6b - unindexed standard rules variables - unindexed ( for figures language element only )' (level 5)
                            SENTENCE_NT'figure of cover is the file of cover art ( The cover art. )'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'figure of cover'
                                PROPER_NOUN_NT'of cover art ( The cover art. )'
                        HEADING_NT'section 8 - unindexed standard rules variables - unindexed' (level 5)
                            SENTENCE_NT'the i6-nothing-constant is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'i6-nothing-constant'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the i6-nothing-constant variable translates into i6 as nothing'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'i6-nothing-constant variable'
                                PROPER_NOUN_NT'nothing'
                            SENTENCE_NT'the i6-varying-global is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'i6-varying-global'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the i6-varying-global variable translates into i6 as nothing'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'i6-varying-global variable'
                                PROPER_NOUN_NT'nothing'
                            SENTENCE_NT'the item-pushed-between-rooms is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'item-pushed-between-rooms'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the item-pushed-between-rooms variable translates into i6 as move_pushing'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'item-pushed-between-rooms variable'
                                PROPER_NOUN_NT'move_pushing'
                            SENTENCE_NT'the actor-location is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'actor-location'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the actor-location variable translates into i6 as actor_location'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'actor-location variable'
                                PROPER_NOUN_NT'actor_location'
                            SENTENCE_NT'the scene being changed is a scene that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'scene being changed'
                                COMMON_NOUN_NT'scene that varies'
                            SENTENCE_NT'the scene being changed variable translates into i6 as parameter_value'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'scene being changed variable'
                                PROPER_NOUN_NT'parameter_value'
                    HEADING_NT'chapter 2 - rulebooks' (level 4)
                        HEADING_NT'section 1 - the standard rulebooks' (level 5)
                            SENTENCE_NT'turn sequence rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'turn sequence rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'scene changing rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'scene changing rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'when play begins is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'when play begins'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'when play ends is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'when play ends'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'when scene begins is a scene based rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'when scene begins'
                                COMMON_NOUN_NT'scene based rulebook'
                            SENTENCE_NT'when scene ends is a scene based rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'when scene ends'
                                COMMON_NOUN_NT'scene based rulebook'
                            SENTENCE_NT'every turn rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'every turn rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'action-processing rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'action-processing rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'the action-processing rulebook has a person called the actor'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'person'
                                        PROPER_NOUN_NT'actor'
                            SENTENCE_NT'setting action variables is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'setting action variables'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'the specific action-processing rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'specific action-processing rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a truth state called action in world'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'truth state'
                                        PROPER_NOUN_NT'action in world'
                            SENTENCE_NT'the specific action-processing rulebook has a truth state called action keeping silent'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'truth state'
                                        PROPER_NOUN_NT'action keeping silent'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook called specific check rulebook'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'rulebook'
                                        PROPER_NOUN_NT'specific check rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook called specific carry out rulebook'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'rulebook'
                                        PROPER_NOUN_NT'specific carry out rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a rulebook called specific report rulebook'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'rulebook'
                                        PROPER_NOUN_NT'specific report rulebook'
                            SENTENCE_NT'the specific action-processing rulebook has a truth state called within the player's sight'
                                AVERB_NT'has'
                                PROPER_NOUN_NT'specific action-processing rulebook'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'truth state'
                                        PROPER_NOUN_NT'within the player's sight'
                            SENTENCE_NT'the player's action awareness rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'player's action awareness rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'accessibility rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'accessibility rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'reaching inside rules is an object-based rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'reaching inside rules'
                                COMMON_NOUN_NT'object-based rulebook'
                            SENTENCE_NT'reaching inside rules have outcomes allow access ( success ) and deny access ( failure )'
                                AVERB_NT'have'
                                PROPER_NOUN_NT'reaching inside rules'
                                PROPERTY_LIST_NT'and'
                                    PROPER_NOUN_NT'outcomes allow access ( success )'
                                    PROPER_NOUN_NT'deny access ( failure )'
                            SENTENCE_NT'reaching outside rules is an object-based rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'reaching outside rules'
                                COMMON_NOUN_NT'object-based rulebook'
                            SENTENCE_NT'reaching outside rules have outcomes allow access ( success ) and deny access ( failure )'
                                AVERB_NT'have'
                                PROPER_NOUN_NT'reaching outside rules'
                                PROPERTY_LIST_NT'and'
                                    PROPER_NOUN_NT'outcomes allow access ( success )'
                                    PROPER_NOUN_NT'deny access ( failure )'
                            SENTENCE_NT'visibility rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'visibility rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'visibility rules have outcomes there is sufficient light ( failure ) and there is insufficient light ( success )'
                                AVERB_NT'have'
                                PROPER_NOUN_NT'visibility rules'
                                PROPERTY_LIST_NT'and'
                                    PROPER_NOUN_NT'outcomes there is sufficient light ( failure )'
                                    PROPER_NOUN_NT'there is insufficient light ( success )'
                            SENTENCE_NT'persuasion rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'persuasion rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'persuasion rules have outcomes persuasion succeeds ( success ) and persuasion fails ( failure )'
                                AVERB_NT'have'
                                PROPER_NOUN_NT'persuasion rules'
                                PROPERTY_LIST_NT'and'
                                    PROPER_NOUN_NT'outcomes persuasion succeeds ( success )'
                                    PROPER_NOUN_NT'persuasion fails ( failure )'
                            SENTENCE_NT'unsuccessful attempt by is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'unsuccessful attempt by'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'before rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'before rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'instead rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'instead rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'check rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'check rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'carry out rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'carry out rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'after rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'after rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'report rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'report rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'the does the player mean rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'does the player mean rules'
                                COMMON_NOUN_NT'rulebook'
                            SENTENCE_NT'the does the player mean rules have outcomes it is very likely , it is likely , it is possible , it is unlikely and it is very unlikely'
                                AVERB_NT'have'
                                PROPER_NOUN_NT'does the player mean rules'
                                PROPERTY_LIST_NT','
                                    PROPER_NOUN_NT'outcomes it is very likely'
                                    AND_NT','
                                        PROPER_NOUN_NT'it is likely'
                                        AND_NT','
                                            PROPER_NOUN_NT'it is possible'
                                            AND_NT'and'
                                                PROPER_NOUN_NT'it is unlikely'
                                                PROPER_NOUN_NT'it is very unlikely'
                            SENTENCE_NT'the multiple action processing rules is a rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'multiple action processing rules'
                                COMMON_NOUN_NT'rulebook'
                        HEADING_NT'section 2 - the standard rules' (level 5)
                            SENTENCE_NT'the little-used do nothing rule translates into i6 as LITTLE_USED_DO_NOTHING_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'little-used do nothing rule'
                                PROPER_NOUN_NT'LITTLE_USED_DO_NOTHING_R'
                            SENTENCE_NT'the start in the correct scenes rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the start in the correct scenes rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the position player in model world rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the position player in model world rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            ROUTINE_NT'this is the declare everything initially unmentioned rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'repeat with item running through things'
                                            INVOCATION_NT'repeat with item running through things'
                                                NEW_LOCAL_CONTEXT_NT'item'
                                                    UNKNOWN_NT'item'
                                                RVALUE_CONTEXT_NT'things'
                                                    CONSTANT_NT'things'-description of things
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now the item is not mentioned'
                                                CONDITION_CONTEXT_NT'the item is not mentioned'
                            SENTENCE_NT'the declare everything initially unmentioned rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the declare everything initially unmentioned rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the update chronological records rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the update chronological records rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the seed random number generator rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the seed random number generator rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the virtual machine startup rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the virtual machine startup rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the initialise memory rule is listed first in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the initialise memory rule'
                                PROPER_NOUN_NT'first in the startup rulebook'
                            SENTENCE_NT'the virtual machine startup rule translates into i6 as VIRTUAL_MACHINE_STARTUP_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'virtual machine startup rule'
                                PROPER_NOUN_NT'VIRTUAL_MACHINE_STARTUP_R'
                            SENTENCE_NT'the initialise memory rule translates into i6 as INITIALISE_MEMORY_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'initialise memory rule'
                                PROPER_NOUN_NT'INITIALISE_MEMORY_R'
                            SENTENCE_NT'the seed random number generator rule translates into i6 as SEED_RANDOM_NUMBER_GENERATOR_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'seed random number generator rule'
                                PROPER_NOUN_NT'SEED_RANDOM_NUMBER_GENERATOR_R'
                            SENTENCE_NT'the update chronological records rule translates into i6 as UPDATE_CHRONOLOGICAL_RECORDS_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'update chronological records rule'
                                PROPER_NOUN_NT'UPDATE_CHRONOLOGICAL_RECORDS_R'
                            SENTENCE_NT'the position player in model world rule translates into i6 as POSITION_PLAYER_IN_MODEL_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'position player in model world rule'
                                PROPER_NOUN_NT'POSITION_PLAYER_IN_MODEL_R'
                            ROUTINE_NT'this is the start in the correct scenes rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules'
                                            RVALUE_CONTEXT_NT'scene changing rules'
                                                CONSTANT_NT'scene changing rules'-rulebook
                            SENTENCE_NT'the when play begins stage rule is listed in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the when play begins stage rule'
                                PROPER_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the fix baseline scoring rule is listed in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the fix baseline scoring rule'
                                PROPER_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the display banner rule is listed in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the display banner rule'
                                PROPER_NOUN_NT'in the startup rulebook'
                            SENTENCE_NT'the initial room description rule is listed in the startup rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the initial room description rule'
                                PROPER_NOUN_NT'in the startup rulebook'
                            ROUTINE_NT'this is the when play begins stage rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the when play begins rulebook'
                                        INVOCATION_NT'follow the when play begins rulebook'
                                            RVALUE_CONTEXT_NT'when play begins rulebook'
                                                CONSTANT_NT'when play begins rulebook'-rulebook
                            ROUTINE_NT'this is the fix baseline scoring rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now the last notified score is the score'
                                        CONDITION_CONTEXT_NT'the last notified score is the score'
                            ROUTINE_NT'this is the display banner rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[banner text]"'
                                        INVOCATION_LIST_SAY_NT'banner text'
                                            INVOCATION_NT'banner text'
                            ROUTINE_NT'this is the initial room description rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'try looking'
                                        INVOCATION_NT'try looking'
                                            RVALUE_CONTEXT_NT'looking'
                                                CONSTANT_NT'looking'-action
                            ROUTINE_NT'a first turn sequence rule ( this is the every turn stage rule )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the every turn rules'
                                        INVOCATION_NT'follow the every turn rules'
                                            RVALUE_CONTEXT_NT'every turn rules'
                                                CONSTANT_NT'every turn rules'-rulebook
                            ROUTINE_NT'a first turn sequence rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules'
                                            RVALUE_CONTEXT_NT'scene changing rules'
                                                CONSTANT_NT'scene changing rules'-rulebook
                            SENTENCE_NT'the generate action rule is listed first in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the generate action rule'
                                PROPER_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the declare everything initially unmentioned rule is listed first in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the declare everything initially unmentioned rule'
                                PROPER_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the parse command rule is listed first in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the parse command rule'
                                PROPER_NOUN_NT'first in the turn sequence rulebook'
                            SENTENCE_NT'the timed events rule is listed in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the timed events rule'
                                PROPER_NOUN_NT'in the turn sequence rulebook'
                            SENTENCE_NT'the advance time rule is listed in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the advance time rule'
                                PROPER_NOUN_NT'in the turn sequence rulebook'
                            SENTENCE_NT'the update chronological records rule is listed in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the update chronological records rule'
                                PROPER_NOUN_NT'in the turn sequence rulebook'
                            ROUTINE_NT'a last turn sequence rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the scene changing rules'
                                        INVOCATION_NT'follow the scene changing rules'
                                            RVALUE_CONTEXT_NT'scene changing rules'
                                                CONSTANT_NT'scene changing rules'-rulebook
                            SENTENCE_NT'the adjust light rule is listed last in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the adjust light rule'
                                PROPER_NOUN_NT'last in the turn sequence rulebook'
                            SENTENCE_NT'the note object acquisitions rule is listed last in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the note object acquisitions rule'
                                PROPER_NOUN_NT'last in the turn sequence rulebook'
                            SENTENCE_NT'the notify score changes rule is listed last in the turn sequence rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the notify score changes rule'
                                PROPER_NOUN_NT'last in the turn sequence rulebook'
                            ROUTINE_NT'this is the notify score changes rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the score is not the last notified score'
                                            INVOCATION_NT'if the score is not the last notified score'
                                                CONDITION_CONTEXT_NT'score is not the last notified score'
                                                    TEST_PROPOSITION_NT'score is not the last notified score'(test: [ NOT[ is('score', 'the last notified score') NOT] ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'issue score notification message'
                                                INVOCATION_NT'issue score notification message'
                                            INVOCATION_LIST_NT'now the last notified score is the score'
                                                CONDITION_CONTEXT_NT'the last notified score is the score'
                            SENTENCE_NT'the adjust light rule translates into i6 as ADJUST_LIGHT_R with "[It] [are] [if story tense is present tense]now [end if]pitch dark in
                            [if story tense is present tense]here[else]there[end if]!" ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'adjust light rule'
                                PROPER_NOUN_NT'ADJUST_LIGHT_R'
                                    PROPER_NOUN_NT'"[It] [are] [if story tense is present tense]now [end if]pitch dark in
                                    [if story tense is present tense]here[else]there[end if]!" ( a )'
                            SENTENCE_NT'the advance time rule translates into i6 as ADVANCE_TIME_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'advance time rule'
                                PROPER_NOUN_NT'ADVANCE_TIME_R'
                            SENTENCE_NT'the generate action rule translates into i6 as GENERATE_ACTION_R with "(considering the first sixteen objects only)[command clarification break]" ( a ) , "Nothing to do!" ( b )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'generate action rule'
                                PROPER_NOUN_NT'GENERATE_ACTION_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"(considering the first sixteen objects only)[command clarification break]" ( a )'
                                        PROPER_NOUN_NT'"Nothing to do!" ( b )'
                            SENTENCE_NT'the note object acquisitions rule translates into i6 as NOTE_OBJECT_ACQUISITIONS_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'note object acquisitions rule'
                                PROPER_NOUN_NT'NOTE_OBJECT_ACQUISITIONS_R'
                            SENTENCE_NT'the parse command rule translates into i6 as PARSE_COMMAND_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'parse command rule'
                                PROPER_NOUN_NT'PARSE_COMMAND_R'
                            SENTENCE_NT'the timed events rule translates into i6 as TIMED_EVENTS_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'timed events rule'
                                PROPER_NOUN_NT'TIMED_EVENTS_R'
                            SENTENCE_NT'the when play ends stage rule is listed first in the shutdown rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the when play ends stage rule'
                                PROPER_NOUN_NT'first in the shutdown rulebook'
                            SENTENCE_NT'the resurrect player if asked rule is listed last in the shutdown rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the resurrect player if asked rule'
                                PROPER_NOUN_NT'last in the shutdown rulebook'
                            SENTENCE_NT'the print player's obituary rule is listed last in the shutdown rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the print player's obituary rule'
                                PROPER_NOUN_NT'last in the shutdown rulebook'
                            SENTENCE_NT'the ask the final question rule is listed last in the shutdown rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the ask the final question rule'
                                PROPER_NOUN_NT'last in the shutdown rulebook'
                            ROUTINE_NT'this is the when play ends stage rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the when play ends rulebook'
                                        INVOCATION_NT'follow the when play ends rulebook'
                                            RVALUE_CONTEXT_NT'when play ends rulebook'
                                                CONSTANT_NT'when play ends rulebook'-rulebook
                            ROUTINE_NT'this is the print player's obituary rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the printing the player's obituary activity'
                                        INVOCATION_NT'carry out the printing the player's obituary activity'
                                            RVALUE_CONTEXT_NT'printing the player's obituary'
                                                CONSTANT_NT'printing the player's obituary'-activity
                            SENTENCE_NT'the resurrect player if asked rule translates into i6 as RESURRECT_PLAYER_IF_ASKED_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'resurrect player if asked rule'
                                PROPER_NOUN_NT'RESURRECT_PLAYER_IF_ASKED_R'
                            SENTENCE_NT'the ask the final question rule translates into i6 as ASK_FINAL_QUESTION_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'ask the final question rule'
                                PROPER_NOUN_NT'ASK_FINAL_QUESTION_R'
                            SENTENCE_NT'the scene change machinery rule is listed last in the scene changing rulebook'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the scene change machinery rule'
                                PROPER_NOUN_NT'last in the scene changing rulebook'
                            SENTENCE_NT'the scene change machinery rule translates into i6 as SCENE_CHANGE_MACHINERY_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'scene change machinery rule'
                                PROPER_NOUN_NT'SCENE_CHANGE_MACHINERY_R'
                        HEADING_NT'section 3 - the entire game scene' (level 5)
                            SENTENCE_NT'the entire game is a scene'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'entire game'
                                COMMON_NOUN_NT'scene'
                            SENTENCE_NT'the entire game begins when the story has not ended'
                                AVERB_NT'begins when'
                                PROPER_NOUN_NT'the entire game'
                                PROPER_NOUN_NT'the story has not ended'
                            SENTENCE_NT'the entire game ends when the story has ended'
                                AVERB_NT'ends when'
                                PROPER_NOUN_NT'the entire game'
                                PROPER_NOUN_NT'the story has ended'
                        HEADING_NT'section 4 - action processing' (level 5)
                            SENTENCE_NT'the before stage rule is listed first in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the before stage rule'
                                PROPER_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the set pronouns from items from multiple object lists rule is listed first in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the set pronouns from items from multiple object lists rule'
                                PROPER_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the announce items from multiple object lists rule is listed first in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the announce items from multiple object lists rule'
                                PROPER_NOUN_NT'first in the action-processing rules'
                            SENTENCE_NT'the basic visibility rule is listed in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the basic visibility rule'
                                PROPER_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the basic accessibility rule is listed in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the basic accessibility rule'
                                PROPER_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the carrying requirements rule is listed in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the carrying requirements rule'
                                PROPER_NOUN_NT'in the action-processing rules'
                            SENTENCE_NT'the instead stage rule is listed last in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the instead stage rule'
                                PROPER_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the requested actions require persuasion rule is listed last in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the requested actions require persuasion rule'
                                PROPER_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the carry out requested actions rule is listed last in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the carry out requested actions rule'
                                PROPER_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the descend to specific action-processing rule is listed last in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the descend to specific action-processing rule'
                                PROPER_NOUN_NT'last in the action-processing rules'
                            SENTENCE_NT'the end action-processing in success rule is listed last in the action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the end action-processing in success rule'
                                PROPER_NOUN_NT'last in the action-processing rules'
                            ROUTINE_NT'this is the set pronouns from items from multiple object lists rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the current item from the multiple object list is not nothing'
                                            INVOCATION_NT'if the current item from the multiple object list is not nothing'
                                                CONDITION_CONTEXT_NT'current item from the multiple object list is not nothing'
                                                    TEST_PROPOSITION_NT'current item from the multiple object list is not nothing'(test: [ NOT[ is('current item from the multiple object list', 'nothing') NOT] ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'set pronouns from the current item from the multiple object list'
                                                INVOCATION_NT'set pronouns from the current item from the multiple object list'
                                                    RVALUE_CONTEXT_NT'current item from the multiple object list'
                                                        NONLOCAL_VARIABLE_NT'current item from the multiple object list'('current item from the multiple object list'(var)[object])
                            ROUTINE_NT'this is the announce items from multiple object lists rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the current item from the multiple object list is not nothing'
                                            INVOCATION_NT'if the current item from the multiple object list is not nothing'
                                                CONDITION_CONTEXT_NT'current item from the multiple object list is not nothing'
                                                    TEST_PROPOSITION_NT'current item from the multiple object list is not nothing'(test: [ NOT[ is('current item from the multiple object list', 'nothing') NOT] ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[current item from the multiple object list]: [run paragraph on]" ( a )'
                                                INVOCATION_LIST_SAY_NT'"[current item from the multiple object list]: [run paragraph on]" ( a )'
                                                    INVOCATION_NT'"[current item from the multiple object list]: [run paragraph on]" ( a )'
                                                        RVALUE_CONTEXT_NT'"[current item from the multiple object list]: [run paragraph on]" ( a )'
                                                            CONSTANT_NT'"[current item from the multiple object list]: [run paragraph on]" ( a )'-text
                            ROUTINE_NT'this is the before stage rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'abide by the before rules'
                                        INVOCATION_NT'abide by the before rules'
                                            RVALUE_CONTEXT_NT'before rules'
                                                CONSTANT_NT'before rules'-rulebook
                            ROUTINE_NT'this is the instead stage rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'abide by the instead rules'
                                        INVOCATION_NT'abide by the instead rules'
                                            RVALUE_CONTEXT_NT'instead rules'
                                                CONSTANT_NT'instead rules'-rulebook
                            ROUTINE_NT'this is the end action-processing in success rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'rule succeeds'
                                        INVOCATION_NT'rule succeeds'
                            SENTENCE_NT'the basic accessibility rule translates into i6 as BASIC_ACCESSIBILITY_R with "You must name something more substantial." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'basic accessibility rule'
                                PROPER_NOUN_NT'BASIC_ACCESSIBILITY_R'
                                    PROPER_NOUN_NT'"You must name something more substantial." ( a )'
                            SENTENCE_NT'the basic visibility rule translates into i6 as BASIC_VISIBILITY_R with "[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'basic visibility rule'
                                PROPER_NOUN_NT'BASIC_VISIBILITY_R'
                                    PROPER_NOUN_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                            SENTENCE_NT'the carrying requirements rule translates into i6 as CARRYING_REQUIREMENTS_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'carrying requirements rule'
                                PROPER_NOUN_NT'CARRYING_REQUIREMENTS_R'
                            SENTENCE_NT'the requested actions require persuasion rule translates into i6 as REQUESTED_ACTIONS_REQUIRE_R with "[The noun] [have] better things to do." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'requested actions require persuasion rule'
                                PROPER_NOUN_NT'REQUESTED_ACTIONS_REQUIRE_R'
                                    PROPER_NOUN_NT'"[The noun] [have] better things to do." ( a )'
                            SENTENCE_NT'the carry out requested actions rule translates into i6 as CARRY_OUT_REQUESTED_ACTIONS_R with "[The noun] [are] unable to do that." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'carry out requested actions rule'
                                PROPER_NOUN_NT'CARRY_OUT_REQUESTED_ACTIONS_R'
                                    PROPER_NOUN_NT'"[The noun] [are] unable to do that." ( a )'
                            SENTENCE_NT'the descend to specific action-processing rule translates into i6 as DESCEND_TO_SPECIFIC_ACTION_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'descend to specific action-processing rule'
                                PROPER_NOUN_NT'DESCEND_TO_SPECIFIC_ACTION_R'
                            SENTENCE_NT'the work out details of specific action rule is listed first in the specific action-processing rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the work out details of specific action rule'
                                PROPER_NOUN_NT'first in the specific action-processing rules'
                            ROUTINE_NT'a specific action-processing rule ( this is the investigate player's awareness before action rule )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the player's action awareness rules'
                                        INVOCATION_NT'follow the player's action awareness rules'
                                            RVALUE_CONTEXT_NT'player's action awareness rules'
                                                CONSTANT_NT'player's action awareness rules'-rulebook
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if rule succeeded'
                                            INVOCATION_NT'if rule succeeded'
                                                CONDITION_CONTEXT_NT'rule succeeded'
                                                    TEST_VALUE_NT'rule succeeded'
                                                        PHRASE_TO_DECIDE_VALUE_NT'rule succeeded'
                                                            INVOCATION_LIST_NT'rule succeeded'
                                                                INVOCATION_NT'rule succeeded'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now within the player's sight is true'
                                                CONDITION_CONTEXT_NT'within the player's sight is true'
                                        CODE_BLOCK_NT'otherwise'
                                            INVOCATION_LIST_NT'now within the player's sight is false'
                                                CONDITION_CONTEXT_NT'within the player's sight is false'
                            ROUTINE_NT'a specific action-processing rule ( this is the check stage rule )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'anonymously abide by the specific check rulebook'
                                        INVOCATION_NT'anonymously abide by the specific check rulebook'
                                            RVALUE_CONTEXT_NT'specific check rulebook'
                                                NONLOCAL_VARIABLE_NT'specific check rulebook'('specific check rulebook'(var)[rulebook])
                            ROUTINE_NT'a specific action-processing rule ( this is the carry out stage rule )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'follow the specific carry out rulebook'
                                        INVOCATION_NT'follow the specific carry out rulebook'
                                            RVALUE_CONTEXT_NT'specific carry out rulebook'
                                                NONLOCAL_VARIABLE_NT'specific carry out rulebook'('specific carry out rulebook'(var)[rulebook])
                            ROUTINE_NT'a specific action-processing rule ( this is the after stage rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if action in world is true'
                                            INVOCATION_NT'if action in world is true'
                                                CONDITION_CONTEXT_NT'action in world is true'
                                                    TEST_PROPOSITION_NT'action in world is true'(test: [ is('action in world', 'true') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'abide by the after rules'
                                                INVOCATION_NT'abide by the after rules'
                                                    RVALUE_CONTEXT_NT'after rules'
                                                        CONSTANT_NT'after rules'-rulebook
                            ROUTINE_NT'a specific action-processing rule ( this is the investigate player's awareness after action rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if within the player's sight is false'
                                            INVOCATION_NT'if within the player's sight is false'
                                                CONDITION_CONTEXT_NT'within the player's sight is false'
                                                    TEST_PROPOSITION_NT'within the player's sight is false'(test: [ is('within the player's sight', 'false') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'follow the player's action awareness rules'
                                                INVOCATION_NT'follow the player's action awareness rules'
                                                    RVALUE_CONTEXT_NT'player's action awareness rules'
                                                        CONSTANT_NT'player's action awareness rules'-rulebook
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if rule succeeded'
                                                    INVOCATION_NT'if rule succeeded'
                                                        CONDITION_CONTEXT_NT'rule succeeded'
                                                            TEST_VALUE_NT'rule succeeded'
                                                                PHRASE_TO_DECIDE_VALUE_NT'rule succeeded'
                                                                    INVOCATION_LIST_NT'rule succeeded'
                                                                        INVOCATION_NT'rule succeeded'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now within the player's sight is true'
                                                        CONDITION_CONTEXT_NT'within the player's sight is true'
                            ROUTINE_NT'a specific action-processing rule ( this is the report stage rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if within the player's sight is true and action keeping silent is false'
                                            INVOCATION_NT'if within the player's sight is true and action keeping silent is false'
                                                CONDITION_CONTEXT_NT'within the player's sight is true and action keeping silent is false'
                                                    LOGICAL_AND_NT'within the player's sight is true and action keeping silent is false'
                                                        TEST_PROPOSITION_NT'within the player's sight is true'(test: [ is('within the player's sight', 'true') ])
                                                        TEST_PROPOSITION_NT'action keeping silent is false'(test: [ is('action keeping silent', 'false') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'follow the specific report rulebook'
                                                INVOCATION_NT'follow the specific report rulebook'
                                                    RVALUE_CONTEXT_NT'specific report rulebook'
                                                        NONLOCAL_VARIABLE_NT'specific report rulebook'('specific report rulebook'(var)[rulebook])
                            ROUTINE_NT'the last specific action-processing rule'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'rule succeeds'
                                        INVOCATION_NT'rule succeeds'
                            SENTENCE_NT'the work out details of specific action rule translates into i6 as WORK_OUT_DETAILS_OF_SPECIFIC_R'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'work out details of specific action rule'
                                PROPER_NOUN_NT'WORK_OUT_DETAILS_OF_SPECIFIC_R'
                            ROUTINE_NT'a player's action awareness rule ( this is the player aware of his own actions rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is the actor'
                                            INVOCATION_NT'if the player is the actor'
                                                CONDITION_CONTEXT_NT'player is the actor'
                                                    TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds'
                                                INVOCATION_NT'rule succeeds'
                            ROUTINE_NT'a player's action awareness rule ( this is the player aware of actions by visible actors rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the player is not the actor and the player can see the actor'
                                            INVOCATION_NT'if the player is not the actor and the player can see the actor'
                                                CONDITION_CONTEXT_NT'player is not the actor and the player can see the actor'
                                                    LOGICAL_AND_NT'player is not the actor and the player can see the actor'
                                                        TEST_PROPOSITION_NT'player is not the actor'(test: [ NOT[ is('player', 'the actor') NOT] ])
                                                        TEST_PROPOSITION_NT'the player can see the actor'(test: [ can-see('the player', 'the actor') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds'
                                                INVOCATION_NT'rule succeeds'
                            ROUTINE_NT'a player's action awareness rule ( this is the player aware of actions on visible nouns rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the noun is a thing and the player can see the noun'
                                            INVOCATION_NT'if the noun is a thing and the player can see the noun'
                                                CONDITION_CONTEXT_NT'noun is a thing and the player can see the noun'
                                                    LOGICAL_AND_NT'noun is a thing and the player can see the noun'
                                                        TEST_PROPOSITION_NT'noun is a thing'(test: [ kind=thing('noun') ])
                                                        TEST_PROPOSITION_NT'the player can see the noun'(test: [ can-see('the player', 'the noun') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds'
                                                INVOCATION_NT'rule succeeds'
                            ROUTINE_NT'a player's action awareness rule ( this is the player aware of actions on visible second nouns rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the second noun is a thing and the player can see the second noun'
                                            INVOCATION_NT'if the second noun is a thing and the player can see the second noun'
                                                CONDITION_CONTEXT_NT'second noun is a thing and the player can see the second noun'
                                                    LOGICAL_AND_NT'second noun is a thing and the player can see the second noun'
                                                        TEST_PROPOSITION_NT'second noun is a thing'(test: [ kind=thing('second noun') ])
                                                        TEST_PROPOSITION_NT'the player can see the second noun'(test: [ can-see('the player', 'the second noun') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds'
                                                INVOCATION_NT'rule succeeds'
                        HEADING_NT'section 5 - accessibility' (level 5)
                            SENTENCE_NT'the access through barriers rule is listed last in the accessibility rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the access through barriers rule'
                                PROPER_NOUN_NT'last in the accessibility rules'
                            SENTENCE_NT'the access through barriers rule translates into i6 as ACCESS_THROUGH_BARRIERS_R with "[regarding the noun][Those] [aren't] available." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'access through barriers rule'
                                PROPER_NOUN_NT'ACCESS_THROUGH_BARRIERS_R'
                                    PROPER_NOUN_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                            SENTENCE_NT'the can't reach inside rooms rule is listed last in the reaching inside rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the can't reach inside rooms rule'
                                PROPER_NOUN_NT'last in the reaching inside rules'
                            SENTENCE_NT'the can't reach inside closed containers rule is listed last in the reaching inside rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the can't reach inside closed containers rule'
                                PROPER_NOUN_NT'last in the reaching inside rules'
                            SENTENCE_NT'the can't reach inside closed containers rule translates into i6 as CANT_REACH_INSIDE_CLOSED_R with "[The noun] [aren't] open." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'can't reach inside closed containers rule'
                                PROPER_NOUN_NT'CANT_REACH_INSIDE_CLOSED_R'
                                    PROPER_NOUN_NT'"[The noun] [aren't] open." ( a )'
                            SENTENCE_NT'the can't reach inside rooms rule translates into i6 as CANT_REACH_INSIDE_ROOMS_R with "[We] [can't] reach into [the noun]." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'can't reach inside rooms rule'
                                PROPER_NOUN_NT'CANT_REACH_INSIDE_ROOMS_R'
                                    PROPER_NOUN_NT'"[We] [can't] reach into [the noun]." ( a )'
                            SENTENCE_NT'the can't reach outside closed containers rule is listed last in the reaching outside rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the can't reach outside closed containers rule'
                                PROPER_NOUN_NT'last in the reaching outside rules'
                            SENTENCE_NT'the can't reach outside closed containers rule translates into i6 as CANT_REACH_OUTSIDE_CLOSED_R with "[The noun] [aren't] open." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'can't reach outside closed containers rule'
                                PROPER_NOUN_NT'CANT_REACH_OUTSIDE_CLOSED_R'
                                    PROPER_NOUN_NT'"[The noun] [aren't] open." ( a )'
                            SENTENCE_NT'the can't act in the dark rule is listed last in the visibility rules'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'the can't act in the dark rule'
                                PROPER_NOUN_NT'last in the visibility rules'
                            ROUTINE_NT'the last visibility rule ( this is the can't act in the dark rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if in darkness'
                                            INVOCATION_NT'if in darkness'
                                                CONDITION_CONTEXT_NT'in darkness'
                                                    TEST_VALUE_NT'in darkness'
                                                        PHRASE_TO_DECIDE_VALUE_NT'in darkness'
                                                            INVOCATION_LIST_NT'in darkness'
                                                                INVOCATION_NT'in darkness'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'rule succeeds'
                                                INVOCATION_NT'rule succeeds'
                            ROUTINE_NT'does the player mean taking something which is carried by the player ( this is the very unlikely to mean taking what's already carried rule )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'it is very unlikely'
                        HEADING_NT'section 6 - adjectival definitions' (level 5)
                            SENTENCE_NT'a scene can be recurring or non-recurring'
                                AVERB_NT'can be'
                                COMMON_NOUN_NT'a scene'
                                PROPER_NOUN_NT'recurring or non-recurring'
                                    AND_NT'or'
                                        PROPER_NOUN_NT'recurring'
                                        PROPER_NOUN_NT'non-recurring'
                            SENTENCE_NT'a scene is usually non-recurring'
                                AVERB_NT'is usually'
                                COMMON_NOUN_NT'scene'
                                ADJECTIVE_NT'non-recurring'
                            SENTENCE_NT'the entire game is recurring'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'entire game'
                                ADJECTIVE_NT'recurring'
                        HEADING_NT'section 7 - scene descriptions' (level 5)
                            SENTENCE_NT'a scene has a text called description'
                                AVERB_NT'has'
                                COMMON_NOUN_NT'scene'
                                ALLOWED_NT
                                    PROPERTYCALLED_NT'called'
                                        PROPER_NOUN_NT'text'
                                        PROPER_NOUN_NT'description'
                            ROUTINE_NT'when a scene ( called the event ) begins ( this is the scene description text rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the description of the event is not ""'
                                            INVOCATION_NT'if the description of the event is not ""'
                                                CONDITION_CONTEXT_NT'description of the event is not ""'
                                                    TEST_PROPOSITION_NT'description of the event is not ""'(test: [ NOT[ is('description of the event', '""') NOT] ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[description of the event][paragraph break]"'
                                                INVOCATION_LIST_SAY_NT'description of the event'
                                                    INVOCATION_NT'description of the event'
                                                        RVALUE_CONTEXT_NT'description of the event'
                                                            PROPERTY_VALUE_NT'description of the event'
                                                                CONSTANT_NT-nothing valued property
                                                                LOCAL_VARIABLE_NT'the event'(tmp_0;scene)
                                                INVOCATION_LIST_SAY_NT'paragraph break'
                                                    INVOCATION_NT'paragraph break'
                        HEADING_NT'section 8 - command parser errors' (level 5)
                            SENTENCE_NT'a command parser error is a kind of value'
                                AVERB_NT'is'
                                COMMON_NOUN_NT'command parser error'
                                KIND_NT'kind of value'
                                    COMMON_NOUN_NT'value'
                            SENTENCE_NT'the command parser errors are didn't understand error , only understood as far as error , didn't understand that number error , can only do that to something animate error , can't see any such thing error , said too little error , aren't holding that error , can't use multiple objects error , can only use multiple objects error , not sure what it refers to error , excepted something not included error , not a verb i recognise error , not something you need to refer to error , can't see it at the moment error , didn't understand the way that finished error , not enough of those available error , nothing to do error , noun did not make sense in that context error , referred to a determination of scope error , i beg your pardon error , can't again the addressee error , comma can't begin error , can't see whom to talk to error , can't talk to inanimate things error , and didn't understand addressee's last name error'
                                AVERB_NT'are'
                                COMMON_NOUN_NT'command parser errors'
                                AND_NT','
                                    PROPER_NOUN_NT'didn't understand error'
                                    AND_NT','
                                        PROPER_NOUN_NT'only understood as far as error'
                                        AND_NT','
                                            PROPER_NOUN_NT'didn't understand that number error'
                                            AND_NT','
                                                PROPER_NOUN_NT'can only do that to something animate error'
                                                AND_NT','
                                                    PROPER_NOUN_NT'can't see any such thing error'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'said too little error'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'aren't holding that error'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'can't use multiple objects error'
                                                                AND_NT','
                                                                    PROPER_NOUN_NT'can only use multiple objects error'
                                                                    AND_NT','
                                                                        PROPER_NOUN_NT'not sure what it refers to error'
                                                                        AND_NT','
                                                                            PROPER_NOUN_NT'excepted something not included error'
                                                                            AND_NT','
                                                                                PROPER_NOUN_NT'not a verb i recognise error'
                                                                                AND_NT','
                                                                                    PROPER_NOUN_NT'not something you need to refer to error'
                                                                                    AND_NT','
                                                                                        PROPER_NOUN_NT'can't see it at the moment error'
                                                                                        AND_NT','
                                                                                            PROPER_NOUN_NT'didn't understand the way that finished error'
                                                                                            AND_NT','
                                                                                                PROPER_NOUN_NT'not enough of those available error'
                                                                                                AND_NT','
                                                                                                    PROPER_NOUN_NT'nothing to do error'
                                                                                                    AND_NT','
                                                                                                        PROPER_NOUN_NT'noun did not make sense in that context error'
                                                                                                        AND_NT','
                                                                                                            PROPER_NOUN_NT'referred to a determination of scope error'
                                                                                                            AND_NT','
                                                                                                                PROPER_NOUN_NT'i beg your pardon error'
                                                                                                                AND_NT','
                                                                                                                    PROPER_NOUN_NT'can't again the addressee error'
                                                                                                                    AND_NT','
                                                                                                                        PROPER_NOUN_NT'comma can't begin error'
                                                                                                                        AND_NT','
                                                                                                                            PROPER_NOUN_NT'can't see whom to talk to error'
                                                                                                                            AND_NT','
                                                                                                                                PROPER_NOUN_NT'can't talk to inanimate things error'
                                                                                                                                PROPER_NOUN_NT'didn't understand addressee's last name error'
                            SENTENCE_NT'the latest parser error is a command parser error that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'latest parser error'
                                COMMON_NOUN_NT'command parser error that varies'
                            SENTENCE_NT'the latest parser error variable translates into i6 as etype'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'latest parser error variable'
                                PROPER_NOUN_NT'etype'
                        HEADING_NT'section 9 - responses for internal rules' (level 5)
                            SENTENCE_NT'the list writer internal rule translates into i6 as LIST_WRITER_INTERNAL_R with " (" ( a ) , ")" ( b ) , " and " ( c ) , "providing light" ( d ) , "closed" ( e ) , "empty" ( f ) , "closed and empty" ( g ) , "closed and providing light" ( h ) , "empty and providing light" ( i ) , "closed, empty[if serial comma option is active],[end if] and providing light" ( j ) , "providing light and being worn" ( k ) , "being worn" ( l ) , "open" ( m ) , "open but empty" ( n ) , "closed" ( o ) , "closed and locked" ( p ) , "containing" ( q ) , "on [if the noun is a person]whom[otherwise]which[end if] " ( r ) , ", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s ) , "in [if the noun is a person]whom[otherwise]which[end if] " ( t ) , ", inside [if the noun is a person]whom[otherwise]which[end if] " ( u ) , "[regarding list writer internals][are]" ( v ) , "[regarding list writer internals][are] nothing" ( w ) , "Nothing" ( x ) , "nothing" ( y )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'list writer internal rule'
                                PROPER_NOUN_NT'LIST_WRITER_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'" (" ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'")" ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'" and " ( c )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"providing light" ( d )'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'"closed" ( e )'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'"empty" ( f )'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'"closed and empty" ( g )'
                                                                AND_NT','
                                                                    PROPER_NOUN_NT'"closed and providing light" ( h )'
                                                                    AND_NT','
                                                                        PROPER_NOUN_NT'"empty and providing light" ( i )'
                                                                        AND_NT','
                                                                            PROPER_NOUN_NT'"closed, empty[if serial comma option is active],[end if] and providing light" ( j )'
                                                                            AND_NT','
                                                                                PROPER_NOUN_NT'"providing light and being worn" ( k )'
                                                                                AND_NT','
                                                                                    PROPER_NOUN_NT'"being worn" ( l )'
                                                                                    AND_NT','
                                                                                        PROPER_NOUN_NT'"open" ( m )'
                                                                                        AND_NT','
                                                                                            PROPER_NOUN_NT'"open but empty" ( n )'
                                                                                            AND_NT','
                                                                                                PROPER_NOUN_NT'"closed" ( o )'
                                                                                                AND_NT','
                                                                                                    PROPER_NOUN_NT'"closed and locked" ( p )'
                                                                                                    AND_NT','
                                                                                                        PROPER_NOUN_NT'"containing" ( q )'
                                                                                                        AND_NT','
                                                                                                            PROPER_NOUN_NT'"on [if the noun is a person]whom[otherwise]which[end if] " ( r )'
                                                                                                            AND_NT','
                                                                                                                PROPER_NOUN_NT'", on top of [if the noun is a person]whom[otherwise]which[end if] " ( s )'
                                                                                                                AND_NT','
                                                                                                                    PROPER_NOUN_NT'"in [if the noun is a person]whom[otherwise]which[end if] " ( t )'
                                                                                                                    AND_NT','
                                                                                                                        PROPER_NOUN_NT'", inside [if the noun is a person]whom[otherwise]which[end if] " ( u )'
                                                                                                                        AND_NT','
                                                                                                                            PROPER_NOUN_NT'"[regarding list writer internals][are]" ( v )'
                                                                                                                            AND_NT','
                                                                                                                                PROPER_NOUN_NT'"[regarding list writer internals][are] nothing" ( w )'
                                                                                                                                AND_NT','
                                                                                                                                    PROPER_NOUN_NT'"Nothing" ( x )'
                                                                                                                                    PROPER_NOUN_NT'"nothing" ( y )'
                            SENTENCE_NT'the action processing internal rule translates into i6 as ACTION_PROCESSING_INTERNAL_R with "[bracket]That command asks to do something outside of play, so it can
                            only make sense from you to me. [The noun] cannot be asked to do this.[close
                            bracket]" ( a ) , "You must name an object." ( b ) , "You may not name an object." ( c ) , "You must supply a noun." ( d ) , "You may not supply a noun." ( e ) , "You must name a second object." ( f ) , "You may not name a second object." ( g ) , "You must supply a second noun." ( h ) , "You may not supply a second noun." ( i ) , "(Since something dramatic has happened, your list of commands has been
                            cut short.)" ( j ) , "I didn't understand that instruction." ( k )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'action processing internal rule'
                                PROPER_NOUN_NT'ACTION_PROCESSING_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"[bracket]That command asks to do something outside of play, so it can
                                        only make sense from you to me. [The noun] cannot be asked to do this.[close
                                        bracket]" ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"You must name an object." ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"You may not name an object." ( c )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"You must supply a noun." ( d )'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'"You may not supply a noun." ( e )'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'"You must name a second object." ( f )'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'"You may not name a second object." ( g )'
                                                                AND_NT','
                                                                    PROPER_NOUN_NT'"You must supply a second noun." ( h )'
                                                                    AND_NT','
                                                                        PROPER_NOUN_NT'"You may not supply a second noun." ( i )'
                                                                        AND_NT','
                                                                            PROPER_NOUN_NT'"(Since something dramatic has happened, your list of commands has been
                                                                            cut short.)" ( j )'
                                                                            PROPER_NOUN_NT'"I didn't understand that instruction." ( k )'
                            SENTENCE_NT'the parser error internal rule translates into i6 as PARSER_ERROR_INTERNAL_R with "I didn't understand that sentence." ( a ) , "I only understood you as far as wanting to " ( b ) , "I only understood you as far as wanting to (go) " ( c ) , "I didn't understand that number." ( d ) , "[We] [can't] see any such thing." ( e ) , "You seem to have said too little!" ( f ) , "[We] [aren't] holding that!" ( g ) , "You can't use multiple objects with that verb." ( h ) , "You can only use multiple objects once on a line." ( i ) , "I'm not sure what ['][pronoun i6 dictionary word]['] refers to." ( j ) , "[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment." ( k ) , "You excepted something not included anyway!" ( l ) , "You can only do that to something animate." ( m ) , "That's not a verb I [if American dialect option is
                            active]recognize[otherwise]recognise[end if]." ( n ) , "That's not something you need to refer to in the course of this game." ( o ) , "I didn't understand the way that finished." ( p ) , "[if number understood is 0]None[otherwise]Only [number understood in words][end if]
                            of those [regarding the number understood][are] available." ( q ) , "That noun did not make sense in this context." ( r ) , "To repeat a command like 'frog, jump', just say 'again', not 'frog, again'." ( s ) , "You can't begin with a comma." ( t ) , "You seem to want to talk to someone, but I can't see whom." ( u ) , "You can't talk to [the noun]." ( v ) , "To talk to someone, try 'someone, hello' or some such." ( w ) , "I beg your pardon?" ( x )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'parser error internal rule'
                                PROPER_NOUN_NT'PARSER_ERROR_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"I didn't understand that sentence." ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"I only understood you as far as wanting to " ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"I only understood you as far as wanting to (go) " ( c )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"I didn't understand that number." ( d )'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'"[We] [can't] see any such thing." ( e )'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'"You seem to have said too little!" ( f )'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'"[We] [aren't] holding that!" ( g )'
                                                                AND_NT','
                                                                    PROPER_NOUN_NT'"You can't use multiple objects with that verb." ( h )'
                                                                    AND_NT','
                                                                        PROPER_NOUN_NT'"You can only use multiple objects once on a line." ( i )'
                                                                        AND_NT','
                                                                            PROPER_NOUN_NT'"I'm not sure what ['][pronoun i6 dictionary word]['] refers to." ( j )'
                                                                            AND_NT','
                                                                                PROPER_NOUN_NT'"[We] [can't] see ['][pronoun i6 dictionary word]['] ([the noun]) at the moment." ( k )'
                                                                                AND_NT','
                                                                                    PROPER_NOUN_NT'"You excepted something not included anyway!" ( l )'
                                                                                    AND_NT','
                                                                                        PROPER_NOUN_NT'"You can only do that to something animate." ( m )'
                                                                                        AND_NT','
                                                                                            PROPER_NOUN_NT'"That's not a verb I [if American dialect option is
                                                                                            active]recognize[otherwise]recognise[end if]." ( n )'
                                                                                            AND_NT','
                                                                                                PROPER_NOUN_NT'"That's not something you need to refer to in the course of this game." ( o )'
                                                                                                AND_NT','
                                                                                                    PROPER_NOUN_NT'"I didn't understand the way that finished." ( p )'
                                                                                                    AND_NT','
                                                                                                        PROPER_NOUN_NT'"[if number understood is 0]None[otherwise]Only [number understood in words][end if]
                                                                                                        of those [regarding the number understood][are] available." ( q )'
                                                                                                        AND_NT','
                                                                                                            PROPER_NOUN_NT'"That noun did not make sense in this context." ( r )'
                                                                                                            AND_NT','
                                                                                                                PROPER_NOUN_NT'"To repeat a command like 'frog, jump', just say 'again', not 'frog, again'." ( s )'
                                                                                                                AND_NT','
                                                                                                                    PROPER_NOUN_NT'"You can't begin with a comma." ( t )'
                                                                                                                    AND_NT','
                                                                                                                        PROPER_NOUN_NT'"You seem to want to talk to someone, but I can't see whom." ( u )'
                                                                                                                        AND_NT','
                                                                                                                            PROPER_NOUN_NT'"You can't talk to [the noun]." ( v )'
                                                                                                                            AND_NT','
                                                                                                                                PROPER_NOUN_NT'"To talk to someone, try 'someone, hello' or some such." ( w )'
                                                                                                                                PROPER_NOUN_NT'"I beg your pardon?" ( x )'
                            SENTENCE_NT'the parser nothing error internal rule translates into i6 as PARSER_N_ERROR_INTERNAL_R with "Nothing to do!" ( a ) , "[There] [adapt the verb are from the third person plural] none at all available!" ( b ) , "[regarding the noun][Those] [seem] to belong to [the noun]." ( c ) , "[regarding the noun][Those] [can't] contain things." ( d ) , "[The noun] [aren't] open." ( e ) , "[The noun] [are] empty." ( f )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'parser nothing error internal rule'
                                PROPER_NOUN_NT'PARSER_N_ERROR_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"Nothing to do!" ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"[There] [adapt the verb are from the third person plural] none at all available!" ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"[regarding the noun][Those] [seem] to belong to [the noun]." ( c )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"[regarding the noun][Those] [can't] contain things." ( d )'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'"[The noun] [aren't] open." ( e )'
                                                        PROPER_NOUN_NT'"[The noun] [are] empty." ( f )'
                            SENTENCE_NT'the darkness name internal rule translates into i6 as DARKNESS_NAME_INTERNAL_R with "Darkness" ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'darkness name internal rule'
                                PROPER_NOUN_NT'DARKNESS_NAME_INTERNAL_R'
                                    PROPER_NOUN_NT'"Darkness" ( a )'
                            SENTENCE_NT'the parser command internal rule translates into i6 as PARSER_COMMAND_INTERNAL_R with "Sorry, that can't be corrected." ( a ) , "Think nothing of it." ( b ) , "'Oops' can only correct a single word." ( c ) , "You can hardly repeat that." ( d )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'parser command internal rule'
                                PROPER_NOUN_NT'PARSER_COMMAND_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"Sorry, that can't be corrected." ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"Think nothing of it." ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"'Oops' can only correct a single word." ( c )'
                                                PROPER_NOUN_NT'"You can hardly repeat that." ( d )'
                            SENTENCE_NT'the parser clarification internal rule translates into i6 as PARSER_CLARIF_INTERNAL_R with "Who do you mean, " ( a ) , "Which do you mean, " ( b ) , "Sorry, you can only have one item here. Which exactly?" ( c ) , "Whom do you want [if the noun is not the player][the noun] [end if]to
                            [parser command so far]?" ( d ) , "What do you want [if the noun is not the player][the noun] [end if]to
                            [parser command so far]?" ( e ) , "those things" ( f ) , "that" ( g ) , " or " ( h )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'parser clarification internal rule'
                                PROPER_NOUN_NT'PARSER_CLARIF_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"Who do you mean, " ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"Which do you mean, " ( b )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"Sorry, you can only have one item here. Which exactly?" ( c )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"Whom do you want [if the noun is not the player][the noun] [end if]to
                                                    [parser command so far]?" ( d )'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'"What do you want [if the noun is not the player][the noun] [end if]to
                                                        [parser command so far]?" ( e )'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'"those things" ( f )'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'"that" ( g )'
                                                                PROPER_NOUN_NT'" or " ( h )'
                            SENTENCE_NT'the yes or no question internal rule translates into i6 as YES_OR_NO_QUESTION_INTERNAL_R with "Please answer yes or no." ( a )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'yes or no question internal rule'
                                PROPER_NOUN_NT'YES_OR_NO_QUESTION_INTERNAL_R'
                                    PROPER_NOUN_NT'"Please answer yes or no." ( a )'
                            SENTENCE_NT'the print protagonist internal rule translates into i6 as PRINT_PROTAGONIST_INTERNAL_R with "[We]" ( a ) , "[ourselves]" ( b ) , "[our] former self" ( c )'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'print protagonist internal rule'
                                PROPER_NOUN_NT'PRINT_PROTAGONIST_INTERNAL_R'
                                    AND_NT','
                                        PROPER_NOUN_NT'"[We]" ( a )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"[ourselves]" ( b )'
                                            PROPER_NOUN_NT'"[our] former self" ( c )'
                HEADING_NT'part four - activities' (level 3)
                    HEADING_NT'section 1 - responses' (level 5)
                        SENTENCE_NT'issuing the response text of something -- documented at act_resp -- is an activity on responses'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'issuing the response text of something'
                            COMMON_NOUN_NT'activity on responses'
                        SENTENCE_NT'the standard issuing the response text rule is listed last in for issuing the response text'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard issuing the response text rule'
                            PROPER_NOUN_NT'last in for issuing the response text'
                        SENTENCE_NT'the standard issuing the response text rule translates into i6 as STANDARD_RESPONSE_ISSUING_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard issuing the response text rule'
                            PROPER_NOUN_NT'STANDARD_RESPONSE_ISSUING_R'
                    HEADING_NT'section 2 - naming and listing' (level 5)
                        ROUTINE_NT'before printing the name of a thing ( called the item being printed ) ( this is the make named things mentioned rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if expanding text for comparison purposes'
                                        INVOCATION_NT'if expanding text for comparison purposes'
                                            CONDITION_CONTEXT_NT'expanding text for comparison purposes'
                                                TEST_VALUE_NT'expanding text for comparison purposes'
                                                    PHRASE_TO_DECIDE_VALUE_NT'expanding text for comparison purposes'
                                                        INVOCATION_LIST_NT'expanding text for comparison purposes'
                                                            INVOCATION_NT'expanding text for comparison purposes'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the activity'
                                            INVOCATION_NT'continue the activity'
                                INVOCATION_LIST_NT'now the item being printed is mentioned'
                                    CONDITION_CONTEXT_NT'the item being printed is mentioned'
                        SENTENCE_NT'printing a number of something ( documented at act_pan ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing a number of something ( documented at act_pan )'
                            PROPER_NOUN_NT'an activity'
                        ROUTINE_NT'rule for printing a number of something ( called the item ) ( this is the standard printing a number of something rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[listing group size in words] "'
                                    INVOCATION_LIST_SAY_NT'listing group size in words'
                                        INVOCATION_NT'listing group size in words'
                                            RVALUE_CONTEXT_NT'listing group size'
                                                NONLOCAL_VARIABLE_NT'listing group size'('listing group size'(var)[number])
                                    INVOCATION_LIST_SAY_NT'" "'
                                        INVOCATION_NT'" "'
                                            RVALUE_CONTEXT_NT'" "'
                                                CONSTANT_NT'" "'-text
                                INVOCATION_LIST_NT'carry out the printing the plural name activity with the item'
                                    INVOCATION_NT'carry out the printing the plural name activity with the item'
                                        RVALUE_CONTEXT_NT'printing the plural name'
                                            CONSTANT_NT'printing the plural name'-activity on objects
                                        RVALUE_CONTEXT_NT'item'
                                            LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                        SENTENCE_NT'the standard printing a number of something rule is listed last in the for printing a number rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard printing a number of something rule'
                            PROPER_NOUN_NT'last in the for printing a number rulebook'
                        SENTENCE_NT'printing room description details of something ( documented at act_details ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing room description details of something ( documented at act_details )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing inventory details of something ( documented at act_idetails ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing inventory details of something ( documented at act_idetails )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'listing contents of something ( documented at act_lc ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'listing contents of something ( documented at act_lc )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the standard contents listing rule is listed last in the for listing contents rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard contents listing rule'
                            PROPER_NOUN_NT'last in the for listing contents rulebook'
                        SENTENCE_NT'the standard contents listing rule translates into i6 as STANDARD_CONTENTS_LISTING_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard contents listing rule'
                            PROPER_NOUN_NT'STANDARD_CONTENTS_LISTING_R'
                        SENTENCE_NT'grouping together something ( documented at act_gt ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'grouping together something ( documented at act_gt )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'writing a paragraph about something ( documented at act_wpa ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'writing a paragraph about something ( documented at act_wpa )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'listing nondescript items of something ( documented at act_lni ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'listing nondescript items of something ( documented at act_lni )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the name of a dark room ( documented at act_darkname ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the name of a dark room ( documented at act_darkname )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the description of a dark room ( documented at act_darkdesc ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the description of a dark room ( documented at act_darkdesc )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the announcement of darkness ( documented at act_nowdark ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the announcement of darkness ( documented at act_nowdark )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the announcement of light ( documented at act_nowlight ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the announcement of light ( documented at act_nowlight )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing a refusal to act in the dark ( documented at act_toodark ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing a refusal to act in the dark ( documented at act_toodark )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the look around once light available rule is listed last in for printing the announcement of light'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the look around once light available rule'
                            PROPER_NOUN_NT'last in for printing the announcement of light'
                        ROUTINE_NT'this is the look around once light available rule'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try looking'
                                    INVOCATION_NT'try looking'
                                        RVALUE_CONTEXT_NT'looking'
                                            CONSTANT_NT'looking'-action
                        SENTENCE_NT'constructing the status line ( documented at act_csl ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'constructing the status line ( documented at act_csl )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the banner text ( documented at act_banner ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the banner text ( documented at act_banner )'
                            PROPER_NOUN_NT'an activity'
                    HEADING_NT'section 3 - command parsing' (level 5)
                        SENTENCE_NT'reading a command ( documented at act_reading ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'reading a command ( documented at act_reading )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'deciding the scope of something ( future action ) ( documented at act_ds ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'deciding the scope of something ( future action ) ( documented at act_ds )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'deciding the concealed possessions of something ( documented at act_con ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'deciding the concealed possessions of something ( documented at act_con )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'deciding whether all includes something ( future action ) ( documented at act_all ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'deciding whether all includes something ( future action ) ( documented at act_all )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the for deciding whether all includes rules have outcomes it does not ( failure ) and it does ( success )'
                            AVERB_NT'have'
                            PROPER_NOUN_NT'for deciding whether all includes rules'
                            PROPERTY_LIST_NT'and'
                                PROPER_NOUN_NT'outcomes it does not ( failure )'
                                PROPER_NOUN_NT'it does ( success )'
                        SENTENCE_NT'clarifying the parser's choice of something ( future action ) ( documented at act_clarify ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'clarifying the parser's choice of something ( future action ) ( documented at act_clarify )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'asking which do you mean ( future action ) ( documented at act_which ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'asking which do you mean ( future action ) ( documented at act_which )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing a parser error ( documented at act_parsererror ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing a parser error ( documented at act_parsererror )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'supplying a missing noun ( documented at act_smn ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'supplying a missing noun ( documented at act_smn )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'supplying a missing second noun ( documented at act_smn ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'supplying a missing second noun ( documented at act_smn )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'implicitly taking something ( documented at act_implicitly ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'implicitly taking something ( documented at act_implicitly )'
                            PROPER_NOUN_NT'an activity'
                        ROUTINE_NT'rule for deciding whether all includes scenery while taking or taking off or removing ( this is the exclude scenery from take all rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        ROUTINE_NT'rule for deciding whether all includes people while taking or taking off or removing ( this is the exclude people from take all rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        ROUTINE_NT'rule for deciding whether all includes fixed in place things while taking or taking off or removing ( this is the exclude fixed in place things from take all rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        ROUTINE_NT'rule for deciding whether all includes things enclosed by the person reaching while taking or taking off or removing ( this is the exclude indirect possessions from take all rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        ROUTINE_NT'rule for deciding whether all includes a person while dropping or throwing or inserting or putting ( this is the exclude people from drop all rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it does not'
                        ROUTINE_NT'rule for supplying a missing noun while an actor smelling ( this is the ambient odour rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is the touchability ceiling of the player'
                                    CONDITION_CONTEXT_NT'the noun is the touchability ceiling of the player'
                        ROUTINE_NT'rule for supplying a missing noun while an actor listening ( this is the ambient sound rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is the touchability ceiling of the player'
                                    CONDITION_CONTEXT_NT'the noun is the touchability ceiling of the player'
                        ROUTINE_NT'rule for supplying a missing noun while an actor going ( this is the block vaguely going rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "You'll have to say which compass direction to go in." ( a )'
                                    INVOCATION_LIST_SAY_NT'"You'll have to say which compass direction to go in." ( a )'
                                        INVOCATION_NT'"You'll have to say which compass direction to go in." ( a )'
                                            RVALUE_CONTEXT_NT'"You'll have to say which compass direction to go in." ( a )'
                                                CONSTANT_NT'"You'll have to say which compass direction to go in." ( a )'-text
                        SENTENCE_NT'the standard implicit taking rule is listed last in for implicitly taking'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard implicit taking rule'
                            PROPER_NOUN_NT'last in for implicitly taking'
                        SENTENCE_NT'the standard implicit taking rule translates into i6 as STANDARD_IMPLICIT_TAKING_R with "(first taking [the noun])[command clarification break]" ( a ) , "([the second noun] first taking [the noun])[command clarification break]" ( b )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard implicit taking rule'
                            PROPER_NOUN_NT'STANDARD_IMPLICIT_TAKING_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"(first taking [the noun])[command clarification break]" ( a )'
                                    PROPER_NOUN_NT'"([the second noun] first taking [the noun])[command clarification break]" ( b )'
                    HEADING_NT'section 4 - posthumous activities' (level 5)
                        SENTENCE_NT'amusing a victorious player ( documented at act_amuse ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'amusing a victorious player ( documented at act_amuse )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'printing the player's obituary ( documented at act_obit ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the player's obituary ( documented at act_obit )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the print obituary headline rule is listed last in for printing the player's obituary'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the print obituary headline rule'
                            PROPER_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the print final score rule is listed last in for printing the player's obituary'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the print final score rule'
                            PROPER_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the display final status line rule is listed last in for printing the player's obituary'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the display final status line rule'
                            PROPER_NOUN_NT'last in for printing the player's obituary'
                        SENTENCE_NT'the print obituary headline rule translates into i6 as PRINT_OBITUARY_HEADLINE_R with " You have died " ( a ) , " You have won " ( b ) , " The End " ( c )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'print obituary headline rule'
                            PROPER_NOUN_NT'PRINT_OBITUARY_HEADLINE_R'
                                AND_NT','
                                    PROPER_NOUN_NT'" You have died " ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'" You have won " ( b )'
                                        PROPER_NOUN_NT'" The End " ( c )'
                        SENTENCE_NT'the print final score rule translates into i6 as PRINT_FINAL_SCORE_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'print final score rule'
                            PROPER_NOUN_NT'PRINT_FINAL_SCORE_R'
                        SENTENCE_NT'the display final status line rule translates into i6 as DISPLAY_FINAL_STATUS_LINE_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'display final status line rule'
                            PROPER_NOUN_NT'DISPLAY_FINAL_STATUS_LINE_R'
                        SENTENCE_NT'handling the final question is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'handling the final question'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the immediately restart the vm rule translates into i6 as IMMEDIATELY_RESTART_VM_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'immediately restart the vm rule'
                            PROPER_NOUN_NT'IMMEDIATELY_RESTART_VM_R'
                        SENTENCE_NT'the immediately restore saved game rule translates into i6 as IMMEDIATELY_RESTORE_SAVED_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'immediately restore saved game rule'
                            PROPER_NOUN_NT'IMMEDIATELY_RESTORE_SAVED_R'
                        SENTENCE_NT'the immediately quit rule translates into i6 as IMMEDIATELY_QUIT_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'immediately quit rule'
                            PROPER_NOUN_NT'IMMEDIATELY_QUIT_R'
                        SENTENCE_NT'the immediately undo rule translates into i6 as IMMEDIATELY_UNDO_R with "The use of 'undo' is forbidden in this story." ( a ) , "You can't 'undo' what hasn't been done!" ( b ) , "Your interpreter does not provide 'undo'. Sorry!" ( c ) , "'Undo' failed. Sorry!" ( d ) , "[bracket]Previous turn undone.[close bracket]" ( e ) , "'Undo' capacity exhausted. Sorry!" ( f )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'immediately undo rule'
                            PROPER_NOUN_NT'IMMEDIATELY_UNDO_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"The use of 'undo' is forbidden in this story." ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'"You can't 'undo' what hasn't been done!" ( b )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"Your interpreter does not provide 'undo'. Sorry!" ( c )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"'Undo' failed. Sorry!" ( d )'
                                                AND_NT','
                                                    PROPER_NOUN_NT'"[bracket]Previous turn undone.[close bracket]" ( e )'
                                                    PROPER_NOUN_NT'"'Undo' capacity exhausted. Sorry!" ( f )'
                        SENTENCE_NT'the print the final question rule is listed in before handling the final question'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the print the final question rule'
                            PROPER_NOUN_NT'in before handling the final question'
                        SENTENCE_NT'the print the final prompt rule is listed in before handling the final question'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the print the final prompt rule'
                            PROPER_NOUN_NT'in before handling the final question'
                        SENTENCE_NT'the read the final answer rule is listed last in before handling the final question'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the read the final answer rule'
                            PROPER_NOUN_NT'last in before handling the final question'
                        SENTENCE_NT'the standard respond to final question rule is listed last in for handling the final question'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard respond to final question rule'
                            PROPER_NOUN_NT'last in for handling the final question'
                        ROUTINE_NT'this is the print the final prompt rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "> [run paragraph on]" ( a )'
                                    INVOCATION_LIST_SAY_NT'"> [run paragraph on]" ( a )'
                                        INVOCATION_NT'"> [run paragraph on]" ( a )'
                                            RVALUE_CONTEXT_NT'"> [run paragraph on]" ( a )'
                                                CONSTANT_NT'"> [run paragraph on]" ( a )'-text
                        SENTENCE_NT'the read the final answer rule translates into i6 as READ_FINAL_ANSWER_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'read the final answer rule'
                            PROPER_NOUN_NT'READ_FINAL_ANSWER_R'
                    HEADING_NT'section 5 - the final question' (level 5)
                        ROUTINE_NT'this is the print the final question rule'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let named options count be 0'
                                    INVOCATION_NT'let named options count be 0'
                                        NEW_LOCAL_CONTEXT_NT'named options count'
                                            UNKNOWN_NT'named options count'
                                        RVALUE_CONTEXT_NT'0'
                                            CONSTANT_NT'0'-number
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of final question options'
                                        INVOCATION_NT'repeat through the table of final question options'
                                            RVALUE_CONTEXT_NT'table of final question options'
                                                CONSTANT_NT'table of final question options'-table name
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has ended finally'
                                                INVOCATION_NT'if the only if victorious entry is false or the story has ended finally'
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended finally'
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended finally'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false'(test: [ is('only if victorious entry', 'false') ])
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                        INVOCATION_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry'
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry'
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT-nothing valued table column
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty'(test: [ NOT[ A4'empty'('the final response activity entry') NOT] ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if there is a final question wording entry'
                                                                INVOCATION_NT'if there is a final question wording entry'
                                                                    CONDITION_CONTEXT_NT'there is a final question wording entry'
                                                                        TEST_VALUE_NT'there is a final question wording entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a final question wording entry'
                                                                                INVOCATION_LIST_NT'there is a final question wording entry'
                                                                                    INVOCATION_NT'there is a final question wording entry'
                                                                                        LVALUE_TR_CONTEXT_NT'a final question wording entry'
                                                                                            TABLE_ENTRY_NT'a final question wording entry'
                                                                                                CONSTANT_NT-nothing valued table column
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'increase named options count by 1'
                                                                    INVOCATION_NT'increase named options count by 1'
                                                                        LVALUE_CONTEXT_NT'named options count'
                                                                            LOCAL_VARIABLE_NT'named options count'(tmp_0;number)
                                                                        RVALUE_CONTEXT_NT'1'
                                                                            CONSTANT_NT'1'-number
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the named options count is less than 1'
                                        INVOCATION_NT'if the named options count is less than 1'
                                            CONDITION_CONTEXT_NT'named options count is less than 1'
                                                TEST_PROPOSITION_NT'named options count is less than 1'(test: [ less-than('named options count', '1') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the immediately quit rule'
                                            INVOCATION_NT'abide by the immediately quit rule'
                                                RVALUE_CONTEXT_NT'immediately quit rule'
                                                    CONSTANT_NT'immediately quit rule'-rule
                                CODE_BLOCK_NT'say "Would you like to " ( a )'
                                    INVOCATION_LIST_SAY_NT'"Would you like to " ( a )'
                                        INVOCATION_NT'"Would you like to " ( a )'
                                            RVALUE_CONTEXT_NT'"Would you like to " ( a )'
                                                CONSTANT_NT'"Would you like to " ( a )'-text
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of final question options'
                                        INVOCATION_NT'repeat through the table of final question options'
                                            RVALUE_CONTEXT_NT'table of final question options'
                                                CONSTANT_NT'table of final question options'-table name
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has ended finally'
                                                INVOCATION_NT'if the only if victorious entry is false or the story has ended finally'
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended finally'
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended finally'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false'(test: [ is('only if victorious entry', 'false') ])
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                        INVOCATION_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry'
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry'
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT-nothing valued table column
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty'(test: [ NOT[ A4'empty'('the final response activity entry') NOT] ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if there is a final question wording entry'
                                                                INVOCATION_NT'if there is a final question wording entry'
                                                                    CONDITION_CONTEXT_NT'there is a final question wording entry'
                                                                        TEST_VALUE_NT'there is a final question wording entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a final question wording entry'
                                                                                INVOCATION_LIST_NT'there is a final question wording entry'
                                                                                    INVOCATION_NT'there is a final question wording entry'
                                                                                        LVALUE_TR_CONTEXT_NT'a final question wording entry'
                                                                                            TABLE_ENTRY_NT'a final question wording entry'
                                                                                                CONSTANT_NT-nothing valued table column
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say final question wording entry'
                                                                    INVOCATION_LIST_SAY_NT'final question wording entry'
                                                                        INVOCATION_NT'final question wording entry'
                                                                            RVALUE_CONTEXT_NT'final question wording entry'
                                                                                TABLE_ENTRY_NT'final question wording entry'
                                                                                    CONSTANT_NT-nothing valued table column
                                                                INVOCATION_LIST_NT'decrease named options count by 1'
                                                                    INVOCATION_NT'decrease named options count by 1'
                                                                        LVALUE_CONTEXT_NT'named options count'
                                                                            LOCAL_VARIABLE_NT'named options count'(tmp_0;number)
                                                                        RVALUE_CONTEXT_NT'1'
                                                                            CONSTANT_NT'1'-number
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the named options count is 1'
                                                                        INVOCATION_NT'if the named options count is 1'
                                                                            CONDITION_CONTEXT_NT'named options count is 1'
                                                                                TEST_PROPOSITION_NT'named options count is 1'(test: [ is('named options count', '1') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the serial comma option is active'
                                                                                INVOCATION_NT'if the serial comma option is active'
                                                                                    CONDITION_CONTEXT_NT'serial comma option is active'
                                                                                        TEST_PROPOSITION_NT'serial comma option is active'(test: [ A11'active'('serial comma option') ])
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say ","'
                                                                                    INVOCATION_LIST_SAY_NT'","'
                                                                                        INVOCATION_NT'","'
                                                                                            RVALUE_CONTEXT_NT'","'
                                                                                                CONSTANT_NT'","'-text
                                                                        CODE_BLOCK_NT'say " or " ( b )'
                                                                            INVOCATION_LIST_SAY_NT'" or " ( b )'
                                                                                INVOCATION_NT'" or " ( b )'
                                                                                    RVALUE_CONTEXT_NT'" or " ( b )'
                                                                                        CONSTANT_NT'" or " ( b )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the named options count is 0'
                                                                                INVOCATION_NT'if the named options count is 0'
                                                                                    CONDITION_CONTEXT_NT'named options count is 0'
                                                                                        TEST_PROPOSITION_NT'named options count is 0'(test: [ is('named options count', '0') ])
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "?[line break]"'
                                                                                    INVOCATION_LIST_SAY_NT'"?"'
                                                                                        INVOCATION_NT'"?"'
                                                                                            RVALUE_CONTEXT_NT'"?"'
                                                                                                CONSTANT_NT'"?"'-text
                                                                                    INVOCATION_LIST_SAY_NT'line break'
                                                                                        INVOCATION_NT'line break'
                                                                            CODE_BLOCK_NT'otherwise'
                                                                                CODE_BLOCK_NT'say ", "'
                                                                                    INVOCATION_LIST_SAY_NT'", "'
                                                                                        INVOCATION_NT'", "'
                                                                                            RVALUE_CONTEXT_NT'", "'
                                                                                                CONSTANT_NT'", "'-text
                        ROUTINE_NT'this is the standard respond to final question rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of final question options'
                                        INVOCATION_NT'repeat through the table of final question options'
                                            RVALUE_CONTEXT_NT'table of final question options'
                                                CONSTANT_NT'table of final question options'-table name
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the only if victorious entry is false or the story has ended finally'
                                                INVOCATION_NT'if the only if victorious entry is false or the story has ended finally'
                                                    CONDITION_CONTEXT_NT'only if victorious entry is false or the story has ended finally'
                                                        LOGICAL_OR_NT'only if victorious entry is false or the story has ended finally'
                                                            TEST_PROPOSITION_NT'only if victorious entry is false'(test: [ is('only if victorious entry', 'false') ])
                                                            TEST_VALUE_NT'the story has ended finally'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the story has ended finally'
                                                                    INVOCATION_LIST_NT'the story has ended finally'
                                                                        INVOCATION_NT'story has ended finally'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                        INVOCATION_NT'if there is a final response rule entry or the final response activity entry is not empty'
                                                            CONDITION_CONTEXT_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                LOGICAL_OR_NT'there is a final response rule entry or the final response activity entry is not empty'
                                                                    TEST_VALUE_NT'there is a final response rule entry'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                            INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                INVOCATION_NT'there is a final response rule entry'
                                                                                    LVALUE_TR_CONTEXT_NT'a final response rule entry'
                                                                                        TABLE_ENTRY_NT'a final response rule entry'
                                                                                            CONSTANT_NT-nothing valued table column
                                                                    TEST_PROPOSITION_NT'the final response activity entry is not empty'(test: [ NOT[ A4'empty'('the final response activity entry') NOT] ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the player's command matches the topic entry'
                                                                INVOCATION_NT'if the player's command matches the topic entry'
                                                                    CONDITION_CONTEXT_NT'player's command matches the topic entry'
                                                                        TEST_VALUE_NT'player's command matches the topic entry'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'player's command matches the topic entry'
                                                                                INVOCATION_LIST_NT'player's command matches the topic entry'
                                                                                    INVOCATION_NT'player's command matches the topic entry'
                                                                                        RVALUE_CONTEXT_NT'player's command'
                                                                                            NONLOCAL_VARIABLE_NT'player's command'('player's command'(var)[snippet])
                                                                                        RVALUE_CONTEXT_NT'topic entry'
                                                                                            TABLE_ENTRY_NT'topic entry'
                                                                                                CONSTANT_NT-nothing valued table column
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if there is a final response rule entry'
                                                                        INVOCATION_NT'if there is a final response rule entry'
                                                                            CONDITION_CONTEXT_NT'there is a final response rule entry'
                                                                                TEST_VALUE_NT'there is a final response rule entry'
                                                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a final response rule entry'
                                                                                        INVOCATION_LIST_NT'there is a final response rule entry'
                                                                                            INVOCATION_NT'there is a final response rule entry'
                                                                                                LVALUE_TR_CONTEXT_NT'a final response rule entry'
                                                                                                    TABLE_ENTRY_NT'a final response rule entry'
                                                                                                        CONSTANT_NT-nothing valued table column
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'abide by final response rule entry'
                                                                            INVOCATION_NT'abide by final response rule entry'
                                                                                RVALUE_CONTEXT_NT'final response rule entry'
                                                                                    TABLE_ENTRY_NT'final response rule entry'
                                                                                        CONSTANT_NT-nothing valued table column
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        INVOCATION_LIST_NT'carry out the final response activity entry activity'
                                                                            INVOCATION_NT'carry out the final response activity entry activity'
                                                                                RVALUE_CONTEXT_NT'final response activity entry'
                                                                                    TABLE_ENTRY_NT'final response activity entry'
                                                                                        CONSTANT_NT-nothing valued table column
                                                                INVOCATION_LIST_NT'rule succeeds'
                                                                    INVOCATION_NT'rule succeeds'
                                CODE_BLOCK_NT'say "Please give one of the answers above." ( a )'
                                    INVOCATION_LIST_SAY_NT'"Please give one of the answers above." ( a )'
                                        INVOCATION_NT'"Please give one of the answers above." ( a )'
                                            RVALUE_CONTEXT_NT'"Please give one of the answers above." ( a )'
                                                CONSTANT_NT'"Please give one of the answers above." ( a )'-text
                    HEADING_NT'section 6 - final question options' (level 5)
                        TABLE_NT'table of final question options final question wording only if victorious topic final response rule final response activity "RESTART" false "restart" immediately restart the vm rule -- "RESTORE a saved game" false "restore" immediately restore saved game rule -- "see some suggestions for AMUSING things to do" true "amusing" -- amusing a victorious player "QUIT" false "quit" immediately quit rule -- "UNDO the last command" false "undo" immediately undo rule --'
                    HEADING_NT'section 7 - locale descriptions - unindexed' (level 5)
                        TABLE_NT'table of locale priorities notable-object ( an object ) locale description priority ( a number ) -- -- with blank rows for each thing'
                        ROUTINE_NT'to describe locale for ( o - object )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'carry out the printing the locale description activity with o'
                                    INVOCATION_NT'carry out the printing the locale description activity with o'
                                        RVALUE_CONTEXT_NT'printing the locale description'
                                            CONSTANT_NT'printing the locale description'-activity on objects
                                        RVALUE_CONTEXT_NT'o'
                                            LOCAL_VARIABLE_NT'o'(t_0;object)
                        ROUTINE_NT'to set the/-- locale priority of ( o - an object ) to ( n - a number )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if o is a thing'
                                        INVOCATION_NT'if o is a thing'
                                            CONDITION_CONTEXT_NT'o is a thing'
                                                TEST_PROPOSITION_NT'o is a thing'(test: [ kind=thing('o') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if n <= 0'
                                                INVOCATION_NT'if n <= 0'
                                                    CONDITION_CONTEXT_NT'n <= 0'
                                                        TEST_PROPOSITION_NT'n <= 0'(test: [ at-most('n', '0') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now o is mentioned'
                                                    CONDITION_CONTEXT_NT'o is mentioned'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if there is a notable-object of o in the table of locale priorities'
                                                INVOCATION_NT'if there is a notable-object of o in the table of locale priorities'
                                                    CONDITION_CONTEXT_NT'there is a notable-object of o in the table of locale priorities'
                                                        TEST_VALUE_NT'there is a notable-object of o in the table of locale priorities'
                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a notable-object of o in the table of locale priorities'
                                                                INVOCATION_LIST_NT'there is a notable-object of o in the table of locale priorities'
                                                                    INVOCATION_NT'there is a notable-object of o in the table of locale priorities'
                                                                        LVALUE_TR_CONTEXT_NT'a notable-object of o in the table of locale priorities'
                                                                            TABLE_ENTRY_NT'a notable-object of o in the table of locale priorities'
                                                                                CONSTANT_NT-nothing valued table column
                                                                                CONSTANT_NT-nothing valued table column
                                                                                LOCAL_VARIABLE_NT'o'(t_0;object)
                                                                                CONSTANT_NT'the table of locale priorities'-table name
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'choose row with a notable-object of o in the table of locale priorities'
                                                    INVOCATION_NT'choose row with a notable-object of o in the table of locale priorities'
                                                        RVALUE_CONTEXT_NT'a notable-object'
                                                            CONSTANT_NT'a notable-object'-nothing valued table column
                                                        RVALUE_CONTEXT_NT'o'
                                                            LOCAL_VARIABLE_NT'o'(t_0;object)
                                                        RVALUE_CONTEXT_NT'table of locale priorities'
                                                            CONSTANT_NT'table of locale priorities'-table name
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if n <= 0'
                                                        INVOCATION_NT'if n <= 0'
                                                            CONDITION_CONTEXT_NT'n <= 0'
                                                                TEST_PROPOSITION_NT'n <= 0'(test: [ at-most('n', '0') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'blank out the whole row'
                                                            INVOCATION_NT'blank out the whole row'
                                                    CODE_BLOCK_NT'otherwise'
                                                        INVOCATION_LIST_NT'now the locale description priority entry is n'
                                                            CONDITION_CONTEXT_NT'the locale description priority entry is n'
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if n is greater than 0'
                                                        INVOCATION_NT'if n is greater than 0'
                                                            CONDITION_CONTEXT_NT'n is greater than 0'
                                                                TEST_PROPOSITION_NT'n is greater than 0'(test: [ greater-than('n', '0') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'choose a blank row in the table of locale priorities'
                                                            INVOCATION_NT'choose a blank row in the table of locale priorities'
                                                                RVALUE_CONTEXT_NT'table of locale priorities'
                                                                    CONSTANT_NT'table of locale priorities'-table name
                                                        INVOCATION_LIST_NT'now the notable-object entry is o'
                                                            CONDITION_CONTEXT_NT'the notable-object entry is o'
                                                        INVOCATION_LIST_NT'now the locale description priority entry is n'
                                                            CONDITION_CONTEXT_NT'the locale description priority entry is n'
                        SENTENCE_NT'printing the locale description of something ( documented at act_pld ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing the locale description of something ( documented at act_pld )'
                            PROPER_NOUN_NT'an activity'
                        SENTENCE_NT'the locale paragraph count is a number that varies'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'locale paragraph count'
                            COMMON_NOUN_NT'number that varies'
                        ROUTINE_NT'before printing the locale description ( this is the initialise locale description rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the locale paragraph count is 0'
                                    CONDITION_CONTEXT_NT'the locale paragraph count is 0'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities'
                                        INVOCATION_NT'repeat through the table of locale priorities'
                                            RVALUE_CONTEXT_NT'table of locale priorities'
                                                CONSTANT_NT'table of locale priorities'-table name
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'blank out the whole row'
                                            INVOCATION_NT'blank out the whole row'
                        ROUTINE_NT'before printing the locale description ( this is the find notable locale objects rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object'
                                    INVOCATION_NT'let the domain be the parameter-object'
                                        NEW_LOCAL_CONTEXT_NT'domain'
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object'
                                            NONLOCAL_VARIABLE_NT'parameter-object'('parameter-object'(var)[object])
                                INVOCATION_LIST_NT'carry out the choosing notable locale objects activity with the domain'
                                    INVOCATION_NT'carry out the choosing notable locale objects activity with the domain'
                                        RVALUE_CONTEXT_NT'choosing notable locale objects'
                                            CONSTANT_NT'choosing notable locale objects'-activity on objects
                                        RVALUE_CONTEXT_NT'domain'
                                            LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing the locale description ( this is the interesting locale paragraphs rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object'
                                    INVOCATION_NT'let the domain be the parameter-object'
                                        NEW_LOCAL_CONTEXT_NT'domain'
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object'
                                            NONLOCAL_VARIABLE_NT'parameter-object'('parameter-object'(var)[object])
                                INVOCATION_LIST_NT'sort the table of locale priorities in locale description priority order'
                                    INVOCATION_NT'sort the table of locale priorities in locale description priority order'
                                        RVALUE_CONTEXT_NT'table of locale priorities'
                                            CONSTANT_NT'table of locale priorities'-table name
                                        RVALUE_CONTEXT_NT'locale description priority'
                                            CONSTANT_NT'locale description priority'-nothing valued table column
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities'
                                        INVOCATION_NT'repeat through the table of locale priorities'
                                            RVALUE_CONTEXT_NT'table of locale priorities'
                                                CONSTANT_NT'table of locale priorities'-table name
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'carry out the printing a locale paragraph about activity with the notable-object entry'
                                            INVOCATION_NT'carry out the printing a locale paragraph about activity with the notable-object entry'
                                                RVALUE_CONTEXT_NT'printing a locale paragraph about'
                                                    CONSTANT_NT'printing a locale paragraph about'-activity on objects
                                                RVALUE_CONTEXT_NT'notable-object entry'
                                                    TABLE_ENTRY_NT'notable-object entry'
                                                        CONSTANT_NT-nothing valued table column
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing the locale description ( this is the you-can-also-see rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object'
                                    INVOCATION_NT'let the domain be the parameter-object'
                                        NEW_LOCAL_CONTEXT_NT'domain'
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object'
                                            NONLOCAL_VARIABLE_NT'parameter-object'('parameter-object'(var)[object])
                                INVOCATION_LIST_NT'let the mentionable count be 0'
                                    INVOCATION_NT'let the mentionable count be 0'
                                        NEW_LOCAL_CONTEXT_NT'mentionable count'
                                            UNKNOWN_NT'mentionable count'
                                        RVALUE_CONTEXT_NT'0'
                                            CONSTANT_NT'0'-number
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat with item running through things'
                                        INVOCATION_NT'repeat with item running through things'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'things'
                                                CONSTANT_NT'things'-description of things
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is not marked for listing'
                                            CONDITION_CONTEXT_NT'the item is not marked for listing'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat through the table of locale priorities'
                                        INVOCATION_NT'repeat through the table of locale priorities'
                                            RVALUE_CONTEXT_NT'table of locale priorities'
                                                CONSTANT_NT'table of locale priorities'-table name
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the locale description priority entry is greater than 0'
                                                INVOCATION_NT'if the locale description priority entry is greater than 0'
                                                    CONDITION_CONTEXT_NT'locale description priority entry is greater than 0'
                                                        TEST_PROPOSITION_NT'locale description priority entry is greater than 0'(test: [ greater-than('locale description priority entry', '0') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the notable-object entry is marked for listing'
                                                    CONDITION_CONTEXT_NT'the notable-object entry is marked for listing'
                                        INVOCATION_LIST_NT'increase the mentionable count by 1'
                                            INVOCATION_NT'increase the mentionable count by 1'
                                                LVALUE_CONTEXT_NT'mentionable count'
                                                    LOCAL_VARIABLE_NT'mentionable count'(tmp_1;number)
                                                RVALUE_CONTEXT_NT'1'
                                                    CONSTANT_NT'1'-number
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the mentionable count is greater than 0'
                                        INVOCATION_NT'if the mentionable count is greater than 0'
                                            CONDITION_CONTEXT_NT'mentionable count is greater than 0'
                                                TEST_PROPOSITION_NT'mentionable count is greater than 0'(test: [ greater-than('mentionable count', '0') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'repeat with item running through things'
                                                INVOCATION_NT'repeat with item running through things'
                                                    NEW_LOCAL_CONTEXT_NT'item'
                                                        UNKNOWN_NT'item'
                                                    RVALUE_CONTEXT_NT'things'
                                                        CONSTANT_NT'things'-description of things
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the item is mentioned'
                                                        INVOCATION_NT'if the item is mentioned'
                                                            CONDITION_CONTEXT_NT'item is mentioned'
                                                                TEST_PROPOSITION_NT'item is mentioned'(test: [ A75'mentioned'('item') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the item is not marked for listing'
                                                            CONDITION_CONTEXT_NT'the item is not marked for listing'
                                        INVOCATION_LIST_NT'begin the listing nondescript items activity with the domain'
                                            INVOCATION_NT'begin the listing nondescript items activity with the domain'
                                                RVALUE_CONTEXT_NT'listing nondescript items'
                                                    CONSTANT_NT'listing nondescript items'-activity on objects
                                                RVALUE_CONTEXT_NT'domain'
                                                    LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the number of marked for listing things is 0'
                                                INVOCATION_NT'if the number of marked for listing things is 0'
                                                    CONDITION_CONTEXT_NT'number of marked for listing things is 0'
                                                        TEST_PROPOSITION_NT'number of marked for listing things is 0'(test: [ is('number of marked for listing things', '0') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'abandon the listing nondescript items activity with the domain'
                                                    INVOCATION_NT'abandon the listing nondescript items activity with the domain'
                                                        RVALUE_CONTEXT_NT'listing nondescript items'
                                                            CONSTANT_NT'listing nondescript items'-activity on objects
                                                        RVALUE_CONTEXT_NT'domain'
                                                            LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if handling the listing nondescript items activity with the domain'
                                                        INVOCATION_NT'if handling the listing nondescript items activity with the domain'
                                                            CONDITION_CONTEXT_NT'handling the listing nondescript items activity with the domain'
                                                                TEST_VALUE_NT'handling the listing nondescript items activity with the domain'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'handling the listing nondescript items activity with the domain'
                                                                        INVOCATION_LIST_NT'handling the listing nondescript items activity with the domain'
                                                                            INVOCATION_NT'handling the listing nondescript items activity with the domain'
                                                                                RVALUE_CONTEXT_NT'listing nondescript items'
                                                                                    CONSTANT_NT'listing nondescript items'-activity on objects
                                                                                RVALUE_CONTEXT_NT'domain'
                                                                                    LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the domain is the location'
                                                                INVOCATION_NT'if the domain is the location'
                                                                    CONDITION_CONTEXT_NT'domain is the location'
                                                                        TEST_PROPOSITION_NT'domain is the location'(test: [ is('domain', 'the location') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[We] " ( a )'
                                                                    INVOCATION_LIST_SAY_NT'"[We] " ( a )'
                                                                        INVOCATION_NT'"[We] " ( a )'
                                                                            RVALUE_CONTEXT_NT'"[We] " ( a )'
                                                                                CONSTANT_NT'"[We] " ( a )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the domain is a supporter or the domain is an animal'
                                                                        INVOCATION_NT'if the domain is a supporter or the domain is an animal'
                                                                            CONDITION_CONTEXT_NT'domain is a supporter or the domain is an animal'
                                                                                LOGICAL_OR_NT'domain is a supporter or the domain is an animal'
                                                                                    TEST_PROPOSITION_NT'domain is a supporter'(test: [ kind=supporter('domain') ])
                                                                                    TEST_PROPOSITION_NT'the domain is an animal'(test: [ kind=animal('the domain') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "On [the domain] [we] " ( b )'
                                                                            INVOCATION_LIST_SAY_NT'"On [the domain] [we] " ( b )'
                                                                                INVOCATION_NT'"On [the domain] [we] " ( b )'
                                                                                    RVALUE_CONTEXT_NT'"On [the domain] [we] " ( b )'
                                                                                        CONSTANT_NT'"On [the domain] [we] " ( b )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT'say "In [the domain] [we] " ( c )'
                                                                            INVOCATION_LIST_SAY_NT'"In [the domain] [we] " ( c )'
                                                                                INVOCATION_NT'"In [the domain] [we] " ( c )'
                                                                                    RVALUE_CONTEXT_NT'"In [the domain] [we] " ( c )'
                                                                                        CONSTANT_NT'"In [the domain] [we] " ( c )'-text
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the locale paragraph count is greater than 0'
                                                                INVOCATION_NT'if the locale paragraph count is greater than 0'
                                                                    CONDITION_CONTEXT_NT'locale paragraph count is greater than 0'
                                                                        TEST_PROPOSITION_NT'locale paragraph count is greater than 0'(test: [ greater-than('locale paragraph count', '0') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[regarding the player][can] also see " ( d )'
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the player][can] also see " ( d )'
                                                                        INVOCATION_NT'"[regarding the player][can] also see " ( d )'
                                                                            RVALUE_CONTEXT_NT'"[regarding the player][can] also see " ( d )'
                                                                                CONSTANT_NT'"[regarding the player][can] also see " ( d )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT'say "[regarding the player][can] see " ( e )'
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the player][can] see " ( e )'
                                                                        INVOCATION_NT'"[regarding the player][can] see " ( e )'
                                                                            RVALUE_CONTEXT_NT'"[regarding the player][can] see " ( e )'
                                                                                CONSTANT_NT'"[regarding the player][can] see " ( e )'-text
                                                        INVOCATION_LIST_NT'let the common holder be nothing'
                                                            INVOCATION_NT'let the common holder be nothing'
                                                                NEW_LOCAL_CONTEXT_NT'common holder'
                                                                    UNKNOWN_NT'common holder'
                                                                RVALUE_CONTEXT_NT'nothing'
                                                                    CONSTANT_NT'nothing'-object(-nothing-)
                                                        INVOCATION_LIST_NT'let contents form of list be true'
                                                            INVOCATION_NT'let contents form of list be true'
                                                                NEW_LOCAL_CONTEXT_NT'contents form of list'
                                                                    UNKNOWN_NT'contents form of list'
                                                                RVALUE_CONTEXT_NT'true'
                                                                    CONSTANT_NT'true'-truth state
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'repeat with list item running through marked for listing things'
                                                                INVOCATION_NT'repeat with list item running through marked for listing things'
                                                                    NEW_LOCAL_CONTEXT_NT'list item'
                                                                        UNKNOWN_NT'list item'
                                                                    RVALUE_CONTEXT_NT'marked for listing things'
                                                                        CONSTANT_NT'marked for listing things'-description of things
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the holder of the list item is not the common holder'
                                                                        INVOCATION_NT'if the holder of the list item is not the common holder'
                                                                            CONDITION_CONTEXT_NT'holder of the list item is not the common holder'
                                                                                TEST_PROPOSITION_NT'holder of the list item is not the common holder'(test: [ NOT[ is('holder of the list item', 'the common holder') NOT] ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the common holder is nothing'
                                                                                INVOCATION_NT'if the common holder is nothing'
                                                                                    CONDITION_CONTEXT_NT'common holder is nothing'
                                                                                        TEST_PROPOSITION_NT'common holder is nothing'(test: [ is('common holder', 'nothing') ])
                                                                            CODE_BLOCK_NT
                                                                                INVOCATION_LIST_NT'now the common holder is the holder of the list item'
                                                                                    CONDITION_CONTEXT_NT'the common holder is the holder of the list item'
                                                                            CODE_BLOCK_NT'otherwise'
                                                                                INVOCATION_LIST_NT'now contents form of list is false'
                                                                                    CONDITION_CONTEXT_NT'contents form of list is false'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the list item is mentioned'
                                                                        INVOCATION_NT'if the list item is mentioned'
                                                                            CONDITION_CONTEXT_NT'list item is mentioned'
                                                                                TEST_PROPOSITION_NT'list item is mentioned'(test: [ A75'mentioned'('list item') ])
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the list item is not marked for listing'
                                                                            CONDITION_CONTEXT_NT'the list item is not marked for listing'
                                                        INVOCATION_LIST_NT'filter list recursion to unmentioned things'
                                                            INVOCATION_NT'filter list recursion to unmentioned things'
                                                                RVALUE_CONTEXT_NT'unmentioned things'
                                                                    CONSTANT_NT'unmentioned things'-description of things
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if contents form of list is true and the common holder is not nothing'
                                                                INVOCATION_NT'if contents form of list is true and the common holder is not nothing'
                                                                    CONDITION_CONTEXT_NT'contents form of list is true and the common holder is not nothing'
                                                                        LOGICAL_AND_NT'contents form of list is true and the common holder is not nothing'
                                                                            TEST_PROPOSITION_NT'contents form of list is true'(test: [ is('contents form of list', 'true') ])
                                                                            TEST_PROPOSITION_NT'the common holder is not nothing'(test: [ NOT[ is('the common holder', 'nothing') NOT] ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'list the contents of the common holder , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , listing marked items only'
                                                                    INVOCATION_NT'list the contents of the common holder'
                                                                        RVALUE_CONTEXT_NT'common holder'
                                                                            LOCAL_VARIABLE_NT'common holder'(tmp_2;object)
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT'say "[a list of marked for listing things including contents]"'
                                                                    INVOCATION_LIST_SAY_NT'a list of marked for listing things including contents'
                                                                        INVOCATION_NT'a list of marked for listing things including contents'
                                                                            RVALUE_CONTEXT_NT'marked for listing things'
                                                                                CONSTANT_NT'marked for listing things'-description of things
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the domain is the location'
                                                                INVOCATION_NT'if the domain is the location'
                                                                    CONDITION_CONTEXT_NT'domain is the location'
                                                                        TEST_PROPOSITION_NT'domain is the location'(test: [ is('domain', 'the location') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say " here" ( f )'
                                                                    INVOCATION_LIST_SAY_NT'" here" ( f )'
                                                                        INVOCATION_NT'" here" ( f )'
                                                                            RVALUE_CONTEXT_NT'" here" ( f )'
                                                                                CONSTANT_NT'" here" ( f )'-text
                                                        CODE_BLOCK_NT'say ".[paragraph break]"'
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."'
                                                                    RVALUE_CONTEXT_NT'"."'
                                                                        CONSTANT_NT'"."'-text
                                                            INVOCATION_LIST_SAY_NT'paragraph break'
                                                                INVOCATION_NT'paragraph break'
                                                        INVOCATION_LIST_NT'unfilter list recursion'
                                                            INVOCATION_NT'unfilter list recursion'
                                                INVOCATION_LIST_NT'end the listing nondescript items activity with the domain'
                                                    INVOCATION_NT'end the listing nondescript items activity with the domain'
                                                        RVALUE_CONTEXT_NT'listing nondescript items'
                                                            CONSTANT_NT'listing nondescript items'-activity on objects
                                                        RVALUE_CONTEXT_NT'domain'
                                                            LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        SENTENCE_NT'choosing notable locale objects of something ( documented at act_cnlo ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'choosing notable locale objects of something ( documented at act_cnlo )'
                            PROPER_NOUN_NT'an activity'
                        ROUTINE_NT'for choosing notable locale objects ( this is the standard notable locale objects rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the domain be the parameter-object'
                                    INVOCATION_NT'let the domain be the parameter-object'
                                        NEW_LOCAL_CONTEXT_NT'domain'
                                            UNKNOWN_NT'domain'
                                        RVALUE_CONTEXT_NT'parameter-object'
                                            NONLOCAL_VARIABLE_NT'parameter-object'('parameter-object'(var)[object])
                                INVOCATION_LIST_NT'let the held item be the first thing held by the domain'
                                    INVOCATION_NT'let the held item be the first thing held by the domain'
                                        NEW_LOCAL_CONTEXT_NT'held item'
                                            UNKNOWN_NT'held item'
                                        RVALUE_CONTEXT_NT'first thing held by the domain'
                                            PHRASE_TO_DECIDE_VALUE_NT'first thing held by the domain'
                                                INVOCATION_LIST_NT'first thing held by the domain'
                                                    INVOCATION_NT'first thing held by the domain'
                                                        RVALUE_CONTEXT_NT'domain'
                                                            LOCAL_VARIABLE_NT'domain'(tmp_0;object)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'while the held item is a thing'
                                        INVOCATION_NT'while the held item is a thing'
                                            CONDITION_CONTEXT_NT'held item is a thing'
                                                TEST_PROPOSITION_NT'held item is a thing'(test: [ kind=thing('held item') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the held item to 5'
                                            INVOCATION_NT'set the locale priority of the held item to 5'
                                                RVALUE_CONTEXT_NT'held item'
                                                    LOCAL_VARIABLE_NT'held item'(tmp_1;object)
                                                RVALUE_CONTEXT_NT'5'
                                                    CONSTANT_NT'5'-number
                                        INVOCATION_LIST_NT'now the held item is the next thing held after the held item'
                                            CONDITION_CONTEXT_NT'the held item is the next thing held after the held item'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        SENTENCE_NT'printing a locale paragraph about something ( documented at act_plp ) is an activity'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'printing a locale paragraph about something ( documented at act_plp )'
                            PROPER_NOUN_NT'an activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention player's supporter in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item encloses the player'
                                        INVOCATION_NT'if the item encloses the player'
                                            CONDITION_CONTEXT_NT'item encloses the player'
                                                TEST_PROPOSITION_NT'item encloses the player'(test: [ encloses('item', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0'
                                            INVOCATION_NT'set the locale priority of the item to 0'
                                                RVALUE_CONTEXT_NT'item'
                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                RVALUE_CONTEXT_NT'0'
                                                    CONSTANT_NT'0'-number
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention scenery in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is scenery'
                                        INVOCATION_NT'if the item is scenery'
                                            CONDITION_CONTEXT_NT'item is scenery'
                                                TEST_PROPOSITION_NT'item is scenery'(test: [ A67'scenery'('item') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0'
                                            INVOCATION_NT'set the locale priority of the item to 0'
                                                RVALUE_CONTEXT_NT'item'
                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                RVALUE_CONTEXT_NT'0'
                                                    CONSTANT_NT'0'-number
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the don't mention undescribed items in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is undescribed'
                                        INVOCATION_NT'if the item is undescribed'
                                            CONDITION_CONTEXT_NT'item is undescribed'
                                                TEST_PROPOSITION_NT'item is undescribed'(test: [ A71'undescribed'('item') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set the locale priority of the item to 0'
                                            INVOCATION_NT'set the locale priority of the item to 0'
                                                RVALUE_CONTEXT_NT'item'
                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                RVALUE_CONTEXT_NT'0'
                                                    CONSTANT_NT'0'-number
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the set pronouns from items in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is not mentioned'
                                        INVOCATION_NT'if the item is not mentioned'
                                            CONDITION_CONTEXT_NT'item is not mentioned'
                                                TEST_PROPOSITION_NT'item is not mentioned'(test: [ NOT[ A75'mentioned'('item') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'set pronouns from the item'
                                            INVOCATION_NT'set pronouns from the item'
                                                RVALUE_CONTEXT_NT'item'
                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the offer items to writing a paragraph about rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is not mentioned'
                                        INVOCATION_NT'if the item is not mentioned'
                                            CONDITION_CONTEXT_NT'item is not mentioned'
                                                TEST_PROPOSITION_NT'item is not mentioned'(test: [ NOT[ A75'mentioned'('item') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if a paragraph break is pending'
                                                INVOCATION_NT'if a paragraph break is pending'
                                                    CONDITION_CONTEXT_NT'a paragraph break is pending'
                                                        TEST_VALUE_NT'a paragraph break is pending'
                                                            PHRASE_TO_DECIDE_VALUE_NT'a paragraph break is pending'
                                                                INVOCATION_LIST_NT'a paragraph break is pending'
                                                                    INVOCATION_NT'a paragraph break is pending'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[conditional paragraph break]"'
                                                    INVOCATION_LIST_SAY_NT'conditional paragraph break'
                                                        INVOCATION_NT'conditional paragraph break'
                                        INVOCATION_LIST_NT'carry out the writing a paragraph about activity with the item'
                                            INVOCATION_NT'carry out the writing a paragraph about activity with the item'
                                                RVALUE_CONTEXT_NT'writing a paragraph about'
                                                    CONSTANT_NT'writing a paragraph about'-activity on objects
                                                RVALUE_CONTEXT_NT'item'
                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if a paragraph break is pending'
                                                INVOCATION_NT'if a paragraph break is pending'
                                                    CONDITION_CONTEXT_NT'a paragraph break is pending'
                                                        TEST_VALUE_NT'a paragraph break is pending'
                                                            PHRASE_TO_DECIDE_VALUE_NT'a paragraph break is pending'
                                                                INVOCATION_LIST_NT'a paragraph break is pending'
                                                                    INVOCATION_NT'a paragraph break is pending'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1'
                                                    INVOCATION_NT'increase the locale paragraph count by 1'
                                                        LVALUE_CONTEXT_NT'locale paragraph count'
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count'('locale paragraph count'(var)[number])
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                                INVOCATION_LIST_NT'now the item is mentioned'
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                                CODE_BLOCK_NT'say "[conditional paragraph break]"'
                                                    INVOCATION_LIST_SAY_NT'conditional paragraph break'
                                                        INVOCATION_NT'conditional paragraph break'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the use initial appearance in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is not mentioned'
                                        INVOCATION_NT'if the item is not mentioned'
                                            CONDITION_CONTEXT_NT'item is not mentioned'
                                                TEST_PROPOSITION_NT'item is not mentioned'(test: [ NOT[ A75'mentioned'('item') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ""'
                                                INVOCATION_NT'if the item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ""'
                                                    CONDITION_CONTEXT_NT'item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ""'
                                                        LOGICAL_AND_NT'item provides the property initial appearance and the item is not handled and the initial appearance of the item is not ""'
                                                            TEST_PROPOSITION_NT'item provides the property initial appearance'(test: [ provides('item', 'the property initial appearance') ])
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'the item is not handled'(test: [ NOT[ A70'handled'('the item') NOT] ])
                                                                TEST_PROPOSITION_NT'the initial appearance of the item is not ""'(test: [ NOT[ is('the initial appearance of the item', '""') NOT] ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1'
                                                    INVOCATION_NT'increase the locale paragraph count by 1'
                                                        LVALUE_CONTEXT_NT'locale paragraph count'
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count'('locale paragraph count'(var)[number])
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                                CODE_BLOCK_NT'say "[initial appearance of the item]"'
                                                    INVOCATION_LIST_SAY_NT'initial appearance of the item'
                                                        INVOCATION_NT'initial appearance of the item'
                                                            RVALUE_CONTEXT_NT'initial appearance of the item'
                                                                PROPERTY_VALUE_NT'initial appearance of the item'
                                                                    CONSTANT_NT-nothing valued property
                                                                    LOCAL_VARIABLE_NT'the item'(tmp_0;thing)
                                                CODE_BLOCK_NT'say "[paragraph break]"'
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if a locale-supportable thing is on the item'
                                                        INVOCATION_NT'if a locale-supportable thing is on the item'
                                                            CONDITION_CONTEXT_NT'a locale-supportable thing is on the item'
                                                                TEST_PROPOSITION_NT'a locale-supportable thing is on the item'(test: [ Exists x : kind=thing(x) ^ A41'locale-supportable'(x) ^ is('the item', {<schema: SupporterOf(*1)>:x}) ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'repeat with possibility running through things on the item'
                                                                INVOCATION_NT'repeat with possibility running through things on the item'
                                                                    NEW_LOCAL_CONTEXT_NT'possibility'
                                                                        UNKNOWN_NT'possibility'
                                                                    RVALUE_CONTEXT_NT'things on the item'
                                                                        CONSTANT_NT'things on the item'-description of things
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is marked for listing'
                                                                    CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the possibility is mentioned'
                                                                        INVOCATION_NT'if the possibility is mentioned'
                                                                            CONDITION_CONTEXT_NT'possibility is mentioned'
                                                                                TEST_PROPOSITION_NT'possibility is mentioned'(test: [ A75'mentioned'('possibility') ])
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the possibility is not marked for listing'
                                                                            CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                        CODE_BLOCK_NT'say "On [the item] " ( a )'
                                                            INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                                INVOCATION_NT'"On [the item] " ( a )'
                                                                    RVALUE_CONTEXT_NT'"On [the item] " ( a )'
                                                                        CONSTANT_NT'"On [the item] " ( a )'-text
                                                        INVOCATION_LIST_NT'list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only'
                                                            INVOCATION_NT'list the contents of the item'
                                                                RVALUE_CONTEXT_NT'item'
                                                                    LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                        CODE_BLOCK_NT'say ".[paragraph break]"'
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."'
                                                                    RVALUE_CONTEXT_NT'"."'
                                                                        CONSTANT_NT'"."'-text
                                                            INVOCATION_LIST_SAY_NT'paragraph break'
                                                                INVOCATION_NT'paragraph break'
                                                INVOCATION_LIST_NT'now the item is mentioned'
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a supporter ( called the tabletop ) ( this is the initial appearance on supporters rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat with item running through not handled things on the tabletop which provide the property initial appearance'
                                        INVOCATION_NT'repeat with item running through not handled things on the tabletop which provide the property initial appearance'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'not handled things on the tabletop which provide the property initial appearance'
                                                CONSTANT_NT'not handled things on the tabletop which provide the property initial appearance'-description of things
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the item is not a person and the initial appearance of the item is not "" and the item is not undescribed'
                                                INVOCATION_NT'if the item is not a person and the initial appearance of the item is not "" and the item is not undescribed'
                                                    CONDITION_CONTEXT_NT'item is not a person and the initial appearance of the item is not "" and the item is not undescribed'
                                                        LOGICAL_AND_NT'item is not a person and the initial appearance of the item is not "" and the item is not undescribed'
                                                            TEST_PROPOSITION_NT'item is not a person'(test: [ NOT[ kind=person('item') NOT] ])
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'the initial appearance of the item is not ""'(test: [ NOT[ is('the initial appearance of the item', '""') NOT] ])
                                                                TEST_PROPOSITION_NT'the item is not undescribed'(test: [ NOT[ A71'undescribed'('the item') NOT] ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the item is mentioned'
                                                    CONDITION_CONTEXT_NT'the item is mentioned'
                                                CODE_BLOCK_NT'say initial appearance of the item'
                                                    INVOCATION_LIST_SAY_NT'initial appearance of the item'
                                                        INVOCATION_NT'initial appearance of the item'
                                                            RVALUE_CONTEXT_NT'initial appearance of the item'
                                                                PROPERTY_VALUE_NT'initial appearance of the item'
                                                                    CONSTANT_NT-nothing valued property
                                                                    LOCAL_VARIABLE_NT'the item'(tmp_1;thing)
                                                CODE_BLOCK_NT'say paragraph break'
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'definition'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on scenery supporters in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is scenery and the item does not enclose the player'
                                        INVOCATION_NT'if the item is scenery and the item does not enclose the player'
                                            CONDITION_CONTEXT_NT'item is scenery and the item does not enclose the player'
                                                LOGICAL_AND_NT'item is scenery and the item does not enclose the player'
                                                    TEST_PROPOSITION_NT'item is scenery'(test: [ A67'scenery'('item') ])
                                                    TEST_PROPOSITION_NT'the item does not enclose the player'(test: [ NOT[ encloses('the item', 'the player') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if a locale-supportable thing is on the item'
                                                INVOCATION_NT'if a locale-supportable thing is on the item'
                                                    CONDITION_CONTEXT_NT'a locale-supportable thing is on the item'
                                                        TEST_PROPOSITION_NT'a locale-supportable thing is on the item'(test: [ Exists x : kind=thing(x) ^ A41'locale-supportable'(x) ^ is('the item', {<schema: SupporterOf(*1)>:x}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'set pronouns from the item'
                                                    INVOCATION_NT'set pronouns from the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'repeat with possibility running through things on the item'
                                                        INVOCATION_NT'repeat with possibility running through things on the item'
                                                            NEW_LOCAL_CONTEXT_NT'possibility'
                                                                UNKNOWN_NT'possibility'
                                                            RVALUE_CONTEXT_NT'things on the item'
                                                                CONSTANT_NT'things on the item'-description of things
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the possibility is marked for listing'
                                                            CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the possibility is mentioned'
                                                                INVOCATION_NT'if the possibility is mentioned'
                                                                    CONDITION_CONTEXT_NT'possibility is mentioned'
                                                                        TEST_PROPOSITION_NT'possibility is mentioned'(test: [ A75'mentioned'('possibility') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is not marked for listing'
                                                                    CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1'
                                                    INVOCATION_NT'increase the locale paragraph count by 1'
                                                        LVALUE_CONTEXT_NT'locale paragraph count'
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count'('locale paragraph count'(var)[number])
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                                CODE_BLOCK_NT'say "On [the item] " ( a )'
                                                    INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                        INVOCATION_NT'"On [the item] " ( a )'
                                                            RVALUE_CONTEXT_NT'"On [the item] " ( a )'
                                                                CONSTANT_NT'"On [the item] " ( a )'-text
                                                INVOCATION_LIST_NT'list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only'
                                                    INVOCATION_NT'list the contents of the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                CODE_BLOCK_NT'say ".[paragraph break]"'
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."'
                                                            RVALUE_CONTEXT_NT'"."'
                                                                CONSTANT_NT'"."'-text
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                        ROUTINE_NT'for printing a locale paragraph about a thing ( called the item ) ( this is the describe what's on mentioned supporters in room descriptions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player'
                                        INVOCATION_NT'if the item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player'
                                            CONDITION_CONTEXT_NT'item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player'
                                                LOGICAL_AND_NT'item is mentioned and the item is not undescribed and the item is not scenery and the item does not enclose the player'
                                                    TEST_PROPOSITION_NT'item is mentioned'(test: [ A75'mentioned'('item') ])
                                                    LOGICAL_AND_NT
                                                        TEST_PROPOSITION_NT'the item is not undescribed'(test: [ NOT[ A71'undescribed'('the item') NOT] ])
                                                        LOGICAL_AND_NT
                                                            TEST_PROPOSITION_NT'the item is not scenery'(test: [ NOT[ A67'scenery'('the item') NOT] ])
                                                            TEST_PROPOSITION_NT'the item does not enclose the player'(test: [ NOT[ encloses('the item', 'the player') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if a locale-supportable thing is on the item'
                                                INVOCATION_NT'if a locale-supportable thing is on the item'
                                                    CONDITION_CONTEXT_NT'a locale-supportable thing is on the item'
                                                        TEST_PROPOSITION_NT'a locale-supportable thing is on the item'(test: [ Exists x : kind=thing(x) ^ A41'locale-supportable'(x) ^ is('the item', {<schema: SupporterOf(*1)>:x}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'set pronouns from the item'
                                                    INVOCATION_NT'set pronouns from the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'repeat with possibility running through things on the item'
                                                        INVOCATION_NT'repeat with possibility running through things on the item'
                                                            NEW_LOCAL_CONTEXT_NT'possibility'
                                                                UNKNOWN_NT'possibility'
                                                            RVALUE_CONTEXT_NT'things on the item'
                                                                CONSTANT_NT'things on the item'-description of things
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the possibility is marked for listing'
                                                            CONDITION_CONTEXT_NT'the possibility is marked for listing'
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the possibility is mentioned'
                                                                INVOCATION_NT'if the possibility is mentioned'
                                                                    CONDITION_CONTEXT_NT'possibility is mentioned'
                                                                        TEST_PROPOSITION_NT'possibility is mentioned'(test: [ A75'mentioned'('possibility') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the possibility is not marked for listing'
                                                                    CONDITION_CONTEXT_NT'the possibility is not marked for listing'
                                                INVOCATION_LIST_NT'increase the locale paragraph count by 1'
                                                    INVOCATION_NT'increase the locale paragraph count by 1'
                                                        LVALUE_CONTEXT_NT'locale paragraph count'
                                                            NONLOCAL_VARIABLE_NT'locale paragraph count'('locale paragraph count'(var)[number])
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                                CODE_BLOCK_NT'say "On [the item] " ( a )'
                                                    INVOCATION_LIST_SAY_NT'"On [the item] " ( a )'
                                                        INVOCATION_NT'"On [the item] " ( a )'
                                                            RVALUE_CONTEXT_NT'"On [the item] " ( a )'
                                                                CONSTANT_NT'"On [the item] " ( a )'-text
                                                INVOCATION_LIST_NT'list the contents of the item , as a sentence , including contents , giving brief inventory information , tersely , not listing concealed items , prefacing with is/are , listing marked items only'
                                                    INVOCATION_NT'list the contents of the item'
                                                        RVALUE_CONTEXT_NT'item'
                                                            LOCAL_VARIABLE_NT'item'(tmp_0;thing)
                                                CODE_BLOCK_NT'say ".[paragraph break]"'
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."'
                                                            RVALUE_CONTEXT_NT'"."'
                                                                CONSTANT_NT'"."'-text
                                                    INVOCATION_LIST_SAY_NT'paragraph break'
                                                        INVOCATION_NT'paragraph break'
                                INVOCATION_LIST_NT'continue the activity'
                                    INVOCATION_NT'continue the activity'
                HEADING_NT'part five - actions' (level 3)
                    HEADING_NT'section 1 - verbs needed for adaptive text' (level 5)
                        SENTENCE_NT'to achieve is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to achieve'
                        SENTENCE_NT'to appreciate is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to appreciate'
                        SENTENCE_NT'to arrive is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to arrive'
                        SENTENCE_NT'to care is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to care'
                        SENTENCE_NT'to close is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to close'
                        SENTENCE_NT'to die is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to die'
                        SENTENCE_NT'to discover is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to discover'
                        SENTENCE_NT'to drop is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to drop'
                        SENTENCE_NT'to eat is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to eat'
                        SENTENCE_NT'to feel is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to feel'
                        SENTENCE_NT'to find is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to find'
                        SENTENCE_NT'to get is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to get'
                        SENTENCE_NT'to give is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to give'
                        SENTENCE_NT'to go is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to go'
                        SENTENCE_NT'to happen is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to happen'
                        SENTENCE_NT'to hear is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to hear'
                        SENTENCE_NT'to jump is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to jump'
                        SENTENCE_NT'to lack is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to lack'
                        SENTENCE_NT'to lead is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to lead'
                        SENTENCE_NT'to like is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to like'
                        SENTENCE_NT'to listen is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to listen'
                        SENTENCE_NT'to lock is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to lock'
                        SENTENCE_NT'to look is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to look'
                        SENTENCE_NT'to need is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to need'
                        SENTENCE_NT'to open is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to open'
                        SENTENCE_NT'to pass is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to pass'
                        SENTENCE_NT'to pick is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to pick'
                        SENTENCE_NT'to provoke is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to provoke'
                        SENTENCE_NT'to pull is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to pull'
                        SENTENCE_NT'to push is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to push'
                        SENTENCE_NT'to put is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to put'
                        SENTENCE_NT'to rub is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to rub'
                        SENTENCE_NT'to say is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to say'
                        SENTENCE_NT'to search is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to search'
                        SENTENCE_NT'to see is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to see'
                        SENTENCE_NT'to seem is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to seem'
                        SENTENCE_NT'to set is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to set'
                        SENTENCE_NT'to smell is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to smell'
                        SENTENCE_NT'to sniff is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to sniff'
                        SENTENCE_NT'to squeeze is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to squeeze'
                        SENTENCE_NT'to switch is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to switch'
                        SENTENCE_NT'to take is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to take'
                        SENTENCE_NT'to talk is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to talk'
                        SENTENCE_NT'to taste is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to taste'
                        SENTENCE_NT'to touch is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to touch'
                        SENTENCE_NT'to turn is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to turn'
                        SENTENCE_NT'to wait is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to wait'
                        SENTENCE_NT'to wave is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to wave'
                        SENTENCE_NT'to win is a verb'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'to win'
                    HEADING_NT'section 2 - standard actions concerning the actor's possessions' (level 5)
                        SENTENCE_NT'taking inventory is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'taking inventory'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the taking inventory action translates into i6 as Inv'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'taking inventory action'
                            PROPER_NOUN_NT'Inv'
                        SENTENCE_NT'the specification of the taking inventory action is Taking an inventory of
                        one's immediate possessions: the things being carried, either directly or in
                        any containers being carried. When the player performs this action, either
                        the inventory listing, or else a special message if nothing is being carried
                        or worn, is printed during the carry out rules: nothing happens at the report
                        stage. The opposite happens for other people performing the action: nothing
                        happens during carry out, but a report such as 'Mr X looks through his
                        possessions.' is produced (provided Mr X is visible).'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the taking inventory action'
                                PROPER_NOUN_NT'taking inventory action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Taking an inventory of
                            one's immediate possessions: the things being carried, either directly or in
                            any containers being carried. When the player performs this action, either
                            the inventory listing, or else a special message if nothing is being carried
                            or worn, is printed during the carry out rules: nothing happens at the report
                            stage. The opposite happens for other people performing the action: nothing
                            happens during carry out, but a report such as 'Mr X looks through his
                            possessions.' is produced (provided Mr X is visible).'
                        ROUTINE_NT'carry out taking inventory ( this is the print empty inventory rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the first thing held by the player is nothing'
                                        INVOCATION_NT'if the first thing held by the player is nothing'
                                            CONDITION_CONTEXT_NT'first thing held by the player is nothing'
                                                TEST_PROPOSITION_NT'first thing held by the player is nothing'(test: [ is('first thing held by the player', 'nothing') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [are] carrying nothing." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [are] carrying nothing." ( a )'
                                                INVOCATION_NT'"[We] [are] carrying nothing." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [are] carrying nothing." ( a )'
                                                        CONSTANT_NT'"[We] [are] carrying nothing." ( a )'-text
                                        CODE_BLOCK_NT
                        ROUTINE_NT'carry out taking inventory ( this is the print standard inventory rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[We] [are] carrying:[line break]" ( a )'
                                    INVOCATION_LIST_SAY_NT'"[We] [are] carrying:[line break]" ( a )'
                                        INVOCATION_NT'"[We] [are] carrying:[line break]" ( a )'
                                            RVALUE_CONTEXT_NT'"[We] [are] carrying:[line break]" ( a )'
                                                CONSTANT_NT'"[We] [are] carrying:[line break]" ( a )'-text
                                INVOCATION_LIST_NT'list the contents of the player , with newlines , indented , including contents , giving inventory information , with extra indentation'
                                    INVOCATION_NT'list the contents of the player'
                                        RVALUE_CONTEXT_NT'player'
                                            NONLOCAL_VARIABLE_NT'player'('player'(var)[person])
                        ROUTINE_NT'report an actor taking inventory ( this is the report other people taking inventory rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the player and the action is not silent'
                                        INVOCATION_NT'if the actor is not the player and the action is not silent'
                                            CONDITION_CONTEXT_NT'actor is not the player and the action is not silent'
                                                LOGICAL_AND_NT'actor is not the player and the action is not silent'
                                                    TEST_PROPOSITION_NT'actor is not the player'(test: [ NOT[ is('actor', 'the player') NOT] ])
                                                    TEST_VALUE_NT'the action is not silent'
                                                        PHRASE_TO_DECIDE_VALUE_NT'the action is not silent'
                                                            INVOCATION_LIST_NT'the action is not silent'
                                                                INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] through [their] possessions." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] through [their] possessions." ( a )'
                                                INVOCATION_NT'"[The actor] [look] through [their] possessions." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] through [their] possessions." ( a )'
                                                        CONSTANT_NT'"[The actor] [look] through [their] possessions." ( a )'-text
                        SENTENCE_NT'taking is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'taking'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the taking action translates into i6 as Take'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'taking action'
                            PROPER_NOUN_NT'Take'
                        SENTENCE_NT'the specification of the taking action is The taking action is the only way
                        an action in the Standard Rules can cause something to be carried by an actor.
                        It is very simple in operation (the entire carry out stage consists only of
                        'now the actor carries the noun') but many checks must be performed before it
                        can be allowed to happen.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the taking action'
                                PROPER_NOUN_NT'taking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The taking action is the only way
                            an action in the Standard Rules can cause something to be carried by an actor.
                            It is very simple in operation (the entire carry out stage consists only of
                            'now the actor carries the noun') but many checks must be performed before it
                            can be allowed to happen.'
                        ROUTINE_NT'check an actor taking ( this is the can't take yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the noun'
                                        INVOCATION_NT'if the actor is the noun'
                                            CONDITION_CONTEXT_NT'actor is the noun'
                                                TEST_PROPOSITION_NT'actor is the noun'(test: [ is('actor', 'the noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] always self-possessed." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] always self-possessed." ( a )'
                                                        INVOCATION_NT'"[We] [are] always self-possessed." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [are] always self-possessed." ( a )'
                                                                CONSTANT_NT'"[We] [are] always self-possessed." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take other people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "I don't suppose [the noun] [would care] for that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"I don't suppose [the noun] [would care] for that." ( a )'
                                                        INVOCATION_NT'"I don't suppose [the noun] [would care] for that." ( a )'
                                                            RVALUE_CONTEXT_NT'"I don't suppose [the noun] [would care] for that." ( a )'
                                                                CONSTANT_NT'"I don't suppose [the noun] [would care] for that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take component parts rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is part of something ( called the whole )'
                                        INVOCATION_NT'if the noun is part of something ( called the whole )'
                                            CONDITION_CONTEXT_NT'noun is part of something ( called the whole )'
                                                TEST_PROPOSITION_NT'noun is part of something ( called the whole )'(test: [ kind=thing_c({<schema: (*1.component_parent)>:'noun'}) ^ called='whole'(thing)({<schema: (*1.component_parent)>:'noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to be a part of [the whole]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to be a part of [the whole]." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][Those] [seem] to be a part of [the whole]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to be a part of [the whole]." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][Those] [seem] to be a part of [the whole]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take people's possessions rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                        NEW_LOCAL_CONTEXT_NT'local ceiling'
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_NT'let the owner be the not-counting-parts holder of the noun'
                                    INVOCATION_NT'let the owner be the not-counting-parts holder of the noun'
                                        NEW_LOCAL_CONTEXT_NT'owner'
                                            UNKNOWN_NT'owner'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the noun'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the noun'
                                                    INVOCATION_NT'not-counting-parts holder of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'while the owner is not nothing and the owner is not the local ceiling'
                                        INVOCATION_NT'while the owner is not nothing and the owner is not the local ceiling'
                                            CONDITION_CONTEXT_NT'owner is not nothing and the owner is not the local ceiling'
                                                LOGICAL_AND_NT'owner is not nothing and the owner is not the local ceiling'
                                                    TEST_PROPOSITION_NT'owner is not nothing'(test: [ NOT[ is('owner', 'nothing') NOT] ])
                                                    TEST_PROPOSITION_NT'the owner is not the local ceiling'(test: [ NOT[ is('the owner', 'the local ceiling') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the owner is a person'
                                                INVOCATION_NT'if the owner is a person'
                                                    CONDITION_CONTEXT_NT'owner is a person'
                                                        TEST_PROPOSITION_NT'owner is a person'(test: [ kind=person('owner') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                        INVOCATION_NT'if the actor is the player'
                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                                INVOCATION_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                                        CONSTANT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                                        INVOCATION_LIST_NT'let the owner be the not-counting-parts holder of the owner'
                                            INVOCATION_NT'let the owner be the not-counting-parts holder of the owner'
                                                LVALUE_LOCAL_CONTEXT_NT'owner'
                                                    LOCAL_VARIABLE_NT'owner'(tmp_1;object)
                                                RVALUE_CONTEXT_NT'not-counting-parts holder of the owner'
                                                    PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the owner'
                                                        INVOCATION_LIST_NT'not-counting-parts holder of the owner'
                                                            INVOCATION_NT'not-counting-parts holder of the owner'
                                                                RVALUE_CONTEXT_NT'owner'
                                                                    LOCAL_VARIABLE_NT'owner'(tmp_1;object)
                        ROUTINE_NT'check an actor taking ( this is the can't take items out of play rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let h be the noun'
                                    INVOCATION_NT'let h be the noun'
                                        NEW_LOCAL_CONTEXT_NT'h'
                                            UNKNOWN_NT'h'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'while h is not nothing and h is not a room'
                                        INVOCATION_NT'while h is not nothing and h is not a room'
                                            CONDITION_CONTEXT_NT'h is not nothing and h is not a room'
                                                LOGICAL_AND_NT'h is not nothing and h is not a room'
                                                    TEST_PROPOSITION_NT'h is not nothing'(test: [ NOT[ is('h', 'nothing') NOT] ])
                                                    TEST_PROPOSITION_NT'h is not a room'(test: [ NOT[ kind=room('h') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let h be the not-counting-parts holder of h'
                                            INVOCATION_NT'let h be the not-counting-parts holder of h'
                                                LVALUE_LOCAL_CONTEXT_NT'h'
                                                    LOCAL_VARIABLE_NT'h'(tmp_0;object)
                                                RVALUE_CONTEXT_NT'not-counting-parts holder of h'
                                                    PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of h'
                                                        INVOCATION_LIST_NT'not-counting-parts holder of h'
                                                            INVOCATION_NT'not-counting-parts holder of h'
                                                                RVALUE_CONTEXT_NT'h'
                                                                    LOCAL_VARIABLE_NT'h'(tmp_0;object)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if h is nothing'
                                        INVOCATION_NT'if h is nothing'
                                            CONDITION_CONTEXT_NT'h is nothing'
                                                TEST_PROPOSITION_NT'h is nothing'(test: [ is('h', 'nothing') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [aren't] available." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [aren't] available." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][Those] [aren't] available." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take what you're inside rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                        NEW_LOCAL_CONTEXT_NT'local ceiling'
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the local ceiling is the noun'
                                        INVOCATION_NT'if the local ceiling is the noun'
                                            CONDITION_CONTEXT_NT'local ceiling is the noun'
                                                TEST_PROPOSITION_NT'local ceiling is the noun'(test: [ is('local ceiling', 'the noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [would have] to get
                                                [if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get
                                                    [if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a )'
                                                        INVOCATION_NT'"[We] [would have] to get
                                                        [if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get
                                                            [if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a )'
                                                                CONSTANT_NT'"[We] [would have] to get
                                                                [if noun is a supporter]off[otherwise]out of[end if] [the noun] first." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take what's already taken rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun or the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is carrying the noun or the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun or the actor is wearing the noun'
                                                LOGICAL_OR_NT'actor is carrying the noun or the actor is wearing the noun'
                                                    TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                                    TEST_PROPOSITION_NT'the actor is wearing the noun'(test: [ is('the actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] already [have] [regarding the noun][those]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] already [have] [regarding the noun][those]." ( a )'
                                                        INVOCATION_NT'"[We] already [have] [regarding the noun][those]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] already [have] [regarding the noun][those]." ( a )'
                                                                CONSTANT_NT'"[We] already [have] [regarding the noun][those]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take scenery rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is scenery'
                                        INVOCATION_NT'if the noun is scenery'
                                            CONDITION_CONTEXT_NT'noun is scenery'
                                                TEST_PROPOSITION_NT'noun is scenery'(test: [ A67'scenery'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] hardly portable." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] hardly portable." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] hardly portable." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] hardly portable." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] hardly portable." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can only take things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not a thing'
                                        INVOCATION_NT'if the noun is not a thing'
                                            CONDITION_CONTEXT_NT'noun is not a thing'
                                                TEST_PROPOSITION_NT'noun is not a thing'(test: [ NOT[ kind=thing('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [cannot] carry [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [cannot] carry [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [cannot] carry [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [cannot] carry [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [cannot] carry [the noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't take what's fixed in place rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is fixed in place'
                                        INVOCATION_NT'if the noun is fixed in place'
                                            CONDITION_CONTEXT_NT'noun is fixed in place'
                                                TEST_PROPOSITION_NT'noun is fixed in place'(test: [ A65'fixed in place'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] fixed in place." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] fixed in place." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] fixed in place." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] fixed in place." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the use player's holdall to avoid exceeding carrying capacity rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                        INVOCATION_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carrying capacity of the actor'
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carrying capacity of the actor'(test: [ at-least('number of things carried by the actor', 'the carrying capacity of the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is holding a player's holdall ( called the current working sack )'
                                                INVOCATION_NT'if the actor is holding a player's holdall ( called the current working sack )'
                                                    CONDITION_CONTEXT_NT'actor is holding a player's holdall ( called the current working sack )'
                                                        TEST_PROPOSITION_NT'actor is holding a player's holdall ( called the current working sack )'(test: [ Exists x : kind=player's holdall(x) ^ called='current working sack'(player's holdall)(x) ^ is('actor', {<schema: HolderOf(*1)>:x}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the transferred item be nothing'
                                                    INVOCATION_NT'let the transferred item be nothing'
                                                        NEW_LOCAL_CONTEXT_NT'transferred item'
                                                            UNKNOWN_NT'transferred item'
                                                        RVALUE_CONTEXT_NT'nothing'
                                                            CONSTANT_NT'nothing'-object(-nothing-)
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'repeat with the possible item running through things carried by the actor'
                                                        INVOCATION_NT'repeat with the possible item running through things carried by the actor'
                                                            NEW_LOCAL_CONTEXT_NT'possible item'
                                                                UNKNOWN_NT'possible item'
                                                            RVALUE_CONTEXT_NT'things carried by the actor'
                                                                CONSTANT_NT'things carried by the actor'-description of things
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the possible item is not lit and the possible item is not the current working sack'
                                                                INVOCATION_NT'if the possible item is not lit and the possible item is not the current working sack'
                                                                    CONDITION_CONTEXT_NT'possible item is not lit and the possible item is not the current working sack'
                                                                        LOGICAL_AND_NT'possible item is not lit and the possible item is not the current working sack'
                                                                            TEST_PROPOSITION_NT'possible item is not lit'(test: [ NOT[ A61'lit'('possible item') NOT] ])
                                                                            TEST_PROPOSITION_NT'the possible item is not the current working sack'(test: [ NOT[ is('the possible item', 'the current working sack') NOT] ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'let the transferred item be the possible item'
                                                                    INVOCATION_NT'let the transferred item be the possible item'
                                                                        LVALUE_LOCAL_CONTEXT_NT'transferred item'
                                                                            LOCAL_VARIABLE_NT'transferred item'(tmp_1;object)
                                                                        RVALUE_CONTEXT_NT'possible item'
                                                                            LOCAL_VARIABLE_NT'possible item'(tmp_2;thing)
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the transferred item is not nothing'
                                                        INVOCATION_NT'if the transferred item is not nothing'
                                                            CONDITION_CONTEXT_NT'transferred item is not nothing'
                                                                TEST_PROPOSITION_NT'transferred item is not nothing'(test: [ NOT[ is('transferred item', 'nothing') NOT] ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the actor is the player'
                                                                INVOCATION_NT'if the actor is the player'
                                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "(putting [the transferred item] into [the current working sack]
                                                                to make room)[command clarification break]" ( a )'
                                                                    INVOCATION_LIST_SAY_NT'"(putting [the transferred item] into [the current working sack]
                                                                    to make room)[command clarification break]" ( a )'
                                                                        INVOCATION_NT'"(putting [the transferred item] into [the current working sack]
                                                                        to make room)[command clarification break]" ( a )'
                                                                            RVALUE_CONTEXT_NT'"(putting [the transferred item] into [the current working sack]
                                                                            to make room)[command clarification break]" ( a )'
                                                                                CONSTANT_NT'"(putting [the transferred item] into [the current working sack]
                                                                                to make room)[command clarification break]" ( a )'-text
                                                        INVOCATION_LIST_NT'silently try the actor trying inserting the transferred item into the current working sack'
                                                            INVOCATION_NT'silently try the actor trying inserting the transferred item into the current working sack'
                                                                RVALUE_CONTEXT_NT'actor trying inserting the transferred item into the current working sack'
                                                                    CONSTANT_NT'actor trying inserting the transferred item into the current working sack'-action
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the transferred item is not in the current working sack'
                                                                INVOCATION_NT'if the transferred item is not in the current working sack'
                                                                    CONDITION_CONTEXT_NT'transferred item is not in the current working sack'
                                                                        TEST_PROPOSITION_NT'transferred item is not in the current working sack'(test: [ NOT[ is('the current working sack', {<schema: ContainerOf(*1)>:'transferred item'}) NOT] ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'stop the action'
                                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking ( this is the can't exceed carrying capacity rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                        INVOCATION_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carrying capacity of the actor'
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carrying capacity of the actor'(test: [ at-least('number of things carried by the actor', 'the carrying capacity of the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] carrying too many things already." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] carrying too many things already." ( a )'
                                                        INVOCATION_NT'"[We]['re] carrying too many things already." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We]['re] carrying too many things already." ( a )'
                                                                CONSTANT_NT'"[We]['re] carrying too many things already." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor taking ( this is the standard taking rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor carries the noun'
                                    CONDITION_CONTEXT_NT'the actor carries the noun'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the noun is handled'
                                            CONDITION_CONTEXT_NT'the noun is handled'
                        ROUTINE_NT'report an actor taking ( this is the standard report taking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Taken." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Taken." ( a )'
                                                        INVOCATION_NT'"Taken." ( a )'
                                                            RVALUE_CONTEXT_NT'"Taken." ( a )'
                                                                CONSTANT_NT'"Taken." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [pick] up [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [pick] up [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [pick] up [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [pick] up [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [pick] up [the noun]." ( b )'-text
                        SENTENCE_NT'removing it from is an action applying to two things'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'removing it from'
                            PROPER_NOUN_NT'applying to two things'
                        SENTENCE_NT'the removing it from action translates into i6 as Remove'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'removing it from action'
                            PROPER_NOUN_NT'Remove'
                        SENTENCE_NT'the specification of the removing it from action is Removing is not really
                        an action in its own right. Whereas there are many ways to put something down
                        (on the floor, on top of something, inside something else, giving it to
                        somebody else, and so on), Inform has only one way to take something: the
                        taking action. Removing exists only to provide some nicely worded replies
                        to impossible requests, and in all sensible cases is converted into taking.
                        Because of this, it's usually a bad idea to write rules about removing:
                        if you write a rule such as 'Instead of removing the key, ...' then it
                        won't apply if the player simply types TAKE KEY instead. The safe way to
                        do this is to write a rule about taking, which covers all possibilities.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the removing it from action'
                                PROPER_NOUN_NT'removing it from action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Removing is not really
                            an action in its own right. Whereas there are many ways to put something down
                            (on the floor, on top of something, inside something else, giving it to
                            somebody else, and so on), Inform has only one way to take something: the
                            taking action. Removing exists only to provide some nicely worded replies
                            to impossible requests, and in all sensible cases is converted into taking.
                            Because of this, it's usually a bad idea to write rules about removing:
                            if you write a rule such as 'Instead of removing the key, ...' then it
                            won't apply if the player simply types TAKE KEY instead. The safe way to
                            do this is to write a rule about taking, which covers all possibilities.'
                        ROUTINE_NT'check an actor removing something from ( this is the can't remove what's not inside rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the noun is not the second noun'
                                        INVOCATION_NT'if the holder of the noun is not the second noun'
                                            CONDITION_CONTEXT_NT'holder of the noun is not the second noun'
                                                TEST_PROPOSITION_NT'holder of the noun is not the second noun'(test: [ NOT[ is('holder of the noun', 'the second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [regarding the noun][they] [aren't] there now." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"But [regarding the noun][they] [aren't] there now." ( a )'
                                                        INVOCATION_NT'"But [regarding the noun][they] [aren't] there now." ( a )'
                                                            RVALUE_CONTEXT_NT'"But [regarding the noun][they] [aren't] there now." ( a )'
                                                                CONSTANT_NT'"But [regarding the noun][they] [aren't] there now." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor removing something from ( this is the can't remove from people rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the owner be the holder of the noun'
                                    INVOCATION_NT'let the owner be the holder of the noun'
                                        NEW_LOCAL_CONTEXT_NT'owner'
                                            UNKNOWN_NT'owner'
                                        RVALUE_CONTEXT_NT'holder of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the noun'
                                                INVOCATION_LIST_NT'holder of the noun'
                                                    INVOCATION_NT'holder of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the owner is a person'
                                        INVOCATION_NT'if the owner is a person'
                                            CONDITION_CONTEXT_NT'owner is a person'
                                                TEST_PROPOSITION_NT'owner is a person'(test: [ kind=person('owner') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the owner is the actor'
                                                INVOCATION_NT'if the owner is the actor'
                                                    CONDITION_CONTEXT_NT'owner is the actor'
                                                        TEST_PROPOSITION_NT'owner is the actor'(test: [ is('owner', 'the actor') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'convert to the taking off action on the noun'
                                                    INVOCATION_NT'convert to the taking off action on the noun'
                                                        RVALUE_CONTEXT_NT'taking off action'
                                                            CONSTANT_NT'taking off action'-action name
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][Those] [seem] to belong to [the owner]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor removing something from ( this is the convert remove to take rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to the taking action on the noun'
                                    INVOCATION_NT'convert to the taking action on the noun'
                                        RVALUE_CONTEXT_NT'taking action'
                                            CONSTANT_NT'taking action'-action name
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        SENTENCE_NT'the can't take component parts rule is listed before the can't remove what's not inside rule in the check removing it from rules'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the can't take component parts rule'
                            PROPER_NOUN_NT'before the can't remove what's not inside rule in the check removing it from rules'
                        SENTENCE_NT'dropping is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'dropping'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the dropping action translates into i6 as Drop'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'dropping action'
                            PROPER_NOUN_NT'Drop'
                        SENTENCE_NT'the specification of the dropping action is Dropping is one of five actions
                        by which an actor can get rid of something carried: the others are inserting
                        (into a container), putting (onto a supporter), giving (to someone else) and
                        eating. Dropping means dropping onto the actor's current floor, which is
                        usually the floor of a room - but might be the inside of a box if the actor
                        is also inside that box, and so on.The can't drop clothes being worn rule silently tries the taking off action
                        on any clothing being dropped: unlisting this rule removes both this behaviour
                        and also the requirement that clothes cannot simply be dropped.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the dropping action'
                                PROPER_NOUN_NT'dropping action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Dropping is one of five actions
                            by which an actor can get rid of something carried: the others are inserting
                            (into a container), putting (onto a supporter), giving (to someone else) and
                            eating. Dropping means dropping onto the actor's current floor, which is
                            usually the floor of a room - but might be the inside of a box if the actor
                            is also inside that box, and so on.The can't drop clothes being worn rule silently tries the taking off action
                            on any clothing being dropped: unlisting this rule removes both this behaviour
                            and also the requirement that clothes cannot simply be dropped.'
                        ROUTINE_NT'check an actor dropping ( this is the can't drop yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is the actor'
                                        INVOCATION_NT'if the noun is the actor'
                                            CONDITION_CONTEXT_NT'noun is the actor'
                                                TEST_PROPOSITION_NT'noun is the actor'(test: [ is('noun', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [lack] the dexterity." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [lack] the dexterity." ( a )'
                                                        INVOCATION_NT'"[We] [lack] the dexterity." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [lack] the dexterity." ( a )'
                                                                CONSTANT_NT'"[We] [lack] the dexterity." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor dropping something which is part of the actor ( this is the can't drop body parts rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [can't drop] part of [ourselves]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [can't drop] part of [ourselves]." ( a )'
                                                INVOCATION_NT'"[We] [can't drop] part of [ourselves]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [can't drop] part of [ourselves]." ( a )'
                                                        CONSTANT_NT'"[We] [can't drop] part of [ourselves]." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor dropping ( this is the can't drop what's already dropped rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is in the holder of the actor'
                                        INVOCATION_NT'if the noun is in the holder of the actor'
                                            CONDITION_CONTEXT_NT'noun is in the holder of the actor'
                                                TEST_PROPOSITION_NT'noun is in the holder of the actor'(test: [ is('the holder of the actor', {<schema: ContainerOf(*1)>:'noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [are] already here." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] already here." ( a )'
                                                        INVOCATION_NT'"[The noun] [are] already here." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [are] already here." ( a )'
                                                                CONSTANT_NT'"[The noun] [are] already here." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor dropping ( this is the can't drop what's not held rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun'
                                        INVOCATION_NT'if the actor is carrying the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun'
                                                TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [haven't] got [regarding the noun][those]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [haven't] got [regarding the noun][those]." ( a )'
                                                INVOCATION_NT'"[We] [haven't] got [regarding the noun][those]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [haven't] got [regarding the noun][those]." ( a )'
                                                        CONSTANT_NT'"[We] [haven't] got [regarding the noun][those]." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor dropping ( this is the can't drop clothes being worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification break]" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                        INVOCATION_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                            RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                                CONSTANT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun'
                                            INVOCATION_NT'silently try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor dropping ( this is the can't drop if this exceeds carrying capacity rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the receptacle be the holder of the actor'
                                    INVOCATION_NT'let the receptacle be the holder of the actor'
                                        NEW_LOCAL_CONTEXT_NT'receptacle'
                                            UNKNOWN_NT'receptacle'
                                        RVALUE_CONTEXT_NT'holder of the actor'
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                INVOCATION_LIST_NT'holder of the actor'
                                                    INVOCATION_NT'holder of the actor'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the receptacle is a room'
                                        INVOCATION_NT'if the receptacle is a room'
                                            CONDITION_CONTEXT_NT'receptacle is a room'
                                                TEST_PROPOSITION_NT'receptacle is a room'(test: [ kind=room('receptacle') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the receptacle provides the property carrying capacity'
                                        INVOCATION_NT'if the receptacle provides the property carrying capacity'
                                            CONDITION_CONTEXT_NT'receptacle provides the property carrying capacity'
                                                TEST_PROPOSITION_NT'receptacle provides the property carrying capacity'(test: [ provides('receptacle', 'the property carrying capacity') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the receptacle is a supporter'
                                                INVOCATION_NT'if the receptacle is a supporter'
                                                    CONDITION_CONTEXT_NT'receptacle is a supporter'
                                                        TEST_PROPOSITION_NT'receptacle is a supporter'(test: [ kind=supporter('receptacle') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the number of things on the receptacle is at least the carrying capacity of the receptacle'
                                                        INVOCATION_NT'if the number of things on the receptacle is at least the carrying capacity of the receptacle'
                                                            CONDITION_CONTEXT_NT'number of things on the receptacle is at least the carrying capacity of the receptacle'
                                                                TEST_PROPOSITION_NT'number of things on the receptacle is at least the carrying capacity of the receptacle'(test: [ at-least('number of things on the receptacle', 'the carrying capacity of the receptacle') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the actor is the player'
                                                                INVOCATION_NT'if the actor is the player'
                                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                CODE_BLOCK_NT'say "[There] [are] no more room on [the receptacle]." ( a )'
                                                                    INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the receptacle]." ( a )'
                                                                        INVOCATION_NT'"[There] [are] no more room on [the receptacle]." ( a )'
                                                                            RVALUE_CONTEXT_NT'"[There] [are] no more room on [the receptacle]." ( a )'
                                                                                CONSTANT_NT'"[There] [are] no more room on [the receptacle]." ( a )'-text
                                                        INVOCATION_LIST_NT'stop the action'
                                                            INVOCATION_NT'stop the action'
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the receptacle is a container'
                                                        INVOCATION_NT'if the receptacle is a container'
                                                            CONDITION_CONTEXT_NT'receptacle is a container'
                                                                TEST_PROPOSITION_NT'receptacle is a container'(test: [ kind=container('receptacle') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the number of things in the receptacle is at least the carrying capacity of the receptacle'
                                                                INVOCATION_NT'if the number of things in the receptacle is at least the carrying capacity of the receptacle'
                                                                    CONDITION_CONTEXT_NT'number of things in the receptacle is at least the carrying capacity of the receptacle'
                                                                        TEST_PROPOSITION_NT'number of things in the receptacle is at least the carrying capacity of the receptacle'(test: [ at-least('number of things in the receptacle', 'the carrying capacity of the receptacle') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                                        INVOCATION_NT'if the actor is the player'
                                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the receptacle]." ( b )'
                                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the receptacle]." ( b )'
                                                                                INVOCATION_NT'"[There] [are] no more room in [the receptacle]." ( b )'
                                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the receptacle]." ( b )'
                                                                                        CONSTANT_NT'"[There] [are] no more room in [the receptacle]." ( b )'-text
                                                                INVOCATION_LIST_NT'stop the action'
                                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor dropping ( this is the standard dropping rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is in the holder of the actor'
                                    CONDITION_CONTEXT_NT'the noun is in the holder of the actor'
                        ROUTINE_NT'report an actor dropping ( this is the standard report dropping rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Dropped." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Dropped." ( a )'
                                                        INVOCATION_NT'"Dropped." ( a )'
                                                            RVALUE_CONTEXT_NT'"Dropped." ( a )'
                                                                CONSTANT_NT'"Dropped." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [put] down [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [put] down [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [put] down [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [put] down [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [put] down [the noun]." ( b )'-text
                        SENTENCE_NT'putting it on is an action applying to two things'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'putting it on'
                            PROPER_NOUN_NT'applying to two things'
                        SENTENCE_NT'the putting it on action translates into i6 as PutOn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'putting it on action'
                            PROPER_NOUN_NT'PutOn'
                        SENTENCE_NT'the specification of the putting it on action is By this action, an actor puts
                        something he is holding on top of a supporter: for instance, putting an apple
                        on a table.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the putting it on action'
                                PROPER_NOUN_NT'putting it on action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'By this action, an actor puts
                            something he is holding on top of a supporter: for instance, putting an apple
                            on a table.'
                        ROUTINE_NT'check an actor putting something on ( this is the convert put to drop where possible rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is down or the actor is on the second noun'
                                        INVOCATION_NT'if the second noun is down or the actor is on the second noun'
                                            CONDITION_CONTEXT_NT'second noun is down or the actor is on the second noun'
                                                LOGICAL_OR_NT'second noun is down or the actor is on the second noun'
                                                    TEST_PROPOSITION_NT'second noun is down'(test: [ is('second noun', 'down') ])
                                                    TEST_PROPOSITION_NT'the actor is on the second noun'(test: [ is('the second noun', {<schema: SupporterOf(*1)>:'the actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the dropping action on the noun'
                                            INVOCATION_NT'convert to the dropping action on the noun'
                                                RVALUE_CONTEXT_NT'dropping action'
                                                    CONSTANT_NT'dropping action'-action name
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'check an actor putting something on ( this is the can't put what's not held rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun'
                                        INVOCATION_NT'if the actor is carrying the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun'
                                                TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                    INVOCATION_NT'carry out the implicitly taking activity with the noun'
                                        RVALUE_CONTEXT_NT'implicitly taking'
                                            CONSTANT_NT'implicitly taking'-activity on objects
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun'
                                        INVOCATION_NT'if the actor is carrying the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun'
                                                TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor putting something on ( this is the can't put something on itself rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the noun-cpc be the component parts core of the noun'
                                    INVOCATION_NT'let the noun-cpc be the component parts core of the noun'
                                        NEW_LOCAL_CONTEXT_NT'noun-cpc'
                                            UNKNOWN_NT'noun-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the noun'
                                                INVOCATION_LIST_NT'component parts core of the noun'
                                                    INVOCATION_NT'component parts core of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_NT'let the second-cpc be the component parts core of the second noun'
                                    INVOCATION_NT'let the second-cpc be the component parts core of the second noun'
                                        NEW_LOCAL_CONTEXT_NT'second-cpc'
                                            UNKNOWN_NT'second-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the second noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the second noun'
                                                INVOCATION_LIST_NT'component parts core of the second noun'
                                                    INVOCATION_NT'component parts core of the second noun'
                                                        RVALUE_CONTEXT_NT'second noun'
                                                            NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                                INVOCATION_LIST_NT'let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc'
                                    INVOCATION_NT'let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc'
                                        NEW_LOCAL_CONTEXT_NT'transfer ceiling'
                                            UNKNOWN_NT'transfer ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the noun-cpc with the second-cpc'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the noun-cpc with the second-cpc'
                                                INVOCATION_LIST_NT'common ancestor of the noun-cpc with the second-cpc'
                                                    INVOCATION_NT'common ancestor of the noun-cpc with the second-cpc'
                                                        RVALUE_CONTEXT_NT'noun-cpc'
                                                            LOCAL_VARIABLE_NT'noun-cpc'(tmp_0;object)
                                                        RVALUE_CONTEXT_NT'second-cpc'
                                                            LOCAL_VARIABLE_NT'second-cpc'(tmp_1;object)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the transfer ceiling is the noun-cpc'
                                        INVOCATION_NT'if the transfer ceiling is the noun-cpc'
                                            CONDITION_CONTEXT_NT'transfer ceiling is the noun-cpc'
                                                TEST_PROPOSITION_NT'transfer ceiling is the noun-cpc'(test: [ is('transfer ceiling', 'the noun-cpc') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't put] something on top of itself." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't put] something on top of itself." ( a )'
                                                        INVOCATION_NT'"[We] [can't put] something on top of itself." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't put] something on top of itself." ( a )'
                                                                CONSTANT_NT'"[We] [can't put] something on top of itself." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor putting something on ( this is the can't put onto what's not a supporter rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a supporter'
                                        INVOCATION_NT'if the second noun is not a supporter'
                                            CONDITION_CONTEXT_NT'second noun is not a supporter'
                                                TEST_PROPOSITION_NT'second noun is not a supporter'(test: [ NOT[ kind=supporter('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Putting things on [the second noun] [would achieve] nothing." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Putting things on [the second noun] [would achieve] nothing." ( a )'
                                                        INVOCATION_NT'"Putting things on [the second noun] [would achieve] nothing." ( a )'
                                                            RVALUE_CONTEXT_NT'"Putting things on [the second noun] [would achieve] nothing." ( a )'
                                                                CONSTANT_NT'"Putting things on [the second noun] [would achieve] nothing." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor putting something on ( this is the can't put clothes being worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                        INVOCATION_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                            RVALUE_CONTEXT_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                                CONSTANT_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun'
                                            INVOCATION_NT'silently try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor putting something on ( this is the can't put if this exceeds carrying capacity rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun provides the property carrying capacity'
                                        INVOCATION_NT'if the second noun provides the property carrying capacity'
                                            CONDITION_CONTEXT_NT'second noun provides the property carrying capacity'
                                                TEST_PROPOSITION_NT'second noun provides the property carrying capacity'(test: [ provides('second noun', 'the property carrying capacity') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the number of things on the second noun is at least the carrying capacity of the second noun'
                                                INVOCATION_NT'if the number of things on the second noun is at least the carrying capacity of the second noun'
                                                    CONDITION_CONTEXT_NT'number of things on the second noun is at least the carrying capacity of the second noun'
                                                        TEST_PROPOSITION_NT'number of things on the second noun is at least the carrying capacity of the second noun'(test: [ at-least('number of things on the second noun', 'the carrying capacity of the second noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                        INVOCATION_NT'if the actor is the player'
                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[There] [are] no more room on [the second noun]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the second noun]." ( a )'
                                                                INVOCATION_NT'"[There] [are] no more room on [the second noun]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room on [the second noun]." ( a )'
                                                                        CONSTANT_NT'"[There] [are] no more room on [the second noun]." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor putting something on ( this is the standard putting rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is on the second noun'
                                    CONDITION_CONTEXT_NT'the noun is on the second noun'
                        ROUTINE_NT'report an actor putting something on ( this is the concise report putting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player and the i6 parser is running multiple actions'
                                                INVOCATION_NT'if the actor is the player and the i6 parser is running multiple actions'
                                                    CONDITION_CONTEXT_NT'actor is the player and the i6 parser is running multiple actions'
                                                        LOGICAL_AND_NT'actor is the player and the i6 parser is running multiple actions'
                                                            TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                            TEST_VALUE_NT'the i6 parser is running multiple actions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the i6 parser is running multiple actions'
                                                                    INVOCATION_LIST_NT'the i6 parser is running multiple actions'
                                                                        INVOCATION_NT'i6 parser is running multiple actions'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Done." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Done." ( a )'
                                                        INVOCATION_NT'"Done." ( a )'
                                                            RVALUE_CONTEXT_NT'"Done." ( a )'
                                                                CONSTANT_NT'"Done." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor putting something on ( this is the standard report putting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [put] [the noun] on [the second noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )'
                                                        CONSTANT_NT'"[The actor] [put] [the noun] on [the second noun]." ( a )'-text
                        SENTENCE_NT'inserting it into is an action applying to two things'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'inserting it into'
                            PROPER_NOUN_NT'applying to two things'
                        SENTENCE_NT'the inserting it into action translates into i6 as Insert'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'inserting it into action'
                            PROPER_NOUN_NT'Insert'
                        SENTENCE_NT'the specification of the inserting it into action is By this action, an actor puts
                        something he is holding into a container: for instance, putting a coin into a
                        collection box.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the inserting it into action'
                                PROPER_NOUN_NT'inserting it into action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'By this action, an actor puts
                            something he is holding into a container: for instance, putting a coin into a
                            collection box.'
                        ROUTINE_NT'check an actor inserting something into ( this is the convert insert to drop where possible rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is down or the actor is in the second noun'
                                        INVOCATION_NT'if the second noun is down or the actor is in the second noun'
                                            CONDITION_CONTEXT_NT'second noun is down or the actor is in the second noun'
                                                LOGICAL_OR_NT'second noun is down or the actor is in the second noun'
                                                    TEST_PROPOSITION_NT'second noun is down'(test: [ is('second noun', 'down') ])
                                                    TEST_PROPOSITION_NT'the actor is in the second noun'(test: [ is('the second noun', {<schema: ContainerOf(*1)>:'the actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the dropping action on the noun'
                                            INVOCATION_NT'convert to the dropping action on the noun'
                                                RVALUE_CONTEXT_NT'dropping action'
                                                    CONSTANT_NT'dropping action'-action name
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert what's not held rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun'
                                        INVOCATION_NT'if the actor is carrying the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun'
                                                TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                    INVOCATION_NT'carry out the implicitly taking activity with the noun'
                                        RVALUE_CONTEXT_NT'implicitly taking'
                                            CONSTANT_NT'implicitly taking'-activity on objects
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carrying the noun'
                                        INVOCATION_NT'if the actor is carrying the noun'
                                            CONDITION_CONTEXT_NT'actor is carrying the noun'
                                                TEST_PROPOSITION_NT'actor is carrying the noun'(test: [ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert something into itself rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the noun-cpc be the component parts core of the noun'
                                    INVOCATION_NT'let the noun-cpc be the component parts core of the noun'
                                        NEW_LOCAL_CONTEXT_NT'noun-cpc'
                                            UNKNOWN_NT'noun-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the noun'
                                                INVOCATION_LIST_NT'component parts core of the noun'
                                                    INVOCATION_NT'component parts core of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_NT'let the second-cpc be the component parts core of the second noun'
                                    INVOCATION_NT'let the second-cpc be the component parts core of the second noun'
                                        NEW_LOCAL_CONTEXT_NT'second-cpc'
                                            UNKNOWN_NT'second-cpc'
                                        RVALUE_CONTEXT_NT'component parts core of the second noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'component parts core of the second noun'
                                                INVOCATION_LIST_NT'component parts core of the second noun'
                                                    INVOCATION_NT'component parts core of the second noun'
                                                        RVALUE_CONTEXT_NT'second noun'
                                                            NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                                INVOCATION_LIST_NT'let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc'
                                    INVOCATION_NT'let the transfer ceiling be the common ancestor of the noun-cpc with the second-cpc'
                                        NEW_LOCAL_CONTEXT_NT'transfer ceiling'
                                            UNKNOWN_NT'transfer ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the noun-cpc with the second-cpc'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the noun-cpc with the second-cpc'
                                                INVOCATION_LIST_NT'common ancestor of the noun-cpc with the second-cpc'
                                                    INVOCATION_NT'common ancestor of the noun-cpc with the second-cpc'
                                                        RVALUE_CONTEXT_NT'noun-cpc'
                                                            LOCAL_VARIABLE_NT'noun-cpc'(tmp_0;object)
                                                        RVALUE_CONTEXT_NT'second-cpc'
                                                            LOCAL_VARIABLE_NT'second-cpc'(tmp_1;object)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the transfer ceiling is the noun-cpc'
                                        INVOCATION_NT'if the transfer ceiling is the noun-cpc'
                                            CONDITION_CONTEXT_NT'transfer ceiling is the noun-cpc'
                                                TEST_PROPOSITION_NT'transfer ceiling is the noun-cpc'(test: [ is('transfer ceiling', 'the noun-cpc') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't put] something inside itself." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't put] something inside itself." ( a )'
                                                        INVOCATION_NT'"[We] [can't put] something inside itself." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't put] something inside itself." ( a )'
                                                                CONSTANT_NT'"[We] [can't put] something inside itself." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert into closed containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is a closed container'
                                        INVOCATION_NT'if the second noun is a closed container'
                                            CONDITION_CONTEXT_NT'second noun is a closed container'
                                                TEST_PROPOSITION_NT'second noun is a closed container'(test: [ kind=container('second noun') ^ A81'closed'('second noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [are] closed." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [are] closed." ( a )'
                                                        INVOCATION_NT'"[The second noun] [are] closed." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The second noun] [are] closed." ( a )'
                                                                CONSTANT_NT'"[The second noun] [are] closed." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert into what's not a container rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a container'
                                        INVOCATION_NT'if the second noun is not a container'
                                            CONDITION_CONTEXT_NT'second noun is not a container'
                                                TEST_PROPOSITION_NT'second noun is not a container'(test: [ NOT[ kind=container('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [can't contain] things." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [can't contain] things." ( a )'
                                                        INVOCATION_NT'"[regarding the second noun][Those] [can't contain] things." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [can't contain] things." ( a )'
                                                                CONSTANT_NT'"[regarding the second noun][Those] [can't contain] things." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert clothes being worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                        INVOCATION_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                            RVALUE_CONTEXT_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'
                                                                CONSTANT_NT'"(first taking [regarding the noun][them] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun'
                                            INVOCATION_NT'silently try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor inserting something into ( this is the can't insert if this exceeds carrying capacity rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun provides the property carrying capacity'
                                        INVOCATION_NT'if the second noun provides the property carrying capacity'
                                            CONDITION_CONTEXT_NT'second noun provides the property carrying capacity'
                                                TEST_PROPOSITION_NT'second noun provides the property carrying capacity'(test: [ provides('second noun', 'the property carrying capacity') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the number of things in the second noun is at least the carrying capacity of the second noun'
                                                INVOCATION_NT'if the number of things in the second noun is at least the carrying capacity of the second noun'
                                                    CONDITION_CONTEXT_NT'number of things in the second noun is at least the carrying capacity of the second noun'
                                                        TEST_PROPOSITION_NT'number of things in the second noun is at least the carrying capacity of the second noun'(test: [ at-least('number of things in the second noun', 'the carrying capacity of the second noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                        INVOCATION_NT'if the actor is the player'
                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the second noun]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the second noun]." ( a )'
                                                                INVOCATION_NT'"[There] [are] no more room in [the second noun]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the second noun]." ( a )'
                                                                        CONSTANT_NT'"[There] [are] no more room in [the second noun]." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor inserting something into ( this is the standard inserting rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is in the second noun'
                                    CONDITION_CONTEXT_NT'the noun is in the second noun'
                        ROUTINE_NT'report an actor inserting something into ( this is the concise report inserting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player and the i6 parser is running multiple actions'
                                                INVOCATION_NT'if the actor is the player and the i6 parser is running multiple actions'
                                                    CONDITION_CONTEXT_NT'actor is the player and the i6 parser is running multiple actions'
                                                        LOGICAL_AND_NT'actor is the player and the i6 parser is running multiple actions'
                                                            TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                            TEST_VALUE_NT'the i6 parser is running multiple actions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'the i6 parser is running multiple actions'
                                                                    INVOCATION_LIST_NT'the i6 parser is running multiple actions'
                                                                        INVOCATION_NT'i6 parser is running multiple actions'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Done." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Done." ( a )'
                                                        INVOCATION_NT'"Done." ( a )'
                                                            RVALUE_CONTEXT_NT'"Done." ( a )'
                                                                CONSTANT_NT'"Done." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor inserting something into ( this is the standard report inserting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [put] [the noun] into [the second noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )'
                                                        CONSTANT_NT'"[The actor] [put] [the noun] into [the second noun]." ( a )'-text
                        SENTENCE_NT'eating is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'eating'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the eating action translates into i6 as Eat'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'eating action'
                            PROPER_NOUN_NT'Eat'
                        SENTENCE_NT'the specification of the eating action is Eating is the only one of the
                        built-in actions which can, in effect, destroy something: the carry out
                        rule removes what's being eaten from play, and nothing in the Standard
                        Rules can then get at it again.Note that, uncontroversially, one can only eat things with the 'edible'
                        either/or property. Until 2011, the action also required that the foodstuff
                        had to be carried by the eater, which meant that a player standing next
                        to a bush with berries who typed EAT BERRIES would force a '(first taking
                        the berries)' action. This is no longer true. Taking is now only forced if
                        the foodstuff is portable.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the eating action'
                                PROPER_NOUN_NT'eating action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Eating is the only one of the
                            built-in actions which can, in effect, destroy something: the carry out
                            rule removes what's being eaten from play, and nothing in the Standard
                            Rules can then get at it again.Note that, uncontroversially, one can only eat things with the 'edible'
                            either/or property. Until 2011, the action also required that the foodstuff
                            had to be carried by the eater, which meant that a player standing next
                            to a bush with berries who typed EAT BERRIES would force a '(first taking
                            the berries)' action. This is no longer true. Taking is now only forced if
                            the foodstuff is portable.'
                        ROUTINE_NT'check an actor eating ( this is the can't eat unless edible rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not a thing or the noun is not edible'
                                        INVOCATION_NT'if the noun is not a thing or the noun is not edible'
                                            CONDITION_CONTEXT_NT'noun is not a thing or the noun is not edible'
                                                LOGICAL_OR_NT'noun is not a thing or the noun is not edible'
                                                    TEST_PROPOSITION_NT'noun is not a thing'(test: [ NOT[ kind=thing('noun') NOT] ])
                                                    TEST_PROPOSITION_NT'the noun is not edible'(test: [ NOT[ A63'edible'('the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] plainly inedible." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] plainly inedible." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] plainly inedible." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] plainly inedible." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] plainly inedible." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor eating ( this is the can't eat clothing without removing it first rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification break]" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                        INVOCATION_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                            RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                                CONSTANT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'try the actor trying taking off the noun'
                                            INVOCATION_NT'try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor eating ( this is the can't eat other people's food rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is enclosed by a person ( called the owner ) who is not the actor'
                                        INVOCATION_NT'if the noun is enclosed by a person ( called the owner ) who is not the actor'
                                            CONDITION_CONTEXT_NT'noun is enclosed by a person ( called the owner ) who is not the actor'
                                                TEST_PROPOSITION_NT'noun is enclosed by a person ( called the owner ) who is not the actor'(test: [ Exists x : kind=person(x) ^ called='owner'(person)(x) ^ NOT[ is(x, 'the actor') NOT] ^ encloses(x, 'noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The owner] [might not appreciate] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The owner] [might not appreciate] that." ( a )'
                                                        INVOCATION_NT'"[The owner] [might not appreciate] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The owner] [might not appreciate] that." ( a )'
                                                                CONSTANT_NT'"[The owner] [might not appreciate] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor eating ( this is the can't eat portable food without carrying it rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is portable and the actor is not carrying the noun'
                                        INVOCATION_NT'if the noun is portable and the actor is not carrying the noun'
                                            CONDITION_CONTEXT_NT'noun is portable and the actor is not carrying the noun'
                                                LOGICAL_AND_NT'noun is portable and the actor is not carrying the noun'
                                                    TEST_PROPOSITION_NT'noun is portable'(test: [ A66'portable'('noun') ])
                                                    TEST_PROPOSITION_NT'the actor is not carrying the noun'(test: [ NOT[ is('the actor', {<schema: CarrierOf(*1)>:'the noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                            INVOCATION_NT'carry out the implicitly taking activity with the noun'
                                                RVALUE_CONTEXT_NT'implicitly taking'
                                                    CONSTANT_NT'implicitly taking'-activity on objects
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is not carrying the noun'
                                                INVOCATION_NT'if the actor is not carrying the noun'
                                                    CONDITION_CONTEXT_NT'actor is not carrying the noun'
                                                        TEST_PROPOSITION_NT'actor is not carrying the noun'(test: [ NOT[ is('actor', {<schema: CarrierOf(*1)>:'the noun'}) NOT] ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor eating ( this is the standard eating rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is nowhere'
                                    CONDITION_CONTEXT_NT'the noun is nowhere'
                        ROUTINE_NT'report an actor eating ( this is the standard report eating rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [eat] [the noun]. Not bad." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [eat] [the noun]. Not bad." ( a )'
                                                        INVOCATION_NT'"[We] [eat] [the noun]. Not bad." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [eat] [the noun]. Not bad." ( a )'
                                                                CONSTANT_NT'"[We] [eat] [the noun]. Not bad." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [eat] [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [eat] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [eat] [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [eat] [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [eat] [the noun]." ( b )'-text
                    HEADING_NT'section 3 - standard actions which move the actor' (level 5)
                        SENTENCE_NT'going is an action applying to one visible thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'going'
                            PROPER_NOUN_NT'applying to one visible thing'
                        SENTENCE_NT'the going action translates into i6 as Go'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'going action'
                            PROPER_NOUN_NT'Go'
                        SENTENCE_NT'the specification of the going action is This is the action which allows people
                        to move from one room to another, using whatever map connections and doors are
                        to hand. The Standard Rules are written so that the noun can be either a
                        direction or a door in the location of the actor: while the player's commands
                        only lead to going actions with directions as nouns, going actions can also
                        happen as a result of entering actions, and then the noun can indeed be
                        a door.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the going action'
                                PROPER_NOUN_NT'going action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'This is the action which allows people
                            to move from one room to another, using whatever map connections and doors are
                            to hand. The Standard Rules are written so that the noun can be either a
                            direction or a door in the location of the actor: while the player's commands
                            only lead to going actions with directions as nouns, going actions can also
                            happen as a result of entering actions, and then the noun can indeed be
                            a door.'
                        SENTENCE_NT'the going action has a room called the room gone from ( matched as from )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'going action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'room'
                                    PROPER_NOUN_NT'room gone from ( matched as from )'
                        SENTENCE_NT'the going action has an object called the room gone to ( matched as to )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'going action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'room gone to ( matched as to )'
                        SENTENCE_NT'the going action has an object called the door gone through ( matched as through )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'going action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'door gone through ( matched as through )'
                        SENTENCE_NT'the going action has an object called the vehicle gone by ( matched as by )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'going action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'vehicle gone by ( matched as by )'
                        SENTENCE_NT'the going action has an object called the thing gone with ( matched as with )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'going action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'thing gone with ( matched as with )'
                        ROUTINE_NT'rule for setting action variables for going ( this is the standard set going variables rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the thing gone with is the item-pushed-between-rooms'
                                    CONDITION_CONTEXT_NT'the thing gone with is the item-pushed-between-rooms'
                                INVOCATION_LIST_NT'now the room gone from is the location of the actor'
                                    CONDITION_CONTEXT_NT'the room gone from is the location of the actor'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is in an enterable vehicle ( called the carriage )'
                                        INVOCATION_NT'if the actor is in an enterable vehicle ( called the carriage )'
                                            CONDITION_CONTEXT_NT'actor is in an enterable vehicle ( called the carriage )'
                                                TEST_PROPOSITION_NT'actor is in an enterable vehicle ( called the carriage )'(test: [ kind=vehicle({<schema: ContainerOf(*1)>:'actor'}) ^ A77'enterable'({<schema: ContainerOf(*1)>:'actor'}) ^ called='carriage'(vehicle)({<schema: ContainerOf(*1)>:'actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the vehicle gone by is the carriage'
                                            CONDITION_CONTEXT_NT'the vehicle gone by is the carriage'
                                INVOCATION_LIST_NT'let the target be nothing'
                                    INVOCATION_NT'let the target be nothing'
                                        NEW_LOCAL_CONTEXT_NT'target'
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a direction'
                                        INVOCATION_NT'if the noun is a direction'
                                            CONDITION_CONTEXT_NT'noun is a direction'
                                                TEST_PROPOSITION_NT'noun is a direction'(test: [ kind=direction('noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let direction d be the noun'
                                            INVOCATION_NT'let direction d be the noun'
                                                NEW_LOCAL_CONTEXT_NT'direction d'
                                                    UNKNOWN_NT'direction d'
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        INVOCATION_LIST_NT'let the target be the room-or-door direction d from the room gone from'
                                            INVOCATION_NT'let the target be the room-or-door direction d from the room gone from'
                                                LVALUE_LOCAL_CONTEXT_NT'target'
                                                    LOCAL_VARIABLE_NT'target'(tmp_1;object)
                                                RVALUE_CONTEXT_NT'room-or-door direction d from the room gone from'
                                                    PHRASE_TO_DECIDE_VALUE_NT'room-or-door direction d from the room gone from'
                                                        INVOCATION_LIST_NT'room-or-door direction d from the room gone from'
                                                            INVOCATION_NT'room-or-door direction d from the room gone from'
                                                                RVALUE_CONTEXT_NT'direction d'
                                                                    LOCAL_VARIABLE_NT'direction d'(tmp_2;object)
                                                                RVALUE_CONTEXT_NT'room gone from'
                                                                    NONLOCAL_VARIABLE_NT'room gone from'('room gone from'(var)[room])
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is a door'
                                                INVOCATION_NT'if the noun is a door'
                                                    CONDITION_CONTEXT_NT'noun is a door'
                                                        TEST_PROPOSITION_NT'noun is a door'(test: [ kind=door('noun') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the target be the noun'
                                                    INVOCATION_NT'let the target be the noun'
                                                        LVALUE_LOCAL_CONTEXT_NT'target'
                                                            LOCAL_VARIABLE_NT'target'(tmp_1;object)
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the target is a door'
                                        INVOCATION_NT'if the target is a door'
                                            CONDITION_CONTEXT_NT'target is a door'
                                                TEST_PROPOSITION_NT'target is a door'(test: [ kind=door('target') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the door gone through is the target'
                                            CONDITION_CONTEXT_NT'the door gone through is the target'
                                        INVOCATION_LIST_NT'now the target is the other side of the target from the room gone from'
                                            CONDITION_CONTEXT_NT'the target is the other side of the target from the room gone from'
                                INVOCATION_LIST_NT'now the room gone to is the target'
                                    CONDITION_CONTEXT_NT'the room gone to is the target'
                        ROUTINE_NT'check an actor going when the actor is on a supporter ( called the chaise ) ( this is the stand up before going rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first getting off [the chaise])[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first getting off [the chaise])[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first getting off [the chaise])[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first getting off [the chaise])[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first getting off [the chaise])[command clarification break]" ( a )'-text
                                INVOCATION_LIST_NT'silently try the actor exiting'
                                    INVOCATION_NT'silently try the actor exiting'
                                        RVALUE_CONTEXT_NT'actor exiting'
                                            CONSTANT_NT'actor exiting'-action
                        ROUTINE_NT'check an actor going ( this is the can't travel in what's not a vehicle rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let nonvehicle be the holder of the actor'
                                    INVOCATION_NT'let nonvehicle be the holder of the actor'
                                        NEW_LOCAL_CONTEXT_NT'nonvehicle'
                                            UNKNOWN_NT'nonvehicle'
                                        RVALUE_CONTEXT_NT'holder of the actor'
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                INVOCATION_LIST_NT'holder of the actor'
                                                    INVOCATION_NT'holder of the actor'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if nonvehicle is the room gone from'
                                        INVOCATION_NT'if nonvehicle is the room gone from'
                                            CONDITION_CONTEXT_NT'nonvehicle is the room gone from'
                                                TEST_PROPOSITION_NT'nonvehicle is the room gone from'(test: [ is('nonvehicle', 'the room gone from') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if nonvehicle is the vehicle gone by'
                                        INVOCATION_NT'if nonvehicle is the vehicle gone by'
                                            CONDITION_CONTEXT_NT'nonvehicle is the vehicle gone by'
                                                TEST_PROPOSITION_NT'nonvehicle is the vehicle gone by'(test: [ is('nonvehicle', 'the vehicle gone by') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if nonvehicle is a supporter'
                                                INVOCATION_NT'if nonvehicle is a supporter'
                                                    CONDITION_CONTEXT_NT'nonvehicle is a supporter'
                                                        TEST_PROPOSITION_NT'nonvehicle is a supporter'(test: [ kind=supporter('nonvehicle') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [would have] to get off [the nonvehicle] first." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )'
                                                        INVOCATION_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )'
                                                                CONSTANT_NT'"[We] [would have] to get off [the nonvehicle] first." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[We] [would have] to get out of [the nonvehicle] first." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [would have] to get out of [the nonvehicle] first." ( b )'
                                                        INVOCATION_NT'"[We] [would have] to get out of [the nonvehicle] first." ( b )'
                                                            RVALUE_CONTEXT_NT'"[We] [would have] to get out of [the nonvehicle] first." ( b )'
                                                                CONSTANT_NT'"[We] [would have] to get out of [the nonvehicle] first." ( b )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor going ( this is the can't go through undescribed doors rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door gone through is not nothing and the door gone through is undescribed'
                                        INVOCATION_NT'if the door gone through is not nothing and the door gone through is undescribed'
                                            CONDITION_CONTEXT_NT'door gone through is not nothing and the door gone through is undescribed'
                                                LOGICAL_AND_NT'door gone through is not nothing and the door gone through is undescribed'
                                                    TEST_PROPOSITION_NT'door gone through is not nothing'(test: [ NOT[ is('door gone through', 'nothing') NOT] ])
                                                    TEST_PROPOSITION_NT'the door gone through is undescribed'(test: [ A71'undescribed'('the door gone through') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't go] that way." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't go] that way." ( a )'
                                                        INVOCATION_NT'"[We] [can't go] that way." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't go] that way." ( a )'
                                                                CONSTANT_NT'"[We] [can't go] that way." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor going ( this is the can't go through closed doors rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door gone through is not nothing and the door gone through is closed'
                                        INVOCATION_NT'if the door gone through is not nothing and the door gone through is closed'
                                            CONDITION_CONTEXT_NT'door gone through is not nothing and the door gone through is closed'
                                                LOGICAL_AND_NT'door gone through is not nothing and the door gone through is closed'
                                                    TEST_PROPOSITION_NT'door gone through is not nothing'(test: [ NOT[ is('door gone through', 'nothing') NOT] ])
                                                    TEST_PROPOSITION_NT'the door gone through is closed'(test: [ A81'closed'('the door gone through') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "(first opening [the door gone through])[command clarification break]" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"(first opening [the door gone through])[command clarification break]" ( a )'
                                                        INVOCATION_NT'"(first opening [the door gone through])[command clarification break]" ( a )'
                                                            RVALUE_CONTEXT_NT'"(first opening [the door gone through])[command clarification break]" ( a )'
                                                                CONSTANT_NT'"(first opening [the door gone through])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor opening the door gone through'
                                            INVOCATION_NT'silently try the actor opening the door gone through'
                                                RVALUE_CONTEXT_NT'actor opening the door gone through'
                                                    CONSTANT_NT'actor opening the door gone through'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the door gone through is open'
                                                INVOCATION_NT'if the door gone through is open'
                                                    CONDITION_CONTEXT_NT'door gone through is open'
                                                        TEST_PROPOSITION_NT'door gone through is open'(test: [ A80'open'('door gone through') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action'
                                                    INVOCATION_NT'continue the action'
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor going ( this is the determine map connection rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the target be nothing'
                                    INVOCATION_NT'let the target be nothing'
                                        NEW_LOCAL_CONTEXT_NT'target'
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'nothing'
                                            CONSTANT_NT'nothing'-object(-nothing-)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a direction'
                                        INVOCATION_NT'if the noun is a direction'
                                            CONDITION_CONTEXT_NT'noun is a direction'
                                                TEST_PROPOSITION_NT'noun is a direction'(test: [ kind=direction('noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let direction d be the noun'
                                            INVOCATION_NT'let direction d be the noun'
                                                NEW_LOCAL_CONTEXT_NT'direction d'
                                                    UNKNOWN_NT'direction d'
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        INVOCATION_LIST_NT'let the target be the room-or-door direction d from the room gone from'
                                            INVOCATION_NT'let the target be the room-or-door direction d from the room gone from'
                                                LVALUE_LOCAL_CONTEXT_NT'target'
                                                    LOCAL_VARIABLE_NT'target'(tmp_0;object)
                                                RVALUE_CONTEXT_NT'room-or-door direction d from the room gone from'
                                                    PHRASE_TO_DECIDE_VALUE_NT'room-or-door direction d from the room gone from'
                                                        INVOCATION_LIST_NT'room-or-door direction d from the room gone from'
                                                            INVOCATION_NT'room-or-door direction d from the room gone from'
                                                                RVALUE_CONTEXT_NT'direction d'
                                                                    LOCAL_VARIABLE_NT'direction d'(tmp_1;object)
                                                                RVALUE_CONTEXT_NT'room gone from'
                                                                    NONLOCAL_VARIABLE_NT'room gone from'('room gone from'(var)[room])
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is a door'
                                                INVOCATION_NT'if the noun is a door'
                                                    CONDITION_CONTEXT_NT'noun is a door'
                                                        TEST_PROPOSITION_NT'noun is a door'(test: [ kind=door('noun') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the target be the noun'
                                                    INVOCATION_NT'let the target be the noun'
                                                        LVALUE_LOCAL_CONTEXT_NT'target'
                                                            LOCAL_VARIABLE_NT'target'(tmp_0;object)
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the target is a door'
                                        INVOCATION_NT'if the target is a door'
                                            CONDITION_CONTEXT_NT'target is a door'
                                                TEST_PROPOSITION_NT'target is a door'(test: [ kind=door('target') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the target is the other side of the target from the room gone from'
                                            CONDITION_CONTEXT_NT'the target is the other side of the target from the room gone from'
                                INVOCATION_LIST_NT'now the room gone to is the target'
                                    CONDITION_CONTEXT_NT'the room gone to is the target'
                        ROUTINE_NT'check an actor going ( this is the can't go that way rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the room gone to is nothing'
                                        INVOCATION_NT'if the room gone to is nothing'
                                            CONDITION_CONTEXT_NT'room gone to is nothing'
                                                TEST_PROPOSITION_NT'room gone to is nothing'(test: [ is('room gone to', 'nothing') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the door gone through is nothing'
                                                INVOCATION_NT'if the door gone through is nothing'
                                                    CONDITION_CONTEXT_NT'door gone through is nothing'
                                                        TEST_PROPOSITION_NT'door gone through is nothing'(test: [ is('door gone through', 'nothing') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                        INVOCATION_NT'if the actor is the player'
                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [can't go] that way." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [can't go] that way." ( a )'
                                                                INVOCATION_NT'"[We] [can't go] that way." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[We] [can't go] that way." ( a )'
                                                                        CONSTANT_NT'"[We] [can't go] that way." ( a )'-text
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't], since [the door gone through] [lead] nowhere." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't], since [the door gone through] [lead] nowhere." ( b )'
                                                        INVOCATION_NT'"[We] [can't], since [the door gone through] [lead] nowhere." ( b )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't], since [the door gone through] [lead] nowhere." ( b )'
                                                                CONSTANT_NT'"[We] [can't], since [the door gone through] [lead] nowhere." ( b )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor going ( this is the move player and vehicle rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the vehicle gone by is nothing'
                                        INVOCATION_NT'if the vehicle gone by is nothing'
                                            CONDITION_CONTEXT_NT'vehicle gone by is nothing'
                                                TEST_PROPOSITION_NT'vehicle gone by is nothing'(test: [ is('vehicle gone by', 'nothing') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously move the actor to the room gone to during going'
                                            INVOCATION_NT'surreptitiously move the actor to the room gone to during going'
                                                RVALUE_CONTEXT_NT'actor'
                                                    NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                RVALUE_CONTEXT_NT'room gone to'
                                                    NONLOCAL_VARIABLE_NT'room gone to'('room gone to'(var)[object])
                                    CODE_BLOCK_NT'otherwise'
                                        INVOCATION_LIST_NT'surreptitiously move the vehicle gone by to the room gone to during going'
                                            INVOCATION_NT'surreptitiously move the vehicle gone by to the room gone to during going'
                                                RVALUE_CONTEXT_NT'vehicle gone by'
                                                    NONLOCAL_VARIABLE_NT'vehicle gone by'('vehicle gone by'(var)[object])
                                                RVALUE_CONTEXT_NT'room gone to'
                                                    NONLOCAL_VARIABLE_NT'room gone to'('room gone to'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the location is not the location of the player'
                                        INVOCATION_NT'if the location is not the location of the player'
                                            CONDITION_CONTEXT_NT'location is not the location of the player'
                                                TEST_PROPOSITION_NT'location is not the location of the player'(test: [ NOT[ is('location', 'the location of the player') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the location is the location of the player'
                                            CONDITION_CONTEXT_NT'the location is the location of the player'
                        ROUTINE_NT'carry out an actor going ( this is the move floating objects rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                        INVOCATION_NT'if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                            CONDITION_CONTEXT_NT'actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                                LOGICAL_OR_NT'actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                                    TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by'(test: [ is('the vehicle gone by', {<schema: ContainerOf(*1)>:'the player'}) ])
                                                        TEST_PROPOSITION_NT'the player is within the thing gone with'(test: [ is('the thing gone with', {<schema: ContainerOf(*1)>:'the player'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'update backdrop positions'
                                            INVOCATION_NT'update backdrop positions'
                        ROUTINE_NT'carry out an actor going ( this is the check light in new location rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                        INVOCATION_NT'if the actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                            CONDITION_CONTEXT_NT'actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                                LOGICAL_OR_NT'actor is the player or the player is within the vehicle gone by or the player is within the thing gone with'
                                                    TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by'(test: [ is('the vehicle gone by', {<schema: ContainerOf(*1)>:'the player'}) ])
                                                        TEST_PROPOSITION_NT'the player is within the thing gone with'(test: [ is('the thing gone with', {<schema: ContainerOf(*1)>:'the player'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously reckon darkness'
                                            INVOCATION_NT'surreptitiously reckon darkness'
                        ROUTINE_NT'report an actor going ( this is the describe room gone into rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the player is the actor'
                                        INVOCATION_NT'if the player is the actor'
                                            CONDITION_CONTEXT_NT'player is the actor'
                                                TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'produce a room description with going spacing conventions'
                                                    INVOCATION_NT'produce a room description with going spacing conventions'
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is a direction'
                                                INVOCATION_NT'if the noun is a direction'
                                                    CONDITION_CONTEXT_NT'noun is a direction'
                                                        TEST_PROPOSITION_NT'noun is a direction'(test: [ kind=direction('noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with'
                                                        INVOCATION_NT'if the location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with'
                                                            CONDITION_CONTEXT_NT'location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with'
                                                                LOGICAL_OR_NT'location is the room gone from or the player is within the vehicle gone by or the player is within the thing gone with'
                                                                    TEST_PROPOSITION_NT'location is the room gone from'(test: [ is('location', 'the room gone from') ])
                                                                    LOGICAL_OR_NT
                                                                        TEST_PROPOSITION_NT'the player is within the vehicle gone by'(test: [ is('the vehicle gone by', {<schema: ContainerOf(*1)>:'the player'}) ])
                                                                        TEST_PROPOSITION_NT'the player is within the thing gone with'(test: [ is('the thing gone with', {<schema: ContainerOf(*1)>:'the player'}) ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the room gone from is the room gone to'
                                                                INVOCATION_NT'if the room gone from is the room gone to'
                                                                    CONDITION_CONTEXT_NT'room gone from is the room gone to'
                                                                        TEST_PROPOSITION_NT'room gone from is the room gone to'(test: [ is('room gone from', 'the room gone to') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'continue the action'
                                                                    INVOCATION_NT'continue the action'
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the noun is up'
                                                                        INVOCATION_NT'if the noun is up'
                                                                            CONDITION_CONTEXT_NT'noun is up'
                                                                                TEST_PROPOSITION_NT'noun is up'(test: [ is('noun', 'up') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[The actor] [go] up" ( a )'
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [go] up" ( a )'
                                                                                INVOCATION_NT'"[The actor] [go] up" ( a )'
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [go] up" ( a )'
                                                                                        CONSTANT_NT'"[The actor] [go] up" ( a )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the noun is down'
                                                                                INVOCATION_NT'if the noun is down'
                                                                                    CONDITION_CONTEXT_NT'noun is down'
                                                                                        TEST_PROPOSITION_NT'noun is down'(test: [ is('noun', 'down') ])
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [go] down" ( b )'
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [go] down" ( b )'
                                                                                        INVOCATION_NT'"[The actor] [go] down" ( b )'
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [go] down" ( b )'
                                                                                                CONSTANT_NT'"[The actor] [go] down" ( b )'-text
                                                                            CODE_BLOCK_NT'otherwise'
                                                                                CODE_BLOCK_NT'say "[The actor] [go] [noun]" ( c )'
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [go] [noun]" ( c )'
                                                                                        INVOCATION_NT'"[The actor] [go] [noun]" ( c )'
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [go] [noun]" ( c )'
                                                                                                CONSTANT_NT'"[The actor] [go] [noun]" ( c )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        INVOCATION_LIST_NT'let the back way be the opposite of the noun'
                                                            INVOCATION_NT'let the back way be the opposite of the noun'
                                                                NEW_LOCAL_CONTEXT_NT'back way'
                                                                    UNKNOWN_NT'back way'
                                                                RVALUE_CONTEXT_NT'opposite of the noun'
                                                                    PROPERTY_VALUE_NT'opposite of the noun'
                                                                        CONSTANT_NT-nothing valued property
                                                                        NONLOCAL_VARIABLE_NT'the noun'('noun'(var)[object])
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the location is the room gone to'
                                                                INVOCATION_NT'if the location is the room gone to'
                                                                    CONDITION_CONTEXT_NT'location is the room gone to'
                                                                        TEST_PROPOSITION_NT'location is the room gone to'(test: [ is('location', 'the room gone to') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'let the room back the other way be the room back way from the location'
                                                                    INVOCATION_NT'let the room back the other way be the room back way from the location'
                                                                        NEW_LOCAL_CONTEXT_NT'room back the other way'
                                                                            UNKNOWN_NT'room back the other way'
                                                                        RVALUE_CONTEXT_NT'room back way from the location'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'room back way from the location'
                                                                                INVOCATION_LIST_NT'room back way from the location'
                                                                                    INVOCATION_NT'room back way from the location'
                                                                                        RVALUE_CONTEXT_NT'back way'
                                                                                            LOCAL_VARIABLE_NT'back way'(tmp_0;direction)
                                                                                        RVALUE_CONTEXT_NT'location'
                                                                                            NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                                                                INVOCATION_LIST_NT'let the room normally this way be the room noun from the room gone from'
                                                                    INVOCATION_NT'let the room normally this way be the room noun from the room gone from'
                                                                        NEW_LOCAL_CONTEXT_NT'room normally this way'
                                                                            UNKNOWN_NT'room normally this way'
                                                                        RVALUE_CONTEXT_NT'room noun from the room gone from'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'room noun from the room gone from'
                                                                                INVOCATION_LIST_NT'room noun from the room gone from'
                                                                                    INVOCATION_NT'room noun from the room gone from'
                                                                                        RVALUE_CONTEXT_NT'noun'
                                                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                                                        RVALUE_CONTEXT_NT'room gone from'
                                                                                            NONLOCAL_VARIABLE_NT'room gone from'('room gone from'(var)[room])
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the room back the other way is the room gone from or the room back the other way is the room normally this way'
                                                                        INVOCATION_NT'if the room back the other way is the room gone from or the room back the other way is the room normally this way'
                                                                            CONDITION_CONTEXT_NT'room back the other way is the room gone from or the room back the other way is the room normally this way'
                                                                                LOGICAL_OR_NT'room back the other way is the room gone from or the room back the other way is the room normally this way'
                                                                                    TEST_PROPOSITION_NT'room back the other way is the room gone from'(test: [ is('room back the other way', 'the room gone from') ])
                                                                                    TEST_PROPOSITION_NT'the room back the other way is the room normally this way'(test: [ is('the room back the other way', 'the room normally this way') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the back way is up'
                                                                                INVOCATION_NT'if the back way is up'
                                                                                    CONDITION_CONTEXT_NT'back way is up'
                                                                                        TEST_PROPOSITION_NT'back way is up'(test: [ is('back way', 'up') ])
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] from above" ( d )'
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from above" ( d )'
                                                                                        INVOCATION_NT'"[The actor] [arrive] from above" ( d )'
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] from above" ( d )'
                                                                                                CONSTANT_NT'"[The actor] [arrive] from above" ( d )'-text
                                                                            CODE_BLOCK_NT'otherwise'
                                                                                CODE_BLOCK_NT
                                                                                    INVOCATION_LIST_NT'if the back way is down'
                                                                                        INVOCATION_NT'if the back way is down'
                                                                                            CONDITION_CONTEXT_NT'back way is down'
                                                                                                TEST_PROPOSITION_NT'back way is down'(test: [ is('back way', 'down') ])
                                                                                    CODE_BLOCK_NT
                                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from below" ( e )'
                                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from below" ( e )'
                                                                                                INVOCATION_NT'"[The actor] [arrive] from below" ( e )'
                                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from below" ( e )'
                                                                                                        CONSTANT_NT'"[The actor] [arrive] from below" ( e )'-text
                                                                                    CODE_BLOCK_NT'otherwise'
                                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from [the back way]" ( f )'
                                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from [the back way]" ( f )'
                                                                                                INVOCATION_NT'"[The actor] [arrive] from [the back way]" ( f )'
                                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from [the back way]" ( f )'
                                                                                                        CONSTANT_NT'"[The actor] [arrive] from [the back way]" ( f )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT'say "[The actor] [arrive]" ( g )'
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive]" ( g )'
                                                                                INVOCATION_NT'"[The actor] [arrive]" ( g )'
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive]" ( g )'
                                                                                        CONSTANT_NT'"[The actor] [arrive]" ( g )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the back way is up'
                                                                        INVOCATION_NT'if the back way is up'
                                                                            CONDITION_CONTEXT_NT'back way is up'
                                                                                TEST_PROPOSITION_NT'back way is up'(test: [ is('back way', 'up') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from above" ( h )'
                                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from above" ( h )'
                                                                                INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from above" ( h )'
                                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from above" ( h )'
                                                                                        CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from above" ( h )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT
                                                                            INVOCATION_LIST_NT'if the back way is down'
                                                                                INVOCATION_NT'if the back way is down'
                                                                                    CONDITION_CONTEXT_NT'back way is down'
                                                                                        TEST_PROPOSITION_NT'back way is down'(test: [ is('back way', 'down') ])
                                                                            CODE_BLOCK_NT
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from below" ( i )'
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from below" ( i )'
                                                                                        INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from below" ( i )'
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from below" ( i )'
                                                                                                CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from below" ( i )'-text
                                                                            CODE_BLOCK_NT'otherwise'
                                                                                CODE_BLOCK_NT'say "[The actor] [arrive] at [the room gone to] from [the back way]" ( j )'
                                                                                    INVOCATION_LIST_SAY_NT'"[The actor] [arrive] at [the room gone to] from [the back way]" ( j )'
                                                                                        INVOCATION_NT'"[The actor] [arrive] at [the room gone to] from [the back way]" ( j )'
                                                                                            RVALUE_CONTEXT_NT'"[The actor] [arrive] at [the room gone to] from [the back way]" ( j )'
                                                                                                CONSTANT_NT'"[The actor] [arrive] at [the room gone to] from [the back way]" ( j )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the location is the room gone from'
                                                        INVOCATION_NT'if the location is the room gone from'
                                                            CONDITION_CONTEXT_NT'location is the room gone from'
                                                                TEST_PROPOSITION_NT'location is the room gone from'(test: [ is('location', 'the room gone from') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The actor] [go] through [the noun]" ( k )'
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [go] through [the noun]" ( k )'
                                                                INVOCATION_NT'"[The actor] [go] through [the noun]" ( k )'
                                                                    RVALUE_CONTEXT_NT'"[The actor] [go] through [the noun]" ( k )'
                                                                        CONSTANT_NT'"[The actor] [go] through [the noun]" ( k )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "[The actor] [arrive] from [the noun]" ( l )'
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [arrive] from [the noun]" ( l )'
                                                                INVOCATION_NT'"[The actor] [arrive] from [the noun]" ( l )'
                                                                    RVALUE_CONTEXT_NT'"[The actor] [arrive] from [the noun]" ( l )'
                                                                        CONSTANT_NT'"[The actor] [arrive] from [the noun]" ( l )'-text
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the vehicle gone by is not nothing'
                                                INVOCATION_NT'if the vehicle gone by is not nothing'
                                                    CONDITION_CONTEXT_NT'vehicle gone by is not nothing'
                                                        TEST_PROPOSITION_NT'vehicle gone by is not nothing'(test: [ NOT[ is('vehicle gone by', 'nothing') NOT] ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say " "'
                                                    INVOCATION_LIST_SAY_NT'" "'
                                                        INVOCATION_NT'" "'
                                                            RVALUE_CONTEXT_NT'" "'
                                                                CONSTANT_NT'" "'-text
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the vehicle gone by is a supporter'
                                                        INVOCATION_NT'if the vehicle gone by is a supporter'
                                                            CONDITION_CONTEXT_NT'vehicle gone by is a supporter'
                                                                TEST_PROPOSITION_NT'vehicle gone by is a supporter'(test: [ kind=supporter('vehicle gone by') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "on [the vehicle gone by]" ( m )'
                                                            INVOCATION_LIST_SAY_NT'"on [the vehicle gone by]" ( m )'
                                                                INVOCATION_NT'"on [the vehicle gone by]" ( m )'
                                                                    RVALUE_CONTEXT_NT'"on [the vehicle gone by]" ( m )'
                                                                        CONSTANT_NT'"on [the vehicle gone by]" ( m )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "in [the vehicle gone by]" ( n )'
                                                            INVOCATION_LIST_SAY_NT'"in [the vehicle gone by]" ( n )'
                                                                INVOCATION_NT'"in [the vehicle gone by]" ( n )'
                                                                    RVALUE_CONTEXT_NT'"in [the vehicle gone by]" ( n )'
                                                                        CONSTANT_NT'"in [the vehicle gone by]" ( n )'-text
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the thing gone with is not nothing'
                                                INVOCATION_NT'if the thing gone with is not nothing'
                                                    CONDITION_CONTEXT_NT'thing gone with is not nothing'
                                                        TEST_PROPOSITION_NT'thing gone with is not nothing'(test: [ NOT[ is('thing gone with', 'nothing') NOT] ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the player is within the thing gone with'
                                                        INVOCATION_NT'if the player is within the thing gone with'
                                                            CONDITION_CONTEXT_NT'player is within the thing gone with'
                                                                TEST_PROPOSITION_NT'player is within the thing gone with'(test: [ is('the thing gone with', {<schema: ContainerOf(*1)>:'player'}) ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] in front, and [us] along too" ( o )'
                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in front, and [us] along too" ( o )'
                                                                INVOCATION_NT'", pushing [the thing gone with] in front, and [us] along too" ( o )'
                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] in front, and [us] along too" ( o )'
                                                                        CONSTANT_NT'", pushing [the thing gone with] in front, and [us] along too" ( o )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the player is within the vehicle gone by'
                                                                INVOCATION_NT'if the player is within the vehicle gone by'
                                                                    CONDITION_CONTEXT_NT'player is within the vehicle gone by'
                                                                        TEST_PROPOSITION_NT'player is within the vehicle gone by'(test: [ is('the vehicle gone by', {<schema: ContainerOf(*1)>:'player'}) ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say ", pushing [the thing gone with] in front" ( p )'
                                                                    INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in front" ( p )'
                                                                        INVOCATION_NT'", pushing [the thing gone with] in front" ( p )'
                                                                            RVALUE_CONTEXT_NT'", pushing [the thing gone with] in front" ( p )'
                                                                                CONSTANT_NT'", pushing [the thing gone with] in front" ( p )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the location is the room gone from'
                                                                        INVOCATION_NT'if the location is the room gone from'
                                                                            CONDITION_CONTEXT_NT'location is the room gone from'
                                                                                TEST_PROPOSITION_NT'location is the room gone from'(test: [ is('location', 'the room gone from') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] away" ( q )'
                                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] away" ( q )'
                                                                                INVOCATION_NT'", pushing [the thing gone with] away" ( q )'
                                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] away" ( q )'
                                                                                        CONSTANT_NT'", pushing [the thing gone with] away" ( q )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT'say ", pushing [the thing gone with] in" ( r )'
                                                                            INVOCATION_LIST_SAY_NT'", pushing [the thing gone with] in" ( r )'
                                                                                INVOCATION_NT'", pushing [the thing gone with] in" ( r )'
                                                                                    RVALUE_CONTEXT_NT'", pushing [the thing gone with] in" ( r )'
                                                                                        CONSTANT_NT'", pushing [the thing gone with] in" ( r )'-text
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is within the vehicle gone by and the player is not within the thing gone with'
                                                INVOCATION_NT'if the player is within the vehicle gone by and the player is not within the thing gone with'
                                                    CONDITION_CONTEXT_NT'player is within the vehicle gone by and the player is not within the thing gone with'
                                                        LOGICAL_AND_NT'player is within the vehicle gone by and the player is not within the thing gone with'
                                                            TEST_PROPOSITION_NT'player is within the vehicle gone by'(test: [ is('the vehicle gone by', {<schema: ContainerOf(*1)>:'player'}) ])
                                                            TEST_PROPOSITION_NT'the player is not within the thing gone with'(test: [ NOT[ is('the thing gone with', {<schema: ContainerOf(*1)>:'the player'}) NOT] ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say ", taking [us] along" ( s )'
                                                    INVOCATION_LIST_SAY_NT'", taking [us] along" ( s )'
                                                        INVOCATION_NT'", taking [us] along" ( s )'
                                                            RVALUE_CONTEXT_NT'", taking [us] along" ( s )'
                                                                CONSTANT_NT'", taking [us] along" ( s )'-text
                                                CODE_BLOCK_NT'say "."'
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."'
                                                            RVALUE_CONTEXT_NT'"."'
                                                                CONSTANT_NT'"."'-text
                                                INVOCATION_LIST_NT'try looking'
                                                    INVOCATION_NT'try looking'
                                                        RVALUE_CONTEXT_NT'looking'
                                                            CONSTANT_NT'looking'-action
                                                INVOCATION_LIST_NT'continue the action'
                                                    INVOCATION_NT'continue the action'
                                        CODE_BLOCK_NT'say "."'
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."'
                                                    RVALUE_CONTEXT_NT'"."'
                                                        CONSTANT_NT'"."'-text
                        SENTENCE_NT'entering is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'entering'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the entering action translates into i6 as Enter'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'entering action'
                            PROPER_NOUN_NT'Enter'
                        SENTENCE_NT'the specification of the entering action is Whereas the going action allows
                        people to move from one location to another in the model world, the entering
                        action is for movement inside a location: for instance, climbing into a cage
                        or sitting on a couch. (Entering is not allowed to change location, so any
                        attempt to enter a door is converted into a going action.) What makes
                        entering trickier than it looks is that the player may try to enter an
                        object which is itself inside, or part of, something else, which might in
                        turn be... and so on. To preserve realism, the implicitly pass through other
                        barriers rule automatically generates entering and exiting actions needed
                        to pass between anything which might be in the way: for instance, in a
                        room with two open cages, an actor in cage A who tries entering cage B first
                        has to perform an exiting action.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the entering action'
                                PROPER_NOUN_NT'entering action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Whereas the going action allows
                            people to move from one location to another in the model world, the entering
                            action is for movement inside a location: for instance, climbing into a cage
                            or sitting on a couch. (Entering is not allowed to change location, so any
                            attempt to enter a door is converted into a going action.) What makes
                            entering trickier than it looks is that the player may try to enter an
                            object which is itself inside, or part of, something else, which might in
                            turn be... and so on. To preserve realism, the implicitly pass through other
                            barriers rule automatically generates entering and exiting actions needed
                            to pass between anything which might be in the way: for instance, in a
                            room with two open cages, an actor in cage A who tries entering cage B first
                            has to perform an exiting action.'
                        ROUTINE_NT'rule for supplying a missing noun while entering ( this is the find what to enter rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if something enterable ( called the box ) is in the location'
                                        INVOCATION_NT'if something enterable ( called the box ) is in the location'
                                            CONDITION_CONTEXT_NT'something enterable ( called the box ) is in the location'
                                                TEST_PROPOSITION_NT'something enterable ( called the box ) is in the location'(test: [ Exists x : kind=thing_c(x) ^ A77'enterable'(x) ^ called='box'(thing)(x) ^ is('the location', {<schema: ContainerOf(*1)>:x}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the noun is the box'
                                            CONDITION_CONTEXT_NT'the noun is the box'
                                    CODE_BLOCK_NT'otherwise'
                                        INVOCATION_LIST_NT'continue the activity'
                                            INVOCATION_NT'continue the activity'
                        SENTENCE_NT'the find what to enter rule is listed last in the for supplying a missing noun rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the find what to enter rule'
                            PROPER_NOUN_NT'last in the for supplying a missing noun rulebook'
                        ROUTINE_NT'check an actor entering ( this is the convert enter door into go rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a door'
                                        INVOCATION_NT'if the noun is a door'
                                            CONDITION_CONTEXT_NT'noun is a door'
                                                TEST_PROPOSITION_NT'noun is a door'(test: [ kind=door('noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the going action on the noun'
                                            INVOCATION_NT'convert to the going action on the noun'
                                                RVALUE_CONTEXT_NT'going action'
                                                    CONSTANT_NT'going action'-action name
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'check an actor entering ( this is the convert enter compass direction into go rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a direction'
                                        INVOCATION_NT'if the noun is a direction'
                                            CONDITION_CONTEXT_NT'noun is a direction'
                                                TEST_PROPOSITION_NT'noun is a direction'(test: [ kind=direction('noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the going action on the noun'
                                            INVOCATION_NT'convert to the going action on the noun'
                                                RVALUE_CONTEXT_NT'going action'
                                                    CONSTANT_NT'going action'-action name
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'check an actor entering ( this is the can't enter what's already entered rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the noun'
                                        INVOCATION_NT'if the actor is the noun'
                                            CONDITION_CONTEXT_NT'actor is the noun'
                                                TEST_PROPOSITION_NT'actor is the noun'(test: [ is('actor', 'the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'make no decision'
                                            INVOCATION_NT'make no decision'
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                        NEW_LOCAL_CONTEXT_NT'local ceiling'
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the local ceiling is the noun'
                                        INVOCATION_NT'if the local ceiling is the noun'
                                            CONDITION_CONTEXT_NT'local ceiling is the noun'
                                                TEST_PROPOSITION_NT'local ceiling is the noun'(test: [ is('local ceiling', 'the noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the noun is a supporter'
                                                        INVOCATION_NT'if the noun is a supporter'
                                                            CONDITION_CONTEXT_NT'noun is a supporter'
                                                                TEST_PROPOSITION_NT'noun is a supporter'(test: [ kind=supporter('noun') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "But [we]['re] already on [the noun]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"But [we]['re] already on [the noun]." ( a )'
                                                                INVOCATION_NT'"But [we]['re] already on [the noun]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"But [we]['re] already on [the noun]." ( a )'
                                                                        CONSTANT_NT'"But [we]['re] already on [the noun]." ( a )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "But [we]['re] already in [the noun]." ( b )'
                                                            INVOCATION_LIST_SAY_NT'"But [we]['re] already in [the noun]." ( b )'
                                                                INVOCATION_NT'"But [we]['re] already in [the noun]." ( b )'
                                                                    RVALUE_CONTEXT_NT'"But [we]['re] already in [the noun]." ( b )'
                                                                        CONSTANT_NT'"But [we]['re] already in [the noun]." ( b )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor entering ( this is the can't enter what's not enterable rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not enterable'
                                        INVOCATION_NT'if the noun is not enterable'
                                            CONDITION_CONTEXT_NT'noun is not enterable'
                                                TEST_PROPOSITION_NT'noun is not enterable'(test: [ NOT[ A77'enterable'('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the player's command includes "stand"'
                                                        INVOCATION_NT'if the player's command includes "stand"'
                                                            CONDITION_CONTEXT_NT'player's command includes "stand"'
                                                                TEST_VALUE_NT'player's command includes "stand"'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'player's command includes "stand"'
                                                                        INVOCATION_LIST_NT'player's command includes "stand"'
                                                                            INVOCATION_NT'player's command includes "stand"'
                                                                                RVALUE_CONTEXT_NT'player's command'
                                                                                    NONLOCAL_VARIABLE_NT'player's command'('player's command'(var)[snippet])
                                                                                RVALUE_CONTEXT_NT'"stand"'
                                                                                    CONSTANT_NT'"stand"'-topic
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] stand on." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] stand on." ( a )'
                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] stand on." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] stand on." ( a )'
                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] stand on." ( a )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the player's command includes "sit"'
                                                                INVOCATION_NT'if the player's command includes "sit"'
                                                                    CONDITION_CONTEXT_NT'player's command includes "sit"'
                                                                        TEST_VALUE_NT'player's command includes "sit"'
                                                                            PHRASE_TO_DECIDE_VALUE_NT'player's command includes "sit"'
                                                                                INVOCATION_LIST_NT'player's command includes "sit"'
                                                                                    INVOCATION_NT'player's command includes "sit"'
                                                                                        RVALUE_CONTEXT_NT'player's command'
                                                                                            NONLOCAL_VARIABLE_NT'player's command'('player's command'(var)[snippet])
                                                                                        RVALUE_CONTEXT_NT'"sit"'
                                                                                            CONSTANT_NT'"sit"'-topic
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] sit down on." ( b )'
                                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] sit down on." ( b )'
                                                                        INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] sit down on." ( b )'
                                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] sit down on." ( b )'
                                                                                CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] sit down on." ( b )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the player's command includes "lie"'
                                                                        INVOCATION_NT'if the player's command includes "lie"'
                                                                            CONDITION_CONTEXT_NT'player's command includes "lie"'
                                                                                TEST_VALUE_NT'player's command includes "lie"'
                                                                                    PHRASE_TO_DECIDE_VALUE_NT'player's command includes "lie"'
                                                                                        INVOCATION_LIST_NT'player's command includes "lie"'
                                                                                            INVOCATION_NT'player's command includes "lie"'
                                                                                                RVALUE_CONTEXT_NT'player's command'
                                                                                                    NONLOCAL_VARIABLE_NT'player's command'('player's command'(var)[snippet])
                                                                                                RVALUE_CONTEXT_NT'"lie"'
                                                                                                    CONSTANT_NT'"lie"'-topic
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] lie down on." ( c )'
                                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] lie down on." ( c )'
                                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] lie down on." ( c )'
                                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] lie down on." ( c )'
                                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] lie down on." ( c )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT'say "[regarding the noun][They're] not something [we] [can] enter." ( d )'
                                                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] not something [we] [can] enter." ( d )'
                                                                                INVOCATION_NT'"[regarding the noun][They're] not something [we] [can] enter." ( d )'
                                                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They're] not something [we] [can] enter." ( d )'
                                                                                        CONSTANT_NT'"[regarding the noun][They're] not something [we] [can] enter." ( d )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor entering ( this is the can't enter closed containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a closed container'
                                        INVOCATION_NT'if the noun is a closed container'
                                            CONDITION_CONTEXT_NT'noun is a closed container'
                                                TEST_PROPOSITION_NT'noun is a closed container'(test: [ kind=container('noun') ^ A81'closed'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't get] into the closed [noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't get] into the closed [noun]." ( a )'
                                                        INVOCATION_NT'"[We] [can't get] into the closed [noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't get] into the closed [noun]." ( a )'
                                                                CONSTANT_NT'"[We] [can't get] into the closed [noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor entering ( this is the can't enter if this exceeds carrying capacity rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property carrying capacity'
                                        INVOCATION_NT'if the noun provides the property carrying capacity'
                                            CONDITION_CONTEXT_NT'noun provides the property carrying capacity'
                                                TEST_PROPOSITION_NT'noun provides the property carrying capacity'(test: [ provides('noun', 'the property carrying capacity') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is a supporter'
                                                INVOCATION_NT'if the noun is a supporter'
                                                    CONDITION_CONTEXT_NT'noun is a supporter'
                                                        TEST_PROPOSITION_NT'noun is a supporter'(test: [ kind=supporter('noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the number of things on the noun is at least the carrying capacity of the noun'
                                                        INVOCATION_NT'if the number of things on the noun is at least the carrying capacity of the noun'
                                                            CONDITION_CONTEXT_NT'number of things on the noun is at least the carrying capacity of the noun'
                                                                TEST_PROPOSITION_NT'number of things on the noun is at least the carrying capacity of the noun'(test: [ at-least('number of things on the noun', 'the carrying capacity of the noun') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the actor is the player'
                                                                INVOCATION_NT'if the actor is the player'
                                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                            CODE_BLOCK_NT
                                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                CODE_BLOCK_NT'say "[There] [are] no more room on [the noun]." ( a )'
                                                                    INVOCATION_LIST_SAY_NT'"[There] [are] no more room on [the noun]." ( a )'
                                                                        INVOCATION_NT'"[There] [are] no more room on [the noun]." ( a )'
                                                                            RVALUE_CONTEXT_NT'"[There] [are] no more room on [the noun]." ( a )'
                                                                                CONSTANT_NT'"[There] [are] no more room on [the noun]." ( a )'-text
                                                        INVOCATION_LIST_NT'stop the action'
                                                            INVOCATION_NT'stop the action'
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the noun is a container'
                                                        INVOCATION_NT'if the noun is a container'
                                                            CONDITION_CONTEXT_NT'noun is a container'
                                                                TEST_PROPOSITION_NT'noun is a container'(test: [ kind=container('noun') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the number of things in the noun is at least the carrying capacity of the noun'
                                                                INVOCATION_NT'if the number of things in the noun is at least the carrying capacity of the noun'
                                                                    CONDITION_CONTEXT_NT'number of things in the noun is at least the carrying capacity of the noun'
                                                                        TEST_PROPOSITION_NT'number of things in the noun is at least the carrying capacity of the noun'(test: [ at-least('number of things in the noun', 'the carrying capacity of the noun') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                                        INVOCATION_NT'if the actor is the player'
                                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                                        CODE_BLOCK_NT'say "[There] [are] no more room in [the noun]." ( b )'
                                                                            INVOCATION_LIST_SAY_NT'"[There] [are] no more room in [the noun]." ( b )'
                                                                                INVOCATION_NT'"[There] [are] no more room in [the noun]." ( b )'
                                                                                    RVALUE_CONTEXT_NT'"[There] [are] no more room in [the noun]." ( b )'
                                                                                        CONSTANT_NT'"[There] [are] no more room in [the noun]." ( b )'-text
                                                                INVOCATION_LIST_NT'stop the action'
                                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor entering ( this is the can't enter something carried rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                        NEW_LOCAL_CONTEXT_NT'local ceiling'
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the local ceiling is the actor'
                                        INVOCATION_NT'if the local ceiling is the actor'
                                            CONDITION_CONTEXT_NT'local ceiling is the actor'
                                                TEST_PROPOSITION_NT'local ceiling is the actor'(test: [ is('local ceiling', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can] only get into something free-standing." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can] only get into something free-standing." ( a )'
                                                        INVOCATION_NT'"[We] [can] only get into something free-standing." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can] only get into something free-standing." ( a )'
                                                                CONSTANT_NT'"[We] [can] only get into something free-standing." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor entering ( this is the implicitly pass through other barriers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the actor is the holder of the noun'
                                        INVOCATION_NT'if the holder of the actor is the holder of the noun'
                                            CONDITION_CONTEXT_NT'holder of the actor is the holder of the noun'
                                                TEST_PROPOSITION_NT'holder of the actor is the holder of the noun'(test: [ is('holder of the actor', 'the holder of the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                    INVOCATION_NT'let the local ceiling be the common ancestor of the actor with the noun'
                                        NEW_LOCAL_CONTEXT_NT'local ceiling'
                                            UNKNOWN_NT'local ceiling'
                                        RVALUE_CONTEXT_NT'common ancestor of the actor with the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'common ancestor of the actor with the noun'
                                                INVOCATION_LIST_NT'common ancestor of the actor with the noun'
                                                    INVOCATION_NT'common ancestor of the actor with the noun'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'while the holder of the actor is not the local ceiling'
                                        INVOCATION_NT'while the holder of the actor is not the local ceiling'
                                            CONDITION_CONTEXT_NT'holder of the actor is not the local ceiling'
                                                TEST_PROPOSITION_NT'holder of the actor is not the local ceiling'(test: [ NOT[ is('holder of the actor', 'the local ceiling') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the current home be the holder of the actor'
                                            INVOCATION_NT'let the current home be the holder of the actor'
                                                NEW_LOCAL_CONTEXT_NT'current home'
                                                    UNKNOWN_NT'current home'
                                                RVALUE_CONTEXT_NT'holder of the actor'
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the actor'
                                                        INVOCATION_LIST_NT'holder of the actor'
                                                            INVOCATION_NT'holder of the actor'
                                                                RVALUE_CONTEXT_NT'actor'
                                                                    NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the current home is a supporter or the current home is an animal'
                                                        INVOCATION_NT'if the current home is a supporter or the current home is an animal'
                                                            CONDITION_CONTEXT_NT'current home is a supporter or the current home is an animal'
                                                                LOGICAL_OR_NT'current home is a supporter or the current home is an animal'
                                                                    TEST_PROPOSITION_NT'current home is a supporter'(test: [ kind=supporter('current home') ])
                                                                    TEST_PROPOSITION_NT'the current home is an animal'(test: [ kind=animal('the current home') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(getting off [the current home])[command clarification break]" ( a )'
                                                            INVOCATION_LIST_SAY_NT'"(getting off [the current home])[command clarification break]" ( a )'
                                                                INVOCATION_NT'"(getting off [the current home])[command clarification break]" ( a )'
                                                                    RVALUE_CONTEXT_NT'"(getting off [the current home])[command clarification break]" ( a )'
                                                                        CONSTANT_NT'"(getting off [the current home])[command clarification break]" ( a )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "(getting out of [the current home])[command clarification break]" ( b )'
                                                            INVOCATION_LIST_SAY_NT'"(getting out of [the current home])[command clarification break]" ( b )'
                                                                INVOCATION_NT'"(getting out of [the current home])[command clarification break]" ( b )'
                                                                    RVALUE_CONTEXT_NT'"(getting out of [the current home])[command clarification break]" ( b )'
                                                                        CONSTANT_NT'"(getting out of [the current home])[command clarification break]" ( b )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying exiting'
                                            INVOCATION_NT'silently try the actor trying exiting'
                                                RVALUE_CONTEXT_NT'actor trying exiting'
                                                    CONSTANT_NT'actor trying exiting'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the holder of the actor is the current home'
                                                INVOCATION_NT'if the holder of the actor is the current home'
                                                    CONDITION_CONTEXT_NT'holder of the actor is the current home'
                                                        TEST_PROPOSITION_NT'holder of the actor is the current home'(test: [ is('holder of the actor', 'the current home') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the actor is the noun'
                                        INVOCATION_NT'if the holder of the actor is the noun'
                                            CONDITION_CONTEXT_NT'holder of the actor is the noun'
                                                TEST_PROPOSITION_NT'holder of the actor is the noun'(test: [ is('holder of the actor', 'the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the actor is the holder of the noun'
                                        INVOCATION_NT'if the holder of the actor is the holder of the noun'
                                            CONDITION_CONTEXT_NT'holder of the actor is the holder of the noun'
                                                TEST_PROPOSITION_NT'holder of the actor is the holder of the noun'(test: [ is('holder of the actor', 'the holder of the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'let the target be the holder of the noun'
                                    INVOCATION_NT'let the target be the holder of the noun'
                                        NEW_LOCAL_CONTEXT_NT'target'
                                            UNKNOWN_NT'target'
                                        RVALUE_CONTEXT_NT'holder of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'holder of the noun'
                                                INVOCATION_LIST_NT'holder of the noun'
                                                    INVOCATION_NT'holder of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is part of the target'
                                        INVOCATION_NT'if the noun is part of the target'
                                            CONDITION_CONTEXT_NT'noun is part of the target'
                                                TEST_PROPOSITION_NT'noun is part of the target'(test: [ is('the target', {<schema: (*1.component_parent)>:'noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the target be the holder of the target'
                                            INVOCATION_NT'let the target be the holder of the target'
                                                LVALUE_LOCAL_CONTEXT_NT'target'
                                                    LOCAL_VARIABLE_NT'target'(tmp_1;object)
                                                RVALUE_CONTEXT_NT'holder of the target'
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the target'
                                                        INVOCATION_LIST_NT'holder of the target'
                                                            INVOCATION_NT'holder of the target'
                                                                RVALUE_CONTEXT_NT'target'
                                                                    LOCAL_VARIABLE_NT'target'(tmp_1;object)
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'while the target is a thing'
                                        INVOCATION_NT'while the target is a thing'
                                            CONDITION_CONTEXT_NT'target is a thing'
                                                TEST_PROPOSITION_NT'target is a thing'(test: [ kind=thing('target') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the holder of the target is the local ceiling'
                                                INVOCATION_NT'if the holder of the target is the local ceiling'
                                                    CONDITION_CONTEXT_NT'holder of the target is the local ceiling'
                                                        TEST_PROPOSITION_NT'holder of the target is the local ceiling'(test: [ is('holder of the target', 'the local ceiling') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the player is the actor'
                                                        INVOCATION_NT'if the player is the actor'
                                                            CONDITION_CONTEXT_NT'player is the actor'
                                                                TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if the target is a supporter'
                                                                INVOCATION_NT'if the target is a supporter'
                                                                    CONDITION_CONTEXT_NT'target is a supporter'
                                                                        TEST_PROPOSITION_NT'target is a supporter'(test: [ kind=supporter('target') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT'say "(getting onto [the target])[command clarification break]" ( c )'
                                                                    INVOCATION_LIST_SAY_NT'"(getting onto [the target])[command clarification break]" ( c )'
                                                                        INVOCATION_NT'"(getting onto [the target])[command clarification break]" ( c )'
                                                                            RVALUE_CONTEXT_NT'"(getting onto [the target])[command clarification break]" ( c )'
                                                                                CONSTANT_NT'"(getting onto [the target])[command clarification break]" ( c )'-text
                                                            CODE_BLOCK_NT'otherwise'
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the target is a container'
                                                                        INVOCATION_NT'if the target is a container'
                                                                            CONDITION_CONTEXT_NT'target is a container'
                                                                                TEST_PROPOSITION_NT'target is a container'(test: [ kind=container('target') ])
                                                                    CODE_BLOCK_NT
                                                                        CODE_BLOCK_NT'say "(getting into [the target])[command clarification break]" ( d )'
                                                                            INVOCATION_LIST_SAY_NT'"(getting into [the target])[command clarification break]" ( d )'
                                                                                INVOCATION_NT'"(getting into [the target])[command clarification break]" ( d )'
                                                                                    RVALUE_CONTEXT_NT'"(getting into [the target])[command clarification break]" ( d )'
                                                                                        CONSTANT_NT'"(getting into [the target])[command clarification break]" ( d )'-text
                                                                    CODE_BLOCK_NT'otherwise'
                                                                        CODE_BLOCK_NT'say "(entering [the target])[command clarification break]" ( e )'
                                                                            INVOCATION_LIST_SAY_NT'"(entering [the target])[command clarification break]" ( e )'
                                                                                INVOCATION_NT'"(entering [the target])[command clarification break]" ( e )'
                                                                                    RVALUE_CONTEXT_NT'"(entering [the target])[command clarification break]" ( e )'
                                                                                        CONSTANT_NT'"(entering [the target])[command clarification break]" ( e )'-text
                                                INVOCATION_LIST_NT'silently try the actor trying entering the target'
                                                    INVOCATION_NT'silently try the actor trying entering the target'
                                                        RVALUE_CONTEXT_NT'actor trying entering the target'
                                                            CONSTANT_NT'actor trying entering the target'-action
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the holder of the actor is not the target'
                                                        INVOCATION_NT'if the holder of the actor is not the target'
                                                            CONDITION_CONTEXT_NT'holder of the actor is not the target'
                                                                TEST_PROPOSITION_NT'holder of the actor is not the target'(test: [ NOT[ is('holder of the actor', 'the target') NOT] ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'stop the action'
                                                            INVOCATION_NT'stop the action'
                                                INVOCATION_LIST_NT'convert to the entering action on the noun'
                                                    INVOCATION_NT'convert to the entering action on the noun'
                                                        RVALUE_CONTEXT_NT'entering action'
                                                            CONSTANT_NT'entering action'-action name
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                INVOCATION_LIST_NT'continue the action'
                                                    INVOCATION_NT'continue the action'
                                        INVOCATION_LIST_NT'let the target be the holder of the target'
                                            INVOCATION_NT'let the target be the holder of the target'
                                                LVALUE_LOCAL_CONTEXT_NT'target'
                                                    LOCAL_VARIABLE_NT'target'(tmp_1;object)
                                                RVALUE_CONTEXT_NT'holder of the target'
                                                    PHRASE_TO_DECIDE_VALUE_NT'holder of the target'
                                                        INVOCATION_LIST_NT'holder of the target'
                                                            INVOCATION_NT'holder of the target'
                                                                RVALUE_CONTEXT_NT'target'
                                                                    LOCAL_VARIABLE_NT'target'(tmp_1;object)
                        ROUTINE_NT'carry out an actor entering ( this is the standard entering rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'surreptitiously move the actor to the noun'
                                    INVOCATION_NT'surreptitiously move the actor to the noun'
                                        RVALUE_CONTEXT_NT'actor'
                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'report an actor entering ( this is the standard report entering rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the noun is a supporter'
                                                        INVOCATION_NT'if the noun is a supporter'
                                                            CONDITION_CONTEXT_NT'noun is a supporter'
                                                                TEST_PROPOSITION_NT'noun is a supporter'(test: [ kind=supporter('noun') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [get] onto [the noun]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] onto [the noun]." ( a )'
                                                                INVOCATION_NT'"[We] [get] onto [the noun]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[We] [get] onto [the noun]." ( a )'
                                                                        CONSTANT_NT'"[We] [get] onto [the noun]." ( a )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "[We] [get] into [the noun]." ( b )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] into [the noun]." ( b )'
                                                                INVOCATION_NT'"[We] [get] into [the noun]." ( b )'
                                                                    RVALUE_CONTEXT_NT'"[We] [get] into [the noun]." ( b )'
                                                                        CONSTANT_NT'"[We] [get] into [the noun]." ( b )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is a container'
                                                INVOCATION_NT'if the noun is a container'
                                                    CONDITION_CONTEXT_NT'noun is a container'
                                                        TEST_PROPOSITION_NT'noun is a container'(test: [ kind=container('noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [get] into [the noun]." ( c )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] into [the noun]." ( c )'
                                                        INVOCATION_NT'"[The actor] [get] into [the noun]." ( c )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] into [the noun]." ( c )'
                                                                CONSTANT_NT'"[The actor] [get] into [the noun]." ( c )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [get] onto [the noun]." ( d )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] onto [the noun]." ( d )'
                                                        INVOCATION_NT'"[The actor] [get] onto [the noun]." ( d )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] onto [the noun]." ( d )'
                                                                CONSTANT_NT'"[The actor] [get] onto [the noun]." ( d )'-text
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor entering ( this is the describe contents entered into rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'describe locale for the noun'
                                            INVOCATION_NT'describe locale for the noun'
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        SENTENCE_NT'exiting is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'exiting'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the exiting action translates into i6 as Exit'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'exiting action'
                            PROPER_NOUN_NT'Exit'
                        SENTENCE_NT'the exiting action has an object called the container exited from ( matched as from )'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'exiting action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'container exited from ( matched as from )'
                        SENTENCE_NT'the specification of the exiting action is Whereas the going action allows
                        people to move from one location to another in the model world, and the
                        entering action is for movement deeper inside the objects in a location,
                        the exiting action is for movement back out towards the main floor area.
                        Climbing out of a cupboard, for instance, is an exiting action. Exiting
                        when already in the main floor area of a room with a map connection to
                        the outside is converted to a going action. Finally, note that whereas
                        entering works for either containers or supporters, exiting is purely for
                        getting oneself out of containers: if the actor is on top of a supporter
                        instead, an exiting action is converted to the getting off action.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the exiting action'
                                PROPER_NOUN_NT'exiting action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Whereas the going action allows
                            people to move from one location to another in the model world, and the
                            entering action is for movement deeper inside the objects in a location,
                            the exiting action is for movement back out towards the main floor area.
                            Climbing out of a cupboard, for instance, is an exiting action. Exiting
                            when already in the main floor area of a room with a map connection to
                            the outside is converted to a going action. Finally, note that whereas
                            entering works for either containers or supporters, exiting is purely for
                            getting oneself out of containers: if the actor is on top of a supporter
                            instead, an exiting action is converted to the getting off action.'
                        ROUTINE_NT'setting action variables for exiting'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the container exited from is the holder of the actor'
                                    CONDITION_CONTEXT_NT'the container exited from is the holder of the actor'
                        ROUTINE_NT'check an actor exiting ( this is the convert exit into go out rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local room be the location of the actor'
                                    INVOCATION_NT'let the local room be the location of the actor'
                                        NEW_LOCAL_CONTEXT_NT'local room'
                                            UNKNOWN_NT'local room'
                                        RVALUE_CONTEXT_NT'location of the actor'
                                            PHRASE_TO_DECIDE_VALUE_NT'location of the actor'
                                                INVOCATION_LIST_NT'location of the actor'
                                                    INVOCATION_NT'location of the actor'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the container exited from is the local room'
                                        INVOCATION_NT'if the container exited from is the local room'
                                            CONDITION_CONTEXT_NT'container exited from is the local room'
                                                TEST_PROPOSITION_NT'container exited from is the local room'(test: [ is('container exited from', 'the local room') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the room-or-door outside from the local room is not nothing'
                                                INVOCATION_NT'if the room-or-door outside from the local room is not nothing'
                                                    CONDITION_CONTEXT_NT'room-or-door outside from the local room is not nothing'
                                                        TEST_PROPOSITION_NT'room-or-door outside from the local room is not nothing'(test: [ NOT[ is('room-or-door outside from the local room', 'nothing') NOT] ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'convert to the going action on the outside'
                                                    INVOCATION_NT'convert to the going action on the outside'
                                                        RVALUE_CONTEXT_NT'going action'
                                                            CONSTANT_NT'going action'-action name
                                                        RVALUE_CONTEXT_NT'outside'
                                                            CONSTANT_NT'outside'-direction(out_obj)(I33'outside')
                        ROUTINE_NT'check an actor exiting ( this is the can't exit when not inside anything rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the local room be the location of the actor'
                                    INVOCATION_NT'let the local room be the location of the actor'
                                        NEW_LOCAL_CONTEXT_NT'local room'
                                            UNKNOWN_NT'local room'
                                        RVALUE_CONTEXT_NT'location of the actor'
                                            PHRASE_TO_DECIDE_VALUE_NT'location of the actor'
                                                INVOCATION_LIST_NT'location of the actor'
                                                    INVOCATION_NT'location of the actor'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the container exited from is the local room'
                                        INVOCATION_NT'if the container exited from is the local room'
                                            CONDITION_CONTEXT_NT'container exited from is the local room'
                                                TEST_PROPOSITION_NT'container exited from is the local room'(test: [ is('container exited from', 'the local room') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [we] [aren't] in anything at the [if story tense is present
                                                tense]moment[otherwise]time[end if]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"But [we] [aren't] in anything at the [if story tense is present
                                                    tense]moment[otherwise]time[end if]." ( a )'
                                                        INVOCATION_NT'"But [we] [aren't] in anything at the [if story tense is present
                                                        tense]moment[otherwise]time[end if]." ( a )'
                                                            RVALUE_CONTEXT_NT'"But [we] [aren't] in anything at the [if story tense is present
                                                            tense]moment[otherwise]time[end if]." ( a )'
                                                                CONSTANT_NT'"But [we] [aren't] in anything at the [if story tense is present
                                                                tense]moment[otherwise]time[end if]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor exiting ( this is the can't exit closed containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is in a closed container ( called the cage )'
                                        INVOCATION_NT'if the actor is in a closed container ( called the cage )'
                                            CONDITION_CONTEXT_NT'actor is in a closed container ( called the cage )'
                                                TEST_PROPOSITION_NT'actor is in a closed container ( called the cage )'(test: [ kind=container({<schema: ContainerOf(*1)>:'actor'}) ^ A81'closed'({<schema: ContainerOf(*1)>:'actor'}) ^ called='cage'(container)({<schema: ContainerOf(*1)>:'actor'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "You can't get out of the closed [cage]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"You can't get out of the closed [cage]." ( a )'
                                                        INVOCATION_NT'"You can't get out of the closed [cage]." ( a )'
                                                            RVALUE_CONTEXT_NT'"You can't get out of the closed [cage]." ( a )'
                                                                CONSTANT_NT'"You can't get out of the closed [cage]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor exiting ( this is the convert exit into get off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is on a supporter ( called the platform )'
                                        INVOCATION_NT'if the actor is on a supporter ( called the platform )'
                                            CONDITION_CONTEXT_NT'actor is on a supporter ( called the platform )'
                                                TEST_PROPOSITION_NT'actor is on a supporter ( called the platform )'(test: [ kind=supporter({<schema: SupporterOf(*1)>:'actor'}) ^ called='platform'(supporter)({<schema: SupporterOf(*1)>:'actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the getting off action on the platform'
                                            INVOCATION_NT'convert to the getting off action on the platform'
                                                RVALUE_CONTEXT_NT'getting off action'
                                                    CONSTANT_NT'getting off action'-action name
                                                RVALUE_CONTEXT_NT'platform'
                                                    LOCAL_VARIABLE_NT'platform'(tmp_0;supporter)
                        ROUTINE_NT'carry out an actor exiting ( this is the standard exiting rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the former exterior be the not-counting-parts holder of the container exited from'
                                    INVOCATION_NT'let the former exterior be the not-counting-parts holder of the container exited from'
                                        NEW_LOCAL_CONTEXT_NT'former exterior'
                                            UNKNOWN_NT'former exterior'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the container exited from'
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the container exited from'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the container exited from'
                                                    INVOCATION_NT'not-counting-parts holder of the container exited from'
                                                        RVALUE_CONTEXT_NT'container exited from'
                                                            NONLOCAL_VARIABLE_NT'container exited from'('container exited from'(var)[object])
                                INVOCATION_LIST_NT'surreptitiously move the actor to the former exterior'
                                    INVOCATION_NT'surreptitiously move the actor to the former exterior'
                                        RVALUE_CONTEXT_NT'actor'
                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                        RVALUE_CONTEXT_NT'former exterior'
                                            LOCAL_VARIABLE_NT'former exterior'(tmp_0;object)
                        ROUTINE_NT'report an actor exiting ( this is the standard report exiting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the container exited from is a supporter'
                                                        INVOCATION_NT'if the container exited from is a supporter'
                                                            CONDITION_CONTEXT_NT'container exited from is a supporter'
                                                                TEST_PROPOSITION_NT'container exited from is a supporter'(test: [ kind=supporter('container exited from') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [get] off [the container exited from]." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] off [the container exited from]." ( a )'
                                                                INVOCATION_NT'"[We] [get] off [the container exited from]." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[We] [get] off [the container exited from]." ( a )'
                                                                        CONSTANT_NT'"[We] [get] off [the container exited from]." ( a )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "[We] [get] out of [the container exited from]." ( b )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [get] out of [the container exited from]." ( b )'
                                                                INVOCATION_NT'"[We] [get] out of [the container exited from]." ( b )'
                                                                    RVALUE_CONTEXT_NT'"[We] [get] out of [the container exited from]." ( b )'
                                                                        CONSTANT_NT'"[We] [get] out of [the container exited from]." ( b )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [get] out of [the container exited from]." ( c )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [get] out of [the container exited from]." ( c )'
                                                        INVOCATION_NT'"[The actor] [get] out of [the container exited from]." ( c )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [get] out of [the container exited from]." ( c )'
                                                                CONSTANT_NT'"[The actor] [get] out of [the container exited from]." ( c )'-text
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor exiting ( this is the describe room emerged into rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'surreptitiously reckon darkness'
                                            INVOCATION_NT'surreptitiously reckon darkness'
                                        INVOCATION_LIST_NT'produce a room description with going spacing conventions'
                                            INVOCATION_NT'produce a room description with going spacing conventions'
                        SENTENCE_NT'getting off is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'getting off'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the getting off action translates into i6 as GetOff'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'getting off action'
                            PROPER_NOUN_NT'GetOff'
                        SENTENCE_NT'the specification of the getting off action is The getting off action is for
                        actors who are currently on top of a supporter: perhaps standing on a platform,
                        but maybe only sitting on a chair or even lying down in bed. Unlike the similar
                        exiting action, getting off takes a noun: the platform, chair, bed or what
                        have you.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the getting off action'
                                PROPER_NOUN_NT'getting off action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The getting off action is for
                            actors who are currently on top of a supporter: perhaps standing on a platform,
                            but maybe only sitting on a chair or even lying down in bed. Unlike the similar
                            exiting action, getting off takes a noun: the platform, chair, bed or what
                            have you.'
                        ROUTINE_NT'check an actor getting off ( this is the can't get off things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is on the noun'
                                        INVOCATION_NT'if the actor is on the noun'
                                            CONDITION_CONTEXT_NT'actor is on the noun'
                                                TEST_PROPOSITION_NT'actor is on the noun'(test: [ is('the noun', {<schema: SupporterOf(*1)>:'actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is carried by the noun'
                                        INVOCATION_NT'if the actor is carried by the noun'
                                            CONDITION_CONTEXT_NT'actor is carried by the noun'
                                                TEST_PROPOSITION_NT'actor is carried by the noun'(test: [ is('the noun', {<schema: CarrierOf(*1)>:'actor'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "But [we] [aren't] on [the noun] at the [if story tense is present
                                        tense]moment[otherwise]time[end if]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"But [we] [aren't] on [the noun] at the [if story tense is present
                                            tense]moment[otherwise]time[end if]." ( a )'
                                                INVOCATION_NT'"But [we] [aren't] on [the noun] at the [if story tense is present
                                                tense]moment[otherwise]time[end if]." ( a )'
                                                    RVALUE_CONTEXT_NT'"But [we] [aren't] on [the noun] at the [if story tense is present
                                                    tense]moment[otherwise]time[end if]." ( a )'
                                                        CONSTANT_NT'"But [we] [aren't] on [the noun] at the [if story tense is present
                                                        tense]moment[otherwise]time[end if]." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor getting off ( this is the standard getting off rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'let the former exterior be the not-counting-parts holder of the noun'
                                    INVOCATION_NT'let the former exterior be the not-counting-parts holder of the noun'
                                        NEW_LOCAL_CONTEXT_NT'former exterior'
                                            UNKNOWN_NT'former exterior'
                                        RVALUE_CONTEXT_NT'not-counting-parts holder of the noun'
                                            PHRASE_TO_DECIDE_VALUE_NT'not-counting-parts holder of the noun'
                                                INVOCATION_LIST_NT'not-counting-parts holder of the noun'
                                                    INVOCATION_NT'not-counting-parts holder of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_NT'surreptitiously move the actor to the former exterior'
                                    INVOCATION_NT'surreptitiously move the actor to the former exterior'
                                        RVALUE_CONTEXT_NT'actor'
                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                        RVALUE_CONTEXT_NT'former exterior'
                                            LOCAL_VARIABLE_NT'former exterior'(tmp_0;object)
                        ROUTINE_NT'report an actor getting off ( this is the standard report getting off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [get] off [the noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [get] off [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [get] off [the noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [get] off [the noun]." ( a )'
                                                        CONSTANT_NT'"[The actor] [get] off [the noun]." ( a )'-text
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor getting off ( this is the describe room stood up into rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'produce a room description with going spacing conventions'
                                            INVOCATION_NT'produce a room description with going spacing conventions'
                    HEADING_NT'section 4 - standard actions concerning the actor's vision' (level 5)
                        SENTENCE_NT'looking is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'looking'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the looking action translates into i6 as Look'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'looking action'
                            PROPER_NOUN_NT'Look'
                        SENTENCE_NT'the specification of the looking action is The looking action describes the
                        player's current room and any visible items, but is made more complicated
                        by the problem of visibility. Inform calculates this by dividing the room
                        into visibility levels. For an actor on the floor of a room, there is only
                        one such level: the room itself. But an actor sitting on a chair inside
                        a packing case which is itself on a gantry would have four visibility levels:
                        chair, case, gantry, room. The looking rules use a special phrase, 'the
                        visibility-holder of X', to go up from one level to the next: thus the
                        visibility-holder of the case is the gantry.The 'visibility level count' is the number of levels which the player can
                        actually see, and the 'visibility ceiling' is the uppermost visible level.
                        For a player standing on the floor of a lighted room, this will be a count
                        of 1 with the ceiling set to the room. But a player sitting on a chair in
                        a closed opaque packing case would have visibility level count 2, and
                        visibility ceiling equal to the case. Moreover, light has to be available
                        in order to see anything at all: if the player is in darkness, the level
                        count is 0 and the ceiling is nothing.Finally, note that several actions other than looking also produce room
                        descriptions in some cases. The most familiar is going, but exiting a
                        container or getting off a supporter will also generate a room description.
                        (The phrase used by the relevant rules is 'produce a room description with
                        going spacing conventions' and carry out or report rules for newly written
                        actions are welcome to use this too if they would like to. The spacing
                        conventions affect paragraph division, and note that the main description
                        paragraph may be omitted for a place not newly visited, depending on the
                        VERBOSE settings.) Room descriptions like this are produced by running the
                        check, carry out and report rules for looking, but are not subject to
                        before, instead or after rules: so they do not count as a new action. The
                        looking variable 'room-describing action' holds the action name of the
                        reason a room description is currently being made: if the player typed
                        LOOK, this will indeed be set to the looking action, but if we're
                        describing a room just reached by GO EAST, say, it will be set to the going
                        action. This can be used to customise carry out looking rules so that
                        different forms of description are used on going to a room as compared with
                        looking around while already there.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the looking action'
                                PROPER_NOUN_NT'looking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The looking action describes the
                            player's current room and any visible items, but is made more complicated
                            by the problem of visibility. Inform calculates this by dividing the room
                            into visibility levels. For an actor on the floor of a room, there is only
                            one such level: the room itself. But an actor sitting on a chair inside
                            a packing case which is itself on a gantry would have four visibility levels:
                            chair, case, gantry, room. The looking rules use a special phrase, 'the
                            visibility-holder of X', to go up from one level to the next: thus the
                            visibility-holder of the case is the gantry.The 'visibility level count' is the number of levels which the player can
                            actually see, and the 'visibility ceiling' is the uppermost visible level.
                            For a player standing on the floor of a lighted room, this will be a count
                            of 1 with the ceiling set to the room. But a player sitting on a chair in
                            a closed opaque packing case would have visibility level count 2, and
                            visibility ceiling equal to the case. Moreover, light has to be available
                            in order to see anything at all: if the player is in darkness, the level
                            count is 0 and the ceiling is nothing.Finally, note that several actions other than looking also produce room
                            descriptions in some cases. The most familiar is going, but exiting a
                            container or getting off a supporter will also generate a room description.
                            (The phrase used by the relevant rules is 'produce a room description with
                            going spacing conventions' and carry out or report rules for newly written
                            actions are welcome to use this too if they would like to. The spacing
                            conventions affect paragraph division, and note that the main description
                            paragraph may be omitted for a place not newly visited, depending on the
                            VERBOSE settings.) Room descriptions like this are produced by running the
                            check, carry out and report rules for looking, but are not subject to
                            before, instead or after rules: so they do not count as a new action. The
                            looking variable 'room-describing action' holds the action name of the
                            reason a room description is currently being made: if the player typed
                            LOOK, this will indeed be set to the looking action, but if we're
                            describing a room just reached by GO EAST, say, it will be set to the going
                            action. This can be used to customise carry out looking rules so that
                            different forms of description are used on going to a room as compared with
                            looking around while already there.'
                        SENTENCE_NT'the looking action has an action name called the room-describing action'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'looking action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'action name'
                                    PROPER_NOUN_NT'room-describing action'
                        SENTENCE_NT'the looking action has a truth state called abbreviated form allowed'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'looking action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'truth state'
                                    PROPER_NOUN_NT'abbreviated form allowed'
                        SENTENCE_NT'the looking action has a number called the visibility level count'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'looking action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'number'
                                    PROPER_NOUN_NT'visibility level count'
                        SENTENCE_NT'the looking action has an object called the visibility ceiling'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'looking action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'object'
                                    PROPER_NOUN_NT'visibility ceiling'
                        ROUTINE_NT'setting action variables for looking ( this is the determine visibility ceiling rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'calculate visibility ceiling at low level'
                                            INVOCATION_NT'calculate visibility ceiling at low level'
                                INVOCATION_LIST_NT'now the visibility level count is the visibility ceiling count calculated'
                                    CONDITION_CONTEXT_NT'the visibility level count is the visibility ceiling count calculated'
                                INVOCATION_LIST_NT'now the visibility ceiling is the visibility ceiling calculated'
                                    CONDITION_CONTEXT_NT'the visibility ceiling is the visibility ceiling calculated'
                                INVOCATION_LIST_NT'now the room-describing action is the looking action'
                                    CONDITION_CONTEXT_NT'the room-describing action is the looking action'
                        ROUTINE_NT'carry out looking ( this is the declare everything unmentioned rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat with item running through things'
                                        INVOCATION_NT'repeat with item running through things'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'things'
                                                CONSTANT_NT'things'-description of things
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is not mentioned'
                                            CONDITION_CONTEXT_NT'the item is not mentioned'
                        ROUTINE_NT'carry out looking ( this is the room description heading rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say bold type'
                                    INVOCATION_LIST_SAY_NT'bold type'
                                        INVOCATION_NT'bold type'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the visibility level count is 0'
                                        INVOCATION_NT'if the visibility level count is 0'
                                            CONDITION_CONTEXT_NT'visibility level count is 0'
                                                TEST_PROPOSITION_NT'visibility level count is 0'(test: [ is('visibility level count', '0') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'begin the printing the name of a dark room activity'
                                            INVOCATION_NT'begin the printing the name of a dark room activity'
                                                RVALUE_CONTEXT_NT'printing the name of a dark room'
                                                    CONSTANT_NT'printing the name of a dark room'-activity
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if handling the printing the name of a dark room activity'
                                                INVOCATION_NT'if handling the printing the name of a dark room activity'
                                                    CONDITION_CONTEXT_NT'handling the printing the name of a dark room activity'
                                                        TEST_VALUE_NT'handling the printing the name of a dark room activity'
                                                            PHRASE_TO_DECIDE_VALUE_NT'handling the printing the name of a dark room activity'
                                                                INVOCATION_LIST_NT'handling the printing the name of a dark room activity'
                                                                    INVOCATION_NT'handling the printing the name of a dark room activity'
                                                                        RVALUE_CONTEXT_NT'printing the name of a dark room'
                                                                            CONSTANT_NT'printing the name of a dark room'-activity
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Darkness" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Darkness" ( a )'
                                                        INVOCATION_NT'"Darkness" ( a )'
                                                            RVALUE_CONTEXT_NT'"Darkness" ( a )'
                                                                CONSTANT_NT'"Darkness" ( a )'-text
                                        INVOCATION_LIST_NT'end the printing the name of a dark room activity'
                                            INVOCATION_NT'end the printing the name of a dark room activity'
                                                RVALUE_CONTEXT_NT'printing the name of a dark room'
                                                    CONSTANT_NT'printing the name of a dark room'-activity
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the visibility ceiling is the location'
                                                INVOCATION_NT'if the visibility ceiling is the location'
                                                    CONDITION_CONTEXT_NT'visibility ceiling is the location'
                                                        TEST_PROPOSITION_NT'visibility ceiling is the location'(test: [ is('visibility ceiling', 'the location') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[visibility ceiling]"'
                                                    INVOCATION_LIST_SAY_NT'visibility ceiling'
                                                        INVOCATION_NT'visibility ceiling'
                                                            RVALUE_CONTEXT_NT'visibility ceiling'
                                                                NONLOCAL_VARIABLE_NT'visibility ceiling'('visibility ceiling'(var)[object])
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The visibility ceiling]"'
                                                    INVOCATION_LIST_SAY_NT'the visibility ceiling'
                                                        INVOCATION_NT'the visibility ceiling'
                                                            RVALUE_CONTEXT_NT'visibility ceiling'
                                                                NONLOCAL_VARIABLE_NT'visibility ceiling'('visibility ceiling'(var)[object])
                                CODE_BLOCK_NT'say roman type'
                                    INVOCATION_LIST_SAY_NT'roman type'
                                        INVOCATION_NT'roman type'
                                INVOCATION_LIST_NT'let intermediate level be the visibility-holder of the actor'
                                    INVOCATION_NT'let intermediate level be the visibility-holder of the actor'
                                        NEW_LOCAL_CONTEXT_NT'intermediate level'
                                            UNKNOWN_NT'intermediate level'
                                        RVALUE_CONTEXT_NT'visibility-holder of the actor'
                                            PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the actor'
                                                INVOCATION_LIST_NT'visibility-holder of the actor'
                                                    INVOCATION_NT'visibility-holder of the actor'
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat with intermediate level count running from 2 to the visibility level count'
                                        INVOCATION_NT'repeat with intermediate level count running from 2 to the visibility level count'
                                            NEW_LOCAL_CONTEXT_NT'intermediate level count'
                                                UNKNOWN_NT'intermediate level count'
                                            RVALUE_CONTEXT_NT'2'
                                                CONSTANT_NT'2'-number
                                            RVALUE_CONTEXT_NT'visibility level count'
                                                NONLOCAL_VARIABLE_NT'visibility level count'('visibility level count'(var)[number])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the intermediate level is a supporter or the intermediate level is an animal'
                                                INVOCATION_NT'if the intermediate level is a supporter or the intermediate level is an animal'
                                                    CONDITION_CONTEXT_NT'intermediate level is a supporter or the intermediate level is an animal'
                                                        LOGICAL_OR_NT'intermediate level is a supporter or the intermediate level is an animal'
                                                            TEST_PROPOSITION_NT'intermediate level is a supporter'(test: [ kind=supporter('intermediate level') ])
                                                            TEST_PROPOSITION_NT'the intermediate level is an animal'(test: [ kind=animal('the intermediate level') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say " (on [the intermediate level])" ( b )'
                                                    INVOCATION_LIST_SAY_NT'" (on [the intermediate level])" ( b )'
                                                        INVOCATION_NT'" (on [the intermediate level])" ( b )'
                                                            RVALUE_CONTEXT_NT'" (on [the intermediate level])" ( b )'
                                                                CONSTANT_NT'" (on [the intermediate level])" ( b )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say " (in [the intermediate level])" ( c )'
                                                    INVOCATION_LIST_SAY_NT'" (in [the intermediate level])" ( c )'
                                                        INVOCATION_NT'" (in [the intermediate level])" ( c )'
                                                            RVALUE_CONTEXT_NT'" (in [the intermediate level])" ( c )'
                                                                CONSTANT_NT'" (in [the intermediate level])" ( c )'-text
                                        INVOCATION_LIST_NT'let the intermediate level be the visibility-holder of the intermediate level'
                                            INVOCATION_NT'let the intermediate level be the visibility-holder of the intermediate level'
                                                LVALUE_LOCAL_CONTEXT_NT'intermediate level'
                                                    LOCAL_VARIABLE_NT'intermediate level'(tmp_0;object)
                                                RVALUE_CONTEXT_NT'visibility-holder of the intermediate level'
                                                    PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate level'
                                                        INVOCATION_LIST_NT'visibility-holder of the intermediate level'
                                                            INVOCATION_NT'visibility-holder of the intermediate level'
                                                                RVALUE_CONTEXT_NT'intermediate level'
                                                                    LOCAL_VARIABLE_NT'intermediate level'(tmp_0;object)
                                CODE_BLOCK_NT'say line break'
                                    INVOCATION_LIST_SAY_NT'line break'
                                        INVOCATION_NT'line break'
                                CODE_BLOCK_NT'say run paragraph on with special look spacing'
                                    INVOCATION_LIST_SAY_NT'run paragraph on with special look spacing'
                                        INVOCATION_NT'run paragraph on with special look spacing'
                        ROUTINE_NT'carry out looking ( this is the room description body text rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the visibility level count is 0'
                                        INVOCATION_NT'if the visibility level count is 0'
                                            CONDITION_CONTEXT_NT'visibility level count is 0'
                                                TEST_PROPOSITION_NT'visibility level count is 0'(test: [ is('visibility level count', '0') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if set to abbreviated room descriptions'
                                                INVOCATION_NT'if set to abbreviated room descriptions'
                                                    CONDITION_CONTEXT_NT'set to abbreviated room descriptions'
                                                        TEST_VALUE_NT'set to abbreviated room descriptions'
                                                            PHRASE_TO_DECIDE_VALUE_NT'set to abbreviated room descriptions'
                                                                INVOCATION_LIST_NT'set to abbreviated room descriptions'
                                                                    INVOCATION_NT'set to abbreviated room descriptions'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action'
                                                    INVOCATION_NT'continue the action'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true'
                                                INVOCATION_NT'if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true'
                                                    CONDITION_CONTEXT_NT'set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true'
                                                        LOGICAL_AND_NT'set to sometimes abbreviated room descriptions and abbreviated form allowed is true and darkness witnessed is true'
                                                            TEST_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                PHRASE_TO_DECIDE_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                    INVOCATION_LIST_NT'set to sometimes abbreviated room descriptions'
                                                                        INVOCATION_NT'set to sometimes abbreviated room descriptions'
                                                            LOGICAL_AND_NT
                                                                TEST_PROPOSITION_NT'abbreviated form allowed is true'(test: [ is('abbreviated form allowed', 'true') ])
                                                                TEST_PROPOSITION_NT'darkness witnessed is true'(test: [ is('darkness witnessed', 'true') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'continue the action'
                                                    INVOCATION_NT'continue the action'
                                        INVOCATION_LIST_NT'begin the printing the description of a dark room activity'
                                            INVOCATION_NT'begin the printing the description of a dark room activity'
                                                RVALUE_CONTEXT_NT'printing the description of a dark room'
                                                    CONSTANT_NT'printing the description of a dark room'-activity
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if handling the printing the description of a dark room activity'
                                                INVOCATION_NT'if handling the printing the description of a dark room activity'
                                                    CONDITION_CONTEXT_NT'handling the printing the description of a dark room activity'
                                                        TEST_VALUE_NT'handling the printing the description of a dark room activity'
                                                            PHRASE_TO_DECIDE_VALUE_NT'handling the printing the description of a dark room activity'
                                                                INVOCATION_LIST_NT'handling the printing the description of a dark room activity'
                                                                    INVOCATION_NT'handling the printing the description of a dark room activity'
                                                                        RVALUE_CONTEXT_NT'printing the description of a dark room'
                                                                            CONSTANT_NT'printing the description of a dark room'-activity
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                                        INVOCATION_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                                            RVALUE_CONTEXT_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'
                                                                CONSTANT_NT'"[It] [are] pitch dark, and [we] [can't see] a thing." ( a )'-text
                                        INVOCATION_LIST_NT'end the printing the description of a dark room activity'
                                            INVOCATION_NT'end the printing the description of a dark room activity'
                                                RVALUE_CONTEXT_NT'printing the description of a dark room'
                                                    CONSTANT_NT'printing the description of a dark room'-activity
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the visibility ceiling is the location'
                                                INVOCATION_NT'if the visibility ceiling is the location'
                                                    CONDITION_CONTEXT_NT'visibility ceiling is the location'
                                                        TEST_PROPOSITION_NT'visibility ceiling is the location'(test: [ is('visibility ceiling', 'the location') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if set to abbreviated room descriptions'
                                                        INVOCATION_NT'if set to abbreviated room descriptions'
                                                            CONDITION_CONTEXT_NT'set to abbreviated room descriptions'
                                                                TEST_VALUE_NT'set to abbreviated room descriptions'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'set to abbreviated room descriptions'
                                                                        INVOCATION_LIST_NT'set to abbreviated room descriptions'
                                                                            INVOCATION_NT'set to abbreviated room descriptions'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'continue the action'
                                                            INVOCATION_NT'continue the action'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited'
                                                        INVOCATION_NT'if set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited'
                                                            CONDITION_CONTEXT_NT'set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited'
                                                                LOGICAL_AND_NT'set to sometimes abbreviated room descriptions and abbreviated form allowed is true and the location is visited'
                                                                    TEST_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                        PHRASE_TO_DECIDE_VALUE_NT'set to sometimes abbreviated room descriptions'
                                                                            INVOCATION_LIST_NT'set to sometimes abbreviated room descriptions'
                                                                                INVOCATION_NT'set to sometimes abbreviated room descriptions'
                                                                    LOGICAL_AND_NT
                                                                        TEST_PROPOSITION_NT'abbreviated form allowed is true'(test: [ is('abbreviated form allowed', 'true') ])
                                                                        TEST_PROPOSITION_NT'the location is visited'(test: [ A59'visited'('the location') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'continue the action'
                                                            INVOCATION_NT'continue the action'
                                                INVOCATION_LIST_NT'print the location's description'
                                                    INVOCATION_NT'print the location's description'
                        ROUTINE_NT'carry out looking ( this is the room description paragraphs about objects rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the visibility level count is greater than 0'
                                        INVOCATION_NT'if the visibility level count is greater than 0'
                                            CONDITION_CONTEXT_NT'visibility level count is greater than 0'
                                                TEST_PROPOSITION_NT'visibility level count is greater than 0'(test: [ greater-than('visibility level count', '0') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the intermediate position be the actor'
                                            INVOCATION_NT'let the intermediate position be the actor'
                                                NEW_LOCAL_CONTEXT_NT'intermediate position'
                                                    UNKNOWN_NT'intermediate position'
                                                RVALUE_CONTEXT_NT'actor'
                                                    NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                        INVOCATION_LIST_NT'let the ip count be the visibility level count'
                                            INVOCATION_NT'let the ip count be the visibility level count'
                                                NEW_LOCAL_CONTEXT_NT'ip count'
                                                    UNKNOWN_NT'ip count'
                                                RVALUE_CONTEXT_NT'visibility level count'
                                                    NONLOCAL_VARIABLE_NT'visibility level count'('visibility level count'(var)[number])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'while the ip count is greater than 0'
                                                INVOCATION_NT'while the ip count is greater than 0'
                                                    CONDITION_CONTEXT_NT'ip count is greater than 0'
                                                        TEST_PROPOSITION_NT'ip count is greater than 0'(test: [ greater-than('ip count', '0') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the intermediate position is marked for listing'
                                                    CONDITION_CONTEXT_NT'the intermediate position is marked for listing'
                                                INVOCATION_LIST_NT'let the intermediate position be the visibility-holder of the intermediate position'
                                                    INVOCATION_NT'let the intermediate position be the visibility-holder of the intermediate position'
                                                        LVALUE_LOCAL_CONTEXT_NT'intermediate position'
                                                            LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                        RVALUE_CONTEXT_NT'visibility-holder of the intermediate position'
                                                            PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate position'
                                                                INVOCATION_LIST_NT'visibility-holder of the intermediate position'
                                                                    INVOCATION_NT'visibility-holder of the intermediate position'
                                                                        RVALUE_CONTEXT_NT'intermediate position'
                                                                            LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                INVOCATION_LIST_NT'decrease the ip count by 1'
                                                    INVOCATION_NT'decrease the ip count by 1'
                                                        LVALUE_CONTEXT_NT'ip count'
                                                            LOCAL_VARIABLE_NT'ip count'(tmp_1;number)
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                        INVOCATION_LIST_NT'let the top-down ip count be the visibility level count'
                                            INVOCATION_NT'let the top-down ip count be the visibility level count'
                                                NEW_LOCAL_CONTEXT_NT'top-down ip count'
                                                    UNKNOWN_NT'top-down ip count'
                                                RVALUE_CONTEXT_NT'visibility level count'
                                                    NONLOCAL_VARIABLE_NT'visibility level count'('visibility level count'(var)[number])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'while the top-down ip count is greater than 0'
                                                INVOCATION_NT'while the top-down ip count is greater than 0'
                                                    CONDITION_CONTEXT_NT'top-down ip count is greater than 0'
                                                        TEST_PROPOSITION_NT'top-down ip count is greater than 0'(test: [ greater-than('top-down ip count', '0') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'let the intermediate position be the actor'
                                                    INVOCATION_NT'let the intermediate position be the actor'
                                                        LVALUE_LOCAL_CONTEXT_NT'intermediate position'
                                                            LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                        RVALUE_CONTEXT_NT'actor'
                                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                                                INVOCATION_LIST_NT'let the ip count be 0'
                                                    INVOCATION_NT'let the ip count be 0'
                                                        LVALUE_LOCAL_CONTEXT_NT'ip count'
                                                            LOCAL_VARIABLE_NT'ip count'(tmp_1;number)
                                                        RVALUE_CONTEXT_NT'0'
                                                            CONSTANT_NT'0'-number
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'while the ip count is less than the top-down ip count'
                                                        INVOCATION_NT'while the ip count is less than the top-down ip count'
                                                            CONDITION_CONTEXT_NT'ip count is less than the top-down ip count'
                                                                TEST_PROPOSITION_NT'ip count is less than the top-down ip count'(test: [ less-than('ip count', 'the top-down ip count') ])
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'let the intermediate position be the visibility-holder of the intermediate position'
                                                            INVOCATION_NT'let the intermediate position be the visibility-holder of the intermediate position'
                                                                LVALUE_LOCAL_CONTEXT_NT'intermediate position'
                                                                    LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                                RVALUE_CONTEXT_NT'visibility-holder of the intermediate position'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'visibility-holder of the intermediate position'
                                                                        INVOCATION_LIST_NT'visibility-holder of the intermediate position'
                                                                            INVOCATION_NT'visibility-holder of the intermediate position'
                                                                                RVALUE_CONTEXT_NT'intermediate position'
                                                                                    LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                        INVOCATION_LIST_NT'increase the ip count by 1'
                                                            INVOCATION_NT'increase the ip count by 1'
                                                                LVALUE_CONTEXT_NT'ip count'
                                                                    LOCAL_VARIABLE_NT'ip count'(tmp_1;number)
                                                                RVALUE_CONTEXT_NT'1'
                                                                    CONSTANT_NT'1'-number
                                                INVOCATION_LIST_NT'describe locale for the intermediate position'
                                                    INVOCATION_NT'describe locale for the intermediate position'
                                                        RVALUE_CONTEXT_NT'intermediate position'
                                                            LOCAL_VARIABLE_NT'intermediate position'(tmp_0;thing)
                                                INVOCATION_LIST_NT'decrease the top-down ip count by 1'
                                                    INVOCATION_NT'decrease the top-down ip count by 1'
                                                        LVALUE_CONTEXT_NT'top-down ip count'
                                                            LOCAL_VARIABLE_NT'top-down ip count'(tmp_2;number)
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'carry out looking ( this is the check new arrival rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if in darkness'
                                        INVOCATION_NT'if in darkness'
                                            CONDITION_CONTEXT_NT'in darkness'
                                                TEST_VALUE_NT'in darkness'
                                                    PHRASE_TO_DECIDE_VALUE_NT'in darkness'
                                                        INVOCATION_LIST_NT'in darkness'
                                                            INVOCATION_NT'in darkness'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the darkness witnessed is true'
                                            CONDITION_CONTEXT_NT'the darkness witnessed is true'
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the location is a room'
                                                INVOCATION_NT'if the location is a room'
                                                    CONDITION_CONTEXT_NT'location is a room'
                                                        TEST_PROPOSITION_NT'location is a room'(test: [ kind=room('location') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the location is visited'
                                                    CONDITION_CONTEXT_NT'the location is visited'
                        ROUTINE_NT'report an actor looking ( this is the other people looking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the player'
                                        INVOCATION_NT'if the actor is not the player'
                                            CONDITION_CONTEXT_NT'actor is not the player'
                                                TEST_PROPOSITION_NT'actor is not the player'(test: [ NOT[ is('actor', 'the player') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] around." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] around." ( a )'
                                                INVOCATION_NT'"[The actor] [look] around." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] around." ( a )'
                                                        CONSTANT_NT'"[The actor] [look] around." ( a )'-text
                        SENTENCE_NT'examining is an action applying to one visible thing and requiring light'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'examining'
                            PROPER_NOUN_NT'applying to one visible thing and requiring light'
                        SENTENCE_NT'the examining action translates into i6 as Examine'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'examining action'
                            PROPER_NOUN_NT'Examine'
                        SENTENCE_NT'the specification of the examining action is The act of looking closely at
                        something. Note that the noun could be either a direction or a thing, which
                        is why the Standard Rules include the 'examine directions rule' to deal with
                        directions: it simply says 'You see nothing unexpected in that direction.'
                        and stops the action. (If you would like to handle directions differently,
                        list another rule instead of this one in the carry out examining rules.)Some things have no description property, or rather, have only a blank text
                        as one. It's possible that something interesting may be said anyway (see
                        the rules for directions, containers, supporters and devices), but if not,
                        we give up with a bland response. This is done by the examine undescribed
                        things rule.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the examining action'
                                PROPER_NOUN_NT'examining action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The act of looking closely at
                            something. Note that the noun could be either a direction or a thing, which
                            is why the Standard Rules include the 'examine directions rule' to deal with
                            directions: it simply says 'You see nothing unexpected in that direction.'
                            and stops the action. (If you would like to handle directions differently,
                            list another rule instead of this one in the carry out examining rules.)Some things have no description property, or rather, have only a blank text
                            as one. It's possible that something interesting may be said anyway (see
                            the rules for directions, containers, supporters and devices), but if not,
                            we give up with a bland response. This is done by the examine undescribed
                            things rule.'
                        SENTENCE_NT'the examining action has a truth state called examine text printed'
                            AVERB_NT'has'
                            PROPER_NOUN_NT'examining action'
                            ALLOWED_NT
                                PROPERTYCALLED_NT'called'
                                    PROPER_NOUN_NT'truth state'
                                    PROPER_NOUN_NT'examine text printed'
                        ROUTINE_NT'carry out examining ( this is the standard examining rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property description and the description of the noun is not ""'
                                        INVOCATION_NT'if the noun provides the property description and the description of the noun is not ""'
                                            CONDITION_CONTEXT_NT'noun provides the property description and the description of the noun is not ""'
                                                LOGICAL_AND_NT'noun provides the property description and the description of the noun is not ""'
                                                    TEST_PROPOSITION_NT'noun provides the property description'(test: [ provides('noun', 'the property description') ])
                                                    TEST_PROPOSITION_NT'the description of the noun is not ""'(test: [ NOT[ is('the description of the noun', '""') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[description of the noun][line break]"'
                                            INVOCATION_LIST_SAY_NT'description of the noun'
                                                INVOCATION_NT'description of the noun'
                                                    RVALUE_CONTEXT_NT'description of the noun'
                                                        PROPERTY_VALUE_NT'description of the noun'
                                                            CONSTANT_NT-nothing valued property
                                                            NONLOCAL_VARIABLE_NT'the noun'('noun'(var)[object])
                                            INVOCATION_LIST_SAY_NT'line break'
                                                INVOCATION_NT'line break'
                                        INVOCATION_LIST_NT'now examine text printed is true'
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        ROUTINE_NT'carry out examining ( this is the examine directions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a direction'
                                        INVOCATION_NT'if the noun is a direction'
                                            CONDITION_CONTEXT_NT'noun is a direction'
                                                TEST_PROPOSITION_NT'noun is a direction'(test: [ kind=direction('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [see] nothing unexpected in that direction." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [see] nothing unexpected in that direction." ( a )'
                                                INVOCATION_NT'"[We] [see] nothing unexpected in that direction." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [see] nothing unexpected in that direction." ( a )'
                                                        CONSTANT_NT'"[We] [see] nothing unexpected in that direction." ( a )'-text
                                        INVOCATION_LIST_NT'now examine text printed is true'
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        ROUTINE_NT'carry out examining ( this is the examine containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a container'
                                        INVOCATION_NT'if the noun is a container'
                                            CONDITION_CONTEXT_NT'noun is a container'
                                                TEST_PROPOSITION_NT'noun is a container'(test: [ kind=container('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is open or the noun is transparent'
                                                INVOCATION_NT'if the noun is open or the noun is transparent'
                                                    CONDITION_CONTEXT_NT'noun is open or the noun is transparent'
                                                        LOGICAL_OR_NT'noun is open or the noun is transparent'
                                                            TEST_PROPOSITION_NT'noun is open'(test: [ A80'open'('noun') ])
                                                            TEST_PROPOSITION_NT'the noun is transparent'(test: [ A78'transparent'('the noun') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if something described which is not scenery is in the noun and something which is not the player is in the noun'
                                                        INVOCATION_NT'if something described which is not scenery is in the noun and something which is not the player is in the noun'
                                                            CONDITION_CONTEXT_NT'something described which is not scenery is in the noun and something which is not the player is in the noun'
                                                                LOGICAL_AND_NT'something described which is not scenery is in the noun and something which is not the player is in the noun'
                                                                    TEST_PROPOSITION_NT'something described which is not scenery is in the noun'(test: [ Exists x : kind=thing_c(x) ^ A72'described'(x) ^ NOT[ A67'scenery'(x) NOT] ^ is('the noun', {<schema: ContainerOf(*1)>:x}) ])
                                                                    TEST_PROPOSITION_NT'something which is not the player is in the noun'(test: [ Exists x : kind=thing_c(x) ^ NOT[ is(x, 'the player') NOT] ^ is('the noun', {<schema: ContainerOf(*1)>:x}) ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "In [the noun] " ( a )'
                                                            INVOCATION_LIST_SAY_NT'"In [the noun] " ( a )'
                                                                INVOCATION_NT'"In [the noun] " ( a )'
                                                                    RVALUE_CONTEXT_NT'"In [the noun] " ( a )'
                                                                        CONSTANT_NT'"In [the noun] " ( a )'-text
                                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are'
                                                            INVOCATION_NT'list the contents of the noun'
                                                                RVALUE_CONTEXT_NT'noun'
                                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                        CODE_BLOCK_NT'say "."'
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."'
                                                                    RVALUE_CONTEXT_NT'"."'
                                                                        CONSTANT_NT'"."'-text
                                                        INVOCATION_LIST_NT'now examine text printed is true'
                                                            CONDITION_CONTEXT_NT'examine text printed is true'
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT
                                                            INVOCATION_LIST_NT'if examine text printed is false'
                                                                INVOCATION_NT'if examine text printed is false'
                                                                    CONDITION_CONTEXT_NT'examine text printed is false'
                                                                        TEST_PROPOSITION_NT'examine text printed is false'(test: [ is('examine text printed', 'false') ])
                                                            CODE_BLOCK_NT
                                                                CODE_BLOCK_NT
                                                                    INVOCATION_LIST_NT'if the player is in the noun'
                                                                        INVOCATION_NT'if the player is in the noun'
                                                                            CONDITION_CONTEXT_NT'player is in the noun'
                                                                                TEST_PROPOSITION_NT'player is in the noun'(test: [ is('the noun', {<schema: ContainerOf(*1)>:'player'}) ])
                                                                    CODE_BLOCK_NT
                                                                        INVOCATION_LIST_NT'make no decision'
                                                                            INVOCATION_NT'make no decision'
                                                                CODE_BLOCK_NT'say "[The noun] [are] empty." ( b )'
                                                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] empty." ( b )'
                                                                        INVOCATION_NT'"[The noun] [are] empty." ( b )'
                                                                            RVALUE_CONTEXT_NT'"[The noun] [are] empty." ( b )'
                                                                                CONSTANT_NT'"[The noun] [are] empty." ( b )'-text
                                                                INVOCATION_LIST_NT'now examine text printed is true'
                                                                    CONDITION_CONTEXT_NT'examine text printed is true'
                        ROUTINE_NT'carry out examining ( this is the examine supporters rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a supporter'
                                        INVOCATION_NT'if the noun is a supporter'
                                            CONDITION_CONTEXT_NT'noun is a supporter'
                                                TEST_PROPOSITION_NT'noun is a supporter'(test: [ kind=supporter('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if something described which is not scenery is on the noun and something which is not the player is on the noun'
                                                INVOCATION_NT'if something described which is not scenery is on the noun and something which is not the player is on the noun'
                                                    CONDITION_CONTEXT_NT'something described which is not scenery is on the noun and something which is not the player is on the noun'
                                                        LOGICAL_AND_NT'something described which is not scenery is on the noun and something which is not the player is on the noun'
                                                            TEST_PROPOSITION_NT'something described which is not scenery is on the noun'(test: [ Exists x : kind=thing_c(x) ^ A72'described'(x) ^ NOT[ A67'scenery'(x) NOT] ^ is('the noun', {<schema: SupporterOf(*1)>:x}) ])
                                                            TEST_PROPOSITION_NT'something which is not the player is on the noun'(test: [ Exists x : kind=thing_c(x) ^ NOT[ is(x, 'the player') NOT] ^ is('the noun', {<schema: SupporterOf(*1)>:x}) ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "On [the noun] " ( a )'
                                                    INVOCATION_LIST_SAY_NT'"On [the noun] " ( a )'
                                                        INVOCATION_NT'"On [the noun] " ( a )'
                                                            RVALUE_CONTEXT_NT'"On [the noun] " ( a )'
                                                                CONSTANT_NT'"On [the noun] " ( a )'-text
                                                INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are , including contents , giving brief inventory information'
                                                    INVOCATION_NT'list the contents of the noun'
                                                        RVALUE_CONTEXT_NT'noun'
                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                CODE_BLOCK_NT'say "."'
                                                    INVOCATION_LIST_SAY_NT'"."'
                                                        INVOCATION_NT'"."'
                                                            RVALUE_CONTEXT_NT'"."'
                                                                CONSTANT_NT'"."'-text
                                                INVOCATION_LIST_NT'now examine text printed is true'
                                                    CONDITION_CONTEXT_NT'examine text printed is true'
                        ROUTINE_NT'carry out examining ( this is the examine devices rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a device'
                                        INVOCATION_NT'if the noun is a device'
                                            CONDITION_CONTEXT_NT'noun is a device'
                                                TEST_PROPOSITION_NT'noun is a device'(test: [ kind=device('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [are] [if story tense is present tense]currently [end if]switched
                                        [if the noun is switched on]on[otherwise]off[end if]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The noun] [are] [if story tense is present tense]currently [end if]switched
                                            [if the noun is switched on]on[otherwise]off[end if]." ( a )'
                                                INVOCATION_NT'"[The noun] [are] [if story tense is present tense]currently [end if]switched
                                                [if the noun is switched on]on[otherwise]off[end if]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The noun] [are] [if story tense is present tense]currently [end if]switched
                                                    [if the noun is switched on]on[otherwise]off[end if]." ( a )'
                                                        CONSTANT_NT'"[The noun] [are] [if story tense is present tense]currently [end if]switched
                                                        [if the noun is switched on]on[otherwise]off[end if]." ( a )'-text
                                        INVOCATION_LIST_NT'now examine text printed is true'
                                            CONDITION_CONTEXT_NT'examine text printed is true'
                        ROUTINE_NT'carry out examining ( this is the examine undescribed things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if examine text printed is false'
                                        INVOCATION_NT'if examine text printed is false'
                                            CONDITION_CONTEXT_NT'examine text printed is false'
                                                TEST_PROPOSITION_NT'examine text printed is false'(test: [ is('examine text printed', 'false') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [see] nothing special about [the noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [see] nothing special about [the noun]." ( a )'
                                                INVOCATION_NT'"[We] [see] nothing special about [the noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [see] nothing special about [the noun]." ( a )'
                                                        CONSTANT_NT'"[We] [see] nothing special about [the noun]." ( a )'-text
                        ROUTINE_NT'report an actor examining ( this is the report other people examining rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the player'
                                        INVOCATION_NT'if the actor is not the player'
                                            CONDITION_CONTEXT_NT'actor is not the player'
                                                TEST_PROPOSITION_NT'actor is not the player'(test: [ NOT[ is('actor', 'the player') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [look] closely at [the noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] closely at [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [look] closely at [the noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] closely at [the noun]." ( a )'
                                                        CONSTANT_NT'"[The actor] [look] closely at [the noun]." ( a )'-text
                        SENTENCE_NT'looking under is an action applying to one visible thing and requiring light'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'looking under'
                            PROPER_NOUN_NT'applying to one visible thing and requiring light'
                        SENTENCE_NT'the looking under action translates into i6 as LookUnder'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'looking under action'
                            PROPER_NOUN_NT'LookUnder'
                        SENTENCE_NT'the specification of the looking under action is The standard Inform world
                        model does not have a concept of things being under other things, so this
                        action is only minimally provided by the Standard Rules, but it exists here
                        for traditional reasons (and because, after all, LOOK UNDER TABLE is the
                        sort of command which ought to be recognised even if it does nothing useful).
                        The action ordinarily either tells the player he finds nothing of interest,
                        or reports that somebody else has looked under something.The usual way to make this action do something useful is to write a rule
                        like 'Instead of looking under the cabinet for the first time: now the
                        player has the silver key; say ...' and so on.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the looking under action'
                                PROPER_NOUN_NT'looking under action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The standard Inform world
                            model does not have a concept of things being under other things, so this
                            action is only minimally provided by the Standard Rules, but it exists here
                            for traditional reasons (and because, after all, LOOK UNDER TABLE is the
                            sort of command which ought to be recognised even if it does nothing useful).
                            The action ordinarily either tells the player he finds nothing of interest,
                            or reports that somebody else has looked under something.The usual way to make this action do something useful is to write a rule
                            like 'Instead of looking under the cabinet for the first time: now the
                            player has the silver key; say ...' and so on.'
                        ROUTINE_NT'carry out an actor looking under ( this is the standard looking under rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the player is the actor'
                                        INVOCATION_NT'if the player is the actor'
                                            CONDITION_CONTEXT_NT'player is the actor'
                                                TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [find] nothing of interest." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [find] nothing of interest." ( a )'
                                                INVOCATION_NT'"[We] [find] nothing of interest." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [find] nothing of interest." ( a )'
                                                        CONSTANT_NT'"[We] [find] nothing of interest." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor looking under ( this is the report other people looking under rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is not the player'
                                                INVOCATION_NT'if the actor is not the player'
                                                    CONDITION_CONTEXT_NT'actor is not the player'
                                                        TEST_PROPOSITION_NT'actor is not the player'(test: [ NOT[ is('actor', 'the player') NOT] ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [look] under [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [look] under [the noun]." ( a )'
                                                        INVOCATION_NT'"[The actor] [look] under [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [look] under [the noun]." ( a )'
                                                                CONSTANT_NT'"[The actor] [look] under [the noun]." ( a )'-text
                        SENTENCE_NT'searching is an action applying to one thing and requiring light'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'searching'
                            PROPER_NOUN_NT'applying to one thing and requiring light'
                        SENTENCE_NT'the searching action translates into i6 as Search'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'searching action'
                            PROPER_NOUN_NT'Search'
                        SENTENCE_NT'the specification of the searching action is Searching looks at the contents
                        of an open or transparent container, or at the items on top of a supporter.
                        These are often mentioned in room descriptions already, and then the action
                        is unnecessary, but that wouldn't be true for something like a kitchen
                        cupboard which is scenery - mentioned in passing in a room description, but
                        not made a fuss of. Searching such a cupboard would then, by listing its
                        contents, give the player more information than the ordinary room description
                        shows.The usual check rules restrict searching to containers and supporters: so
                        the Standard Rules do not allow the searching of people, for instance. But
                        it is easy to add instead rules ('Instead of searching Dr Watson: ...') or
                        even a new carry out rule ('Check searching someone (called the suspect): ...')
                        to extend the way searching normally works.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the searching action'
                                PROPER_NOUN_NT'searching action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Searching looks at the contents
                            of an open or transparent container, or at the items on top of a supporter.
                            These are often mentioned in room descriptions already, and then the action
                            is unnecessary, but that wouldn't be true for something like a kitchen
                            cupboard which is scenery - mentioned in passing in a room description, but
                            not made a fuss of. Searching such a cupboard would then, by listing its
                            contents, give the player more information than the ordinary room description
                            shows.The usual check rules restrict searching to containers and supporters: so
                            the Standard Rules do not allow the searching of people, for instance. But
                            it is easy to add instead rules ('Instead of searching Dr Watson: ...') or
                            even a new carry out rule ('Check searching someone (called the suspect): ...')
                            to extend the way searching normally works.'
                        ROUTINE_NT'check an actor searching ( this is the can't search unless container or supporter rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not a container and the noun is not a supporter'
                                        INVOCATION_NT'if the noun is not a container and the noun is not a supporter'
                                            CONDITION_CONTEXT_NT'noun is not a container and the noun is not a supporter'
                                                LOGICAL_AND_NT'noun is not a container and the noun is not a supporter'
                                                    TEST_PROPOSITION_NT'noun is not a container'(test: [ NOT[ kind=container('noun') NOT] ])
                                                    TEST_PROPOSITION_NT'the noun is not a supporter'(test: [ NOT[ kind=supporter('the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [find] nothing of interest." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [find] nothing of interest." ( a )'
                                                        INVOCATION_NT'"[We] [find] nothing of interest." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [find] nothing of interest." ( a )'
                                                                CONSTANT_NT'"[We] [find] nothing of interest." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor searching ( this is the can't search closed opaque containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a closed opaque container'
                                        INVOCATION_NT'if the noun is a closed opaque container'
                                            CONDITION_CONTEXT_NT'noun is a closed opaque container'
                                                TEST_PROPOSITION_NT'noun is a closed opaque container'(test: [ kind=container('noun') ^ A81'closed'('noun') ^ A79'opaque'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the actor'
                                                INVOCATION_NT'if the player is the actor'
                                                    CONDITION_CONTEXT_NT'player is the actor'
                                                        TEST_PROPOSITION_NT'player is the actor'(test: [ is('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't see] inside, since [the noun] [are] closed." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( a )'
                                                        INVOCATION_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( a )'
                                                                CONSTANT_NT'"[We] [can't see] inside, since [the noun] [are] closed." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report searching a container ( this is the standard search containers rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun contains a described thing which is not scenery'
                                        INVOCATION_NT'if the noun contains a described thing which is not scenery'
                                            CONDITION_CONTEXT_NT'noun contains a described thing which is not scenery'
                                                TEST_PROPOSITION_NT'noun contains a described thing which is not scenery'(test: [ Exists x : kind=thing(x) ^ A72'described'(x) ^ NOT[ A67'scenery'(x) NOT] ^ is('noun', {<schema: ContainerOf(*1)>:x}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "In [the noun] " ( a )'
                                            INVOCATION_LIST_SAY_NT'"In [the noun] " ( a )'
                                                INVOCATION_NT'"In [the noun] " ( a )'
                                                    RVALUE_CONTEXT_NT'"In [the noun] " ( a )'
                                                        CONSTANT_NT'"In [the noun] " ( a )'-text
                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are'
                                            INVOCATION_NT'list the contents of the noun'
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        CODE_BLOCK_NT'say "."'
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."'
                                                    RVALUE_CONTEXT_NT'"."'
                                                        CONSTANT_NT'"."'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The noun] [are] empty." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The noun] [are] empty." ( b )'
                                                INVOCATION_NT'"[The noun] [are] empty." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The noun] [are] empty." ( b )'
                                                        CONSTANT_NT'"[The noun] [are] empty." ( b )'-text
                        ROUTINE_NT'report searching a supporter ( this is the standard search supporters rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun supports a described thing which is not scenery'
                                        INVOCATION_NT'if the noun supports a described thing which is not scenery'
                                            CONDITION_CONTEXT_NT'noun supports a described thing which is not scenery'
                                                TEST_PROPOSITION_NT'noun supports a described thing which is not scenery'(test: [ Exists x : kind=thing(x) ^ A72'described'(x) ^ NOT[ A67'scenery'(x) NOT] ^ is('noun', {<schema: SupporterOf(*1)>:x}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "On [the noun] " ( a )'
                                            INVOCATION_LIST_SAY_NT'"On [the noun] " ( a )'
                                                INVOCATION_NT'"On [the noun] " ( a )'
                                                    RVALUE_CONTEXT_NT'"On [the noun] " ( a )'
                                                        CONSTANT_NT'"On [the noun] " ( a )'-text
                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , not listing concealed items , prefacing with is/are'
                                            INVOCATION_NT'list the contents of the noun'
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        CODE_BLOCK_NT'say "."'
                                            INVOCATION_LIST_SAY_NT'"."'
                                                INVOCATION_NT'"."'
                                                    RVALUE_CONTEXT_NT'"."'
                                                        CONSTANT_NT'"."'-text
                                    CODE_BLOCK_NT'otherwise'
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] nothing on [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[There] [are] nothing on [the noun]." ( b )'
                                                INVOCATION_NT'"[There] [are] nothing on [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[There] [are] nothing on [the noun]." ( b )'
                                                        CONSTANT_NT'"[There] [are] nothing on [the noun]." ( b )'-text
                        ROUTINE_NT'report an actor searching ( this is the report other people searching rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the player'
                                        INVOCATION_NT'if the actor is not the player'
                                            CONDITION_CONTEXT_NT'actor is not the player'
                                                TEST_PROPOSITION_NT'actor is not the player'(test: [ NOT[ is('actor', 'the player') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [search] [the noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [search] [the noun]." ( a )'
                                                INVOCATION_NT'"[The actor] [search] [the noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [search] [the noun]." ( a )'
                                                        CONSTANT_NT'"[The actor] [search] [the noun]." ( a )'-text
                        SENTENCE_NT'consulting it about is an action applying to one thing and one topic'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'consulting it about'
                            PROPER_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the consulting it about action translates into i6 as Consult'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'consulting it about action'
                            PROPER_NOUN_NT'Consult'
                        SENTENCE_NT'the specification of the consulting it about action is Consulting is a very
                        flexible and potentially powerful action, but only because it leaves almost
                        all of the work to the author to deal with directly. The idea is for it to
                        respond to commands such as LOOK UP HENRY FITZROY IN HISTORY BOOK, where
                        the topic would be the snippet of command HENRY FITZROY and the thing would
                        be the book.The Standard Rules simply parry such requests by saying that the player finds
                        nothing of interest. All interesting responses must be provided by the author,
                        using rules like 'Instead of consulting the history book about...''
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the consulting it about action'
                                PROPER_NOUN_NT'consulting it about action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Consulting is a very
                            flexible and potentially powerful action, but only because it leaves almost
                            all of the work to the author to deal with directly. The idea is for it to
                            respond to commands such as LOOK UP HENRY FITZROY IN HISTORY BOOK, where
                            the topic would be the snippet of command HENRY FITZROY and the thing would
                            be the book.The Standard Rules simply parry such requests by saying that the player finds
                            nothing of interest. All interesting responses must be provided by the author,
                            using rules like 'Instead of consulting the history book about...''
                        ROUTINE_NT'report an actor consulting something about ( this is the block consulting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [discover] nothing of interest in [the noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [discover] nothing of interest in [the noun]." ( a )'
                                                INVOCATION_NT'"[We] [discover] nothing of interest in [the noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [discover] nothing of interest in [the noun]." ( a )'
                                                        CONSTANT_NT'"[We] [discover] nothing of interest in [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [look] at [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [look] at [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [look] at [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [look] at [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [look] at [the noun]." ( b )'-text
                    HEADING_NT'section 5 - standard actions which change the state of things' (level 5)
                        SENTENCE_NT'locking it with is an action applying to one thing and one carried thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'locking it with'
                            PROPER_NOUN_NT'applying to one thing and one carried thing'
                        SENTENCE_NT'the locking it with action translates into i6 as Lock'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'locking it with action'
                            PROPER_NOUN_NT'Lock'
                        SENTENCE_NT'the specification of the locking it with action is Locking is the act of
                        using an object such as a key to ensure that something such as a door or
                        container cannot be opened unless first unlocked. (Only closed things can be
                        locked.)Locking can be performed on any kind of thing which provides the either/or
                        properties lockable, locked, openable and open. The 'can't lock without a lock
                        rule' tests to see if the noun both provides the lockable property, and if
                        it is in fact lockable: it is then assumed that the other properties can
                        safely be checked. In the Standard Rules, the container and door kinds both
                        satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
                        will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
                        A briefcase can be open. A briefcase can be lockable. A briefcase can be
                        locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't lock without the correct
                        key rule'. To satisfy this, the actor must be directly holding the second
                        noun, and it must be the current value of the 'matching key' property for
                        the noun. (This property is seldom referred to directly because it is
                        automatically set by assertions like 'The silver key unlocks the wicket
                        gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
                        level: they can be much enhanced using the extension Locksmith by Emily
                        Short, which is included with all distributions of Inform.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the locking it with action'
                                PROPER_NOUN_NT'locking it with action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Locking is the act of
                            using an object such as a key to ensure that something such as a door or
                            container cannot be opened unless first unlocked. (Only closed things can be
                            locked.)Locking can be performed on any kind of thing which provides the either/or
                            properties lockable, locked, openable and open. The 'can't lock without a lock
                            rule' tests to see if the noun both provides the lockable property, and if
                            it is in fact lockable: it is then assumed that the other properties can
                            safely be checked. In the Standard Rules, the container and door kinds both
                            satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
                            will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
                            A briefcase can be open. A briefcase can be lockable. A briefcase can be
                            locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't lock without the correct
                            key rule'. To satisfy this, the actor must be directly holding the second
                            noun, and it must be the current value of the 'matching key' property for
                            the noun. (This property is seldom referred to directly because it is
                            automatically set by assertions like 'The silver key unlocks the wicket
                            gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
                            level: they can be much enhanced using the extension Locksmith by Emily
                            Short, which is included with all distributions of Inform.'
                        ROUTINE_NT'check an actor locking something with ( this is the can't lock without a lock rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is lockable'
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is lockable'
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is lockable'
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is lockable'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                                    TEST_PROPOSITION_NT'the noun is lockable'(test: [ A84'lockable'('the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a )'
                                                INVOCATION_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] lock." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor locking something with ( this is the can't lock what's already locked rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is locked'
                                        INVOCATION_NT'if the noun is locked'
                                            CONDITION_CONTEXT_NT'noun is locked'
                                                TEST_PROPOSITION_NT'noun is locked'(test: [ A85'locked'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] locked at the [if story tense is present
                                                tense]moment[otherwise]time[end if]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] locked at the [if story tense is present
                                                    tense]moment[otherwise]time[end if]." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] locked at the [if story tense is present
                                                        tense]moment[otherwise]time[end if]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] locked at the [if story tense is present
                                                            tense]moment[otherwise]time[end if]." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] locked at the [if story tense is present
                                                                tense]moment[otherwise]time[end if]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor locking something with ( this is the can't lock what's open rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is open'
                                        INVOCATION_NT'if the noun is open'
                                            CONDITION_CONTEXT_NT'noun is open'
                                                TEST_PROPOSITION_NT'noun is open'(test: [ A80'open'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "First [we] [would have] to close [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"First [we] [would have] to close [the noun]." ( a )'
                                                        INVOCATION_NT'"First [we] [would have] to close [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"First [we] [would have] to close [the noun]." ( a )'
                                                                CONSTANT_NT'"First [we] [would have] to close [the noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor locking something with ( this is the can't lock without the correct key rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                        INVOCATION_NT'if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                            CONDITION_CONTEXT_NT'holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                                LOGICAL_OR_NT'holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                                    TEST_PROPOSITION_NT'holder of the second noun is not the actor'(test: [ NOT[ is('holder of the second noun', 'the actor') NOT] ])
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the noun does not provide the property matching key'(test: [ NOT[ provides('the noun', 'the property matching key') NOT] ])
                                                        TEST_PROPOSITION_NT'the matching key of the noun is not the second noun'(test: [ NOT[ is('the matching key of the noun', 'the second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                        INVOCATION_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                                CONSTANT_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor locking something with ( this is the standard locking rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is locked'
                                    CONDITION_CONTEXT_NT'the noun is locked'
                        ROUTINE_NT'report an actor locking something with ( this is the standard report locking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [lock] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [lock] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [lock] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [lock] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [lock] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is visible'
                                                INVOCATION_NT'if the actor is visible'
                                                    CONDITION_CONTEXT_NT'actor is visible'
                                                        TEST_PROPOSITION_NT'actor is visible'(test: [ A30'visible'('actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [lock] [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [lock] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [lock] [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [lock] [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [lock] [the noun]." ( b )'-text
                        SENTENCE_NT'unlocking it with is an action applying to one thing and one carried thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'unlocking it with'
                            PROPER_NOUN_NT'applying to one thing and one carried thing'
                        SENTENCE_NT'the unlocking it with action translates into i6 as Unlock'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'unlocking it with action'
                            PROPER_NOUN_NT'Unlock'
                        SENTENCE_NT'the specification of the unlocking it with action is Unlocking undoes the
                        effect of locking, and renders the noun openable again provided that the
                        actor is carrying the right key (which must be the second noun).Unlocking can be performed on any kind of thing which provides the either/or
                        properties lockable, locked, openable and open. The 'can't unlock without a lock
                        rule' tests to see if the noun both provides the lockable property, and if
                        it is in fact lockable: it is then assumed that the other properties can
                        safely be checked. In the Standard Rules, the container and door kinds both
                        satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
                        will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
                        A briefcase can be open. A briefcase can be lockable. A briefcase can be
                        locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't unlock without the correct
                        key rule'. To satisfy this, the actor must be directly holding the second
                        noun, and it must be the current value of the 'matching key' property for
                        the noun. (This property is seldom referred to directly because it is
                        automatically set by assertions like 'The silver key unlocks the wicket
                        gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
                        level: they can be much enhanced using the extension Locksmith by Emily
                        Short, which is included with all distributions of Inform.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the unlocking it with action'
                                PROPER_NOUN_NT'unlocking it with action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Unlocking undoes the
                            effect of locking, and renders the noun openable again provided that the
                            actor is carrying the right key (which must be the second noun).Unlocking can be performed on any kind of thing which provides the either/or
                            properties lockable, locked, openable and open. The 'can't unlock without a lock
                            rule' tests to see if the noun both provides the lockable property, and if
                            it is in fact lockable: it is then assumed that the other properties can
                            safely be checked. In the Standard Rules, the container and door kinds both
                            satisfy these requirements.We can create a new kind on which opening, closing, locking and unlocking
                            will work thus: 'A briefcase is a kind of thing. A briefcase can be openable.
                            A briefcase can be open. A briefcase can be lockable. A briefcase can be
                            locked. A briefcase is usually openable, lockable, open and unlocked.'Inform checks whether the key fits using the 'can't unlock without the correct
                            key rule'. To satisfy this, the actor must be directly holding the second
                            noun, and it must be the current value of the 'matching key' property for
                            the noun. (This property is seldom referred to directly because it is
                            automatically set by assertions like 'The silver key unlocks the wicket
                            gate.')The Standard Rules provide locking and unlocking actions at a fairly basic
                            level: they can be much enhanced using the extension Locksmith by Emily
                            Short, which is included with all distributions of Inform.'
                        ROUTINE_NT'check an actor unlocking something with ( this is the can't unlock without a lock rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is lockable'
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is lockable'
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is lockable'
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is lockable'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                                    TEST_PROPOSITION_NT'the noun is lockable'(test: [ A84'lockable'('the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a )'
                                                INVOCATION_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][Those] [don't] seem to be something [we] [can] unlock." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor unlocking something with ( this is the can't unlock what's already unlocked rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not locked'
                                        INVOCATION_NT'if the noun is not locked'
                                            CONDITION_CONTEXT_NT'noun is not locked'
                                                TEST_PROPOSITION_NT'noun is not locked'(test: [ NOT[ A85'locked'('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] unlocked at the [if story tense is present
                                                tense]moment[otherwise]time[end if]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] unlocked at the [if story tense is present
                                                    tense]moment[otherwise]time[end if]." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] unlocked at the [if story tense is present
                                                        tense]moment[otherwise]time[end if]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] unlocked at the [if story tense is present
                                                            tense]moment[otherwise]time[end if]." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] unlocked at the [if story tense is present
                                                                tense]moment[otherwise]time[end if]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor unlocking something with ( this is the can't unlock without the correct key rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                        INVOCATION_NT'if the holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                            CONDITION_CONTEXT_NT'holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                                LOGICAL_OR_NT'holder of the second noun is not the actor or the noun does not provide the property matching key or the matching key of the noun is not the second noun'
                                                    TEST_PROPOSITION_NT'holder of the second noun is not the actor'(test: [ NOT[ is('holder of the second noun', 'the actor') NOT] ])
                                                    LOGICAL_OR_NT
                                                        TEST_PROPOSITION_NT'the noun does not provide the property matching key'(test: [ NOT[ provides('the noun', 'the property matching key') NOT] ])
                                                        TEST_PROPOSITION_NT'the matching key of the noun is not the second noun'(test: [ NOT[ is('the matching key of the noun', 'the second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                        INVOCATION_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'
                                                                CONSTANT_NT'"[regarding the second noun][Those] [don't] seem to fit the lock." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor unlocking something with ( this is the standard unlocking rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is not locked'
                                    CONDITION_CONTEXT_NT'the noun is not locked'
                        ROUTINE_NT'report an actor unlocking something with ( this is the standard report unlocking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [unlock] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [unlock] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [unlock] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [unlock] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [unlock] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is visible'
                                                INVOCATION_NT'if the actor is visible'
                                                    CONDITION_CONTEXT_NT'actor is visible'
                                                        TEST_PROPOSITION_NT'actor is visible'(test: [ A30'visible'('actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [unlock] [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [unlock] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [unlock] [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [unlock] [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [unlock] [the noun]." ( b )'-text
                        SENTENCE_NT'switching on is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching on'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the switching on action translates into i6 as SwitchOn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching on action'
                            PROPER_NOUN_NT'SwitchOn'
                        SENTENCE_NT'the specification of the switching on action is The switching on and switching
                        off actions are for the simplest kind of machinery operation: they are for
                        objects representing machines (or more likely parts of machines), which are
                        considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
                        they could work just as well with any kind which can be 'switched on' or
                        'switched off'.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the switching on action'
                                PROPER_NOUN_NT'switching on action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The switching on and switching
                            off actions are for the simplest kind of machinery operation: they are for
                            objects representing machines (or more likely parts of machines), which are
                            considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
                            they could work just as well with any kind which can be 'switched on' or
                            'switched off'.'
                        ROUTINE_NT'check an actor switching on ( this is the can't switch on unless switchable rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property switched on'
                                        INVOCATION_NT'if the noun provides the property switched on'
                                            CONDITION_CONTEXT_NT'noun provides the property switched on'
                                                TEST_PROPOSITION_NT'noun provides the property switched on'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor switching on ( this is the can't switch on what's already on rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is switched on'
                                        INVOCATION_NT'if the noun is switched on'
                                            CONDITION_CONTEXT_NT'noun is switched on'
                                                TEST_PROPOSITION_NT'noun is switched on'(test: [ A90'switched on'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already on." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already on." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already on." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already on." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] already on." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor switching on ( this is the standard switching on rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is switched on'
                                    CONDITION_CONTEXT_NT'the noun is switched on'
                        ROUTINE_NT'report an actor switching on ( this is the standard report switching on rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [switch] [the noun] on." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [switch] [the noun] on." ( a )'
                                                INVOCATION_NT'"[The actor] [switch] [the noun] on." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [switch] [the noun] on." ( a )'
                                                        CONSTANT_NT'"[The actor] [switch] [the noun] on." ( a )'-text
                        SENTENCE_NT'switching off is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching off'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the switching off action translates into i6 as SwitchOff'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching off action'
                            PROPER_NOUN_NT'SwitchOff'
                        SENTENCE_NT'the specification of the switching off action is The switching off and switching
                        on actions are for the simplest kind of machinery operation: they are for
                        objects representing machines (or more likely parts of machines), which are
                        considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
                        they could work just as well with any kind which can be 'switched on' or
                        'switched off'.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the switching off action'
                                PROPER_NOUN_NT'switching off action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The switching off and switching
                            on actions are for the simplest kind of machinery operation: they are for
                            objects representing machines (or more likely parts of machines), which are
                            considered to be either off or on at any given time.The actions are intended to be used where the noun is a device, but in fact
                            they could work just as well with any kind which can be 'switched on' or
                            'switched off'.'
                        ROUTINE_NT'check an actor switching off ( this is the can't switch off unless switchable rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property switched on'
                                        INVOCATION_NT'if the noun provides the property switched on'
                                            CONDITION_CONTEXT_NT'noun provides the property switched on'
                                                TEST_PROPOSITION_NT'noun provides the property switched on'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] switch." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor switching off ( this is the can't switch off what's already off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is switched off'
                                        INVOCATION_NT'if the noun is switched off'
                                            CONDITION_CONTEXT_NT'noun is switched off'
                                                TEST_PROPOSITION_NT'noun is switched off'(test: [ A91'switched off'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already off." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already off." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already off." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already off." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] already off." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor switching off ( this is the standard switching off rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is switched off'
                                    CONDITION_CONTEXT_NT'the noun is switched off'
                        ROUTINE_NT'report an actor switching off ( this is the standard report switching off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the action is not silent'
                                        INVOCATION_NT'if the action is not silent'
                                            CONDITION_CONTEXT_NT'action is not silent'
                                                TEST_VALUE_NT'action is not silent'
                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                        INVOCATION_LIST_NT'action is not silent'
                                                            INVOCATION_NT'action is not silent'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The actor] [switch] [the noun] off." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [switch] [the noun] off." ( a )'
                                                INVOCATION_NT'"[The actor] [switch] [the noun] off." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [switch] [the noun] off." ( a )'
                                                        CONSTANT_NT'"[The actor] [switch] [the noun] off." ( a )'-text
                        SENTENCE_NT'opening is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'opening'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the opening action translates into i6 as Open'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'opening action'
                            PROPER_NOUN_NT'Open'
                        SENTENCE_NT'the specification of the opening action is Opening makes something no longer
                        a physical barrier. The action can be performed on any kind of thing which
                        provides the either/or properties openable and open. The 'can't open unless
                        openable rule' tests to see if the noun both can be and actually is openable.
                        (It is assumed that anything which can be openable can also be open.)
                        In the Standard Rules, the container and door kinds both satisfy these
                        requirements.In the event that the thing to be opened is also lockable, we are forbidden
                        to open it when it is locked. Both containers and doors can be lockable,
                        but the opening and closing actions would also work fine with kinds which
                        cannot be.We can create a new kind on which opening and closing will work thus:
                        'A case file is a kind of thing. A case file can be openable.
                        A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
                        When a container is closed, that means people outside cannot reach in,
                        and vice versa; when a door is closed, people cannot use the 'going' action
                        to pass through it. If we were to create a new kind such as 'case file',
                        we would also need to write rules to make the open and closed properties
                        interesting for this kind.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the opening action'
                                PROPER_NOUN_NT'opening action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Opening makes something no longer
                            a physical barrier. The action can be performed on any kind of thing which
                            provides the either/or properties openable and open. The 'can't open unless
                            openable rule' tests to see if the noun both can be and actually is openable.
                            (It is assumed that anything which can be openable can also be open.)
                            In the Standard Rules, the container and door kinds both satisfy these
                            requirements.In the event that the thing to be opened is also lockable, we are forbidden
                            to open it when it is locked. Both containers and doors can be lockable,
                            but the opening and closing actions would also work fine with kinds which
                            cannot be.We can create a new kind on which opening and closing will work thus:
                            'A case file is a kind of thing. A case file can be openable.
                            A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
                            When a container is closed, that means people outside cannot reach in,
                            and vice versa; when a door is closed, people cannot use the 'going' action
                            to pass through it. If we were to create a new kind such as 'case file',
                            we would also need to write rules to make the open and closed properties
                            interesting for this kind.'
                        ROUTINE_NT'check an actor opening ( this is the can't open unless openable rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property openable and the noun is openable'
                                        INVOCATION_NT'if the noun provides the property openable and the noun is openable'
                                            CONDITION_CONTEXT_NT'noun provides the property openable and the noun is openable'
                                                LOGICAL_AND_NT'noun provides the property openable and the noun is openable'
                                                    TEST_PROPOSITION_NT'noun provides the property openable'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                                    TEST_PROPOSITION_NT'the noun is openable'(test: [ A82'openable'('the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can] open." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] open." ( a )'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] open." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] open." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] open." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor opening ( this is the can't open what's locked rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property lockable and the noun is locked'
                                        INVOCATION_NT'if the noun provides the property lockable and the noun is locked'
                                            CONDITION_CONTEXT_NT'noun provides the property lockable and the noun is locked'
                                                LOGICAL_AND_NT'noun provides the property lockable and the noun is locked'
                                                    TEST_PROPOSITION_NT'noun provides the property lockable'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                                    TEST_PROPOSITION_NT'the noun is locked'(test: [ A85'locked'('the noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [seem] to be locked." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [seem] to be locked." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [seem] to be locked." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [seem] to be locked." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They] [seem] to be locked." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor opening ( this is the can't open what's already open rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is open'
                                        INVOCATION_NT'if the noun is open'
                                            CONDITION_CONTEXT_NT'noun is open'
                                                TEST_PROPOSITION_NT'noun is open'(test: [ A80'open'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already open." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already open." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already open." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already open." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] already open." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor opening ( this is the standard opening rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is open'
                                    CONDITION_CONTEXT_NT'the noun is open'
                        ROUTINE_NT'report an actor opening ( this is the reveal any newly visible interior rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor'
                                        INVOCATION_NT'if the actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor'
                                            CONDITION_CONTEXT_NT'actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor'
                                                LOGICAL_AND_NT'actor is the player and the noun is an opaque container and the first thing held by the noun is not nothing and the noun does not enclose the actor'
                                                    TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    LOGICAL_AND_NT
                                                        TEST_PROPOSITION_NT'the noun is an opaque container'(test: [ kind=container('the noun') ^ A79'opaque'('the noun') ])
                                                        LOGICAL_AND_NT
                                                            TEST_PROPOSITION_NT'the first thing held by the noun is not nothing'(test: [ NOT[ is('the first thing held by the noun', 'nothing') NOT] ])
                                                            TEST_PROPOSITION_NT'the noun does not enclose the actor'(test: [ NOT[ encloses('the noun', 'the actor') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the actor is the player'
                                                        INVOCATION_NT'if the actor is the player'
                                                            CONDITION_CONTEXT_NT'actor is the player'
                                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [open] [the noun], revealing " ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [open] [the noun], revealing " ( a )'
                                                                INVOCATION_NT'"[We] [open] [the noun], revealing " ( a )'
                                                                    RVALUE_CONTEXT_NT'"[We] [open] [the noun], revealing " ( a )'
                                                                        CONSTANT_NT'"[We] [open] [the noun], revealing " ( a )'-text
                                                        INVOCATION_LIST_NT'list the contents of the noun , as a sentence , tersely , not listing concealed items'
                                                            INVOCATION_NT'list the contents of the noun'
                                                                RVALUE_CONTEXT_NT'noun'
                                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                        CODE_BLOCK_NT'say "."'
                                                            INVOCATION_LIST_SAY_NT'"."'
                                                                INVOCATION_NT'"."'
                                                                    RVALUE_CONTEXT_NT'"."'
                                                                        CONSTANT_NT'"."'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor opening ( this is the standard report opening rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [open] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [open] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [open] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [open] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [open] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player can see the actor'
                                                INVOCATION_NT'if the player can see the actor'
                                                    CONDITION_CONTEXT_NT'player can see the actor'
                                                        TEST_PROPOSITION_NT'player can see the actor'(test: [ can-see('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [open] [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [open] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [open] [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [open] [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [open] [the noun]." ( b )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The noun] [open]." ( c )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [open]." ( c )'
                                                        INVOCATION_NT'"[The noun] [open]." ( c )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [open]." ( c )'
                                                                CONSTANT_NT'"[The noun] [open]." ( c )'-text
                        SENTENCE_NT'closing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'closing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the closing action translates into i6 as Close'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'closing action'
                            PROPER_NOUN_NT'Close'
                        SENTENCE_NT'the specification of the closing action is Closing makes something into
                        a physical barrier. The action can be performed on any kind of thing which
                        provides the either/or properties openable and open. The 'can't close unless
                        openable rule' tests to see if the noun both can be and actually is openable.
                        (It is assumed that anything which can be openable can also be open, and
                        hence can also be closed.) In the Standard Rules, the container and door
                        kinds both satisfy these requirements.We can create a new kind on which opening and closing will work thus:
                        'A case file is a kind of thing. A case file can be openable.
                        A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
                        When a container is closed, that means people outside cannot reach in,
                        and vice versa; when a door is closed, people cannot use the 'going' action
                        to pass through it. If we were to create a new kind such as 'case file',
                        we would also need to write rules to make the open and closed properties
                        interesting for this kind.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the closing action'
                                PROPER_NOUN_NT'closing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Closing makes something into
                            a physical barrier. The action can be performed on any kind of thing which
                            provides the either/or properties openable and open. The 'can't close unless
                            openable rule' tests to see if the noun both can be and actually is openable.
                            (It is assumed that anything which can be openable can also be open, and
                            hence can also be closed.) In the Standard Rules, the container and door
                            kinds both satisfy these requirements.We can create a new kind on which opening and closing will work thus:
                            'A case file is a kind of thing. A case file can be openable.
                            A case file can be open. A case file is usually openable and closed.'The meaning of open and closed is different for different kinds of thing.
                            When a container is closed, that means people outside cannot reach in,
                            and vice versa; when a door is closed, people cannot use the 'going' action
                            to pass through it. If we were to create a new kind such as 'case file',
                            we would also need to write rules to make the open and closed properties
                            interesting for this kind.'
                        ROUTINE_NT'check an actor closing ( this is the can't close unless openable rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun provides the property openable and the noun is openable'
                                        INVOCATION_NT'if the noun provides the property openable and the noun is openable'
                                            CONDITION_CONTEXT_NT'noun provides the property openable and the noun is openable'
                                                LOGICAL_AND_NT'noun provides the property openable and the noun is openable'
                                                    TEST_PROPOSITION_NT'noun provides the property openable'(test: [ provides('noun', CONSTANT_NT-either/or property) ])
                                                    TEST_PROPOSITION_NT'the noun is openable'(test: [ A82'openable'('the noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] something [we] [can] close." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] something [we] [can] close." ( a )'
                                                INVOCATION_NT'"[regarding the noun][They] [aren't] something [we] [can] close." ( a )'
                                                    RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] something [we] [can] close." ( a )'
                                                        CONSTANT_NT'"[regarding the noun][They] [aren't] something [we] [can] close." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor closing ( this is the can't close what's already closed rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is closed'
                                        INVOCATION_NT'if the noun is closed'
                                            CONDITION_CONTEXT_NT'noun is closed'
                                                TEST_PROPOSITION_NT'noun is closed'(test: [ A81'closed'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They're] already closed." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They're] already closed." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They're] already closed." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They're] already closed." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They're] already closed." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor closing ( this is the standard closing rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the noun is closed'
                                    CONDITION_CONTEXT_NT'the noun is closed'
                        ROUTINE_NT'report an actor closing ( this is the standard report closing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [close] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [close] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [close] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [close] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [close] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player can see the actor'
                                                INVOCATION_NT'if the player can see the actor'
                                                    CONDITION_CONTEXT_NT'player can see the actor'
                                                        TEST_PROPOSITION_NT'player can see the actor'(test: [ can-see('player', 'the actor') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [close] [the noun]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [close] [the noun]." ( b )'
                                                        INVOCATION_NT'"[The actor] [close] [the noun]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [close] [the noun]." ( b )'
                                                                CONSTANT_NT'"[The actor] [close] [the noun]." ( b )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The noun] [close]." ( c )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [close]." ( c )'
                                                        INVOCATION_NT'"[The noun] [close]." ( c )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [close]." ( c )'
                                                                CONSTANT_NT'"[The noun] [close]." ( c )'-text
                        SENTENCE_NT'wearing is an action applying to one carried thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'wearing'
                            PROPER_NOUN_NT'applying to one carried thing'
                        SENTENCE_NT'the wearing action translates into i6 as Wear'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'wearing action'
                            PROPER_NOUN_NT'Wear'
                        SENTENCE_NT'the specification of the wearing action is The Standard Rules give Inform
                        only a simple model of clothing. A thing can be worn only if it has the
                        either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
                        wears the Homburg hat.' automatically implies that the hat is wearable,
                        which is why we only seldom need to use the word 'wearable' directly.)
                        There is no checking of how much or how little any actor is wearing, or
                        how incongruous this may appear: nor any distinction between under or
                        over-clothes.To put on an article of clothing, the actor must be directly carrying it,
                        as enforced by the 'can't wear what's not held rule'.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the wearing action'
                                PROPER_NOUN_NT'wearing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules give Inform
                            only a simple model of clothing. A thing can be worn only if it has the
                            either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
                            wears the Homburg hat.' automatically implies that the hat is wearable,
                            which is why we only seldom need to use the word 'wearable' directly.)
                            There is no checking of how much or how little any actor is wearing, or
                            how incongruous this may appear: nor any distinction between under or
                            over-clothes.To put on an article of clothing, the actor must be directly carrying it,
                            as enforced by the 'can't wear what's not held rule'.'
                        ROUTINE_NT'check an actor wearing ( this is the can't wear what's not clothing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not a thing or the noun is not wearable'
                                        INVOCATION_NT'if the noun is not a thing or the noun is not wearable'
                                            CONDITION_CONTEXT_NT'noun is not a thing or the noun is not wearable'
                                                LOGICAL_OR_NT'noun is not a thing or the noun is not wearable'
                                                    TEST_PROPOSITION_NT'noun is not a thing'(test: [ NOT[ kind=thing('noun') NOT] ])
                                                    TEST_PROPOSITION_NT'the noun is not wearable'(test: [ NOT[ A68'wearable'('the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't wear] [regarding the noun][those]!" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )'
                                                        INVOCATION_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )'
                                                                CONSTANT_NT'"[We] [can't wear] [regarding the noun][those]!" ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor wearing ( this is the can't wear what's not held rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the holder of the noun is not the actor'
                                        INVOCATION_NT'if the holder of the noun is not the actor'
                                            CONDITION_CONTEXT_NT'holder of the noun is not the actor'
                                                TEST_PROPOSITION_NT'holder of the noun is not the actor'(test: [ NOT[ is('holder of the noun', 'the actor') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [regarding the noun][those]!" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )'
                                                                CONSTANT_NT'"[We] [aren't] holding [regarding the noun][those]!" ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor wearing ( this is the can't wear what's already worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] already wearing [regarding the noun][those]!" ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a )'
                                                        INVOCATION_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a )'
                                                            RVALUE_CONTEXT_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a )'
                                                                CONSTANT_NT'"[We]['re] already wearing [regarding the noun][those]!" ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor wearing ( this is the standard wearing rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor wears the noun'
                                    CONDITION_CONTEXT_NT'the actor wears the noun'
                        ROUTINE_NT'report an actor wearing ( this is the standard report wearing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [put] on [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [put] on [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [put] on [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [put] on [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [put] on [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [put] on [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [put] on [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [put] on [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [put] on [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [put] on [the noun]." ( b )'-text
                        SENTENCE_NT'taking off is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'taking off'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the taking off action translates into i6 as Disrobe'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'taking off action'
                            PROPER_NOUN_NT'Disrobe'
                        ROUTINE_NT'does the player mean taking off something worn'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'it is very likely'
                        SENTENCE_NT'the specification of the taking off action is The Standard Rules give Inform
                        only a simple model of clothing. A thing can be worn only if it has the
                        either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
                        wears the Homburg hat.' automatically implies that the hat is wearable,
                        which is why we only seldom need to use the word 'wearable' directly.)
                        There is no checking of how much or how little any actor is wearing, or
                        how incongruous this may appear: nor any distinction between under or
                        over-clothes.When an article of clothing is taken off, it becomes a thing directly
                        carried by its former wearer, rather than being (say) dropped onto the floor.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the taking off action'
                                PROPER_NOUN_NT'taking off action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules give Inform
                            only a simple model of clothing. A thing can be worn only if it has the
                            either/or property of being 'wearable'. (Typing a sentence like 'Mr Jones
                            wears the Homburg hat.' automatically implies that the hat is wearable,
                            which is why we only seldom need to use the word 'wearable' directly.)
                            There is no checking of how much or how little any actor is wearing, or
                            how incongruous this may appear: nor any distinction between under or
                            over-clothes.When an article of clothing is taken off, it becomes a thing directly
                            carried by its former wearer, rather than being (say) dropped onto the floor.'
                        ROUTINE_NT'check an actor taking off ( this is the can't take off what's not worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not wearing the noun'
                                        INVOCATION_NT'if the actor is not wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is not wearing the noun'
                                                TEST_PROPOSITION_NT'actor is not wearing the noun'(test: [ NOT[ is('actor', {<schema: WearerOf(*1)>:'the noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] wearing [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] wearing [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] wearing [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] wearing [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [aren't] wearing [the noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor taking off ( this is the can't exceed carrying capacity when taking off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                        INVOCATION_NT'if the number of things carried by the actor is at least the carrying capacity of the actor'
                                            CONDITION_CONTEXT_NT'number of things carried by the actor is at least the carrying capacity of the actor'
                                                TEST_PROPOSITION_NT'number of things carried by the actor is at least the carrying capacity of the actor'(test: [ at-least('number of things carried by the actor', 'the carrying capacity of the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We]['re] carrying too many things already." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We]['re] carrying too many things already." ( a )'
                                                        INVOCATION_NT'"[We]['re] carrying too many things already." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We]['re] carrying too many things already." ( a )'
                                                                CONSTANT_NT'"[We]['re] carrying too many things already." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor taking off ( this is the standard taking off rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the actor carries the noun'
                                    CONDITION_CONTEXT_NT'the actor carries the noun'
                        ROUTINE_NT'report an actor taking off ( this is the standard report taking off rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [take] off [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [take] off [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [take] off [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [take] off [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [take] off [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [take] off [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [take] off [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [take] off [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [take] off [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [take] off [the noun]." ( b )'-text
                    HEADING_NT'section 6 - standard actions concerning other people' (level 5)
                        SENTENCE_NT'giving it to is an action applying to one carried thing and one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'giving it to'
                            PROPER_NOUN_NT'applying to one carried thing and one thing'
                        SENTENCE_NT'the giving it to action translates into i6 as Give'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'giving it to action'
                            PROPER_NOUN_NT'Give'
                        SENTENCE_NT'the specification of the giving it to action is This action is indexed by
                        Inform under 'Actions concerning other people', but it could just as easily
                        have gone under 'Actions concerning the actor's possessions' because -
                        like dropping, putting it on or inserting it into - this is an action
                        which gets rid of something being carried.The Standard Rules implement this action fully - if it reaches the carry
                        out and report rulebooks, then the item is indeed transferred to the
                        recipient, and this is properly reported. But giving something to
                        somebody is not like putting something on a shelf: the recipient has
                        to agree. The final check rule, the 'block giving rule', assumes that
                        the recipient does not consent - so the gift fails to happen. The way
                        to make the giving action use its abilities fully is to replace the
                        block giving rule with a rule which makes a more sophisticated decision
                        about who will accept what from whom, and only blocks some attempts,
                        letting others run on into the carry out and report rules.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the giving it to action'
                                PROPER_NOUN_NT'giving it to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'This action is indexed by
                            Inform under 'Actions concerning other people', but it could just as easily
                            have gone under 'Actions concerning the actor's possessions' because -
                            like dropping, putting it on or inserting it into - this is an action
                            which gets rid of something being carried.The Standard Rules implement this action fully - if it reaches the carry
                            out and report rulebooks, then the item is indeed transferred to the
                            recipient, and this is properly reported. But giving something to
                            somebody is not like putting something on a shelf: the recipient has
                            to agree. The final check rule, the 'block giving rule', assumes that
                            the recipient does not consent - so the gift fails to happen. The way
                            to make the giving action use its abilities fully is to replace the
                            block giving rule with a rule which makes a more sophisticated decision
                            about who will accept what from whom, and only blocks some attempts,
                            letting others run on into the carry out and report rules.'
                        ROUTINE_NT'check an actor giving something to ( this is the can't give what you haven't got rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun'
                                        INVOCATION_NT'if the actor is not the holder of the noun'
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun'
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun'(test: [ NOT[ is('actor', 'the holder of the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [aren't] holding [the noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor giving something to ( this is the can't give to yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the second noun'
                                        INVOCATION_NT'if the actor is the second noun'
                                            CONDITION_CONTEXT_NT'actor is the second noun'
                                                TEST_PROPOSITION_NT'actor is the second noun'(test: [ is('actor', 'the second noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [can't give] [the noun] to [ourselves]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )'
                                                        INVOCATION_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )'
                                                                CONSTANT_NT'"[We] [can't give] [the noun] to [ourselves]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor giving something to ( this is the can't give to a non-person rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a person'
                                        INVOCATION_NT'if the second noun is not a person'
                                            CONDITION_CONTEXT_NT'second noun is not a person'
                                                TEST_PROPOSITION_NT'second noun is not a person'(test: [ NOT[ kind=person('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [aren't] able to receive things." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [aren't] able to receive things." ( a )'
                                                        INVOCATION_NT'"[The second noun] [aren't] able to receive things." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The second noun] [aren't] able to receive things." ( a )'
                                                                CONSTANT_NT'"[The second noun] [aren't] able to receive things." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor giving something to ( this is the can't give clothes being worn rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun'
                                            INVOCATION_NT'silently try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor giving something to ( this is the block giving rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The second noun] [don't] seem interested." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The second noun] [don't] seem interested." ( a )'
                                                INVOCATION_NT'"[The second noun] [don't] seem interested." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The second noun] [don't] seem interested." ( a )'
                                                        CONSTANT_NT'"[The second noun] [don't] seem interested." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor giving something to ( this is the can't exceed carrying capacity when giving rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the number of things carried by the second noun is at least the carrying capacity of the second noun'
                                        INVOCATION_NT'if the number of things carried by the second noun is at least the carrying capacity of the second noun'
                                            CONDITION_CONTEXT_NT'number of things carried by the second noun is at least the carrying capacity of the second noun'
                                                TEST_PROPOSITION_NT'number of things carried by the second noun is at least the carrying capacity of the second noun'(test: [ at-least('number of things carried by the second noun', 'the carrying capacity of the second noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [are] carrying too many things already." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [are] carrying too many things already." ( a )'
                                                        INVOCATION_NT'"[The second noun] [are] carrying too many things already." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The second noun] [are] carrying too many things already." ( a )'
                                                                CONSTANT_NT'"[The second noun] [are] carrying too many things already." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'carry out an actor giving something to ( this is the standard giving rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'move the noun to the second noun'
                                    INVOCATION_NT'move the noun to the second noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        RVALUE_CONTEXT_NT'second noun'
                                            NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                        ROUTINE_NT'report an actor giving something to ( this is the standard report giving rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [give] [the noun] to [the second noun]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [give] [the noun] to [the second noun]." ( a )'
                                                INVOCATION_NT'"[We] [give] [the noun] to [the second noun]." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [give] [the noun] to [the second noun]." ( a )'
                                                        CONSTANT_NT'"[We] [give] [the noun] to [the second noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the second noun is the player'
                                                INVOCATION_NT'if the second noun is the player'
                                                    CONDITION_CONTEXT_NT'second noun is the player'
                                                        TEST_PROPOSITION_NT'second noun is the player'(test: [ is('second noun', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The actor] [give] [the noun] to [us]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [give] [the noun] to [us]." ( b )'
                                                        INVOCATION_NT'"[The actor] [give] [the noun] to [us]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [give] [the noun] to [us]." ( b )'
                                                                CONSTANT_NT'"[The actor] [give] [the noun] to [us]." ( b )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [give] [the noun] to [the second noun]." ( c )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )'
                                                        INVOCATION_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )'
                                                                CONSTANT_NT'"[The actor] [give] [the noun] to [the second noun]." ( c )'-text
                        SENTENCE_NT'showing it to is an action applying to one carried thing and one visible thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'showing it to'
                            PROPER_NOUN_NT'applying to one carried thing and one visible thing'
                        SENTENCE_NT'the showing it to action translates into i6 as Show'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'showing it to action'
                            PROPER_NOUN_NT'Show'
                        SENTENCE_NT'the specification of the showing it to action is Anyone can show anyone
                        else something which they are carrying, but not some nearby piece of
                        scenery, say - so this action is suitable for showing the emerald locket
                        to Katarina, but not showing the Orange River Rock Room to Mr Douglas.The Standard Rules implement this action in only a minimal way, checking
                        that it makes sense but then blocking all such attempts with a message
                        such as 'Katarina is not interested.' - this is the task of the 'block
                        showing rule'. As a result, there are no carry out or report rules. To
                        make it into a systematic and interesting action, we would need to
                        unlist the block showing rule and then to write carry out and report
                        rules: but usually for IF purposes we only need to make a handful of
                        special cases of showing work properly, and for those we can simply
                        write Instead rules to handle them.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the showing it to action'
                                PROPER_NOUN_NT'showing it to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Anyone can show anyone
                            else something which they are carrying, but not some nearby piece of
                            scenery, say - so this action is suitable for showing the emerald locket
                            to Katarina, but not showing the Orange River Rock Room to Mr Douglas.The Standard Rules implement this action in only a minimal way, checking
                            that it makes sense but then blocking all such attempts with a message
                            such as 'Katarina is not interested.' - this is the task of the 'block
                            showing rule'. As a result, there are no carry out or report rules. To
                            make it into a systematic and interesting action, we would need to
                            unlist the block showing rule and then to write carry out and report
                            rules: but usually for IF purposes we only need to make a handful of
                            special cases of showing work properly, and for those we can simply
                            write Instead rules to handle them.'
                        ROUTINE_NT'check an actor showing something to ( this is the can't show what you haven't got rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun'
                                        INVOCATION_NT'if the actor is not the holder of the noun'
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun'
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun'(test: [ NOT[ is('actor', 'the holder of the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [aren't] holding [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [aren't] holding [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [aren't] holding [the noun]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor showing something to ( this is the convert show to yourself to examine rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the second noun'
                                        INVOCATION_NT'if the actor is the second noun'
                                            CONDITION_CONTEXT_NT'actor is the second noun'
                                                TEST_PROPOSITION_NT'actor is the second noun'(test: [ is('actor', 'the second noun') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'convert to the examining action on the noun'
                                            INVOCATION_NT'convert to the examining action on the noun'
                                                RVALUE_CONTEXT_NT'examining action'
                                                    CONSTANT_NT'examining action'-action name
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'check an actor showing something to ( this is the block showing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The second noun] [are] unimpressed." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The second noun] [are] unimpressed." ( a )'
                                                INVOCATION_NT'"[The second noun] [are] unimpressed." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The second noun] [are] unimpressed." ( a )'
                                                        CONSTANT_NT'"[The second noun] [are] unimpressed." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'waking is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'waking'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the waking action translates into i6 as WakeOther'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'waking action'
                            PROPER_NOUN_NT'WakeOther'
                        SENTENCE_NT'the specification of the waking action is This is the act of jostling
                        a sleeping person to wake him or her up, and it finds its way into the
                        Standard Rules only for historical reasons. Inform does not by default
                        provide any model for people being asleep or awake, so this action does
                        not do anything in the standard implementation: instead, it is always
                        stopped by the block waking rule.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the waking action'
                                PROPER_NOUN_NT'waking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'This is the act of jostling
                            a sleeping person to wake him or her up, and it finds its way into the
                            Standard Rules only for historical reasons. Inform does not by default
                            provide any model for people being asleep or awake, so this action does
                            not do anything in the standard implementation: instead, it is always
                            stopped by the block waking rule.'
                        ROUTINE_NT'check an actor waking ( this is the block waking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "That [seem] unnecessary." ( a )'
                                            INVOCATION_LIST_SAY_NT'"That [seem] unnecessary." ( a )'
                                                INVOCATION_NT'"That [seem] unnecessary." ( a )'
                                                    RVALUE_CONTEXT_NT'"That [seem] unnecessary." ( a )'
                                                        CONSTANT_NT'"That [seem] unnecessary." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'throwing it at is an action applying to one carried thing and one visible thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'throwing it at'
                            PROPER_NOUN_NT'applying to one carried thing and one visible thing'
                        SENTENCE_NT'the throwing it at action translates into i6 as ThrowAt'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'throwing it at action'
                            PROPER_NOUN_NT'ThrowAt'
                        SENTENCE_NT'the specification of the throwing it at action is Throwing something at
                        someone or something is difficult for Inform to model. So many considerations
                        apply: just because the actor can see the target, does it follow that the
                        target can accurately hit it? What if the projectile is heavy, like an
                        anvil, or something not easily aimable, like a feather? What if there
                        is a barrier in the way, like a cage with bars spaced so that only items
                        of a certain size get through? And then: what should happen as a result?
                        Will the projectile break, or do damage, or fall to the floor, or into
                        a container or onto a supporter? And so on.Because it seems hopeless to try to model this in any general way,
                        Inform instead provides the action for the user to attach specific rules to.
                        The check rules in the Standard Rules simply require that the projectile
                        is not an item of clothing still worn (this will be relevant for women
                        attending a Tom Jones concert) but then, in either the 'futile to throw
                        things at inanimate objects rule' or the 'block throwing at rule', will
                        refuse to carry out the action with a bland message.To make throwing do something, then, we must either write Instead rules
                        for special circumstances, or else unlist these check rules and write
                        suitable carry out and report rules to pick up the thread.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the throwing it at action'
                                PROPER_NOUN_NT'throwing it at action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Throwing something at
                            someone or something is difficult for Inform to model. So many considerations
                            apply: just because the actor can see the target, does it follow that the
                            target can accurately hit it? What if the projectile is heavy, like an
                            anvil, or something not easily aimable, like a feather? What if there
                            is a barrier in the way, like a cage with bars spaced so that only items
                            of a certain size get through? And then: what should happen as a result?
                            Will the projectile break, or do damage, or fall to the floor, or into
                            a container or onto a supporter? And so on.Because it seems hopeless to try to model this in any general way,
                            Inform instead provides the action for the user to attach specific rules to.
                            The check rules in the Standard Rules simply require that the projectile
                            is not an item of clothing still worn (this will be relevant for women
                            attending a Tom Jones concert) but then, in either the 'futile to throw
                            things at inanimate objects rule' or the 'block throwing at rule', will
                            refuse to carry out the action with a bland message.To make throwing do something, then, we must either write Instead rules
                            for special circumstances, or else unlist these check rules and write
                            suitable carry out and report rules to pick up the thread.'
                        ROUTINE_NT'check an actor throwing something at ( this is the implicitly remove thrown clothing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is wearing the noun'
                                        INVOCATION_NT'if the actor is wearing the noun'
                                            CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "(first taking [the noun] off)[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first taking [the noun] off)[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try the actor trying taking off the noun'
                                            INVOCATION_NT'silently try the actor trying taking off the noun'
                                                RVALUE_CONTEXT_NT'actor trying taking off the noun'
                                                    CONSTANT_NT'actor trying taking off the noun'-action
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is wearing the noun'
                                                INVOCATION_NT'if the actor is wearing the noun'
                                                    CONDITION_CONTEXT_NT'actor is wearing the noun'
                                                        TEST_PROPOSITION_NT'actor is wearing the noun'(test: [ is('actor', {<schema: WearerOf(*1)>:'the noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'stop the action'
                                                    INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor throwing something at ( this is the futile to throw things at inanimate objects rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a person'
                                        INVOCATION_NT'if the second noun is not a person'
                                            CONDITION_CONTEXT_NT'second noun is not a person'
                                                TEST_PROPOSITION_NT'second noun is not a person'(test: [ NOT[ kind=person('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Futile." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Futile." ( a )'
                                                        INVOCATION_NT'"Futile." ( a )'
                                                            RVALUE_CONTEXT_NT'"Futile." ( a )'
                                                                CONSTANT_NT'"Futile." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor throwing something at ( this is the block throwing at rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [lack] the nerve when it [if story tense is the past
                                        tense]came[otherwise]comes[end if] to the crucial moment." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [lack] the nerve when it [if story tense is the past
                                            tense]came[otherwise]comes[end if] to the crucial moment." ( a )'
                                                INVOCATION_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                tense]came[otherwise]comes[end if] to the crucial moment." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                    tense]came[otherwise]comes[end if] to the crucial moment." ( a )'
                                                        CONSTANT_NT'"[We] [lack] the nerve when it [if story tense is the past
                                                        tense]came[otherwise]comes[end if] to the crucial moment." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'attacking is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'attacking'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the attacking action translates into i6 as Attack'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'attacking action'
                            PROPER_NOUN_NT'Attack'
                        SENTENCE_NT'the specification of the attacking action is Violence is seldom the answer,
                        and attempts to attack another person are normally blocked as being unrealistic
                        or not seriously meant. (I might find a shop assistant annoying, but IF is
                        not Grand Theft Auto, and responding by killing him is not really one of
                        my options.) So the Standard Rules simply block attempts to fight people,
                        but the action exists for rules to make exceptions.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the attacking action'
                                PROPER_NOUN_NT'attacking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Violence is seldom the answer,
                            and attempts to attack another person are normally blocked as being unrealistic
                            or not seriously meant. (I might find a shop assistant annoying, but IF is
                            not Grand Theft Auto, and responding by killing him is not really one of
                            my options.) So the Standard Rules simply block attempts to fight people,
                            but the action exists for rules to make exceptions.'
                        ROUTINE_NT'check an actor attacking ( this is the block attacking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "Violence [aren't] the answer to this one." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Violence [aren't] the answer to this one." ( a )'
                                                INVOCATION_NT'"Violence [aren't] the answer to this one." ( a )'
                                                    RVALUE_CONTEXT_NT'"Violence [aren't] the answer to this one." ( a )'
                                                        CONSTANT_NT'"Violence [aren't] the answer to this one." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'kissing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'kissing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the kissing action translates into i6 as Kiss'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'kissing action'
                            PROPER_NOUN_NT'Kiss'
                        SENTENCE_NT'the specification of the kissing action is Possibly because Inform was
                        originally written by an Englishman, attempts at kissing another person are
                        normally blocked as being unrealistic or not seriously meant. So the
                        Standard Rules simply block attempts to kiss people, but the action exists
                        for rules to make exceptions.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the kissing action'
                                PROPER_NOUN_NT'kissing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Possibly because Inform was
                            originally written by an Englishman, attempts at kissing another person are
                            normally blocked as being unrealistic or not seriously meant. So the
                            Standard Rules simply block attempts to kiss people, but the action exists
                            for rules to make exceptions.'
                        ROUTINE_NT'check an actor kissing ( this is the kissing yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is the actor'
                                        INVOCATION_NT'if the noun is the actor'
                                            CONDITION_CONTEXT_NT'noun is the actor'
                                                TEST_PROPOSITION_NT'noun is the actor'(test: [ is('noun', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [don't] get much from that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [don't] get much from that." ( a )'
                                                        INVOCATION_NT'"[We] [don't] get much from that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [don't] get much from that." ( a )'
                                                                CONSTANT_NT'"[We] [don't] get much from that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor kissing ( this is the block kissing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [might not] like that." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The noun] [might not] like that." ( a )'
                                                INVOCATION_NT'"[The noun] [might not] like that." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The noun] [might not] like that." ( a )'
                                                        CONSTANT_NT'"[The noun] [might not] like that." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'answering it that is an action applying to one thing and one topic'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'answering it that'
                            PROPER_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the answering it that action translates into i6 as Answer'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'answering it that action'
                            PROPER_NOUN_NT'Answer'
                        SENTENCE_NT'the specification of the answering it that action is The Standard Rules do
                        not include any systematic way to handle conversation: instead, Inform is
                        set up so that it is as easy as we can make it to write specific rules
                        handling speech in particular games, and so that if no such rules are
                        written then all attempts to communicate are gracefully if not very
                        interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                        tokens in square brackets: see the documentation on Understanding.Answering is an action existing so that the player can say something free-form
                        to somebody else. A convention of IF is that a command such as DAPHNE, TAKE
                        MASK is a request to Daphne to perform an action: if the persuasion rules in
                        force mean that she consents, the action 'Daphne taking the mask' does
                        indeed then result. But if the player types DAPHNE, 12375 or DAPHNE, GREAT
                        HEAVENS - or anything else not making sense as a command - the action
                        'answering Daphne that ...' will be generated.The name of the action arises because it is also caused by typing, say,
                        ANSWER 12375 when Daphne (say) has asked a question.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the answering it that action'
                                PROPER_NOUN_NT'answering it that action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to handle conversation: instead, Inform is
                            set up so that it is as easy as we can make it to write specific rules
                            handling speech in particular games, and so that if no such rules are
                            written then all attempts to communicate are gracefully if not very
                            interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                            tokens in square brackets: see the documentation on Understanding.Answering is an action existing so that the player can say something free-form
                            to somebody else. A convention of IF is that a command such as DAPHNE, TAKE
                            MASK is a request to Daphne to perform an action: if the persuasion rules in
                            force mean that she consents, the action 'Daphne taking the mask' does
                            indeed then result. But if the player types DAPHNE, 12375 or DAPHNE, GREAT
                            HEAVENS - or anything else not making sense as a command - the action
                            'answering Daphne that ...' will be generated.The name of the action arises because it is also caused by typing, say,
                            ANSWER 12375 when Daphne (say) has asked a question.'
                        ROUTINE_NT'report an actor answering something that ( this is the block answering rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] no reply." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[There] [are] no reply." ( a )'
                                                INVOCATION_NT'"[There] [are] no reply." ( a )'
                                                    RVALUE_CONTEXT_NT'"[There] [are] no reply." ( a )'
                                                        CONSTANT_NT'"[There] [are] no reply." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'telling it about is an action applying to one thing and one topic'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'telling it about'
                            PROPER_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the telling it about action translates into i6 as Tell'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'telling it about action'
                            PROPER_NOUN_NT'Tell'
                        SENTENCE_NT'the specification of the telling it about action is The Standard Rules do
                        not include any systematic way to handle conversation: instead, Inform is
                        set up so that it is as easy as we can make it to write specific rules
                        handling speech in particular games, and so that if no such rules are
                        written then all attempts to communicate are gracefully if not very
                        interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                        tokens in square brackets: see the documentation on Understanding.Telling is an action existing only to catch commands like TELL ALEX ABOUT
                        GUITAR. Customarily in IF, such a command is shorthand which the player
                        accepts as a conventional form: it means 'tell Alex what I now know about
                        the guitar' and would make sense if the player had himself recently
                        discovered something significant about the guitar which might interest
                        Alex.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the telling it about action'
                                PROPER_NOUN_NT'telling it about action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to handle conversation: instead, Inform is
                            set up so that it is as easy as we can make it to write specific rules
                            handling speech in particular games, and so that if no such rules are
                            written then all attempts to communicate are gracefully if not very
                            interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                            tokens in square brackets: see the documentation on Understanding.Telling is an action existing only to catch commands like TELL ALEX ABOUT
                            GUITAR. Customarily in IF, such a command is shorthand which the player
                            accepts as a conventional form: it means 'tell Alex what I now know about
                            the guitar' and would make sense if the player had himself recently
                            discovered something significant about the guitar which might interest
                            Alex.'
                        ROUTINE_NT'check an actor telling something about ( this is the telling yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the noun'
                                        INVOCATION_NT'if the actor is the noun'
                                            CONDITION_CONTEXT_NT'actor is the noun'
                                                TEST_PROPOSITION_NT'actor is the noun'(test: [ is('actor', 'the noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [talk] to [ourselves] a while." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [talk] to [ourselves] a while." ( a )'
                                                        INVOCATION_NT'"[We] [talk] to [ourselves] a while." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [talk] to [ourselves] a while." ( a )'
                                                                CONSTANT_NT'"[We] [talk] to [ourselves] a while." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor telling something about ( this is the block telling rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "This [provoke] no reaction." ( a )'
                                            INVOCATION_LIST_SAY_NT'"This [provoke] no reaction." ( a )'
                                                INVOCATION_NT'"This [provoke] no reaction." ( a )'
                                                    RVALUE_CONTEXT_NT'"This [provoke] no reaction." ( a )'
                                                        CONSTANT_NT'"This [provoke] no reaction." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'asking it about is an action applying to one thing and one topic'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'asking it about'
                            PROPER_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the asking it about action translates into i6 as Ask'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'asking it about action'
                            PROPER_NOUN_NT'Ask'
                        SENTENCE_NT'the specification of the asking it about action is The Standard Rules do
                        not include any systematic way to handle conversation: instead, Inform is
                        set up so that it is as easy as we can make it to write specific rules
                        handling speech in particular games, and so that if no such rules are
                        written then all attempts to communicate are gracefully if not very
                        interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                        tokens in square brackets: see the documentation on Understanding.Asking is an action existing only to catch commands like ASK STEPHEN ABOUT
                        PENELOPE. Customarily in IF, such a command is shorthand which the player
                        accepts as a conventional form: it means 'engage Mary in conversation and
                        try to find out what she might know about'. It's understood as a convention
                        of the genre that Mary should not be expected to respond in cases where
                        there is no reason to suppose that she has anything relevant to pass on -
                        ASK JANE ABOUT RICE PUDDING, for instance, need not conjure up a recipe
                        even if Jane is a 19th-century servant and therefore almost certainly
                        knows one.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the asking it about action'
                                PROPER_NOUN_NT'asking it about action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to handle conversation: instead, Inform is
                            set up so that it is as easy as we can make it to write specific rules
                            handling speech in particular games, and so that if no such rules are
                            written then all attempts to communicate are gracefully if not very
                            interestingly rejected.The topic here can be any double-quoted text, which can itself contain
                            tokens in square brackets: see the documentation on Understanding.Asking is an action existing only to catch commands like ASK STEPHEN ABOUT
                            PENELOPE. Customarily in IF, such a command is shorthand which the player
                            accepts as a conventional form: it means 'engage Mary in conversation and
                            try to find out what she might know about'. It's understood as a convention
                            of the genre that Mary should not be expected to respond in cases where
                            there is no reason to suppose that she has anything relevant to pass on -
                            ASK JANE ABOUT RICE PUDDING, for instance, need not conjure up a recipe
                            even if Jane is a 19th-century servant and therefore almost certainly
                            knows one.'
                        ROUTINE_NT'report an actor asking something about ( this is the block asking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There] [are] no reply." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[There] [are] no reply." ( a )'
                                                INVOCATION_NT'"[There] [are] no reply." ( a )'
                                                    RVALUE_CONTEXT_NT'"[There] [are] no reply." ( a )'
                                                        CONSTANT_NT'"[There] [are] no reply." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'asking it for is an action applying to two things'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'asking it for'
                            PROPER_NOUN_NT'applying to two things'
                        SENTENCE_NT'the asking it for action translates into i6 as AskFor'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'asking it for action'
                            PROPER_NOUN_NT'AskFor'
                        SENTENCE_NT'the specification of the asking it for action is The Standard Rules do
                        not include any systematic way to handle conversation, but this is
                        action is not quite conversation: it doesn't involve any spoken text as
                        such. It exists to catch commands like ASK SALLY FOR THE EGG WHISK,
                        where the whisk is something which Sally has and the player can see.Slightly oddly, but for historical reasons, an actor asking himself for
                        something is treated to an inventory listing instead. All other cases
                        are converted to the giving action: that is, ASK SALLY FOR THE EGG WHISK
                        is treated as if it were SALLY, GIVE ME THE EGG WHISK - an action for
                        Sally to perform and which then follows rules for giving.To ask for information or something intangible, see the asking it about
                        action.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the asking it for action'
                                PROPER_NOUN_NT'asking it for action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules do
                            not include any systematic way to handle conversation, but this is
                            action is not quite conversation: it doesn't involve any spoken text as
                            such. It exists to catch commands like ASK SALLY FOR THE EGG WHISK,
                            where the whisk is something which Sally has and the player can see.Slightly oddly, but for historical reasons, an actor asking himself for
                            something is treated to an inventory listing instead. All other cases
                            are converted to the giving action: that is, ASK SALLY FOR THE EGG WHISK
                            is treated as if it were SALLY, GIVE ME THE EGG WHISK - an action for
                            Sally to perform and which then follows rules for giving.To ask for information or something intangible, see the asking it about
                            action.'
                        ROUTINE_NT'check an actor asking something for ( this is the asking yourself for something rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the noun and the actor is the player'
                                        INVOCATION_NT'if the actor is the noun and the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the noun and the actor is the player'
                                                LOGICAL_AND_NT'actor is the noun and the actor is the player'
                                                    TEST_PROPOSITION_NT'actor is the noun'(test: [ is('actor', 'the noun') ])
                                                    TEST_PROPOSITION_NT'the actor is the player'(test: [ is('the actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try taking inventory'
                                            INVOCATION_NT'try taking inventory'
                                                RVALUE_CONTEXT_NT'taking inventory'
                                                    CONSTANT_NT'taking inventory'-action
                                        CODE_BLOCK_NT
                        ROUTINE_NT'check an actor asking something for ( this is the translate asking for to giving rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to request of the noun to perform giving it to action with the second noun and the actor'
                                    INVOCATION_NT'convert to request of the noun to perform giving it to action with the second noun and the actor'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                        RVALUE_CONTEXT_NT'giving it to action'
                                            CONSTANT_NT'giving it to action'-action name
                                        RVALUE_CONTEXT_NT'second noun'
                                            NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                                        RVALUE_CONTEXT_NT'actor'
                                            NONLOCAL_VARIABLE_NT'actor'('actor'(var)[person])
                    HEADING_NT'section 7 - standard actions which are checked but then do nothing unless rules intervene' (level 5)
                        SENTENCE_NT'waiting is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'waiting'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waiting action translates into i6 as Wait'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'waiting action'
                            PROPER_NOUN_NT'Wait'
                        SENTENCE_NT'the specification of the waiting action is The inaction action: where would
                        we be without waiting? Waiting does not cause time to pass by - that happens
                        anyway - but represents a positive choice by the actor not to fill that time.
                        It is an action so that rules can be attached to it: for instance, we could
                        imagine that a player who consciously decides to sit and wait might notice
                        something which a busy player does not, and we could write a rule accordingly.Note the absence of check or carry out rules - anyone can wait, at any time,
                        and it makes nothing happen.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the waiting action'
                                PROPER_NOUN_NT'waiting action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The inaction action: where would
                            we be without waiting? Waiting does not cause time to pass by - that happens
                            anyway - but represents a positive choice by the actor not to fill that time.
                            It is an action so that rules can be attached to it: for instance, we could
                            imagine that a player who consciously decides to sit and wait might notice
                            something which a busy player does not, and we could write a rule accordingly.Note the absence of check or carry out rules - anyone can wait, at any time,
                            and it makes nothing happen.'
                        ROUTINE_NT'report an actor waiting ( this is the standard report waiting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Time [pass]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Time [pass]." ( a )'
                                                        INVOCATION_NT'"Time [pass]." ( a )'
                                                            RVALUE_CONTEXT_NT'"Time [pass]." ( a )'
                                                                CONSTANT_NT'"Time [pass]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [wait]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wait]." ( b )'
                                                INVOCATION_NT'"[The actor] [wait]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [wait]." ( b )'
                                                        CONSTANT_NT'"[The actor] [wait]." ( b )'-text
                        SENTENCE_NT'touching is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'touching'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the touching action translates into i6 as Touch'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'touching action'
                            PROPER_NOUN_NT'Touch'
                        SENTENCE_NT'the specification of the touching action is Touching is just that, touching
                        something without applying pressure: a touch-sensitive screen or a living
                        creature might react, but a standard push-button or lever will probably not.In the Standard Rules there are no check touching rules, since touchability
                        is already a requirement of the noun for the action anyway, and no carry out
                        rules because nothing in the standard Inform world model reacts to
                        a mere touch - though report rules do mean that attempts to touch other
                        people provoke a special reply.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the touching action'
                                PROPER_NOUN_NT'touching action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Touching is just that, touching
                            something without applying pressure: a touch-sensitive screen or a living
                            creature might react, but a standard push-button or lever will probably not.In the Standard Rules there are no check touching rules, since touchability
                            is already a requirement of the noun for the action anyway, and no carry out
                            rules because nothing in the standard Inform world model reacts to
                            a mere touch - though report rules do mean that attempts to touch other
                            people provoke a special reply.'
                        ROUTINE_NT'report an actor touching ( this is the report touching yourself rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is the actor'
                                        INVOCATION_NT'if the noun is the actor'
                                            CONDITION_CONTEXT_NT'noun is the actor'
                                                TEST_PROPOSITION_NT'noun is the actor'(test: [ is('noun', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the action is not silent'
                                                        INVOCATION_NT'if the action is not silent'
                                                            CONDITION_CONTEXT_NT'action is not silent'
                                                                TEST_VALUE_NT'action is not silent'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                        INVOCATION_LIST_NT'action is not silent'
                                                                            INVOCATION_NT'action is not silent'
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[We] [achieve] nothing by this." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[We] [achieve] nothing by this." ( a )'
                                                                INVOCATION_NT'"[We] [achieve] nothing by this." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[We] [achieve] nothing by this." ( a )'
                                                                        CONSTANT_NT'"[We] [achieve] nothing by this." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT'say "[The actor] [touch] [themselves]." ( b )'
                                                    INVOCATION_LIST_SAY_NT'"[The actor] [touch] [themselves]." ( b )'
                                                        INVOCATION_NT'"[The actor] [touch] [themselves]." ( b )'
                                                            RVALUE_CONTEXT_NT'"[The actor] [touch] [themselves]." ( b )'
                                                                CONSTANT_NT'"[The actor] [touch] [themselves]." ( b )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor touching ( this is the report touching other people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the action is not silent'
                                                        INVOCATION_NT'if the action is not silent'
                                                            CONDITION_CONTEXT_NT'action is not silent'
                                                                TEST_VALUE_NT'action is not silent'
                                                                    PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                        INVOCATION_LIST_NT'action is not silent'
                                                                            INVOCATION_NT'action is not silent'
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                            INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                                INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                                    RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                        CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the noun is the player'
                                                        INVOCATION_NT'if the noun is the player'
                                                            CONDITION_CONTEXT_NT'noun is the player'
                                                                TEST_PROPOSITION_NT'noun is the player'(test: [ is('noun', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "[The actor] [touch] [us]." ( b )'
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [us]." ( b )'
                                                                INVOCATION_NT'"[The actor] [touch] [us]." ( b )'
                                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [us]." ( b )'
                                                                        CONSTANT_NT'"[The actor] [touch] [us]." ( b )'-text
                                                    CODE_BLOCK_NT'otherwise'
                                                        CODE_BLOCK_NT'say "[The actor] [touch] [the noun]." ( c )'
                                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [the noun]." ( c )'
                                                                INVOCATION_NT'"[The actor] [touch] [the noun]." ( c )'
                                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [the noun]." ( c )'
                                                                        CONSTANT_NT'"[The actor] [touch] [the noun]." ( c )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'continue the action'
                                    INVOCATION_NT'continue the action'
                        ROUTINE_NT'report an actor touching ( this is the report touching things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [feel] nothing unexpected." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [feel] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [feel] nothing unexpected." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [feel] nothing unexpected." ( a )'
                                                                CONSTANT_NT'"[We] [feel] nothing unexpected." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [touch] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [touch] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [touch] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [touch] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [touch] [the noun]." ( b )'-text
                        SENTENCE_NT'waving is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'waving'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the waving action translates into i6 as Wave'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'waving action'
                            PROPER_NOUN_NT'Wave'
                        SENTENCE_NT'the specification of the waving action is Waving in this sense is like
                        waving a sceptre: the item to be waved must be directly held (or worn)
                        by the actor.In the Standard Rules there are no carry out rules for this action because
                        nothing in the standard Inform world model which reacts to it. The action
                        is provided for authors to hang more interesting behaviour onto for special
                        cases: say, waving a particular rusty iron rod with a star on the end.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the waving action'
                                PROPER_NOUN_NT'waving action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Waving in this sense is like
                            waving a sceptre: the item to be waved must be directly held (or worn)
                            by the actor.In the Standard Rules there are no carry out rules for this action because
                            nothing in the standard Inform world model which reacts to it. The action
                            is provided for authors to hang more interesting behaviour onto for special
                            cases: say, waving a particular rusty iron rod with a star on the end.'
                        ROUTINE_NT'check an actor waving ( this is the can't wave what's not held rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is not the holder of the noun'
                                        INVOCATION_NT'if the actor is not the holder of the noun'
                                            CONDITION_CONTEXT_NT'actor is not the holder of the noun'
                                                TEST_PROPOSITION_NT'actor is not the holder of the noun'(test: [ NOT[ is('actor', 'the holder of the noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "But [we] [aren't] holding [regarding the noun][those]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a )'
                                                        INVOCATION_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a )'
                                                            RVALUE_CONTEXT_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a )'
                                                                CONSTANT_NT'"But [we] [aren't] holding [regarding the noun][those]." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor waving ( this is the report waving things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [wave] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [wave] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [wave] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [wave] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [wave] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [wave] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wave] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [wave] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [wave] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [wave] [the noun]." ( b )'-text
                        SENTENCE_NT'pulling is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'pulling'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the pulling action translates into i6 as Pull'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'pulling action'
                            PROPER_NOUN_NT'Pull'
                        SENTENCE_NT'the specification of the pulling action is Pulling is the act of pulling
                        something not grossly larger than the actor by an amount which would not
                        substantially move it.In the Standard Rules there are no carry out rules for this action because
                        nothing in the standard Inform world model which reacts to it. The action
                        is provided for authors to hang more interesting behaviour onto for special
                        cases: say, pulling a lever. ('The big red lever is a fixed in place device.
                        Instead of pulling the big red lever, try switching on the lever. Instead
                        of pushing the big red lever, try switching off the lever.')'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the pulling action'
                                PROPER_NOUN_NT'pulling action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Pulling is the act of pulling
                            something not grossly larger than the actor by an amount which would not
                            substantially move it.In the Standard Rules there are no carry out rules for this action because
                            nothing in the standard Inform world model which reacts to it. The action
                            is provided for authors to hang more interesting behaviour onto for special
                            cases: say, pulling a lever. ('The big red lever is a fixed in place device.
                            Instead of pulling the big red lever, try switching on the lever. Instead
                            of pushing the big red lever, try switching off the lever.')'
                        ROUTINE_NT'check an actor pulling ( this is the can't pull what's fixed in place rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is fixed in place'
                                        INVOCATION_NT'if the noun is fixed in place'
                                            CONDITION_CONTEXT_NT'noun is fixed in place'
                                                TEST_PROPOSITION_NT'noun is fixed in place'(test: [ A65'fixed in place'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pulling ( this is the can't pull scenery rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is scenery'
                                        INVOCATION_NT'if the noun is scenery'
                                            CONDITION_CONTEXT_NT'noun is scenery'
                                                TEST_PROPOSITION_NT'noun is scenery'(test: [ A67'scenery'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )'
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pulling ( this is the can't pull people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor pulling ( this is the report pulling rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )'
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )'
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [pull] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [pull] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [pull] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [pull] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [pull] [the noun]." ( b )'-text
                        SENTENCE_NT'pushing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'pushing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the pushing action translates into i6 as Push'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'pushing action'
                            PROPER_NOUN_NT'Push'
                        SENTENCE_NT'the specification of the pushing action is Pushing is the act of pushing
                        something not grossly larger than the actor by an amount which would not
                        substantially move it. (See also the pushing it to action, which involves
                        a longer-distance push between rooms.)In the Standard Rules there are no carry out rules for this action because
                        nothing in the standard Inform world model which reacts to it. The action
                        is provided for authors to hang more interesting behaviour onto for special
                        cases: say, pulling a lever. ('The big red lever is a fixed in place device.
                        Instead of pulling the big red lever, try switching on the lever. Instead
                        of pushing the big red lever, try switching off the lever.')'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the pushing action'
                                PROPER_NOUN_NT'pushing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Pushing is the act of pushing
                            something not grossly larger than the actor by an amount which would not
                            substantially move it. (See also the pushing it to action, which involves
                            a longer-distance push between rooms.)In the Standard Rules there are no carry out rules for this action because
                            nothing in the standard Inform world model which reacts to it. The action
                            is provided for authors to hang more interesting behaviour onto for special
                            cases: say, pulling a lever. ('The big red lever is a fixed in place device.
                            Instead of pulling the big red lever, try switching on the lever. Instead
                            of pushing the big red lever, try switching off the lever.')'
                        ROUTINE_NT'check an actor pushing something ( this is the can't push what's fixed in place rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is fixed in place'
                                        INVOCATION_NT'if the noun is fixed in place'
                                            CONDITION_CONTEXT_NT'noun is fixed in place'
                                                TEST_PROPOSITION_NT'noun is fixed in place'(test: [ A65'fixed in place'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something ( this is the can't push scenery rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is scenery'
                                        INVOCATION_NT'if the noun is scenery'
                                            CONDITION_CONTEXT_NT'noun is scenery'
                                                TEST_PROPOSITION_NT'noun is scenery'(test: [ A67'scenery'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )'
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something ( this is the can't push people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor pushing something ( this is the report pushing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )'
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )'
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [push] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [push] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [push] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [push] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [push] [the noun]." ( b )'-text
                        SENTENCE_NT'turning is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'turning'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the turning action translates into i6 as Turn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'turning action'
                            PROPER_NOUN_NT'Turn'
                        SENTENCE_NT'the specification of the turning action is Turning is the act of rotating
                        something - say, a dial.In the Standard Rules there are no carry out rules for this action because
                        nothing in the standard Inform world model which reacts to it. The action
                        is provided for authors to hang more interesting behaviour onto for special
                        cases: say, turning a capstan.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the turning action'
                                PROPER_NOUN_NT'turning action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Turning is the act of rotating
                            something - say, a dial.In the Standard Rules there are no carry out rules for this action because
                            nothing in the standard Inform world model which reacts to it. The action
                            is provided for authors to hang more interesting behaviour onto for special
                            cases: say, turning a capstan.'
                        ROUTINE_NT'check an actor turning ( this is the can't turn what's fixed in place rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is fixed in place'
                                        INVOCATION_NT'if the noun is fixed in place'
                                            CONDITION_CONTEXT_NT'noun is fixed in place'
                                                TEST_PROPOSITION_NT'noun is fixed in place'(test: [ A65'fixed in place'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [are] fixed in place." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They] [are] fixed in place." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor turning ( this is the can't turn scenery rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is scenery'
                                        INVOCATION_NT'if the noun is scenery'
                                            CONDITION_CONTEXT_NT'noun is scenery'
                                                TEST_PROPOSITION_NT'noun is scenery'(test: [ A67'scenery'('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [are] unable to." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [are] unable to." ( a )'
                                                        INVOCATION_NT'"[We] [are] unable to." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [are] unable to." ( a )'
                                                                CONSTANT_NT'"[We] [are] unable to." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor turning ( this is the can't turn people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor turning ( this is the report turning rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the prior named object is nothing'
                                                    CONDITION_CONTEXT_NT'the prior named object is nothing'
                                                CODE_BLOCK_NT'say "Nothing obvious [happen]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Nothing obvious [happen]." ( a )'
                                                        INVOCATION_NT'"Nothing obvious [happen]." ( a )'
                                                            RVALUE_CONTEXT_NT'"Nothing obvious [happen]." ( a )'
                                                                CONSTANT_NT'"Nothing obvious [happen]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [turn] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [turn] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [turn] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [turn] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [turn] [the noun]." ( b )'-text
                        SENTENCE_NT'pushing it to is an action applying to one thing and one visible thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'pushing it to'
                            PROPER_NOUN_NT'applying to one thing and one visible thing'
                        SENTENCE_NT'the pushing it to action translates into i6 as PushDir'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'pushing it to action'
                            PROPER_NOUN_NT'PushDir'
                        SENTENCE_NT'the specification of the pushing it to action is This action covers pushing
                        a large object, not being carried, so that the actor pushes it from one room
                        to another: for instance, pushing a bale of hay to the east.This is rapidly converted into a special form of the going action. If the
                        noun object has the either/or property 'pushable between rooms', then the
                        action is converted to going by the 'standard pushing in directions rule'.
                        If that going action succeeds, then the original pushing it to action
                        stops; it's only if that fails that we run on into the 'block pushing in
                        directions rule', which then puts an end to the matter.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the pushing it to action'
                                PROPER_NOUN_NT'pushing it to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'This action covers pushing
                            a large object, not being carried, so that the actor pushes it from one room
                            to another: for instance, pushing a bale of hay to the east.This is rapidly converted into a special form of the going action. If the
                            noun object has the either/or property 'pushable between rooms', then the
                            action is converted to going by the 'standard pushing in directions rule'.
                            If that going action succeeds, then the original pushing it to action
                            stops; it's only if that fails that we run on into the 'block pushing in
                            directions rule', which then puts an end to the matter.'
                        ROUTINE_NT'check an actor pushing something to ( this is the can't push unpushable things rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not pushable between rooms'
                                        INVOCATION_NT'if the noun is not pushable between rooms'
                                            CONDITION_CONTEXT_NT'noun is not pushable between rooms'
                                                TEST_PROPOSITION_NT'noun is not pushable between rooms'(test: [ NOT[ A69'pushable between rooms'('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from place to place." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed from place to place." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something to ( this is the can't push to non-directions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a direction'
                                        INVOCATION_NT'if the second noun is not a direction'
                                            CONDITION_CONTEXT_NT'second noun is not a direction'
                                                TEST_PROPOSITION_NT'second noun is not a direction'(test: [ NOT[ kind=direction('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[regarding the noun][They] [aren't] a direction." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[regarding the noun][They] [aren't] a direction." ( a )'
                                                        INVOCATION_NT'"[regarding the noun][They] [aren't] a direction." ( a )'
                                                            RVALUE_CONTEXT_NT'"[regarding the noun][They] [aren't] a direction." ( a )'
                                                                CONSTANT_NT'"[regarding the noun][They] [aren't] a direction." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something to ( this is the can't push vertically rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is up or the second noun is down'
                                        INVOCATION_NT'if the second noun is up or the second noun is down'
                                            CONDITION_CONTEXT_NT'second noun is up or the second noun is down'
                                                LOGICAL_OR_NT'second noun is up or the second noun is down'
                                                    TEST_PROPOSITION_NT'second noun is up'(test: [ is('second noun', 'up') ])
                                                    TEST_PROPOSITION_NT'the second noun is down'(test: [ is('the second noun', 'down') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed up or down." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed up or down." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed up or down." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed up or down." ( a )'
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed up or down." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something to ( this is the can't push from within rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun encloses the actor'
                                        INVOCATION_NT'if the noun encloses the actor'
                                            CONDITION_CONTEXT_NT'noun encloses the actor'
                                                TEST_PROPOSITION_NT'noun encloses the actor'(test: [ encloses('noun', 'the actor') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from here." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from here." ( a )'
                                                        INVOCATION_NT'"[The noun] [cannot] be pushed from here." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from here." ( a )'
                                                                CONSTANT_NT'"[The noun] [cannot] be pushed from here." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'check an actor pushing something to ( this is the standard pushing in directions rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'convert to special going-with-push action'
                                    INVOCATION_NT'convert to special going-with-push action'
                        ROUTINE_NT'check an actor pushing something to ( this is the block pushing in directions rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[The noun] [cannot] be pushed from place to place." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                INVOCATION_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                    RVALUE_CONTEXT_NT'"[The noun] [cannot] be pushed from place to place." ( a )'
                                                        CONSTANT_NT'"[The noun] [cannot] be pushed from place to place." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'squeezing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'squeezing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the squeezing action translates into i6 as Squeeze'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'squeezing action'
                            PROPER_NOUN_NT'Squeeze'
                        SENTENCE_NT'the specification of the squeezing action is Squeezing is an action which
                        can conveniently vary from squeezing something hand-held, like a washing-up
                        liquid bottle, right up to squeezing a pillar in a bear hug.In the Standard Rules there are no carry out rules for this action because
                        nothing in the standard Inform world model which reacts to it. The action
                        is provided for authors to hang more interesting behaviour onto for special
                        cases. A mildly fruity message is produced to players who attempt to
                        squeeze people, which is blocked by a check squeezing rule.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the squeezing action'
                                PROPER_NOUN_NT'squeezing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'Squeezing is an action which
                            can conveniently vary from squeezing something hand-held, like a washing-up
                            liquid bottle, right up to squeezing a pillar in a bear hug.In the Standard Rules there are no carry out rules for this action because
                            nothing in the standard Inform world model which reacts to it. The action
                            is provided for authors to hang more interesting behaviour onto for special
                            cases. A mildly fruity message is produced to players who attempt to
                            squeeze people, which is blocked by a check squeezing rule.'
                        ROUTINE_NT'check an actor squeezing ( this is the innuendo about squeezing people rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person'
                                        INVOCATION_NT'if the noun is a person'
                                            CONDITION_CONTEXT_NT'noun is a person'
                                                TEST_PROPOSITION_NT'noun is a person'(test: [ kind=person('noun') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor squeezing ( this is the report squeezing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [achieve] nothing by this." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [achieve] nothing by this." ( a )'
                                                        INVOCATION_NT'"[We] [achieve] nothing by this." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [achieve] nothing by this." ( a )'
                                                                CONSTANT_NT'"[We] [achieve] nothing by this." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [squeeze] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [squeeze] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [squeeze] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [squeeze] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [squeeze] [the noun]." ( b )'-text
                    HEADING_NT'section 8 - standard actions which always do nothing unless rules intervene' (level 5)
                        SENTENCE_NT'saying yes is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'saying yes'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying yes action translates into i6 as Yes'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'saying yes action'
                            PROPER_NOUN_NT'Yes'
                        SENTENCE_NT'the specification of the saying yes action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the saying yes action'
                                PROPER_NOUN_NT'saying yes action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor saying yes ( this is the block saying yes rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "That was a rhetorical question." ( a )'
                                            INVOCATION_LIST_SAY_NT'"That was a rhetorical question." ( a )'
                                                INVOCATION_NT'"That was a rhetorical question." ( a )'
                                                    RVALUE_CONTEXT_NT'"That was a rhetorical question." ( a )'
                                                        CONSTANT_NT'"That was a rhetorical question." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'saying no is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'saying no'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying no action translates into i6 as No'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'saying no action'
                            PROPER_NOUN_NT'No'
                        SENTENCE_NT'the specification of the saying no action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the saying no action'
                                PROPER_NOUN_NT'saying no action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor saying no ( this is the block saying no rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "That was a rhetorical question." ( a )'
                                            INVOCATION_LIST_SAY_NT'"That was a rhetorical question." ( a )'
                                                INVOCATION_NT'"That was a rhetorical question." ( a )'
                                                    RVALUE_CONTEXT_NT'"That was a rhetorical question." ( a )'
                                                        CONSTANT_NT'"That was a rhetorical question." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'burning is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'burning'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the burning action translates into i6 as Burn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'burning action'
                            PROPER_NOUN_NT'Burn'
                        SENTENCE_NT'the specification of the burning action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the burning action'
                                PROPER_NOUN_NT'burning action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor burning ( this is the block burning rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "This dangerous act [would achieve] little." ( a )'
                                            INVOCATION_LIST_SAY_NT'"This dangerous act [would achieve] little." ( a )'
                                                INVOCATION_NT'"This dangerous act [would achieve] little." ( a )'
                                                    RVALUE_CONTEXT_NT'"This dangerous act [would achieve] little." ( a )'
                                                        CONSTANT_NT'"This dangerous act [would achieve] little." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'waking up is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'waking up'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waking up action translates into i6 as Wake'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'waking up action'
                            PROPER_NOUN_NT'Wake'
                        SENTENCE_NT'the specification of the waking up action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the waking up action'
                                PROPER_NOUN_NT'waking up action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor waking up ( this is the block waking up rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "The dreadful truth [are], this [are not] a dream." ( a )'
                                            INVOCATION_LIST_SAY_NT'"The dreadful truth [are], this [are not] a dream." ( a )'
                                                INVOCATION_NT'"The dreadful truth [are], this [are not] a dream." ( a )'
                                                    RVALUE_CONTEXT_NT'"The dreadful truth [are], this [are not] a dream." ( a )'
                                                        CONSTANT_NT'"The dreadful truth [are], this [are not] a dream." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'thinking is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'thinking'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the thinking action translates into i6 as Think'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'thinking action'
                            PROPER_NOUN_NT'Think'
                        SENTENCE_NT'the specification of the thinking action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the thinking action'
                                PROPER_NOUN_NT'thinking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor thinking ( this is the block thinking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "What a good idea." ( a )'
                                            INVOCATION_LIST_SAY_NT'"What a good idea." ( a )'
                                                INVOCATION_NT'"What a good idea." ( a )'
                                                    RVALUE_CONTEXT_NT'"What a good idea." ( a )'
                                                        CONSTANT_NT'"What a good idea." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'smelling is an action applying to nothing or one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'smelling'
                            PROPER_NOUN_NT'applying to nothing or one thing'
                        SENTENCE_NT'the smelling action translates into i6 as Smell'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'smelling action'
                            PROPER_NOUN_NT'Smell'
                        SENTENCE_NT'the specification of the smelling action is The Standard Rules define this action in only a minimal way, replying only
                        that the player smells nothing unexpected.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the smelling action'
                                PROPER_NOUN_NT'smelling action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, replying only
                            that the player smells nothing unexpected.'
                        ROUTINE_NT'report an actor smelling ( this is the report smelling rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [smell] nothing unexpected." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [smell] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [smell] nothing unexpected." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [smell] nothing unexpected." ( a )'
                                                                CONSTANT_NT'"[We] [smell] nothing unexpected." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [sniff]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [sniff]." ( b )'
                                                INVOCATION_NT'"[The actor] [sniff]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [sniff]." ( b )'
                                                        CONSTANT_NT'"[The actor] [sniff]." ( b )'-text
                        SENTENCE_NT'listening to is an action applying to nothing or one thing and abbreviable'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'listening to'
                            PROPER_NOUN_NT'applying to nothing or one thing and abbreviable'
                        SENTENCE_NT'the listening to action translates into i6 as Listen'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'listening to action'
                            PROPER_NOUN_NT'Listen'
                        SENTENCE_NT'the specification of the listening to action is The Standard Rules define this action in only a minimal way, replying only
                        that the player hears nothing unexpected.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the listening to action'
                                PROPER_NOUN_NT'listening to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, replying only
                            that the player hears nothing unexpected.'
                        ROUTINE_NT'report an actor listening to ( this is the report listening rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [hear] nothing unexpected." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [hear] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [hear] nothing unexpected." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [hear] nothing unexpected." ( a )'
                                                                CONSTANT_NT'"[We] [hear] nothing unexpected." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [listen]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [listen]." ( b )'
                                                INVOCATION_NT'"[The actor] [listen]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [listen]." ( b )'
                                                        CONSTANT_NT'"[The actor] [listen]." ( b )'-text
                        SENTENCE_NT'tasting is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'tasting'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the tasting action translates into i6 as Taste'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'tasting action'
                            PROPER_NOUN_NT'Taste'
                        SENTENCE_NT'the specification of the tasting action is The Standard Rules define this action in only a minimal way, replying only
                        that the player tastes nothing unexpected.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the tasting action'
                                PROPER_NOUN_NT'tasting action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, replying only
                            that the player tastes nothing unexpected.'
                        ROUTINE_NT'report an actor tasting ( this is the report tasting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [taste] nothing unexpected." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [taste] nothing unexpected." ( a )'
                                                        INVOCATION_NT'"[We] [taste] nothing unexpected." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [taste] nothing unexpected." ( a )'
                                                                CONSTANT_NT'"[We] [taste] nothing unexpected." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [taste] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [taste] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [taste] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [taste] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [taste] [the noun]." ( b )'-text
                        SENTENCE_NT'cutting is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'cutting'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the cutting action translates into i6 as Cut'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'cutting action'
                            PROPER_NOUN_NT'Cut'
                        SENTENCE_NT'the specification of the cutting action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the cutting action'
                                PROPER_NOUN_NT'cutting action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor cutting ( this is the block cutting rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Cutting [regarding the noun][them] up [would achieve] little." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Cutting [regarding the noun][them] up [would achieve] little." ( a )'
                                                INVOCATION_NT'"Cutting [regarding the noun][them] up [would achieve] little." ( a )'
                                                    RVALUE_CONTEXT_NT'"Cutting [regarding the noun][them] up [would achieve] little." ( a )'
                                                        CONSTANT_NT'"Cutting [regarding the noun][them] up [would achieve] little." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'jumping is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'jumping'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the jumping action translates into i6 as Jump'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'jumping action'
                            PROPER_NOUN_NT'Jump'
                        SENTENCE_NT'the specification of the jumping action is The Standard Rules define this action in only a minimal way, simply reporting
                        a little jump on the spot.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the jumping action'
                                PROPER_NOUN_NT'jumping action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, simply reporting
                            a little jump on the spot.'
                        ROUTINE_NT'report an actor jumping ( this is the report jumping rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [jump] on the spot." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [jump] on the spot." ( a )'
                                                        INVOCATION_NT'"[We] [jump] on the spot." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [jump] on the spot." ( a )'
                                                                CONSTANT_NT'"[We] [jump] on the spot." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [jump] on the spot." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [jump] on the spot." ( b )'
                                                INVOCATION_NT'"[The actor] [jump] on the spot." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [jump] on the spot." ( b )'
                                                        CONSTANT_NT'"[The actor] [jump] on the spot." ( b )'-text
                        SENTENCE_NT'tying it to is an action applying to two things'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'tying it to'
                            PROPER_NOUN_NT'applying to two things'
                        SENTENCE_NT'the tying it to action translates into i6 as Tie'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'tying it to action'
                            PROPER_NOUN_NT'Tie'
                        SENTENCE_NT'the specification of the tying it to action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the tying it to action'
                                PROPER_NOUN_NT'tying it to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor tying something to ( this is the block tying rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [would achieve] nothing by this." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [would achieve] nothing by this." ( a )'
                                                INVOCATION_NT'"[We] [would achieve] nothing by this." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [would achieve] nothing by this." ( a )'
                                                        CONSTANT_NT'"[We] [would achieve] nothing by this." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'drinking is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'drinking'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the drinking action translates into i6 as Drink'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'drinking action'
                            PROPER_NOUN_NT'Drink'
                        SENTENCE_NT'the specification of the drinking action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the drinking action'
                                PROPER_NOUN_NT'drinking action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor drinking ( this is the block drinking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There's] nothing suitable to drink here." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[There's] nothing suitable to drink here." ( a )'
                                                INVOCATION_NT'"[There's] nothing suitable to drink here." ( a )'
                                                    RVALUE_CONTEXT_NT'"[There's] nothing suitable to drink here." ( a )'
                                                        CONSTANT_NT'"[There's] nothing suitable to drink here." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'saying sorry is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'saying sorry'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the saying sorry action translates into i6 as Sorry'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'saying sorry action'
                            PROPER_NOUN_NT'Sorry'
                        SENTENCE_NT'the specification of the saying sorry action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the saying sorry action'
                                PROPER_NOUN_NT'saying sorry action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor saying sorry ( this is the block saying sorry rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Oh, don't [if American dialect option is
                                        active]apologize[otherwise]apologise[end if]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Oh, don't [if American dialect option is
                                            active]apologize[otherwise]apologise[end if]." ( a )'
                                                INVOCATION_NT'"Oh, don't [if American dialect option is
                                                active]apologize[otherwise]apologise[end if]." ( a )'
                                                    RVALUE_CONTEXT_NT'"Oh, don't [if American dialect option is
                                                    active]apologize[otherwise]apologise[end if]." ( a )'
                                                        CONSTANT_NT'"Oh, don't [if American dialect option is
                                                        active]apologize[otherwise]apologise[end if]." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'swinging is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'swinging'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the swinging action translates into i6 as Swing'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'swinging action'
                            PROPER_NOUN_NT'Swing'
                        SENTENCE_NT'the specification of the swinging action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the swinging action'
                                PROPER_NOUN_NT'swinging action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor swinging ( this is the block swinging rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "[There's] nothing sensible to swing here." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[There's] nothing sensible to swing here." ( a )'
                                                INVOCATION_NT'"[There's] nothing sensible to swing here." ( a )'
                                                    RVALUE_CONTEXT_NT'"[There's] nothing sensible to swing here." ( a )'
                                                        CONSTANT_NT'"[There's] nothing sensible to swing here." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'rubbing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'rubbing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the rubbing action translates into i6 as Rub'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'rubbing action'
                            PROPER_NOUN_NT'Rub'
                        SENTENCE_NT'the specification of the rubbing action is The Standard Rules define this action in only a minimal way, simply reporting
                        that it has happened.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the rubbing action'
                                PROPER_NOUN_NT'rubbing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, simply reporting
                            that it has happened.'
                        ROUTINE_NT'check an actor rubbing ( this is the can't rub another person rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is a person who is not the actor'
                                        INVOCATION_NT'if the noun is a person who is not the actor'
                                            CONDITION_CONTEXT_NT'noun is a person who is not the actor'
                                                TEST_PROPOSITION_NT'noun is a person who is not the actor'(test: [ kind=person('noun') ^ NOT[ is('noun', 'the actor') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the actor is the player'
                                                INVOCATION_NT'if the actor is the player'
                                                    CONDITION_CONTEXT_NT'actor is the player'
                                                        TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The noun] [might not like] that." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The noun] [might not like] that." ( a )'
                                                        INVOCATION_NT'"[The noun] [might not like] that." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The noun] [might not like] that." ( a )'
                                                                CONSTANT_NT'"[The noun] [might not like] that." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'report an actor rubbing ( this is the report rubbing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [rub] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [rub] [the noun]." ( a )'
                                                        INVOCATION_NT'"[We] [rub] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [rub] [the noun]." ( a )'
                                                                CONSTANT_NT'"[We] [rub] [the noun]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [rub] [the noun]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [rub] [the noun]." ( b )'
                                                INVOCATION_NT'"[The actor] [rub] [the noun]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [rub] [the noun]." ( b )'
                                                        CONSTANT_NT'"[The actor] [rub] [the noun]." ( b )'-text
                        SENTENCE_NT'setting it to is an action applying to one thing and one topic'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'setting it to'
                            PROPER_NOUN_NT'applying to one thing and one topic'
                        SENTENCE_NT'the setting it to action translates into i6 as SetTo'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'setting it to action'
                            PROPER_NOUN_NT'SetTo'
                        SENTENCE_NT'the specification of the setting it to action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the setting it to action'
                                PROPER_NOUN_NT'setting it to action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor setting something to ( this is the block setting it to rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "No, [we] [can't set] [regarding the noun][those] to anything." ( a )'
                                            INVOCATION_LIST_SAY_NT'"No, [we] [can't set] [regarding the noun][those] to anything." ( a )'
                                                INVOCATION_NT'"No, [we] [can't set] [regarding the noun][those] to anything." ( a )'
                                                    RVALUE_CONTEXT_NT'"No, [we] [can't set] [regarding the noun][those] to anything." ( a )'
                                                        CONSTANT_NT'"No, [we] [can't set] [regarding the noun][those] to anything." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'waving hands is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'waving hands'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the waving hands action translates into i6 as WaveHands'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'waving hands action'
                            PROPER_NOUN_NT'WaveHands'
                        SENTENCE_NT'the specification of the waving hands action is The Standard Rules define this action in only a minimal way, simply reporting
                        a little wave of the hands.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the waving hands action'
                                PROPER_NOUN_NT'waving hands action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, simply reporting
                            a little wave of the hands.'
                        ROUTINE_NT'report an actor waving hands ( this is the report waving hands rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the action is not silent'
                                                INVOCATION_NT'if the action is not silent'
                                                    CONDITION_CONTEXT_NT'action is not silent'
                                                        TEST_VALUE_NT'action is not silent'
                                                            PHRASE_TO_DECIDE_VALUE_NT'action is not silent'
                                                                INVOCATION_LIST_NT'action is not silent'
                                                                    INVOCATION_NT'action is not silent'
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[We] [wave]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[We] [wave]." ( a )'
                                                        INVOCATION_NT'"[We] [wave]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[We] [wave]." ( a )'
                                                                CONSTANT_NT'"[We] [wave]." ( a )'-text
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "[The actor] [wave]." ( b )'
                                            INVOCATION_LIST_SAY_NT'"[The actor] [wave]." ( b )'
                                                INVOCATION_NT'"[The actor] [wave]." ( b )'
                                                    RVALUE_CONTEXT_NT'"[The actor] [wave]." ( b )'
                                                        CONSTANT_NT'"[The actor] [wave]." ( b )'-text
                        SENTENCE_NT'buying is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'buying'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the buying action translates into i6 as Buy'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'buying action'
                            PROPER_NOUN_NT'Buy'
                        SENTENCE_NT'the specification of the buying action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the buying action'
                                PROPER_NOUN_NT'buying action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor buying ( this is the block buying rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the prior named object is nothing'
                                            CONDITION_CONTEXT_NT'the prior named object is nothing'
                                        CODE_BLOCK_NT'say "Nothing [are] on sale." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Nothing [are] on sale." ( a )'
                                                INVOCATION_NT'"Nothing [are] on sale." ( a )'
                                                    RVALUE_CONTEXT_NT'"Nothing [are] on sale." ( a )'
                                                        CONSTANT_NT'"Nothing [are] on sale." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'climbing is an action applying to one thing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'climbing'
                            PROPER_NOUN_NT'applying to one thing'
                        SENTENCE_NT'the climbing action translates into i6 as Climb'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'climbing action'
                            PROPER_NOUN_NT'Climb'
                        SENTENCE_NT'the specification of the climbing action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the climbing action'
                                PROPER_NOUN_NT'climbing action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor climbing ( this is the block climbing rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "Little [are] to be achieved by that." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Little [are] to be achieved by that." ( a )'
                                                INVOCATION_NT'"Little [are] to be achieved by that." ( a )'
                                                    RVALUE_CONTEXT_NT'"Little [are] to be achieved by that." ( a )'
                                                        CONSTANT_NT'"Little [are] to be achieved by that." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                        SENTENCE_NT'sleeping is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'sleeping'
                            PROPER_NOUN_NT'applying to nothing'
                        SENTENCE_NT'the sleeping action translates into i6 as Sleep'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'sleeping action'
                            PROPER_NOUN_NT'Sleep'
                        SENTENCE_NT'the specification of the sleeping action is The Standard Rules define this action in only a minimal way, blocking it
                        with a check rule which stops it in all cases. It exists so that before
                        or instead rules can be written to make it do interesting things in special
                        cases. (Or to reconstruct the action as something more substantial, unlist
                        the block rule and supply carry out and report rules, together perhaps
                        with some further check rules.)'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of the sleeping action'
                                PROPER_NOUN_NT'sleeping action'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'The Standard Rules define this action in only a minimal way, blocking it
                            with a check rule which stops it in all cases. It exists so that before
                            or instead rules can be written to make it do interesting things in special
                            cases. (Or to reconstruct the action as something more substantial, unlist
                            the block rule and supply carry out and report rules, together perhaps
                            with some further check rules.)'
                        ROUTINE_NT'check an actor sleeping ( this is the block sleeping rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the actor is the player'
                                        INVOCATION_NT'if the actor is the player'
                                            CONDITION_CONTEXT_NT'actor is the player'
                                                TEST_PROPOSITION_NT'actor is the player'(test: [ is('actor', 'the player') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT'say "[We] [aren't] feeling especially drowsy." ( a )'
                                            INVOCATION_LIST_SAY_NT'"[We] [aren't] feeling especially drowsy." ( a )'
                                                INVOCATION_NT'"[We] [aren't] feeling especially drowsy." ( a )'
                                                    RVALUE_CONTEXT_NT'"[We] [aren't] feeling especially drowsy." ( a )'
                                                        CONSTANT_NT'"[We] [aren't] feeling especially drowsy." ( a )'-text
                                INVOCATION_LIST_NT'stop the action'
                                    INVOCATION_NT'stop the action'
                    HEADING_NT'section 9 - standard actions which happen out of world' (level 5)
                        SENTENCE_NT'quitting the game is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'quitting the game'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the quitting the game action translates into i6 as Quit'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'quitting the game action'
                            PROPER_NOUN_NT'Quit'
                        SENTENCE_NT'the quit the game rule is listed in the carry out quitting the game rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the quit the game rule'
                            PROPER_NOUN_NT'in the carry out quitting the game rulebook'
                        SENTENCE_NT'the quit the game rule translates into i6 as QUIT_THE_GAME_R with "Are you sure you want to quit? " ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'quit the game rule'
                            PROPER_NOUN_NT'QUIT_THE_GAME_R'
                                PROPER_NOUN_NT'"Are you sure you want to quit? " ( a )'
                        SENTENCE_NT'saving the game is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'saving the game'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the saving the game action translates into i6 as Save'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'saving the game action'
                            PROPER_NOUN_NT'Save'
                        SENTENCE_NT'the save the game rule is listed in the carry out saving the game rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the save the game rule'
                            PROPER_NOUN_NT'in the carry out saving the game rulebook'
                        SENTENCE_NT'the save the game rule translates into i6 as SAVE_THE_GAME_R with "Save failed." ( a ) , "Ok." ( b )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'save the game rule'
                            PROPER_NOUN_NT'SAVE_THE_GAME_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"Save failed." ( a )'
                                    PROPER_NOUN_NT'"Ok." ( b )'
                        SENTENCE_NT'restoring the game is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'restoring the game'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the restoring the game action translates into i6 as Restore'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'restoring the game action'
                            PROPER_NOUN_NT'Restore'
                        SENTENCE_NT'the restore the game rule is listed in the carry out restoring the game rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the restore the game rule'
                            PROPER_NOUN_NT'in the carry out restoring the game rulebook'
                        SENTENCE_NT'the restore the game rule translates into i6 as RESTORE_THE_GAME_R with "Restore failed." ( a ) , "Ok." ( b )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'restore the game rule'
                            PROPER_NOUN_NT'RESTORE_THE_GAME_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"Restore failed." ( a )'
                                    PROPER_NOUN_NT'"Ok." ( b )'
                        SENTENCE_NT'restarting the game is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'restarting the game'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the restarting the game action translates into i6 as Restart'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'restarting the game action'
                            PROPER_NOUN_NT'Restart'
                        SENTENCE_NT'the restart the game rule is listed in the carry out restarting the game rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the restart the game rule'
                            PROPER_NOUN_NT'in the carry out restarting the game rulebook'
                        SENTENCE_NT'the restart the game rule translates into i6 as RESTART_THE_GAME_R with "Are you sure you want to restart? " ( a ) , "Failed." ( b )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'restart the game rule'
                            PROPER_NOUN_NT'RESTART_THE_GAME_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"Are you sure you want to restart? " ( a )'
                                    PROPER_NOUN_NT'"Failed." ( b )'
                        SENTENCE_NT'verifying the story file is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'verifying the story file'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the verifying the story file action translates into i6 as Verify'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'verifying the story file action'
                            PROPER_NOUN_NT'Verify'
                        SENTENCE_NT'the verify the story file rule is listed in the carry out verifying the story file rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the verify the story file rule'
                            PROPER_NOUN_NT'in the carry out verifying the story file rulebook'
                        SENTENCE_NT'the verify the story file rule translates into i6 as VERIFY_THE_STORY_FILE_R with "The game file has verified as intact." ( a ) , "The game file did not verify as intact, and may be corrupt." ( b )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'verify the story file rule'
                            PROPER_NOUN_NT'VERIFY_THE_STORY_FILE_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"The game file has verified as intact." ( a )'
                                    PROPER_NOUN_NT'"The game file did not verify as intact, and may be corrupt." ( b )'
                        SENTENCE_NT'switching the story transcript on is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching the story transcript on'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching the story transcript on action translates into i6 as ScriptOn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching the story transcript on action'
                            PROPER_NOUN_NT'ScriptOn'
                        SENTENCE_NT'the switch the story transcript on rule is listed in the carry out switching the story transcript on rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the switch the story transcript on rule'
                            PROPER_NOUN_NT'in the carry out switching the story transcript on rulebook'
                        SENTENCE_NT'the switch the story transcript on rule translates into i6 as SWITCH_TRANSCRIPT_ON_R with "Transcripting is already on." ( a ) , "Start of a transcript of" ( b ) , "Attempt to begin transcript failed." ( c )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switch the story transcript on rule'
                            PROPER_NOUN_NT'SWITCH_TRANSCRIPT_ON_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"Transcripting is already on." ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'"Start of a transcript of" ( b )'
                                        PROPER_NOUN_NT'"Attempt to begin transcript failed." ( c )'
                        SENTENCE_NT'switching the story transcript off is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching the story transcript off'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching the story transcript off action translates into i6 as ScriptOff'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching the story transcript off action'
                            PROPER_NOUN_NT'ScriptOff'
                        SENTENCE_NT'the switch the story transcript off rule is listed in the carry out switching the story transcript off rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the switch the story transcript off rule'
                            PROPER_NOUN_NT'in the carry out switching the story transcript off rulebook'
                        SENTENCE_NT'the switch the story transcript off rule translates into i6 as SWITCH_TRANSCRIPT_OFF_R with "Transcripting is already off." ( a ) , "[line break]End of transcript." ( b ) , "Attempt to end transcript failed." ( c )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switch the story transcript off rule'
                            PROPER_NOUN_NT'SWITCH_TRANSCRIPT_OFF_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"Transcripting is already off." ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'"[line break]End of transcript." ( b )'
                                        PROPER_NOUN_NT'"Attempt to end transcript failed." ( c )'
                        SENTENCE_NT'requesting the story file version is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'requesting the story file version'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the story file version action translates into i6 as Version'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'requesting the story file version action'
                            PROPER_NOUN_NT'Version'
                        SENTENCE_NT'the announce the story file version rule is listed in the carry out requesting the story file version rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the announce the story file version rule'
                            PROPER_NOUN_NT'in the carry out requesting the story file version rulebook'
                        SENTENCE_NT'the announce the story file version rule translates into i6 as ANNOUNCE_STORY_FILE_VERSION_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'announce the story file version rule'
                            PROPER_NOUN_NT'ANNOUNCE_STORY_FILE_VERSION_R'
                        SENTENCE_NT'requesting the score is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'requesting the score'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the score action translates into i6 as Score'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'requesting the score action'
                            PROPER_NOUN_NT'Score'
                        SENTENCE_NT'the announce the score rule is listed in the carry out requesting the score rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the announce the score rule'
                            PROPER_NOUN_NT'in the carry out requesting the score rulebook'
                        SENTENCE_NT'the announce the score rule translates into i6 as ANNOUNCE_SCORE_R with "[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
                        [score] out of a possible [maximum score], in [turn count] turn[s]" ( a ) , ", earning you the rank of " ( b ) , "[There] [are] no score in this story." ( c ) , "[bracket]Your score has just gone up by [number understood in words]
                        point[s].[close bracket]" ( d ) , "[bracket]Your score has just gone down by [number understood in words]
                        point[s].[close bracket]" ( e )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'announce the score rule'
                            PROPER_NOUN_NT'ANNOUNCE_SCORE_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"[if the story has ended]In that game you scored[otherwise]You have so far scored[end if]
                                    [score] out of a possible [maximum score], in [turn count] turn[s]" ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'", earning you the rank of " ( b )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"[There] [are] no score in this story." ( c )'
                                            AND_NT','
                                                PROPER_NOUN_NT'"[bracket]Your score has just gone up by [number understood in words]
                                                point[s].[close bracket]" ( d )'
                                                PROPER_NOUN_NT'"[bracket]Your score has just gone down by [number understood in words]
                                                point[s].[close bracket]" ( e )'
                        SENTENCE_NT'preferring abbreviated room descriptions is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'preferring abbreviated room descriptions'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring abbreviated room descriptions action translates into i6 as LMode3'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'preferring abbreviated room descriptions action'
                            PROPER_NOUN_NT'LMode3'
                        SENTENCE_NT'the prefer abbreviated room descriptions rule is listed in the carry out preferring abbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the prefer abbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the carry out preferring abbreviated room descriptions rulebook'
                        SENTENCE_NT'the prefer abbreviated room descriptions rule translates into i6 as PREFER_ABBREVIATED_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'prefer abbreviated room descriptions rule'
                            PROPER_NOUN_NT'PREFER_ABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring abbreviated room descriptions rule is listed in the report preferring abbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard report preferring abbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the report preferring abbreviated room descriptions rulebook'
                        SENTENCE_NT'the standard report preferring abbreviated room descriptions rule translates into i6 as REP_PREFER_ABBREVIATED_R with " is now in its 'superbrief' mode, which always gives short descriptions
                        of locations (even if you haven't been there before)." ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard report preferring abbreviated room descriptions rule'
                            PROPER_NOUN_NT'REP_PREFER_ABBREVIATED_R'
                                PROPER_NOUN_NT'" is now in its 'superbrief' mode, which always gives short descriptions
                                of locations (even if you haven't been there before)." ( a )'
                        SENTENCE_NT'preferring unabbreviated room descriptions is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'preferring unabbreviated room descriptions'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring unabbreviated room descriptions action translates into i6 as LMode2'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'preferring unabbreviated room descriptions action'
                            PROPER_NOUN_NT'LMode2'
                        SENTENCE_NT'the prefer unabbreviated room descriptions rule is listed in the carry out preferring unabbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the prefer unabbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the carry out preferring unabbreviated room descriptions rulebook'
                        SENTENCE_NT'the prefer unabbreviated room descriptions rule translates into i6 as PREFER_UNABBREVIATED_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'prefer unabbreviated room descriptions rule'
                            PROPER_NOUN_NT'PREFER_UNABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring unabbreviated room descriptions rule is listed in the report preferring unabbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard report preferring unabbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the report preferring unabbreviated room descriptions rulebook'
                        SENTENCE_NT'the standard report preferring unabbreviated room descriptions rule translates into i6 as REP_PREFER_UNABBREVIATED_R with " is now in its 'verbose' mode, which always gives long descriptions of
                        locations (even if you've been there before)." ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard report preferring unabbreviated room descriptions rule'
                            PROPER_NOUN_NT'REP_PREFER_UNABBREVIATED_R'
                                PROPER_NOUN_NT'" is now in its 'verbose' mode, which always gives long descriptions of
                                locations (even if you've been there before)." ( a )'
                        SENTENCE_NT'preferring sometimes abbreviated room descriptions is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'preferring sometimes abbreviated room descriptions'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the preferring sometimes abbreviated room descriptions action translates into i6 as LMode1'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'preferring sometimes abbreviated room descriptions action'
                            PROPER_NOUN_NT'LMode1'
                        SENTENCE_NT'the prefer sometimes abbreviated room descriptions rule is listed in the carry out preferring sometimes abbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the prefer sometimes abbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the carry out preferring sometimes abbreviated room descriptions rulebook'
                        SENTENCE_NT'the prefer sometimes abbreviated room descriptions rule translates into i6 as PREFER_SOMETIMES_ABBREVIATED_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'prefer sometimes abbreviated room descriptions rule'
                            PROPER_NOUN_NT'PREFER_SOMETIMES_ABBREVIATED_R'
                        SENTENCE_NT'the standard report preferring sometimes abbreviated room descriptions rule is listed in the report preferring sometimes abbreviated room descriptions rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard report preferring sometimes abbreviated room descriptions rule'
                            PROPER_NOUN_NT'in the report preferring sometimes abbreviated room descriptions rulebook'
                        SENTENCE_NT'the standard report preferring sometimes abbreviated room descriptions rule translates into i6 as REP_PREFER_SOMETIMES_ABBR_R with " is now in its 'brief' printing mode, which gives long descriptions
                        of places never before visited and short descriptions otherwise." ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard report preferring sometimes abbreviated room descriptions rule'
                            PROPER_NOUN_NT'REP_PREFER_SOMETIMES_ABBR_R'
                                PROPER_NOUN_NT'" is now in its 'brief' printing mode, which gives long descriptions
                                of places never before visited and short descriptions otherwise." ( a )'
                        SENTENCE_NT'switching score notification on is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching score notification on'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching score notification on action translates into i6 as NotifyOn'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching score notification on action'
                            PROPER_NOUN_NT'NotifyOn'
                        SENTENCE_NT'the switch score notification on rule is listed in the carry out switching score notification on rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the switch score notification on rule'
                            PROPER_NOUN_NT'in the carry out switching score notification on rulebook'
                        SENTENCE_NT'the switch score notification on rule translates into i6 as SWITCH_SCORE_NOTIFY_ON_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switch score notification on rule'
                            PROPER_NOUN_NT'SWITCH_SCORE_NOTIFY_ON_R'
                        SENTENCE_NT'the standard report switching score notification on rule is listed in the report switching score notification on rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard report switching score notification on rule'
                            PROPER_NOUN_NT'in the report switching score notification on rulebook'
                        SENTENCE_NT'the standard report switching score notification on rule translates into i6 as REP_SWITCH_NOTIFY_ON_R with "Score notification on." ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard report switching score notification on rule'
                            PROPER_NOUN_NT'REP_SWITCH_NOTIFY_ON_R'
                                PROPER_NOUN_NT'"Score notification on." ( a )'
                        SENTENCE_NT'switching score notification off is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'switching score notification off'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the switching score notification off action translates into i6 as NotifyOff'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switching score notification off action'
                            PROPER_NOUN_NT'NotifyOff'
                        SENTENCE_NT'the switch score notification off rule is listed in the carry out switching score notification off rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the switch score notification off rule'
                            PROPER_NOUN_NT'in the carry out switching score notification off rulebook'
                        SENTENCE_NT'the switch score notification off rule translates into i6 as SWITCH_SCORE_NOTIFY_OFF_R'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'switch score notification off rule'
                            PROPER_NOUN_NT'SWITCH_SCORE_NOTIFY_OFF_R'
                        SENTENCE_NT'the standard report switching score notification off rule is listed in the report switching score notification off rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the standard report switching score notification off rule'
                            PROPER_NOUN_NT'in the report switching score notification off rulebook'
                        SENTENCE_NT'the standard report switching score notification off rule translates into i6 as REP_SWITCH_NOTIFY_OFF_R with "Score notification off." ( a )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'standard report switching score notification off rule'
                            PROPER_NOUN_NT'REP_SWITCH_NOTIFY_OFF_R'
                                PROPER_NOUN_NT'"Score notification off." ( a )'
                        SENTENCE_NT'requesting the pronoun meanings is an action out of world and applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'requesting the pronoun meanings'
                            PROPER_NOUN_NT'out of world and applying to nothing'
                        SENTENCE_NT'the requesting the pronoun meanings action translates into i6 as Pronouns'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'requesting the pronoun meanings action'
                            PROPER_NOUN_NT'Pronouns'
                        SENTENCE_NT'the announce the pronoun meanings rule is listed in the carry out requesting the pronoun meanings rulebook'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the announce the pronoun meanings rule'
                            PROPER_NOUN_NT'in the carry out requesting the pronoun meanings rulebook'
                        SENTENCE_NT'the announce the pronoun meanings rule translates into i6 as ANNOUNCE_PRONOUN_MEANINGS_R with "At the moment, " ( a ) , "means " ( b ) , "is unset" ( c ) , "no pronouns are known to the game." ( d )'
                            AVERB_NT'translates into'
                            PROPER_NOUN_NT'announce the pronoun meanings rule'
                            PROPER_NOUN_NT'ANNOUNCE_PRONOUN_MEANINGS_R'
                                AND_NT','
                                    PROPER_NOUN_NT'"At the moment, " ( a )'
                                    AND_NT','
                                        PROPER_NOUN_NT'"means " ( b )'
                                        AND_NT','
                                            PROPER_NOUN_NT'"is unset" ( c )'
                                            PROPER_NOUN_NT'"no pronouns are known to the game." ( d )'
                HEADING_NT'part six - grammar' (level 3)
                    SENTENCE_NT'understand "take [things]" as taking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take [things]"'
                        PROPER_NOUN_NT'taking'
                    SENTENCE_NT'understand "take off [something]" as taking off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take off [something]"'
                        PROPER_NOUN_NT'taking off'
                    SENTENCE_NT'understand "take [something] off" as taking off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take [something] off"'
                        PROPER_NOUN_NT'taking off'
                    SENTENCE_NT'understand "take [things inside] from [something]" as removing it from'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take [things inside] from [something]"'
                        PROPER_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "take [things inside] off [something]" as removing it from'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take [things inside] off [something]"'
                        PROPER_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "take inventory" as taking inventory'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"take inventory"'
                        PROPER_NOUN_NT'taking inventory'
                    SENTENCE_NT'understand the commands carry and hold as take'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands carry and hold'
                        PROPER_NOUN_NT'take'
                    SENTENCE_NT'understand "get in/on" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get in/on"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "get out/off/down/up" as exiting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get out/off/down/up"'
                        PROPER_NOUN_NT'exiting'
                    SENTENCE_NT'understand "get [things]" as taking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get [things]"'
                        PROPER_NOUN_NT'taking'
                    SENTENCE_NT'understand "get in/into/on/onto [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get in/into/on/onto [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "get off/down [something]" as getting off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get off/down [something]"'
                        PROPER_NOUN_NT'getting off'
                    SENTENCE_NT'understand "get [things inside] from [something]" as removing it from'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"get [things inside] from [something]"'
                        PROPER_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "pick up [things]" or "pick [things] up" as taking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"pick up [things]" or "pick [things] up"'
                        PROPER_NOUN_NT'taking'
                    SENTENCE_NT'understand "stand" or "stand up" as exiting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"stand" or "stand up"'
                        PROPER_NOUN_NT'exiting'
                    SENTENCE_NT'understand "stand on [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"stand on [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "remove [something preferably held]" as taking off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"remove [something preferably held]"'
                        PROPER_NOUN_NT'taking off'
                    SENTENCE_NT'understand "remove [things inside] from [something]" as removing it from'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"remove [things inside] from [something]"'
                        PROPER_NOUN_NT'removing it from'
                    SENTENCE_NT'understand "shed [something preferably held]" as taking off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"shed [something preferably held]"'
                        PROPER_NOUN_NT'taking off'
                    SENTENCE_NT'understand the commands doff and disrobe as shed'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands doff and disrobe'
                        PROPER_NOUN_NT'shed'
                    SENTENCE_NT'understand "wear [something preferably held]" as wearing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wear [something preferably held]"'
                        PROPER_NOUN_NT'wearing'
                    SENTENCE_NT'understand the command don as wear'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command don'
                        PROPER_NOUN_NT'wear'
                    SENTENCE_NT'understand "put [other things] in/inside/into [something]" as inserting it into'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"put [other things] in/inside/into [something]"'
                        PROPER_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "put [other things] on/onto [something]" as putting it on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"put [other things] on/onto [something]"'
                        PROPER_NOUN_NT'putting it on'
                    SENTENCE_NT'understand "put on [something preferably held]" as wearing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"put on [something preferably held]"'
                        PROPER_NOUN_NT'wearing'
                    SENTENCE_NT'understand "put [something preferably held] on" as wearing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"put [something preferably held] on"'
                        PROPER_NOUN_NT'wearing'
                    SENTENCE_NT'understand "put down [things preferably held]" or "put [things preferably held] down" as dropping'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"put down [things preferably held]" or "put [things preferably held] down"'
                        PROPER_NOUN_NT'dropping'
                    SENTENCE_NT'understand "insert [other things] in/into [something]" as inserting it into'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"insert [other things] in/into [something]"'
                        PROPER_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "drop [things preferably held]" as dropping'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"drop [things preferably held]"'
                        PROPER_NOUN_NT'dropping'
                    SENTENCE_NT'understand "drop [other things] in/into/down [something]" as inserting it into'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"drop [other things] in/into/down [something]"'
                        PROPER_NOUN_NT'inserting it into'
                    SENTENCE_NT'understand "drop [other things] on/onto [something]" as putting it on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"drop [other things] on/onto [something]"'
                        PROPER_NOUN_NT'putting it on'
                    SENTENCE_NT'understand "drop [something preferably held] at/against [something]" as throwing it at'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"drop [something preferably held] at/against [something]"'
                        PROPER_NOUN_NT'throwing it at'
                    SENTENCE_NT'understand the commands throw and discard as drop'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands throw and discard'
                        PROPER_NOUN_NT'drop'
                    SENTENCE_NT'understand "give [something preferably held] to [someone]" as giving it to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"give [something preferably held] to [someone]"'
                        PROPER_NOUN_NT'giving it to'
                    SENTENCE_NT'understand "give [someone] [something preferably held]" as giving it to ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"give [someone] [something preferably held]"'
                        PROPER_NOUN_NT'giving it to ( with nouns reversed )'
                    SENTENCE_NT'understand the commands pay and offer and feed as give'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands pay and offer and feed'
                        PROPER_NOUN_NT'give'
                    SENTENCE_NT'understand "show [someone] [something preferably held]" as showing it to ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"show [someone] [something preferably held]"'
                        PROPER_NOUN_NT'showing it to ( with nouns reversed )'
                    SENTENCE_NT'understand "show [something preferably held] to [someone]" as showing it to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"show [something preferably held] to [someone]"'
                        PROPER_NOUN_NT'showing it to'
                    SENTENCE_NT'understand the commands present and display as show'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands present and display'
                        PROPER_NOUN_NT'show'
                    SENTENCE_NT'understand "go" as going'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"go"'
                        PROPER_NOUN_NT'going'
                    SENTENCE_NT'understand "go [direction]" as going'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"go [direction]"'
                        PROPER_NOUN_NT'going'
                    SENTENCE_NT'understand "go [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"go [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "go into/in/inside/through [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"go into/in/inside/through [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand the commands walk and run as go'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands walk and run'
                        PROPER_NOUN_NT'go'
                    SENTENCE_NT'understand "inventory" as taking inventory'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"inventory"'
                        PROPER_NOUN_NT'taking inventory'
                    SENTENCE_NT'understand the commands i and inv as inventory'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands i and inv'
                        PROPER_NOUN_NT'inventory'
                    SENTENCE_NT'understand "look" as looking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look"'
                        PROPER_NOUN_NT'looking'
                    SENTENCE_NT'understand "look at [something]" as examining'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look at [something]"'
                        PROPER_NOUN_NT'examining'
                    SENTENCE_NT'understand "look [something]" as examining'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look [something]"'
                        PROPER_NOUN_NT'examining'
                    SENTENCE_NT'understand "look inside/in/into/through [something]" as searching'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look inside/in/into/through [something]"'
                        PROPER_NOUN_NT'searching'
                    SENTENCE_NT'understand "look under [something]" as looking under'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look under [something]"'
                        PROPER_NOUN_NT'looking under'
                    SENTENCE_NT'understand "look up [text] in [something]" as consulting it about ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"look up [text] in [something]"'
                        PROPER_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand the command l as look'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command l'
                        PROPER_NOUN_NT'look'
                    SENTENCE_NT'understand "consult [something] on/about [text]" as consulting it about'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"consult [something] on/about [text]"'
                        PROPER_NOUN_NT'consulting it about'
                    SENTENCE_NT'understand "open [something]" as opening'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"open [something]"'
                        PROPER_NOUN_NT'opening'
                    SENTENCE_NT'understand "open [something] with [something preferably held]" as unlocking it with'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"open [something] with [something preferably held]"'
                        PROPER_NOUN_NT'unlocking it with'
                    SENTENCE_NT'understand the commands unwrap , uncover as open'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands unwrap , uncover'
                        PROPER_NOUN_NT'open'
                    SENTENCE_NT'understand "close [something]" as closing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"close [something]"'
                        PROPER_NOUN_NT'closing'
                    SENTENCE_NT'understand "close up [something]" as closing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"close up [something]"'
                        PROPER_NOUN_NT'closing'
                    SENTENCE_NT'understand "close off [something]" as switching off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"close off [something]"'
                        PROPER_NOUN_NT'switching off'
                    SENTENCE_NT'understand the commands shut and cover as close'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands shut and cover'
                        PROPER_NOUN_NT'close'
                    SENTENCE_NT'understand "enter" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"enter"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "enter [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"enter [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand the command cross as enter'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command cross'
                        PROPER_NOUN_NT'enter'
                    SENTENCE_NT'understand "sit on top of [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"sit on top of [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "sit on/in/inside [something]" as entering'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"sit on/in/inside [something]"'
                        PROPER_NOUN_NT'entering'
                    SENTENCE_NT'understand "exit" as exiting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"exit"'
                        PROPER_NOUN_NT'exiting'
                    SENTENCE_NT'understand the commands leave and out as exit'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands leave and out'
                        PROPER_NOUN_NT'exit'
                    SENTENCE_NT'understand "examine [something]" as examining'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"examine [something]"'
                        PROPER_NOUN_NT'examining'
                    SENTENCE_NT'understand the commands x , watch , describe and check as examine'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands x , watch , describe and check'
                        PROPER_NOUN_NT'examine'
                    SENTENCE_NT'understand "read [something]" as examining'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"read [something]"'
                        PROPER_NOUN_NT'examining'
                    SENTENCE_NT'understand "read about [text] in [something]" as consulting it about ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"read about [text] in [something]"'
                        PROPER_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand "read [text] in [something]" as consulting it about ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"read [text] in [something]"'
                        PROPER_NOUN_NT'consulting it about ( with nouns reversed )'
                    SENTENCE_NT'understand "yes" as saying yes'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"yes"'
                        PROPER_NOUN_NT'saying yes'
                    SENTENCE_NT'understand the command y as yes'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command y'
                        PROPER_NOUN_NT'yes'
                    SENTENCE_NT'understand "no" as saying no'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"no"'
                        PROPER_NOUN_NT'saying no'
                    SENTENCE_NT'understand "sorry" as saying sorry'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"sorry"'
                        PROPER_NOUN_NT'saying sorry'
                    SENTENCE_NT'understand "search [something]" as searching'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"search [something]"'
                        PROPER_NOUN_NT'searching'
                    SENTENCE_NT'understand "wave" as waving hands'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wave"'
                        PROPER_NOUN_NT'waving hands'
                    SENTENCE_NT'understand "wave [something]" as waving'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wave [something]"'
                        PROPER_NOUN_NT'waving'
                    SENTENCE_NT'understand "set [something] to [text]" as setting it to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"set [something] to [text]"'
                        PROPER_NOUN_NT'setting it to'
                    SENTENCE_NT'understand the command adjust as set'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command adjust'
                        PROPER_NOUN_NT'set'
                    SENTENCE_NT'understand "pull [something]" as pulling'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"pull [something]"'
                        PROPER_NOUN_NT'pulling'
                    SENTENCE_NT'understand the command drag as pull'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command drag'
                        PROPER_NOUN_NT'pull'
                    SENTENCE_NT'understand "push [something]" as pushing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"push [something]"'
                        PROPER_NOUN_NT'pushing'
                    SENTENCE_NT'understand "push [something] [direction]" or "push [something] to [direction]" as pushing it to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"push [something] [direction]" or "push [something] to [direction]"'
                        PROPER_NOUN_NT'pushing it to'
                    SENTENCE_NT'understand the commands move , shift , clear and press as push'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands move , shift , clear and press'
                        PROPER_NOUN_NT'push'
                    SENTENCE_NT'understand "turn [something]" as turning'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"turn [something]"'
                        PROPER_NOUN_NT'turning'
                    SENTENCE_NT'understand "turn [something] on" or "turn on [something]" as switching on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"turn [something] on" or "turn on [something]"'
                        PROPER_NOUN_NT'switching on'
                    SENTENCE_NT'understand "turn [something] off" or "turn off [something]" as switching off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"turn [something] off" or "turn off [something]"'
                        PROPER_NOUN_NT'switching off'
                    SENTENCE_NT'understand the commands rotate , twist , unscrew and screw as turn'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands rotate , twist , unscrew and screw'
                        PROPER_NOUN_NT'turn'
                    SENTENCE_NT'understand "switch [something switched on]" as switching off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"switch [something switched on]"'
                        PROPER_NOUN_NT'switching off'
                    SENTENCE_NT'understand "switch [something]" or "switch on [something]" or "switch [something] on" as switching on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"switch [something]" or "switch on [something]" or "switch [something] on"'
                        PROPER_NOUN_NT'switching on'
                    SENTENCE_NT'understand "switch [something] off" or "switch off [something]" as switching off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"switch [something] off" or "switch off [something]"'
                        PROPER_NOUN_NT'switching off'
                    SENTENCE_NT'understand "lock [something] with [something preferably held]" as locking it with'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"lock [something] with [something preferably held]"'
                        PROPER_NOUN_NT'locking it with'
                    SENTENCE_NT'understand "unlock [something] with [something preferably held]" as unlocking it with'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"unlock [something] with [something preferably held]"'
                        PROPER_NOUN_NT'unlocking it with'
                    SENTENCE_NT'understand "attack [something]" as attacking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"attack [something]"'
                        PROPER_NOUN_NT'attacking'
                    SENTENCE_NT'understand the commands break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump as attack'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands break , smash , hit , fight , torture , wreck , crack , destroy , murder , kill , punch and thump'
                        PROPER_NOUN_NT'attack'
                    SENTENCE_NT'understand "wait" as waiting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wait"'
                        PROPER_NOUN_NT'waiting'
                    SENTENCE_NT'understand the command z as wait'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command z'
                        PROPER_NOUN_NT'wait'
                    SENTENCE_NT'understand "answer [text] to [someone]" as answering it that ( with nouns reversed )'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"answer [text] to [someone]"'
                        PROPER_NOUN_NT'answering it that ( with nouns reversed )'
                    SENTENCE_NT'understand the commands say , shout and speak as answer'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands say , shout and speak'
                        PROPER_NOUN_NT'answer'
                    SENTENCE_NT'understand "tell [someone] about [text]" as telling it about'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"tell [someone] about [text]"'
                        PROPER_NOUN_NT'telling it about'
                    SENTENCE_NT'understand "ask [someone] about [text]" as asking it about'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"ask [someone] about [text]"'
                        PROPER_NOUN_NT'asking it about'
                    SENTENCE_NT'understand "ask [someone] for [something]" as asking it for'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"ask [someone] for [something]"'
                        PROPER_NOUN_NT'asking it for'
                    SENTENCE_NT'understand "eat [something preferably held]" as eating'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"eat [something preferably held]"'
                        PROPER_NOUN_NT'eating'
                    SENTENCE_NT'understand "sleep" as sleeping'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"sleep"'
                        PROPER_NOUN_NT'sleeping'
                    SENTENCE_NT'understand the command nap as sleep'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command nap'
                        PROPER_NOUN_NT'sleep'
                    SENTENCE_NT'understand "climb [something]" or "climb up/over [something]" as climbing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"climb [something]" or "climb up/over [something]"'
                        PROPER_NOUN_NT'climbing'
                    SENTENCE_NT'understand the command scale as climb'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command scale'
                        PROPER_NOUN_NT'climb'
                    SENTENCE_NT'understand "buy [something]" as buying'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"buy [something]"'
                        PROPER_NOUN_NT'buying'
                    SENTENCE_NT'understand the command purchase as buy'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command purchase'
                        PROPER_NOUN_NT'buy'
                    SENTENCE_NT'understand "squeeze [something]" as squeezing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"squeeze [something]"'
                        PROPER_NOUN_NT'squeezing'
                    SENTENCE_NT'understand the command squash as squeeze'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command squash'
                        PROPER_NOUN_NT'squeeze'
                    SENTENCE_NT'understand "swing [something]" or "swing on [something]" as swinging'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"swing [something]" or "swing on [something]"'
                        PROPER_NOUN_NT'swinging'
                    SENTENCE_NT'understand "wake" or "wake up" as waking up'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wake" or "wake up"'
                        PROPER_NOUN_NT'waking up'
                    SENTENCE_NT'understand "wake [someone]" or "wake [someone] up" or "wake up [someone]" as waking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"wake [someone]" or "wake [someone] up" or "wake up [someone]"'
                        PROPER_NOUN_NT'waking'
                    SENTENCE_NT'understand the commands awake and awaken as wake'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands awake and awaken'
                        PROPER_NOUN_NT'wake'
                    SENTENCE_NT'understand "kiss [someone]" as kissing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"kiss [someone]"'
                        PROPER_NOUN_NT'kissing'
                    SENTENCE_NT'understand the commands embrace and hug as kiss'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands embrace and hug'
                        PROPER_NOUN_NT'kiss'
                    SENTENCE_NT'understand "think" as thinking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"think"'
                        PROPER_NOUN_NT'thinking'
                    SENTENCE_NT'understand "smell" as smelling'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"smell"'
                        PROPER_NOUN_NT'smelling'
                    SENTENCE_NT'understand "smell [something]" as smelling'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"smell [something]"'
                        PROPER_NOUN_NT'smelling'
                    SENTENCE_NT'understand the command sniff as smell'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command sniff'
                        PROPER_NOUN_NT'smell'
                    SENTENCE_NT'understand "listen" as listening to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"listen"'
                        PROPER_NOUN_NT'listening to'
                    SENTENCE_NT'understand "hear [something]" as listening to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"hear [something]"'
                        PROPER_NOUN_NT'listening to'
                    SENTENCE_NT'understand "listen to [something]" as listening to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"listen to [something]"'
                        PROPER_NOUN_NT'listening to'
                    SENTENCE_NT'understand "taste [something]" as tasting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"taste [something]"'
                        PROPER_NOUN_NT'tasting'
                    SENTENCE_NT'understand "touch [something]" as touching'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"touch [something]"'
                        PROPER_NOUN_NT'touching'
                    SENTENCE_NT'understand the command feel as touch'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command feel'
                        PROPER_NOUN_NT'touch'
                    SENTENCE_NT'understand "rub [something]" as rubbing'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"rub [something]"'
                        PROPER_NOUN_NT'rubbing'
                    SENTENCE_NT'understand the commands shine , polish , sweep , clean , dust , wipe and scrub as rub'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands shine , polish , sweep , clean , dust , wipe and scrub'
                        PROPER_NOUN_NT'rub'
                    SENTENCE_NT'understand "tie [something] to [something]" as tying it to'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"tie [something] to [something]"'
                        PROPER_NOUN_NT'tying it to'
                    SENTENCE_NT'understand the commands attach and fasten as tie'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands attach and fasten'
                        PROPER_NOUN_NT'tie'
                    SENTENCE_NT'understand "burn [something]" as burning'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"burn [something]"'
                        PROPER_NOUN_NT'burning'
                    SENTENCE_NT'understand the command light as burn'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the command light'
                        PROPER_NOUN_NT'burn'
                    SENTENCE_NT'understand "drink [something]" as drinking'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"drink [something]"'
                        PROPER_NOUN_NT'drinking'
                    SENTENCE_NT'understand the commands swallow and sip as drink'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands swallow and sip'
                        PROPER_NOUN_NT'drink'
                    SENTENCE_NT'understand "cut [something]" as cutting'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"cut [something]"'
                        PROPER_NOUN_NT'cutting'
                    SENTENCE_NT'understand the commands slice , prune and chop as cut'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands slice , prune and chop'
                        PROPER_NOUN_NT'cut'
                    SENTENCE_NT'understand "jump" as jumping'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"jump"'
                        PROPER_NOUN_NT'jumping'
                    SENTENCE_NT'understand the commands skip and hop as jump'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'the commands skip and hop'
                        PROPER_NOUN_NT'jump'
                    SENTENCE_NT'understand "score" as requesting the score'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"score"'
                        PROPER_NOUN_NT'requesting the score'
                    SENTENCE_NT'understand "quit" or "q" as quitting the game'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"quit" or "q"'
                        PROPER_NOUN_NT'quitting the game'
                    SENTENCE_NT'understand "save" as saving the game'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"save"'
                        PROPER_NOUN_NT'saving the game'
                    SENTENCE_NT'understand "restart" as restarting the game'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"restart"'
                        PROPER_NOUN_NT'restarting the game'
                    SENTENCE_NT'understand "restore" as restoring the game'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"restore"'
                        PROPER_NOUN_NT'restoring the game'
                    SENTENCE_NT'understand "verify" as verifying the story file'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"verify"'
                        PROPER_NOUN_NT'verifying the story file'
                    SENTENCE_NT'understand "version" as requesting the story file version'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"version"'
                        PROPER_NOUN_NT'requesting the story file version'
                    SENTENCE_NT'understand "script" or "script on" or "transcript" or "transcript on" as switching the story transcript on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"script" or "script on" or "transcript" or "transcript on"'
                        PROPER_NOUN_NT'switching the story transcript on'
                    SENTENCE_NT'understand "script off" or "transcript off" as switching the story transcript off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"script off" or "transcript off"'
                        PROPER_NOUN_NT'switching the story transcript off'
                    SENTENCE_NT'understand "superbrief" or "short" as preferring abbreviated room descriptions'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"superbrief" or "short"'
                        PROPER_NOUN_NT'preferring abbreviated room descriptions'
                    SENTENCE_NT'understand "verbose" or "long" as preferring unabbreviated room descriptions'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"verbose" or "long"'
                        PROPER_NOUN_NT'preferring unabbreviated room descriptions'
                    SENTENCE_NT'understand "brief" or "normal" as preferring sometimes abbreviated room descriptions'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"brief" or "normal"'
                        PROPER_NOUN_NT'preferring sometimes abbreviated room descriptions'
                    SENTENCE_NT'understand "nouns" or "pronouns" as requesting the pronoun meanings'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"nouns" or "pronouns"'
                        PROPER_NOUN_NT'requesting the pronoun meanings'
                    SENTENCE_NT'understand "notify" or "notify on" as switching score notification on'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"notify" or "notify on"'
                        PROPER_NOUN_NT'switching score notification on'
                    SENTENCE_NT'understand "notify off" as switching score notification off'
                        AVERB_NT'understand'
                        PROPER_NOUN_NT'"notify off"'
                        PROPER_NOUN_NT'switching score notification off'
                    SENTENCE_NT'the understand token a time period translates into i6 as RELATIVE_TIME_TOKEN'
                        AVERB_NT'translates into'
                        PROPER_NOUN_NT'understand token a time period'
                        PROPER_NOUN_NT'RELATIVE_TIME_TOKEN'
                HEADING_NT'part seven - phrasebook' (level 3)
                    HEADING_NT'chapter 1 - saying' (level 4)
                        HEADING_NT'section 1 - time values' (level 5)
                            ROUTINE_NT'to say ( something - time ) in words ( documented at phs_timewords )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (PrintTimeOfDayEnglish) {something}; '
                            ROUTINE_NT'to say here ( documented at phs_here )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[if story tense is present tense]here[otherwise]there"'
                                        INVOCATION_LIST_SAY_NT'if story tense is present tense'
                                            INVOCATION_NT'if story tense is present tense'
                                                CONDITION_CONTEXT_NT'story tense is present tense'
                                                    TEST_PROPOSITION_NT'story tense is present tense'(test: [ is('story tense', 'present tense') ])
                                        INVOCATION_LIST_SAY_NT'"here"'
                                            INVOCATION_NT'"here"'
                                                RVALUE_CONTEXT_NT'"here"'
                                                    CONSTANT_NT'"here"'-text
                                        INVOCATION_LIST_SAY_NT'otherwise'
                                            INVOCATION_NT'otherwise'
                                        INVOCATION_LIST_SAY_NT'"there"'
                                            INVOCATION_NT'"there"'
                                                RVALUE_CONTEXT_NT'"there"'
                                                    CONSTANT_NT'"there"'-text
                            ROUTINE_NT'to say now ( documented at phs_now )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[if story tense is present tense]now[otherwise]then"'
                                        INVOCATION_LIST_SAY_NT'if story tense is present tense'
                                            INVOCATION_NT'if story tense is present tense'
                                                CONDITION_CONTEXT_NT'story tense is present tense'
                                                    TEST_PROPOSITION_NT'story tense is present tense'(test: [ is('story tense', 'present tense') ])
                                        INVOCATION_LIST_SAY_NT'"now"'
                                            INVOCATION_NT'"now"'
                                                RVALUE_CONTEXT_NT'"now"'
                                                    CONSTANT_NT'"now"'-text
                                        INVOCATION_LIST_SAY_NT'otherwise'
                                            INVOCATION_NT'otherwise'
                                        INVOCATION_LIST_SAY_NT'"then"'
                                            INVOCATION_NT'"then"'
                                                RVALUE_CONTEXT_NT'"then"'
                                                    CONSTANT_NT'"then"'-text
                        HEADING_NT'section 2 - boxed quotations' (level 5)
                            ROUTINE_NT'to display the boxed quotation ( q - text ) ( documented at ph_boxed )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DisplayBoxedQuotation({-box-quotation-text:Q}); '
                        HEADING_NT'section 3 - some built-in texts' (level 5)
                            ROUTINE_NT'to say the/-- banner text ( documented at phs_banner )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  Banner(); '
                            ROUTINE_NT'to say the/-- list of extension credits ( documented at phs_extcredits )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ShowExtensionVersions(); '
                            ROUTINE_NT'to say the/-- complete list of extension credits ( documented at phs_compextcredits )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ShowFullExtensionVersions(); '
                            ROUTINE_NT'to say the/-- player's surroundings ( documented at phs_surroundings )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SL_Location(true); '
                            ROUTINE_NT'to say run paragraph on with special look spacing -- running on ( documented at phs_runparaonsls )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpecialLookSpacingBreak(); '
                            ROUTINE_NT'to say command clarification break -- running on ( documented at phs_clarifbreak )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CommandClarificationBreak(); '
                        HEADING_NT'section 4 - responses' (level 5)
                            ROUTINE_NT'to say text of ( r - response ) ( documented at phs_response )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the issuing the response text activity with r'
                                        INVOCATION_NT'carry out the issuing the response text activity with r'
                                            RVALUE_CONTEXT_NT'issuing the response text'
                                                CONSTANT_NT'issuing the response text'-activity on responses
                                            RVALUE_CONTEXT_NT'r'
                                                LOCAL_VARIABLE_NT'r'(t_0;response)
                        HEADING_NT'section 5 - saying lists of things' (level 5)
                            ROUTINE_NT'to list the contents of ( o - an object ) , with newlines , indented , giving inventory information , as a sentence , including contents , including all contents , tersely , giving brief inventory information , using the definite article , listing marked items only , prefacing with is/are , not listing concealed items , suppressing all articles , with extra indentation , and/or capitalized ( documented at ph_listcontents )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  WriteListFrom(child({O}), {phrase options}); '
                            ROUTINE_NT'to say a list of ( os - description of objects ) ( documented at phs_alistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT);
                                    	'
                            ROUTINE_NT'to say a list of ( os - description of objects ) ( documented at phs_alistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		TEXT_TY_Say_Capitalised((+ "[list-writer list of marked objects]" +));
                                    	'
                            ROUTINE_NT'to say list of ( os - description of objects ) ( documented at phs_listof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+NOARTICLE_BIT);
                                    	'
                            ROUTINE_NT'to say the list of ( os - description of objects ) ( documented at phs_thelistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT);
                                    	'
                            ROUTINE_NT'to say the list of ( os - description of objects ) ( documented at phs_thelistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		TEXT_TY_Say_Capitalised((+ "[list-writer articled list of marked objects]" +));
                                    	'
                            ROUTINE_NT'to say is-are a list of ( os - description of objects ) ( documented at phs_isalistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT);
                                    	'
                            ROUTINE_NT'to say is-are list of ( os - description of objects ) ( documented at phs_islistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+ISARE_BIT+NOARTICLE_BIT);
                                    	'
                            ROUTINE_NT'to say is-are the list of ( os - description of objects ) ( documented at phs_isthelistof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+ISARE_BIT);
                                    	'
                            ROUTINE_NT'to say a list of ( os - description of objects ) including contents ( documented at phs_alistofconts )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} ofclass Object)
                                    			if ({-matches-description:1:OS})
                                    				give {-my:1} workflag2;
                                    			else
                                    				give {-my:1} ~workflag2;
                                    		WriteListOfMarkedObjects(ENGLISH_BIT+RECURSE_BIT+PARTINV_BIT+
                                    			TERSE_BIT+CONCEAL_BIT);
                                    	'
                        HEADING_NT'section 6 - group in and omit from lists' (level 5)
                            ROUTINE_NT'to group ( os - description of objects ) together ( documented at ph_group )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} provides list_together)
                                    			if ({-matches-description:1:OS})
                                    				BlkValueCopy({-my:1}.list_together, {-list-together:unarticled});
                                    	'
                            ROUTINE_NT'to group ( os - description of objects ) together giving articles ( documented at ph_groupart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		objectloop({-my:1} provides list_together)
                                    			if ({-matches-description:1:OS})
                                    				BlkValueCopy({-my:1}.list_together, {-list-together:articled});
                                    	'
                            ROUTINE_NT'to group ( os - description of objects ) together as ( t - text ) ( documented at ph_grouptext )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    		{-my:2} = BlkValueCreate(TEXT_TY);
                                    		{-my:2} = TEXT_TY_SubstitutedForm({-my:2}, {-by-reference:T});
                                    		objectloop({-my:1} provides list_together)
                                    			if ({-matches-description:1:OS})
                                    				BlkValueCopy({-my:1}.list_together, {-my:2});
                                    		BlkValueFree({-my:2});
                                    	'
                            ROUTINE_NT'to omit contents in listing ( documented at ph_omit )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  c_style = c_style &~ (RECURSE_BIT+FULLINV_BIT+PARTINV_BIT); '
                        HEADING_NT'section 7 - filtering contents of lists - unindexed' (level 5)
                            ROUTINE_NT'to filter list recursion to ( d - description of objects )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  list_filter_routine = {D}; '
                            ROUTINE_NT'to unfilter list recursion'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  list_filter_routine = 0; '
                    HEADING_NT'chapter 2 - multimedia' (level 4)
                        HEADING_NT'section 1 - figures ( for figures language element only )' (level 5)
                            ROUTINE_NT'to display ( f - figure name ) , one time only ( documented at ph_displayfigure )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DisplayFigure(ResourceIDsOfFigures-->{F}, {phrase options}); '
                            ROUTINE_NT'to decide which number is the glulx resource id of ( f - figure name ) ( documented at ph_figureid )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResourceIDsOfFigures-->{F} '
                        HEADING_NT'section 2 - sound effects ( for sounds language element only )' (level 5)
                            ROUTINE_NT'to play ( sfx - sound name ) , one time only ( documented at ph_playsf )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PlaySound(ResourceIDsOfSounds-->{SFX}, {phrase options}); '
                            ROUTINE_NT'to decide which number is the glulx resource id of ( sfx - sound name ) ( documented at ph_soundid )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ResourceIDsOfSounds-->{SFX} '
                    HEADING_NT'chapter 3 - actions , activities and rules' (level 4)
                        HEADING_NT'section 1 - trying actions' (level 5)
                            ROUTINE_NT'to try ( s - action ) ( documented at ph_try )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action:S} '
                            ROUTINE_NT'to silently try ( s - action ) ( documented at ph_trysilently )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action-silently:S} '
                            ROUTINE_NT'to try silently ( s - action ) ( documented at ph_trysilently )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-try-action-silently:S} '
                            ROUTINE_NT'to decide whether the action is not silent'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (keep_silent == false) '
                        HEADING_NT'section 2 - action requirements' (level 5)
                            ROUTINE_NT'to decide whether the action requires a touchable noun ( documented at ph_requirestouch )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToTouchNoun()) '
                            ROUTINE_NT'to decide whether the action requires a touchable second noun ( documented at ph_requirestouch2 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToTouchSecondNoun()) '
                            ROUTINE_NT'to decide whether the action requires a carried noun ( documented at ph_requirescarried )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToCarryNoun()) '
                            ROUTINE_NT'to decide whether the action requires a carried second noun ( documented at ph_requirescarried2 )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedToCarrySecondNoun()) '
                            ROUTINE_NT'to decide whether the action requires light ( documented at ph_requireslight )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (NeedLightForAction()) '
                            ROUTINE_NT'to anonymously abide by ( rl - a rule ) ( documented at ph_abideanon )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL})) {
                                    		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
                                    		else ActRulebookFails(temporary_value);
                                    		return 2;
                                    	}  - in to only'
                            ROUTINE_NT'to anonymously abide by ( rl - value of kind k based rule producing a value ) for ( v - k ) ( documented at ph_abideanon )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL}, {V}, true)) {
                                    		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
                                    		else ActRulebookFails(temporary_value);
                                    		return 2;
                                    	}  - in to only'
                            ROUTINE_NT'to anonymously abide by ( rl - a nothing based rule ) ( documented at ph_abideanon )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  if (temporary_value = FollowRulebook({RL})) {
                                    		if (RulebookSucceeded()) ActRulebookSucceeds(temporary_value);
                                    		else ActRulebookFails(temporary_value);
                                    		return 2;
                                    	}  - in to only'
                        HEADING_NT'section 3 - stop or continue' (level 5)
                            ROUTINE_NT'to stop the action ( documented at ph_stopaction )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to only'
                            ROUTINE_NT'to continue the action ( documented at ph_continueaction )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to only'
                        HEADING_NT'section 4 - actions as values' (level 5)
                            ROUTINE_NT'to decide what action is the current action ( documented at ph_currentaction )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  STORED_ACTION_TY_Current({-new:action}) '
                            ROUTINE_NT'to decide what action is the action of ( a - action ) ( documented at ph_actionof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {A} '
                            ROUTINE_NT'to decide if ( act - a action ) involves ( x - an object ) ( documented at ph_involves )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Involves({-by-reference:act}, {X})) '
                            ROUTINE_NT'to decide what action name is the action name part of ( act - a action ) ( documented at ph_actionpart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTION_F)) '
                            ROUTINE_NT'to decide what object is the noun part of ( act - a action ) ( documented at ph_nounpart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_NOUN_F)) '
                            ROUTINE_NT'to decide what object is the second noun part of ( act - a action ) ( documented at ph_secondpart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_SECOND_F)) '
                            ROUTINE_NT'to decide what object is the actor part of ( act - a action ) ( documented at ph_actorpart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (STORED_ACTION_TY_Part({-by-reference:act}, STORA_ACTOR_F)) '
                    HEADING_NT'chapter 4 - the model world' (level 4)
                        HEADING_NT'section 1 - ending the story' (level 5)
                            ROUTINE_NT'to end the story ( documented at ph_end )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag=3; story_complete=false; '
                            ROUTINE_NT'to end the story finally ( documented at ph_endfinally )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag=3; story_complete=true; '
                            ROUTINE_NT'to end the story saying ( finale - text ) ( documented at ph_endsaying )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag={-by-reference:finale}; story_complete=false; '
                            ROUTINE_NT'to end the story finally saying ( finale - text ) ( documented at ph_endfinallysaying )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  deadflag={-by-reference:finale}; story_complete=true; '
                            ROUTINE_NT'to decide whether the story has ended ( documented at ph_ended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (deadflag~=0) '
                            ROUTINE_NT'to decide whether the story has ended finally ( documented at ph_finallyended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (story_complete) '
                            ROUTINE_NT'to decide whether the story has not ended ( documented at ph_notended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (deadflag==0) '
                            ROUTINE_NT'to decide whether the story has not ended finally ( documented at ph_notfinallyended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (story_complete==false) '
                            ROUTINE_NT'to resume the story ( documented at ph_resume )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  resurrect_please = true; '
                        HEADING_NT'section 2 - times of day' (level 5)
                            ROUTINE_NT'to decide which number is the minutes part of ( t - time ) ( documented at ph_minspart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({t}%ONE_HOUR) '
                            ROUTINE_NT'to decide which number is the hours part of ( t - time ) ( documented at ph_hourspart )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ({t}/ONE_HOUR) '
                            ROUTINE_NT'to decide if ( t - time ) is before ( t2 - time ) ( documented at ph_timebefore )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))<(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))) '
                            ROUTINE_NT'to decide if ( t - time ) is after ( t2 - time ) ( documented at ph_timeafter )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ((({t}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))>(({t2}+20*ONE_HOUR)%(TWENTY_FOUR_HOURS))) '
                            ROUTINE_NT'to decide which time is ( t - time ) before ( t2 - time ) ( documented at ph_shiftbefore )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({t2}-{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS)) '
                            ROUTINE_NT'to decide which time is ( t - time ) after ( t2 - time ) ( documented at ph_shiftafter )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({t2}+{t}+TWENTY_FOUR_HOURS)%(TWENTY_FOUR_HOURS)) '
                        HEADING_NT'section 3 - durations' (level 5)
                            ROUTINE_NT'to decide which time is ( n - number ) minutes ( documented at ph_durationmins )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({n})%(TWENTY_FOUR_HOURS)) '
                            ROUTINE_NT'to decide which time is ( n - number ) hours ( documented at ph_durationhours )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (({n}*ONE_HOUR)%(TWENTY_FOUR_HOURS)) '
                        HEADING_NT'section 4 - timed events' (level 5)
                            ROUTINE_NT'to ( r - rule ) in ( t - number ) turn/turns from now ( documented at ph_turnsfromnow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, {t}+1, 0); '
                            ROUTINE_NT'to ( r - rule ) at ( t - time ) ( documented at ph_attime )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, {t}, 1); '
                            ROUTINE_NT'to ( r - rule ) in ( t - time ) from now ( documented at ph_timefromnow )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetTimedEvent({-mark-event-used:R}, (the_time+{t})%(TWENTY_FOUR_HOURS), 1); '
                        HEADING_NT'section 5 - scenes' (level 5)
                            ROUTINE_NT'to decide if ( sc - scene ) has happened ( documented at ph_hashappened )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1)) '
                            ROUTINE_NT'to decide if ( sc - scene ) has not happened ( documented at ph_hasnothappened )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) == 0) '
                            ROUTINE_NT'to decide if ( sc - scene ) has ended ( documented at ph_hasended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) > 1) '
                            ROUTINE_NT'to decide if ( sc - scene ) has not ended ( documented at ph_hasnotended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (scene_endings-->({sc}-1) <= 1) '
                        HEADING_NT'section 6 - timing of scenes' (level 5)
                            ROUTINE_NT'to decide which time is the time since ( sc - scene ) began ( documented at ph_scenetimesincebegan )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 1)) '
                            ROUTINE_NT'to decide which time is the time when ( sc - scene ) began ( documented at ph_scenetimewhenbegan )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 2)) '
                            ROUTINE_NT'to decide which time is the time since ( sc - scene ) ended ( documented at ph_scenetimesinceended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 3)) '
                            ROUTINE_NT'to decide which time is the time when ( sc - scene ) ended ( documented at ph_scenetimewhenended )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SceneUtility({sc}, 4)) '
                        HEADING_NT'section 7 - player's identity and location' (level 5)
                            ROUTINE_NT'to decide whether in darkness ( documented at ph_indarkness )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (location==thedark) '
                        HEADING_NT'section 8 - moving and removing things' (level 5)
                            ROUTINE_NT'to move ( something - object ) to ( something else - object ) , without printing a room description or printing an abbreviated room description ( documented at ph_move )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveObject({something}, {something else}, {phrase options}, false); '
                            ROUTINE_NT'to remove ( something - object ) from play ( deprecated ) ( documented at ph_remove )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RemoveFromPlay({something}); '
                            ROUTINE_NT'to move ( o - object ) backdrop to all ( d - description of objects ) ( documented at ph_movebackdrop )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveBackdrop({O}, {D}); '
                            ROUTINE_NT'to update backdrop positions ( documented at ph_updatebackdrop )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveFloatingObjects(); '
                        HEADING_NT'section 9 - the map' (level 5)
                            ROUTINE_NT'to decide which room is location of ( o - object ) ( documented at ph_locationof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LocationOf({O}) '
                            ROUTINE_NT'to decide which room is room ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomdirof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapConnection({R1},{D}) '
                            ROUTINE_NT'to decide which door is door ( d - direction ) from/of ( r1 - room ) ( documented at ph_doordirof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DoorFrom({R1},{D}) '
                            ROUTINE_NT'to decide which object is the other side of ( d - door ) from ( r1 - room ) ( documented at ph_othersideof )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  OtherSideOfDoor({D},{R1}) '
                            ROUTINE_NT'to decide which object is the direction of ( d - door ) from ( r1 - room ) ( documented at ph_directionofdoor )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  DirectionDoorLeadsIn({D},{R1}) '
                            ROUTINE_NT'to decide which object is room-or-door ( d - direction ) from/of ( r1 - room ) ( documented at ph_roomordoor )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RoomOrDoorFrom({R1},{D}) '
                            ROUTINE_NT'to change ( d - direction ) exit of ( r1 - room ) to ( r2 - room ) ( documented at ph_changeexit )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AssertMapConnection({R1},{D},{R2}); '
                            ROUTINE_NT'to change ( d - direction ) exit of ( r1 - room ) to nothing/nowhere ( documented at ph_changenoexit )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  AssertMapConnection({R1},{D},nothing); '
                            ROUTINE_NT'to decide which room is the front side of ( d - object ) ( documented at ph_frontside )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FrontSideOfDoor({D}) '
                            ROUTINE_NT'to decide which room is the back side of ( d - object ) ( documented at ph_backside )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  BackSideOfDoor({D}) '
                        HEADING_NT'section 10 - route-finding' (level 5)
                            ROUTINE_NT'to decide which object is best route from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroute )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},0,{phrase options}) '
                            ROUTINE_NT'to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) , using doors or using even locked doors ( documented at ph_bestroutelength )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},0,{phrase options},true) '
                            ROUTINE_NT'to decide which object is best route from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethrough )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},{RS},{phrase options}) '
                            ROUTINE_NT'to decide which number is number of moves from ( r1 - object ) to ( r2 - object ) through ( rs - description of objects ) , using doors or using even locked doors ( documented at ph_bestroutethroughlength )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MapRouteTo({R1},{R2},{RS},{phrase options},true) '
                        HEADING_NT'section 11 - the object tree' (level 5)
                            ROUTINE_NT'to decide which object is holder of ( something - object ) ( documented at ph_holder )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (HolderOf({something})) '
                            ROUTINE_NT'to decide which object is next thing held after ( something - object ) ( documented at ph_nextheld )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (sibling({something})) '
                            ROUTINE_NT'to decide which object is first thing held by ( something - object ) ( documented at ph_firstheld )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (child({something})) '
                    HEADING_NT'chapter 5 - understanding' (level 4)
                        HEADING_NT'section 1 - asking yes/no questions' (level 5)
                            ROUTINE_NT'to decide whether player consents ( documented at ph_consents )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  YesOrNo() '
                        HEADING_NT'section 2 - the player's command' (level 5)
                            ROUTINE_NT'to decide if ( s - a snippet ) matches ( t - a topic ) ( documented at ph_snippetmatches )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetMatches({S}, {T})) '
                            ROUTINE_NT'to decide if ( s - a snippet ) does not match ( t - a topic ) ( documented at ph_snippetdoesnotmatch )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetMatches({S}, {T}) == false) '
                            ROUTINE_NT'to decide if ( s - a snippet ) includes ( t - a topic ) ( documented at ph_snippetincludes )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (matched_text=SnippetIncludes({T},{S})) '
                            ROUTINE_NT'to decide if ( s - a snippet ) does not include ( t - a topic ) ( documented at ph_snippetdoesnotinclude )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (SnippetIncludes({T},{S})==0) '
                        HEADING_NT'section 3 - changing the player's command' (level 5)
                            ROUTINE_NT'to change the text of the player's command to ( t - text ) ( documented at ph_changecommand )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SetPlayersCommand({-by-reference:T}); '
                            ROUTINE_NT'to replace ( s - a snippet ) with ( t - text ) ( documented at ph_replacesnippet )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpliceSnippet({S}, {-by-reference:T}); '
                            ROUTINE_NT'to cut ( s - a snippet ) ( documented at ph_cutsnippet )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SpliceSnippet({S}, 0); '
                            ROUTINE_NT'to reject the player's command ( documented at ph_rejectcommand )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  RulebookFails(); rtrue;  - in to only'
                        HEADING_NT'section 4 - scope and pronouns' (level 5)
                            ROUTINE_NT'to place ( o - an object ) in scope , but not its contents ( documented at ph_placeinscope )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PlaceInScope({O}, {phrase options}); '
                            ROUTINE_NT'to place the/-- contents of ( o - an object ) in scope ( documented at ph_placecontentsinscope )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  ScopeWithin({O}); '
                            ROUTINE_NT'to set pronouns from ( o - an object ) ( documented at ph_setpronouns )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PronounNotice({O}); '
                        HEADING_NT'section 5 - the multiple object list' (level 5)
                            ROUTINE_NT'to decide what list of objects is the multiple object list ( documented at ph_multipleobjectlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Mol({-new:list of objects}) '
                            ROUTINE_NT'to alter the multiple object list to ( l - list of objects ) ( documented at ph_altermultipleobjectlist )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LIST_OF_TY_Set_Mol({-by-reference:L}); '
                        HEADING_NT'section sr5/8/1 - message support - issuance - unindexed' (level 5)
                            ROUTINE_NT'to issue score notification message'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  NotifyTheScore(); '
                            ROUTINE_NT'to say pronoun dictionary word'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (address) pronoun_word; '
                            ROUTINE_NT'to say recap of command'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintCommand(); '
                            SENTENCE_NT'the pronoun reference object is an object that varies'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'pronoun reference object'
                                COMMON_NOUN_NT'object that varies'
                            SENTENCE_NT'the pronoun reference object variable translates into i6 as pronoun_obj'
                                AVERB_NT'translates into'
                                PROPER_NOUN_NT'pronoun reference object variable'
                                PROPER_NOUN_NT'pronoun_obj'
                            ROUTINE_NT'to say pronoun i6 dictionary word'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  print (address) pronoun_word; '
                            ROUTINE_NT'to say parser command so far'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintCommand(); '
                    HEADING_NT'chapter 6 - deprecated or private phrases - unindexed' (level 4)
                        HEADING_NT'section 1 - spatial modelling - unindexed' (level 5)
                            ROUTINE_NT'to decide which object is the component parts core of ( x - an object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  CoreOf({X}) '
                            ROUTINE_NT'to decide which object is the common ancestor of ( o - an object ) with ( p - an object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (CommonAncestor({O}, {P})) '
                            ROUTINE_NT'to decide which object is the not-counting-parts holder of ( o - an object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (CoreOfParentOfCoreOf({O})) '
                            ROUTINE_NT'to decide which object is the visibility-holder of ( o - object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  VisibilityParent({O}) '
                            ROUTINE_NT'to calculate visibility ceiling at low level'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  FindVisibilityLevels(); '
                            ROUTINE_NT'to decide which object is the touchability ceiling of ( o - object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  TouchabilityCeiling({O}) '
                            ROUTINE_NT'to decide which number is the visibility ceiling count calculated'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  visibility_levels '
                            ROUTINE_NT'to decide which object is the visibility ceiling calculated'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  visibility_ceiling '
                        HEADING_NT'section 2 - room descriptions - unindexed' (level 5)
                            ROUTINE_NT'to produce a room description with going spacing conventions'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  LookAfterGoing(); '
                            ROUTINE_NT'to print the location's description'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  PrintOrRun(location, description); '
                            ROUTINE_NT'to decide if set to sometimes abbreviated room descriptions'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 1) '
                            ROUTINE_NT'to decide if set to unabbreviated room descriptions'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 2) '
                            ROUTINE_NT'to decide if set to abbreviated room descriptions'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (lookmode == 3) '
                        HEADING_NT'section 3 - action conversion - unindexed' (level 5)
                            ROUTINE_NT'to convert to ( an - an action name ) on ( o - an object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return GVS_Convert({AN},{O},0);  - in to only'
                            ROUTINE_NT'to convert to request of ( x - object ) to perform ( an - action name ) with ( y - object ) and ( z - object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return ConvertToRequest({X}, {AN}, {Y}, {Z}); '
                            ROUTINE_NT'to convert to special going-with-push action'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  return ConvertToGoingWithPush(); '
                        HEADING_NT'section 4 - surreptitious violation of invariants - unindexed' (level 5)
                            ROUTINE_NT'to surreptitiously move ( something - object ) to ( something else - object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  move {something} to {something else}; '
                            ROUTINE_NT'to surreptitiously move ( something - object ) to ( something else - object ) during going'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  MoveDuringGoing({something}, {something else}); '
                            ROUTINE_NT'to surreptitiously reckon darkness'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  SilentlyConsiderLight(); '
                        HEADING_NT'section 5 - capitalised list-writing - unindexed' (level 5)
                            ROUTINE_NT'to say list-writer list of marked objects'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	WriteListOfMarkedObjects(ENGLISH_BIT);
                                    	'
                            ROUTINE_NT'to say list-writer articled list of marked objects'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(- 
                                    	 	WriteListOfMarkedObjects(ENGLISH_BIT+DEFART_BIT+CFIRSTART_BIT);
                                    	'
                        HEADING_NT'section 6 - printing names - unindexed' (level 5)
                            ROUTINE_NT'to decide if expanding text for comparison purposes'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  say__comp '
                        HEADING_NT'section 7 - command parsing - unindexed' (level 5)
                            ROUTINE_NT'to decide whether the i6 parser is running multiple actions'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  (multiflag==1) '
                        HEADING_NT'section 8 - deprecated inform - unindexed' (level 5)
                            ROUTINE_NT'to yes ( documented at ph_yes )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rtrue;  - in to decide if only'
                            ROUTINE_NT'to no ( documented at ph_no )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  rfalse;  - in to decide if only'
                        HEADING_NT'section 9 - debugging inform - unindexed' (level 5)
                            ROUTINE_NT'to ***'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:verbose-checking} '
                            ROUTINE_NT'to *** ( t - text )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'(-  {-primitive-definition:verbose-checking} '
                            ENDHERE_NT'the standard rules'
        INCLUSION_NT'include standard rules by graham nelson'
    HEADING_NT'use the serial comma and no scoring' (level 0)
        SENTENCE_NT'use the serial comma and no scoring'
            AVERB_NT'use'
            AND_NT'and'
                PROPER_NOUN_NT'serial comma'
                PROPER_NOUN_NT'no scoring'
        SENTENCE_NT'understand "about" as asking for information'
            AVERB_NT'understand'
            PROPER_NOUN_NT'"about"'
            PROPER_NOUN_NT'asking for information'
        SENTENCE_NT'asking for information is an action out of world'
            AVERB_NT'is'
            PROPER_NOUN_NT'asking for information'
            PROPER_NOUN_NT'out of world'
        ROUTINE_NT'carry out asking for information'
            CODE_BLOCK_NT
                CODE_BLOCK_NT'say "An implementation of the following creative brief:People wander around some small map, on errands. One, sad to tell, has Gelato's Syndrome, a tragic condition turning one's skin the colour of a random flavour of ice cream (raspberry ripple, neapolitan, etc.). When two people are in the same room, there's a 1/3 chance that an infected person will infect a non-infected one. The player can cure any single person: victory condition - to stamp out the disease."'
                    INVOCATION_LIST_SAY_NT'"An implementation of the following creative brief:People wander around some small map, on errands. One, sad to tell, has Gelato's Syndrome, a tragic condition turning one's skin the colour of a random flavour of ice cream (raspberry ripple, neapolitan, etc.). When two people are in the same room, there's a 1/3 chance that an infected person will infect a non-infected one. The player can cure any single person: victory condition - to stamp out the disease."'
                        INVOCATION_NT'"An implementation of the following creative brief:People wander around some small map, on errands. One, sad to tell, has Gelato's Syndrome, a tragic condition turning one's skin the colour of a random flavour of ice cream (raspberry ripple, neapolitan, etc.). When two people are in the same room, there's a 1/3 chance that an infected person will infect a non-infected one. The player can cure any single person: victory condition - to stamp out the disease."'
                            RVALUE_CONTEXT_NT'"An implementation of the following creative brief:People wander around some small map, on errands. One, sad to tell, has Gelato's Syndrome, a tragic condition turning one's skin the colour of a random flavour of ice cream (raspberry ripple, neapolitan, etc.). When two people are in the same room, there's a 1/3 chance that an infected person will infect a non-infected one. The player can cure any single person: victory condition - to stamp out the disease."'
                                CONSTANT_NT'"An implementation of the following creative brief:People wander around some small map, on errands. One, sad to tell, has Gelato's Syndrome, a tragic condition turning one's skin the colour of a random flavour of ice cream (raspberry ripple, neapolitan, etc.). When two people are in the same room, there's a 1/3 chance that an infected person will infect a non-infected one. The player can cure any single person: victory condition - to stamp out the disease."'-text
        ROUTINE_NT'when play begins'
            CODE_BLOCK_NT
                CODE_BLOCK_NT'say "Gelato's Syndrome. It's struck, and it's struck hard. In these sticky summer months, there's no telling who will contract the disease next."'
                    INVOCATION_LIST_SAY_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In these sticky summer months, there's no telling who will contract the disease next."'
                        INVOCATION_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In these sticky summer months, there's no telling who will contract the disease next."'
                            RVALUE_CONTEXT_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In these sticky summer months, there's no telling who will contract the disease next."'
                                CONSTANT_NT'"Gelato's Syndrome. It's struck, and it's struck hard. In these sticky summer months, there's no telling who will contract the disease next."'-text
                INVOCATION_LIST_NT'now the command prompt is "[if the destination of the player is not blank](heading to [destination of the player]) [end if]>"'
                    CONDITION_CONTEXT_NT'the command prompt is "[if the destination of the player is not blank](heading to [destination of the player]) [end if]>"'
        HEADING_NT'section 1 - errands' (level 5)
            SENTENCE_NT'the current actor is a person which varies'
                AVERB_NT'is'
                PROPER_NOUN_NT'current actor'
                COMMON_NOUN_NT'person which varies'
            SENTENCE_NT'the current owner is a person which varies'
                AVERB_NT'is'
                PROPER_NOUN_NT'current owner'
                COMMON_NOUN_NT'person which varies'
            ROUTINE_NT'every turn'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if player is active'
                            INVOCATION_NT'if player is active'
                                CONDITION_CONTEXT_NT'player is active'
                                    TEST_PROPOSITION_NT'player is active'(test: [ A11'active'('player') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'follow the character movement rules'
                                INVOCATION_NT'follow the character movement rules'
                                    RVALUE_CONTEXT_NT'character movement rules'
                                        CONSTANT_NT'character movement rules'-rulebook
            ROUTINE_NT'every turn'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last person named is the player'
                        CONDITION_CONTEXT_NT'the last person named is the player'
                    INVOCATION_LIST_NT'now the last thing named is the player'
                        CONDITION_CONTEXT_NT'the last thing named is the player'
                    INVOCATION_LIST_NT'now every person is active'
                        CONDITION_CONTEXT_NT'every person is active'
            SENTENCE_NT'a person can be active or passive'
                AVERB_NT'can be'
                COMMON_NOUN_NT'a person'
                PROPER_NOUN_NT'active or passive'
                    AND_NT'or'
                        PROPER_NOUN_NT'active'
                        PROPER_NOUN_NT'passive'
            SENTENCE_NT'the player is passive'
                AVERB_NT'is'
                PROPER_NOUN_NT'player'
                ADJECTIVE_NT'passive'
            SENTENCE_NT'the character movement rules are a rulebook'
                AVERB_NT'are'
                PROPER_NOUN_NT'character movement rules'
                COMMON_NOUN_NT'rulebook'
            ROUTINE_NT'the first character movement rule'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now group size is 1'
                        CONDITION_CONTEXT_NT'group size is 1'
                    INVOCATION_LIST_NT'now the last person named is the player'
                        CONDITION_CONTEXT_NT'the last person named is the player'
                    INVOCATION_LIST_NT'now the last thing named is the player'
                        CONDITION_CONTEXT_NT'the last thing named is the player'
                    INVOCATION_LIST_NT'now the player is passive'
                        CONDITION_CONTEXT_NT'the player is passive'
            ROUTINE_NT'a character movement rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with mover running through innocent people'
                            INVOCATION_NT'repeat with mover running through innocent people'
                                NEW_LOCAL_CONTEXT_NT'mover'
                                    UNKNOWN_NT'mover'
                                RVALUE_CONTEXT_NT'innocent people'
                                    CONSTANT_NT'innocent people'-description of people
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the current actor is the mover'
                                CONDITION_CONTEXT_NT'the current actor is the mover'
                            INVOCATION_LIST_NT'follow the shopper rules'
                                INVOCATION_NT'follow the shopper rules'
                                    RVALUE_CONTEXT_NT'shopper rules'
                                        CONSTANT_NT'shopper rules'-rulebook
                            INVOCATION_LIST_NT'now the current actor is passive'
                                CONDITION_CONTEXT_NT'the current actor is passive'
                    INVOCATION_LIST_NT'follow the movement reporting rule'
                        INVOCATION_NT'follow the movement reporting rule'
                            RVALUE_CONTEXT_NT'movement reporting rule'
                                CONSTANT_NT'movement reporting rule'-rule
            ROUTINE_NT'a character movement rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with next mover running through mercantile people'
                            INVOCATION_NT'repeat with next mover running through mercantile people'
                                NEW_LOCAL_CONTEXT_NT'next mover'
                                    UNKNOWN_NT'next mover'
                                RVALUE_CONTEXT_NT'mercantile people'
                                    CONSTANT_NT'mercantile people'-description of people
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the current owner is the next mover'
                                CONDITION_CONTEXT_NT'the current owner is the next mover'
                            INVOCATION_LIST_NT'follow the shopowner rules'
                                INVOCATION_NT'follow the shopowner rules'
                                    RVALUE_CONTEXT_NT'shopowner rules'
                                        CONSTANT_NT'shopowner rules'-rulebook
                            INVOCATION_LIST_NT'now the current owner is passive'
                                CONDITION_CONTEXT_NT'the current owner is passive'
                    INVOCATION_LIST_NT'follow the infection rule'
                        INVOCATION_NT'follow the infection rule'
                            RVALUE_CONTEXT_NT'infection rule'
                                CONSTANT_NT'infection rule'-rule
            ROUTINE_NT'to decide whether movement has not yet occurred'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the player is passive'
                            INVOCATION_NT'if the player is passive'
                                CONDITION_CONTEXT_NT'player is passive'
                                    TEST_PROPOSITION_NT'player is passive'(test: [ A94'passive'('player') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no'
                                INVOCATION_NT'no'
                    INVOCATION_LIST_NT'yes'
                        INVOCATION_NT'yes'
            ROUTINE_NT'definition'
            ROUTINE_NT'definition'
            SENTENCE_NT'the shopowner rules is a rulebook'
                AVERB_NT'is'
                PROPER_NOUN_NT'shopowner rules'
                COMMON_NOUN_NT'rulebook'
            ROUTINE_NT'a shopowner rule'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the shop be a random room owned by the current owner'
                        INVOCATION_NT'let the shop be a random room owned by the current owner'
                            NEW_LOCAL_CONTEXT_NT'shop'
                                UNKNOWN_NT'shop'
                            RVALUE_CONTEXT_NT'a random room owned by the current owner'
                                PHRASE_TO_DECIDE_VALUE_NT'a random room owned by the current owner'
                                    INVOCATION_LIST_NT'a random room owned by the current owner'
                                        INVOCATION_NT'a random room owned by the current owner'
                                            RVALUE_CONTEXT_NT'room owned by the current owner'
                                                CONSTANT_NT'room owned by the current owner'-description of rooms
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the shop is air-conditioned and an open door ( called the escape ) protects the shop'
                            INVOCATION_NT'if the shop is air-conditioned and an open door ( called the escape ) protects the shop'
                                CONDITION_CONTEXT_NT'shop is air-conditioned and an open door ( called the escape ) protects the shop'
                                    LOGICAL_AND_NT'shop is air-conditioned and an open door ( called the escape ) protects the shop'
                                        TEST_PROPOSITION_NT'shop is air-conditioned'(test: [ A44'air-conditioned'('shop') ])
                                        TEST_PROPOSITION_NT'an open door ( called the escape ) protects the shop'(test: [ Exists x : kind=door(x) ^ A80'open'(x) ^ called='escape'(door)(x) ^ protection(x, 'the shop') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current owner closing the escape'
                                INVOCATION_NT'try the current owner closing the escape'
                                    RVALUE_CONTEXT_NT'current owner closing the escape'
                                        CONSTANT_NT'current owner closing the escape'-action
                            CODE_BLOCK_NT
            ROUTINE_NT'report someone closing a door when the person asked owns the location'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked], muttering darkly about air-conditioning and electricity, closes [the noun]."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'", muttering darkly about air-conditioning and electricity, closes "'
                            INVOCATION_NT'", muttering darkly about air-conditioning and electricity, closes "'
                                RVALUE_CONTEXT_NT'", muttering darkly about air-conditioning and electricity, closes "'
                                    CONSTANT_NT'", muttering darkly about air-conditioning and electricity, closes "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
                    CODE_BLOCK_NT
            ROUTINE_NT'report vanessa closing the metal door when the metal door is visible'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if vanessa is visible'
                            INVOCATION_NT'if vanessa is visible'
                                CONDITION_CONTEXT_NT'vanessa is visible'
                                    TEST_PROPOSITION_NT'vanessa is visible'(test: [ A30'visible'('vanessa') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "Vanessa watches serenely as the metal door slides automatically back in place, sealing Cold Comfort."'
                                INVOCATION_LIST_SAY_NT'"Vanessa watches serenely as the metal door slides automatically back in place, sealing Cold Comfort."'
                                    INVOCATION_NT'"Vanessa watches serenely as the metal door slides automatically back in place, sealing Cold Comfort."'
                                        RVALUE_CONTEXT_NT'"Vanessa watches serenely as the metal door slides automatically back in place, sealing Cold Comfort."'
                                            CONSTANT_NT'"Vanessa watches serenely as the metal door slides automatically back in place, sealing Cold Comfort."'-text
                            CODE_BLOCK_NT
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT'say "The metal door slides heavily back into place."'
                                INVOCATION_LIST_SAY_NT'"The metal door slides heavily back into place."'
                                    INVOCATION_NT'"The metal door slides heavily back into place."'
                                        RVALUE_CONTEXT_NT'"The metal door slides heavily back into place."'
                                            CONSTANT_NT'"The metal door slides heavily back into place."'-text
                            CODE_BLOCK_NT
            ROUTINE_NT'a shopowner rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the location of the current owner encloses a submitted artwork ( called the target )'
                            INVOCATION_NT'if the location of the current owner encloses a submitted artwork ( called the target )'
                                CONDITION_CONTEXT_NT'location of the current owner encloses a submitted artwork ( called the target )'
                                    TEST_PROPOSITION_NT'location of the current owner encloses a submitted artwork ( called the target )'(test: [ Exists x : kind=artwork(x) ^ A95'submitted'(x) ^ called='target'(artwork)(x) ^ encloses('location of the current owner', x) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current owner filing the target'
                                INVOCATION_NT'try the current owner filing the target'
                                    RVALUE_CONTEXT_NT'current owner filing the target'
                                        CONSTANT_NT'current owner filing the target'-action
            SENTENCE_NT'filing is an action applying to one thing'
                AVERB_NT'is'
                PROPER_NOUN_NT'filing'
                PROPER_NOUN_NT'applying to one thing'
            ROUTINE_NT'before someone filing something which is not carried by the person asked'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked taking the noun'
                        INVOCATION_NT'try the person asked taking the noun'
                            RVALUE_CONTEXT_NT'person asked taking the noun'
                                CONSTANT_NT'person asked taking the noun'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'carry out someone filing'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked does not carry the noun and the person asked is visible'
                            INVOCATION_NT'if the person asked does not carry the noun and the person asked is visible'
                                CONDITION_CONTEXT_NT'person asked does not carry the noun and the person asked is visible'
                                    LOGICAL_AND_NT'person asked does not carry the noun and the person asked is visible'
                                        TEST_PROPOSITION_NT'person asked does not carry the noun'(test: [ NOT[ is('person asked', {<schema: CarrierOf(*1)>:'the noun'}) NOT] ])
                                        TEST_PROPOSITION_NT'the person asked is visible'(test: [ A30'visible'('the person asked') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] tries unsuccessfully to get [the noun]."'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" tries unsuccessfully to get "'
                                    INVOCATION_NT'" tries unsuccessfully to get "'
                                        RVALUE_CONTEXT_NT'" tries unsuccessfully to get "'
                                            CONSTANT_NT'" tries unsuccessfully to get "'-text
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
                            CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is nowhere'
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            ROUTINE_NT'report someone filing'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] registers [the noun] and files it away."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" registers "'
                            INVOCATION_NT'" registers "'
                                RVALUE_CONTEXT_NT'" registers "'
                                    CONSTANT_NT'" registers "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'" and files it away."'
                            INVOCATION_NT'" and files it away."'
                                RVALUE_CONTEXT_NT'" and files it away."'
                                    CONSTANT_NT'" and files it away."'-text
            SENTENCE_NT'the shopper rules is a rulebook'
                AVERB_NT'is'
                PROPER_NOUN_NT'shopper rules'
                COMMON_NOUN_NT'rulebook'
            ROUTINE_NT'a shopper rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the current actor carries something ( called the problem )'
                            INVOCATION_NT'if the current actor carries something ( called the problem )'
                                CONDITION_CONTEXT_NT'current actor carries something ( called the problem )'
                                    TEST_PROPOSITION_NT'current actor carries something ( called the problem )'(test: [ Exists x : kind=thing_c(x) ^ called='problem'(thing)(x) ^ is('current actor', {<schema: CarrierOf(*1)>:x}) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current actor resolving the problem'
                                INVOCATION_NT'try the current actor resolving the problem'
                                    RVALUE_CONTEXT_NT'current actor resolving the problem'
                                        CONSTANT_NT'current actor resolving the problem'-action
                            CODE_BLOCK_NT
            ROUTINE_NT'a shopper rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the current actor is not in the pool hall and the air conditioner is switched on'
                            INVOCATION_NT'if the current actor is not in the pool hall and the air conditioner is switched on'
                                CONDITION_CONTEXT_NT'current actor is not in the pool hall and the air conditioner is switched on'
                                    LOGICAL_AND_NT'current actor is not in the pool hall and the air conditioner is switched on'
                                        TEST_PROPOSITION_NT'current actor is not in the pool hall'(test: [ NOT[ is('the pool hall', {<schema: ContainerOf(*1)>:'current actor'}) NOT] ])
                                        TEST_PROPOSITION_NT'the air conditioner is switched on'(test: [ A90'switched on'('the air conditioner') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the current actor approaching the pool hall'
                                INVOCATION_NT'try the current actor approaching the pool hall'
                                    RVALUE_CONTEXT_NT'current actor approaching the pool hall'
                                        CONSTANT_NT'current actor approaching the pool hall'-action
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'let way be a random direction'
                                INVOCATION_NT'let way be a random direction'
                                    NEW_LOCAL_CONTEXT_NT'way'
                                        UNKNOWN_NT'way'
                                    RVALUE_CONTEXT_NT'a random direction'
                                        PHRASE_TO_DECIDE_VALUE_NT'a random direction'
                                            INVOCATION_LIST_NT'a random direction'
                                                INVOCATION_NT'a random direction'
                                                    RVALUE_CONTEXT_NT'direction'
                                                        CONSTANT_NT'direction'-description of directions
                            INVOCATION_LIST_NT'try the current actor going the way'
                                INVOCATION_NT'try the current actor going the way'
                                    RVALUE_CONTEXT_NT'current actor going the way'
                                        CONSTANT_NT'current actor going the way'-action
            ROUTINE_NT'definition'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if it is outdoors'
                            INVOCATION_NT'if it is outdoors'
                                CONDITION_CONTEXT_NT'it is outdoors'
                                    TEST_PROPOSITION_NT'it is outdoors'(test: [ A128'outdoors'('it') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no'
                                INVOCATION_NT'no'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if it is the pool hall and the air conditioner is switched off'
                            INVOCATION_NT'if it is the pool hall and the air conditioner is switched off'
                                CONDITION_CONTEXT_NT'it is the pool hall and the air conditioner is switched off'
                                    LOGICAL_AND_NT'it is the pool hall and the air conditioner is switched off'
                                        TEST_PROPOSITION_NT'it is the pool hall'(test: [ is('it', 'the pool hall') ])
                                        TEST_PROPOSITION_NT'the air conditioner is switched off'(test: [ A91'switched off'('the air conditioner') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'no'
                                INVOCATION_NT'no'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if it is protected by a door'
                            INVOCATION_NT'if it is protected by a door'
                                CONDITION_CONTEXT_NT'it is protected by a door'
                                    TEST_PROPOSITION_NT'it is protected by a door'(test: [ Exists x : kind=door(x) ^ protection(x, 'it') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes'
                                INVOCATION_NT'yes'
                    INVOCATION_LIST_NT'no'
                        INVOCATION_NT'no'
            SENTENCE_NT'protection relates a door ( called x ) to a room ( called y ) when the front side of x is y or the back side of x is y'
                AVERB_NT'relates'
                PROPER_NOUN_NT'protection'
                PROPER_NOUN_NT'a door ( called x )'
                PROPER_NOUN_NT'a room ( called y ) when the front side of x is y or the back side of x is y'
            SENTENCE_NT'the verb to protect means the protection relation'
                AVERB_NT'means'
                PROPER_NOUN_NT'to protect'
                PROPER_NOUN_NT'protection relation'
            SENTENCE_NT'ownership relates one person to various rooms'
                AVERB_NT'relates'
                PROPER_NOUN_NT'ownership'
                PROPER_NOUN_NT'one person'
                PROPER_NOUN_NT'various rooms'
            SENTENCE_NT'the verb to own means the ownership relation'
                AVERB_NT'means'
                PROPER_NOUN_NT'to own'
                PROPER_NOUN_NT'ownership relation'
            SENTENCE_NT'resolving is an action applying to one thing'
                AVERB_NT'is'
                PROPER_NOUN_NT'resolving'
                PROPER_NOUN_NT'applying to one thing'
            SENTENCE_NT'an artwork is a kind of thing'
                AVERB_NT'is'
                COMMON_NOUN_NT'artwork'
                KIND_NT'kind of thing'
                    COMMON_NOUN_NT'thing'
            ROUTINE_NT'before printing the name of an artwork'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say italic type'
                        INVOCATION_LIST_SAY_NT'italic type'
                            INVOCATION_NT'italic type'
            ROUTINE_NT'after printing the name of an artwork'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say roman type'
                        INVOCATION_LIST_SAY_NT'roman type'
                            INVOCATION_NT'roman type'
            SENTENCE_NT'an artwork can be submitted or reserved'
                AVERB_NT'can be'
                COMMON_NOUN_NT'an artwork'
                PROPER_NOUN_NT'submitted or reserved'
                    AND_NT'or'
                        PROPER_NOUN_NT'submitted'
                        PROPER_NOUN_NT'reserved'
            SENTENCE_NT'a book is a kind of artwork'
                AVERB_NT'is'
                COMMON_NOUN_NT'book'
                KIND_NT'kind of artwork'
                    COMMON_NOUN_NT'artwork'
            ROUTINE_NT'before someone resolving a book when the person asked is not in the public library'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the public library'
                        INVOCATION_NT'try the person asked approaching the public library'
                            RVALUE_CONTEXT_NT'person asked approaching the public library'
                                CONSTANT_NT'person asked approaching the public library'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'carry out someone resolving a book'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'move the noun to the public library'
                        INVOCATION_NT'move the noun to the public library'
                            RVALUE_CONTEXT_NT'noun'
                                NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                            RVALUE_CONTEXT_NT'public library'
                                CONSTANT_NT'public library'-room(I_public_library)(I110'public library')
                    INVOCATION_LIST_NT'now the noun is submitted'
                        CONDITION_CONTEXT_NT'the noun is submitted'
            ROUTINE_NT'report someone resolving a book'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] turns in [the noun]."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" turns in "'
                            INVOCATION_NT'" turns in "'
                                RVALUE_CONTEXT_NT'" turns in "'
                                    CONSTANT_NT'" turns in "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
            ROUTINE_NT'before listing contents'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'group books together'
                        INVOCATION_NT'group books together'
                            RVALUE_CONTEXT_NT'books'
                                CONSTANT_NT'books'-description of books
            ROUTINE_NT'before grouping together books'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "books entitled "'
                        INVOCATION_LIST_SAY_NT'"books entitled "'
                            INVOCATION_NT'"books entitled "'
                                RVALUE_CONTEXT_NT'"books entitled "'
                                    CONSTANT_NT'"books entitled "'-text
            SENTENCE_NT'a stamped envelope is a kind of thing'
                AVERB_NT'is'
                COMMON_NOUN_NT'stamped envelope'
                KIND_NT'kind of thing'
                    COMMON_NOUN_NT'thing'
            ROUTINE_NT'before someone resolving a stamped envelope when the person asked is not in the post office'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the post office'
                        INVOCATION_NT'try the person asked approaching the post office'
                            RVALUE_CONTEXT_NT'person asked approaching the post office'
                                CONSTANT_NT'person asked approaching the post office'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'carry out someone resolving a stamped envelope'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is nowhere'
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            ROUTINE_NT'report someone resolving a stamped envelope'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] slips [a noun] into the outgoing mail slot."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" slips "'
                            INVOCATION_NT'" slips "'
                                RVALUE_CONTEXT_NT'" slips "'
                                    CONSTANT_NT'" slips "'-text
                        INVOCATION_LIST_SAY_NT'a noun'
                            INVOCATION_NT'a noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'" into the outgoing mail slot."'
                            INVOCATION_NT'" into the outgoing mail slot."'
                                RVALUE_CONTEXT_NT'" into the outgoing mail slot."'
                                    CONSTANT_NT'" into the outgoing mail slot."'-text
            ROUTINE_NT'instead of someone resolving a stamped envelope when the person asked carries at least two stamped envelopes'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is visible'
                            INVOCATION_NT'if the person asked is visible'
                                CONDITION_CONTEXT_NT'person asked is visible'
                                    TEST_PROPOSITION_NT'person asked is visible'(test: [ A30'visible'('person asked') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] shoves into the mail slot [a list of stamped envelopes carried by the person asked]."'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" shoves into the mail slot "'
                                    INVOCATION_NT'" shoves into the mail slot "'
                                        RVALUE_CONTEXT_NT'" shoves into the mail slot "'
                                            CONSTANT_NT'" shoves into the mail slot "'-text
                                INVOCATION_LIST_SAY_NT'a list of stamped envelopes carried by the person asked'
                                    INVOCATION_NT'a list of stamped envelopes carried by the person asked'
                                        RVALUE_CONTEXT_NT'stamped envelopes carried by the person asked'
                                            CONSTANT_NT'stamped envelopes carried by the person asked'-description of stamped envelopes
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with item running through stamped envelopes carried by the person asked'
                            INVOCATION_NT'repeat with item running through stamped envelopes carried by the person asked'
                                NEW_LOCAL_CONTEXT_NT'item'
                                    UNKNOWN_NT'item'
                                RVALUE_CONTEXT_NT'stamped envelopes carried by the person asked'
                                    CONSTANT_NT'stamped envelopes carried by the person asked'-description of stamped envelopes
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the item is nowhere'
                                CONDITION_CONTEXT_NT'the item is nowhere'
            SENTENCE_NT'a dvd is a kind of artwork'
                AVERB_NT'is'
                COMMON_NOUN_NT'dvd'
                KIND_NT'kind of artwork'
                    COMMON_NOUN_NT'artwork'
            ROUTINE_NT'before someone resolving a dvd when the person asked is not in the rental store'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching the rental store'
                        INVOCATION_NT'try the person asked approaching the rental store'
                            RVALUE_CONTEXT_NT'person asked approaching the rental store'
                                CONSTANT_NT'person asked approaching the rental store'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'carry out someone resolving a dvd'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is submitted'
                        CONDITION_CONTEXT_NT'the noun is submitted'
                    INVOCATION_LIST_NT'move the noun to the movie rental store'
                        INVOCATION_NT'move the noun to the movie rental store'
                            RVALUE_CONTEXT_NT'noun'
                                NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                            RVALUE_CONTEXT_NT'movie rental store'
                                CONSTANT_NT'movie rental store'-room(I_movie_rental_store)(I104'movie rental store')
            ROUTINE_NT'report someone resolving a dvd'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] returns [the noun]."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" returns "'
                            INVOCATION_NT'" returns "'
                                RVALUE_CONTEXT_NT'" returns "'
                                    CONSTANT_NT'" returns "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
            ROUTINE_NT'instead of someone resolving a dvd when the person asked carries at least two dvds'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is visible'
                            INVOCATION_NT'if the person asked is visible'
                                CONDITION_CONTEXT_NT'person asked is visible'
                                    TEST_PROPOSITION_NT'person asked is visible'(test: [ A30'visible'('person asked') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] turns in [a list of DVDs carried by the person asked]."'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" turns in "'
                                    INVOCATION_NT'" turns in "'
                                        RVALUE_CONTEXT_NT'" turns in "'
                                            CONSTANT_NT'" turns in "'-text
                                INVOCATION_LIST_SAY_NT'a list of dvds carried by the person asked'
                                    INVOCATION_NT'a list of dvds carried by the person asked'
                                        RVALUE_CONTEXT_NT'dvds carried by the person asked'
                                            CONSTANT_NT'dvds carried by the person asked'-description of dvds
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
                    INVOCATION_LIST_NT'now every dvd carried by the person asked is submitted'
                        CONDITION_CONTEXT_NT'every dvd carried by the person asked is submitted'
                    INVOCATION_LIST_NT'now every dvd carried by the person asked is in the location of the person asked'
                        CONDITION_CONTEXT_NT'every dvd carried by the person asked is in the location of the person asked'
            ROUTINE_NT'before listing contents'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'group dvds together'
                        INVOCATION_NT'group dvds together'
                            RVALUE_CONTEXT_NT'dvds'
                                CONSTANT_NT'dvds'-description of dvds
            ROUTINE_NT'before grouping together dvds'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "DVDs of "'
                        INVOCATION_LIST_SAY_NT'"DVDs of "'
                            INVOCATION_NT'"DVDs of "'
                                RVALUE_CONTEXT_NT'"DVDs of "'
                                    CONSTANT_NT'"DVDs of "'-text
            SENTENCE_NT'approaching is an action applying to one thing'
                AVERB_NT'is'
                PROPER_NOUN_NT'approaching'
                PROPER_NOUN_NT'applying to one thing'
            ROUTINE_NT'carry out someone approaching'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the way be the best route from the location of the person asked to the noun , using doors'
                        INVOCATION_NT'let the way be the best route from the location of the person asked to the noun , using doors'
                            NEW_LOCAL_CONTEXT_NT'way'
                                UNKNOWN_NT'way'
                            RVALUE_CONTEXT_NT'best route from the location of the person asked to the noun , using doors'
                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location of the person asked to the noun , using doors'
                                    INVOCATION_LIST_NT'best route from the location of the person asked to the noun , using doors'
                                        INVOCATION_NT'best route from the location of the person asked to the noun'
                                            RVALUE_CONTEXT_NT'location of the person asked'
                                                PHRASE_TO_DECIDE_VALUE_NT'location of the person asked'
                                                    INVOCATION_LIST_NT'location of the person asked'
                                                        INVOCATION_NT'location of the person asked'
                                                            RVALUE_CONTEXT_NT'person asked'
                                                                NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                            RVALUE_CONTEXT_NT'noun'
                                                NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the way is a direction'
                            INVOCATION_NT'if the way is a direction'
                                CONDITION_CONTEXT_NT'way is a direction'
                                    TEST_PROPOSITION_NT'way is a direction'(test: [ kind=direction('way') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try the person asked going the way'
                                INVOCATION_NT'try the person asked going the way'
                                    RVALUE_CONTEXT_NT'person asked going the way'
                                        CONSTANT_NT'person asked going the way'-action
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'stop the action'
                                INVOCATION_NT'stop the action'
            SENTENCE_NT'a coupon is a kind of thing'
                AVERB_NT'is'
                COMMON_NOUN_NT'coupon'
                KIND_NT'kind of thing'
                    COMMON_NOUN_NT'thing'
            ROUTINE_NT'carry out someone resolving a coupon'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked giving the noun to vanessa'
                        INVOCATION_NT'try the person asked giving the noun to vanessa'
                            RVALUE_CONTEXT_NT'person asked giving the noun to vanessa'
                                CONSTANT_NT'person asked giving the noun to vanessa'-action
            SENTENCE_NT'the block giving rule is not listed in any rulebook'
                AVERB_NT'is'
                PROPER_NOUN_NT'the block giving rule'
                PROPER_NOUN_NT'in any rulebook'
            ROUTINE_NT'check giving something to someone ( this is the block player giving rule )'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'abide by the block giving rule'
                        INVOCATION_NT'abide by the block giving rule'
                            RVALUE_CONTEXT_NT'block giving rule'
                                CONSTANT_NT'block giving rule'-rule
            ROUTINE_NT'before someone resolving a coupon when the person asked is not in cold comfort'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked approaching cold comfort'
                        INVOCATION_NT'try the person asked approaching cold comfort'
                            RVALUE_CONTEXT_NT'person asked approaching cold comfort'
                                CONSTANT_NT'person asked approaching cold comfort'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'after someone giving a coupon to vanessa'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the reward be a random ice cream cone'
                        INVOCATION_NT'let the reward be a random ice cream cone'
                            NEW_LOCAL_CONTEXT_NT'reward'
                                UNKNOWN_NT'reward'
                            RVALUE_CONTEXT_NT'a random ice cream cone'
                                PHRASE_TO_DECIDE_VALUE_NT'a random ice cream cone'
                                    INVOCATION_LIST_NT'a random ice cream cone'
                                        INVOCATION_NT'a random ice cream cone'
                                            RVALUE_CONTEXT_NT'ice cream cone'
                                                CONSTANT_NT'ice cream cone'-description of ice cream cones
                    INVOCATION_LIST_NT'let the new flavor be a random infection color'
                        INVOCATION_NT'let the new flavor be a random infection color'
                            NEW_LOCAL_CONTEXT_NT'new flavor'
                                UNKNOWN_NT'new flavor'
                            RVALUE_CONTEXT_NT'a random infection color'
                                PHRASE_TO_DECIDE_VALUE_NT'a random infection color'
                                    INVOCATION_LIST_NT'a random infection color'
                                        INVOCATION_NT'a random infection color'
                                            RVALUE_CONTEXT_NT'infection color'
                                                CONSTANT_NT'infection color'-description of infection colors
                    INVOCATION_LIST_NT'now the infection color of the reward is the new flavor'
                        CONDITION_CONTEXT_NT'the infection color of the reward is the new flavor'
                    INVOCATION_LIST_NT'move the reward to the person asked'
                        INVOCATION_NT'move the reward to the person asked'
                            RVALUE_CONTEXT_NT'reward'
                                LOCAL_VARIABLE_NT'reward'(tmp_0;thing)
                            RVALUE_CONTEXT_NT'person asked'
                                NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                    INVOCATION_LIST_NT'now the noun is nowhere'
                        CONDITION_CONTEXT_NT'the noun is nowhere'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if vanessa is visible'
                            INVOCATION_NT'if vanessa is visible'
                                CONDITION_CONTEXT_NT'vanessa is visible'
                                    TEST_PROPOSITION_NT'vanessa is visible'(test: [ A30'visible'('vanessa') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] trades in [the noun] and receives [a reward] from Vanessa."'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" trades in "'
                                    INVOCATION_NT'" trades in "'
                                        RVALUE_CONTEXT_NT'" trades in "'
                                            CONSTANT_NT'" trades in "'-text
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" and receives "'
                                    INVOCATION_NT'" and receives "'
                                        RVALUE_CONTEXT_NT'" and receives "'
                                            CONSTANT_NT'" and receives "'-text
                                INVOCATION_LIST_SAY_NT'a reward'
                                    INVOCATION_NT'a reward'
                                        RVALUE_CONTEXT_NT'reward'
                                            LOCAL_VARIABLE_NT'reward'(tmp_0;thing)
                                INVOCATION_LIST_SAY_NT'" from Vanessa."'
                                    INVOCATION_NT'" from Vanessa."'
                                        RVALUE_CONTEXT_NT'" from Vanessa."'
                                            CONSTANT_NT'" from Vanessa."'-text
            SENTENCE_NT'infection color is a kind of value'
                AVERB_NT'is'
                COMMON_NOUN_NT'infection color'
                KIND_NT'kind of value'
                    COMMON_NOUN_NT'value'
            SENTENCE_NT'the infection colors are french vanilla , whole-bean vanilla , mint , chocolate , dark chocolate , chocolate chip , chocolate fudge , mint chocolate chip , chocolate chocolate chip , triple chocolate , white chocolate , white chocolate chip , aztec cocoa-chili , raspberry ripple , neapolitan , rum raisin , dulce de leche , strawberry chunk , rocky road , blackberry sorbet , lemon sherbet , lime ice , caramel swirl , mango , saffron silk , and cookie dough cream'
                AVERB_NT'are'
                COMMON_NOUN_NT'infection colors'
                AND_NT','
                    PROPER_NOUN_NT'french vanilla'
                    AND_NT','
                        PROPER_NOUN_NT'whole-bean vanilla'
                        AND_NT','
                            PROPER_NOUN_NT'mint'
                            AND_NT','
                                PROPER_NOUN_NT'chocolate'
                                AND_NT','
                                    PROPER_NOUN_NT'dark chocolate'
                                    AND_NT','
                                        PROPER_NOUN_NT'chocolate chip'
                                        AND_NT','
                                            PROPER_NOUN_NT'chocolate fudge'
                                            AND_NT','
                                                PROPER_NOUN_NT'mint chocolate chip'
                                                AND_NT','
                                                    PROPER_NOUN_NT'chocolate chocolate chip'
                                                    AND_NT','
                                                        PROPER_NOUN_NT'triple chocolate'
                                                        AND_NT','
                                                            PROPER_NOUN_NT'white chocolate'
                                                            AND_NT','
                                                                PROPER_NOUN_NT'white chocolate chip'
                                                                AND_NT','
                                                                    PROPER_NOUN_NT'aztec cocoa-chili'
                                                                    AND_NT','
                                                                        PROPER_NOUN_NT'raspberry ripple'
                                                                        AND_NT','
                                                                            PROPER_NOUN_NT'neapolitan'
                                                                            AND_NT','
                                                                                PROPER_NOUN_NT'rum raisin'
                                                                                AND_NT','
                                                                                    PROPER_NOUN_NT'dulce de leche'
                                                                                    AND_NT','
                                                                                        PROPER_NOUN_NT'strawberry chunk'
                                                                                        AND_NT','
                                                                                            PROPER_NOUN_NT'rocky road'
                                                                                            AND_NT','
                                                                                                PROPER_NOUN_NT'blackberry sorbet'
                                                                                                AND_NT','
                                                                                                    PROPER_NOUN_NT'lemon sherbet'
                                                                                                    AND_NT','
                                                                                                        PROPER_NOUN_NT'lime ice'
                                                                                                        AND_NT','
                                                                                                            PROPER_NOUN_NT'caramel swirl'
                                                                                                            AND_NT','
                                                                                                                PROPER_NOUN_NT'mango'
                                                                                                                AND_NT','
                                                                                                                    PROPER_NOUN_NT'saffron silk'
                                                                                                                    PROPER_NOUN_NT'cookie dough cream'
            ROUTINE_NT'to say list of flavors'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let current color be french vanilla'
                        INVOCATION_NT'let current color be french vanilla'
                            NEW_LOCAL_CONTEXT_NT'current color'
                                UNKNOWN_NT'current color'
                            RVALUE_CONTEXT_NT'french vanilla'
                                CONSTANT_NT'french vanilla'-infection color(I_french_vanilla)
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'while current color is not cookie dough cream'
                            INVOCATION_NT'while current color is not cookie dough cream'
                                CONDITION_CONTEXT_NT'current color is not cookie dough cream'
                                    TEST_PROPOSITION_NT'current color is not cookie dough cream'(test: [ NOT[ is('current color', 'cookie dough cream') NOT] ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[current color], "'
                                INVOCATION_LIST_SAY_NT'current color'
                                    INVOCATION_NT'current color'
                                        RVALUE_CONTEXT_NT'current color'
                                            LOCAL_VARIABLE_NT'current color'(tmp_0;infection color)
                                INVOCATION_LIST_SAY_NT'", "'
                                    INVOCATION_NT'", "'
                                        RVALUE_CONTEXT_NT'", "'
                                            CONSTANT_NT'", "'-text
                            INVOCATION_LIST_NT'now current color is the infection color after the current color'
                                CONDITION_CONTEXT_NT'current color is the infection color after the current color'
                    CODE_BLOCK_NT'say "and [current color]"'
                        INVOCATION_LIST_SAY_NT'"and "'
                            INVOCATION_NT'"and "'
                                RVALUE_CONTEXT_NT'"and "'
                                    CONSTANT_NT'"and "'-text
                        INVOCATION_LIST_SAY_NT'current color'
                            INVOCATION_NT'current color'
                                RVALUE_CONTEXT_NT'current color'
                                    LOCAL_VARIABLE_NT'current color'(tmp_0;infection color)
            SENTENCE_NT'understand "ask vanessa for [flavored ice cream]" as buying the flavor'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"ask vanessa for [flavored ice cream]"'
                PROPER_NOUN_NT'buying the flavor'
            SENTENCE_NT'understand "buy [flavored ice cream]" as buying the flavor'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"buy [flavored ice cream]"'
                PROPER_NOUN_NT'buying the flavor'
            SENTENCE_NT'buying the flavor is an action applying to one infection color'
                AVERB_NT'is'
                PROPER_NOUN_NT'buying the flavor'
                PROPER_NOUN_NT'applying to one infection color'
            ROUTINE_NT'check buying the flavor'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'unless the player can see vanessa'
                            INVOCATION_NT'unless the player can see vanessa'
                                CONDITION_CONTEXT_NT'player can see vanessa'
                                    TEST_PROPOSITION_NT'player can see vanessa'(test: [ can-see('player', 'vanessa') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "It would help if you were in the presence of an ice cream salesperson."'
                                INVOCATION_LIST_SAY_NT'"It would help if you were in the presence of an ice cream salesperson."'
                                    INVOCATION_NT'"It would help if you were in the presence of an ice cream salesperson."'
                                        RVALUE_CONTEXT_NT'"It would help if you were in the presence of an ice cream salesperson."'
                                            CONSTANT_NT'"It would help if you were in the presence of an ice cream salesperson."'-text
                            CODE_BLOCK_NT
            ROUTINE_NT'carry out buying the flavor'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "'Do you have a coupon?' Vanessa demands. You admit you do not. 'No [infection color understood] for you!'"'
                        INVOCATION_LIST_SAY_NT'"'Do you have a coupon?' Vanessa demands. You admit you do not. 'No "'
                            INVOCATION_NT'"'Do you have a coupon?' Vanessa demands. You admit you do not. 'No "'
                                RVALUE_CONTEXT_NT'"'Do you have a coupon?' Vanessa demands. You admit you do not. 'No "'
                                    CONSTANT_NT'"'Do you have a coupon?' Vanessa demands. You admit you do not. 'No "'-text
                        INVOCATION_LIST_SAY_NT'infection color understood'
                            INVOCATION_NT'infection color understood'
                                RVALUE_CONTEXT_NT'infection color understood'
                                    NONLOCAL_VARIABLE_NT'infection color understood'('infection color understood'(var)[infection color])
                        INVOCATION_LIST_SAY_NT'" for you!'"'
                            INVOCATION_NT'" for you!'"'
                                RVALUE_CONTEXT_NT'" for you!'"'
                                    CONSTANT_NT'" for you!'"'-text
            SENTENCE_NT'understand "ice cream" or "cream" or "ice" or "sherbet" or "sorbet" as "[ice cream]"'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"ice cream" or "cream" or "ice" or "sherbet" or "sorbet"'
                PROPER_NOUN_NT'"[ice cream]"'
            SENTENCE_NT'understand "[infection color]" or "[infection color] [ice cream]" as "[flavored ice cream]"'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"[infection color]" or "[infection color] [ice cream]"'
                PROPER_NOUN_NT'"[flavored ice cream]"'
            SENTENCE_NT'an ice cream cone is a kind of thing'
                AVERB_NT'is'
                COMMON_NOUN_NT'ice cream cone'
                KIND_NT'kind of thing'
                    COMMON_NOUN_NT'thing'
            SENTENCE_NT'an ice cream cone is always edible'
                AVERB_NT'is always'
                COMMON_NOUN_NT'ice cream cone'
                ADJECTIVE_NT'edible'
            SENTENCE_NT'an ice cream cone has an infection color'
                AVERB_NT'has'
                COMMON_NOUN_NT'ice cream cone'
                ALLOWED_NT
                    PROPER_NOUN_NT'infection color'
            SENTENCE_NT'an ice cream cone can be half-eaten or fresh'
                AVERB_NT'can be'
                COMMON_NOUN_NT'an ice cream cone'
                PROPER_NOUN_NT'half-eaten or fresh'
                    AND_NT'or'
                        PROPER_NOUN_NT'half-eaten'
                        PROPER_NOUN_NT'fresh'
            SENTENCE_NT'understand the infection color property as referring to an ice cream cone'
                AVERB_NT'understand'
                PROPER_NOUN_NT'the infection color property'
                PROPER_NOUN_NT'referring to an ice cream cone'
            ROUTINE_NT'carry out someone resolving an ice cream cone'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try the person asked eating the noun'
                        INVOCATION_NT'try the person asked eating the noun'
                            RVALUE_CONTEXT_NT'person asked eating the noun'
                                CONSTANT_NT'person asked eating the noun'-action
                    CODE_BLOCK_NT
            ROUTINE_NT'instead of someone eating a fresh ice cream cone'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is half-eaten'
                        CONDITION_CONTEXT_NT'the noun is half-eaten'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is visible'
                            INVOCATION_NT'if the person asked is visible'
                                CONDITION_CONTEXT_NT'person asked is visible'
                                    TEST_PROPOSITION_NT'person asked is visible'(test: [ A30'visible'('person asked') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] licks [the noun]."'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" licks "'
                                    INVOCATION_NT'" licks "'
                                        RVALUE_CONTEXT_NT'" licks "'
                                            CONSTANT_NT'" licks "'-text
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
            ROUTINE_NT'report someone eating an ice cream cone'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] pops the end of [the noun] into [if the person asked is female]her[otherwise]his[end if] mouth and swallows."'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" pops the end of "'
                            INVOCATION_NT'" pops the end of "'
                                RVALUE_CONTEXT_NT'" pops the end of "'
                                    CONSTANT_NT'" pops the end of "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'" into "'
                            INVOCATION_NT'" into "'
                                RVALUE_CONTEXT_NT'" into "'
                                    CONSTANT_NT'" into "'-text
                        INVOCATION_LIST_SAY_NT'if the person asked is female'
                            INVOCATION_NT'if the person asked is female'
                                CONDITION_CONTEXT_NT'person asked is female'
                                    TEST_PROPOSITION_NT'person asked is female'(test: [ A87'female'('person asked') ])
                        INVOCATION_LIST_SAY_NT'"her"'
                            INVOCATION_NT'"her"'
                                RVALUE_CONTEXT_NT'"her"'
                                    CONSTANT_NT'"her"'-text
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise'
                        INVOCATION_LIST_SAY_NT'"his"'
                            INVOCATION_NT'"his"'
                                RVALUE_CONTEXT_NT'"his"'
                                    CONSTANT_NT'"his"'-text
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'" mouth and swallows."'
                            INVOCATION_NT'" mouth and swallows."'
                                RVALUE_CONTEXT_NT'" mouth and swallows."'
                                    CONSTANT_NT'" mouth and swallows."'-text
                    CODE_BLOCK_NT
            ROUTINE_NT'before printing the name of an ice cream cone'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[if half-eaten]half-eaten [end if][infection color] "'
                        INVOCATION_LIST_SAY_NT'if half-eaten'
                            INVOCATION_NT'if half-eaten'
                                CONDITION_CONTEXT_NT'half-eaten'
                                    TEST_PROPOSITION_NT'half-eaten'(test: [ A123'half-eaten'(CONSTANT_NT-object(-self-)) ])
                        INVOCATION_LIST_SAY_NT'"half-eaten "'
                            INVOCATION_NT'"half-eaten "'
                                RVALUE_CONTEXT_NT'"half-eaten "'
                                    CONSTANT_NT'"half-eaten "'-text
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'infection color'
                            INVOCATION_NT'infection color'
                                RVALUE_CONTEXT_NT'infection color'
                                    PROPERTY_VALUE_NT'infection color'
                                        CONSTANT_NT'infection color'-infection colors valued property
                                        CONSTANT_NT-object(-self-)
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "'
                                RVALUE_CONTEXT_NT'" "'
                                    CONSTANT_NT'" "'-text
        HEADING_NT'section 2 - infection rules' (level 5)
            ROUTINE_NT'this is the infection rule'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if an infected person ( called typhoid mary ) can see a clean person ( called random bystander ) and a random chance of 1 in 3 succeeds'
                            INVOCATION_NT'if an infected person ( called typhoid mary ) can see a clean person ( called random bystander ) and a random chance of 1 in 3 succeeds'
                                CONDITION_CONTEXT_NT'an infected person ( called typhoid mary ) can see a clean person ( called random bystander ) and a random chance of 1 in 3 succeeds'
                                    LOGICAL_AND_NT'an infected person ( called typhoid mary ) can see a clean person ( called random bystander ) and a random chance of 1 in 3 succeeds'
                                        TEST_PROPOSITION_NT'an infected person ( called typhoid mary ) can see a clean person ( called random bystander )'(test: [ Exists x : kind=person(x) ^ A125'infected'(x) ^ called='typhoid mary'(person)(x) ^ Exists y : kind=person(y) ^ A126'clean'(y) ^ called='random bystander'(person)(y) ^ can-see(x, y) ])
                                        TEST_VALUE_NT'a random chance of 1 in 3 succeeds'
                                            PHRASE_TO_DECIDE_VALUE_NT'a random chance of 1 in 3 succeeds'
                                                INVOCATION_LIST_NT'a random chance of 1 in 3 succeeds'
                                                    INVOCATION_NT'a random chance of 1 in 3 succeeds'
                                                        RVALUE_CONTEXT_NT'1'
                                                            CONSTANT_NT'1'-number
                                                        RVALUE_CONTEXT_NT'3'
                                                            CONSTANT_NT'3'-number
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try typhoid mary sneezing on the random bystander'
                                INVOCATION_NT'try typhoid mary sneezing on the random bystander'
                                    RVALUE_CONTEXT_NT'typhoid mary sneezing on the random bystander'
                                        CONSTANT_NT'typhoid mary sneezing on the random bystander'-action
            SENTENCE_NT'a person can be infected or clean'
                AVERB_NT'can be'
                COMMON_NOUN_NT'a person'
                PROPER_NOUN_NT'infected or clean'
                    AND_NT'or'
                        PROPER_NOUN_NT'infected'
                        PROPER_NOUN_NT'clean'
            SENTENCE_NT'a person has an infection color'
                AVERB_NT'has'
                COMMON_NOUN_NT'person'
                ALLOWED_NT
                    PROPER_NOUN_NT'infection color'
            ROUTINE_NT'every turn'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the player is infected'
                            INVOCATION_NT'if the player is infected'
                                CONDITION_CONTEXT_NT'player is infected'
                                    TEST_PROPOSITION_NT'player is infected'(test: [ A125'infected'('player') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You feel itchy."'
                                INVOCATION_LIST_SAY_NT'"You feel itchy."'
                                    INVOCATION_NT'"You feel itchy."'
                                        RVALUE_CONTEXT_NT'"You feel itchy."'
                                            CONSTANT_NT'"You feel itchy."'-text
            ROUTINE_NT'definition'
            ROUTINE_NT'definition'
            ROUTINE_NT'when play begins'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now right hand status line is "Sick: [number of infected people]/[number of people]"'
                        CONDITION_CONTEXT_NT'right hand status line is "Sick: [number of infected people]/[number of people]"'
            ROUTINE_NT'every turn'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if every person is infected'
                            INVOCATION_NT'if every person is infected'
                                CONDITION_CONTEXT_NT'every person is infected'
                                    TEST_PROPOSITION_NT'every person is infected'(test: [ ForAll x IN[ kind=person(x) IN] : A125'infected'(x) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'end the story saying "Everyone succumbs"'
                                INVOCATION_NT'end the story saying "Everyone succumbs"'
                                    RVALUE_CONTEXT_NT'"Everyone succumbs"'
                                        CONSTANT_NT'"Everyone succumbs"'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if every person is clean'
                            INVOCATION_NT'if every person is clean'
                                CONDITION_CONTEXT_NT'every person is clean'
                                    TEST_PROPOSITION_NT'every person is clean'(test: [ ForAll x IN[ kind=person(x) IN] : A126'clean'(x) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'end the story finally saying "The Syndrome is eradicated"'
                                INVOCATION_NT'end the story finally saying "The Syndrome is eradicated"'
                                    RVALUE_CONTEXT_NT'"The Syndrome is eradicated"'
                                        CONSTANT_NT'"The Syndrome is eradicated"'-text
            SENTENCE_NT'understand "sneeze on [something]" as sneezing on'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"sneeze on [something]"'
                PROPER_NOUN_NT'sneezing on'
            SENTENCE_NT'sneezing on is an action applying to one thing'
                AVERB_NT'is'
                PROPER_NOUN_NT'sneezing on'
                PROPER_NOUN_NT'applying to one thing'
            ROUTINE_NT'check sneezing on'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the player is clean'
                            INVOCATION_NT'if the player is clean'
                                CONDITION_CONTEXT_NT'player is clean'
                                    TEST_PROPOSITION_NT'player is clean'(test: [ A126'clean'('player') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You're not sickly."'
                                INVOCATION_LIST_SAY_NT'"You're not sickly."'
                                    INVOCATION_NT'"You're not sickly."'
                                        RVALUE_CONTEXT_NT'"You're not sickly."'
                                            CONSTANT_NT'"You're not sickly."'-text
                            CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the noun is the player'
                            INVOCATION_NT'if the noun is the player'
                                CONDITION_CONTEXT_NT'noun is the player'
                                    TEST_PROPOSITION_NT'noun is the player'(test: [ is('noun', 'the player') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "Ew."'
                                INVOCATION_LIST_SAY_NT'"Ew."'
                                    INVOCATION_NT'"Ew."'
                                        RVALUE_CONTEXT_NT'"Ew."'
                                            CONSTANT_NT'"Ew."'-text
                            CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the noun is not a person'
                            INVOCATION_NT'if the noun is not a person'
                                CONDITION_CONTEXT_NT'noun is not a person'
                                    TEST_PROPOSITION_NT'noun is not a person'(test: [ NOT[ kind=person('noun') NOT] ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The noun] cannot be infected."'
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" cannot be infected."'
                                    INVOCATION_NT'" cannot be infected."'
                                        RVALUE_CONTEXT_NT'" cannot be infected."'
                                            CONSTANT_NT'" cannot be infected."'-text
                            CODE_BLOCK_NT
            ROUTINE_NT'carry out sneezing on'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is infected'
                        CONDITION_CONTEXT_NT'the noun is infected'
                    INVOCATION_LIST_NT'now the infection color of the noun is a random infection color'
                        CONDITION_CONTEXT_NT'the infection color of the noun is a random infection color'
            ROUTINE_NT'carry out someone sneezing on'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is infected'
                        CONDITION_CONTEXT_NT'the noun is infected'
                    INVOCATION_LIST_NT'now the infection color of the noun is a random infection color'
                        CONDITION_CONTEXT_NT'the infection color of the noun is a random infection color'
            ROUTINE_NT'report sneezing on'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "Unable to control yourself, you sneeze on [noun]."'
                        INVOCATION_LIST_SAY_NT'"Unable to control yourself, you sneeze on "'
                            INVOCATION_NT'"Unable to control yourself, you sneeze on "'
                                RVALUE_CONTEXT_NT'"Unable to control yourself, you sneeze on "'
                                    CONSTANT_NT'"Unable to control yourself, you sneeze on "'-text
                        INVOCATION_LIST_SAY_NT'noun'
                            INVOCATION_NT'noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
            ROUTINE_NT'report someone sneezing on'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The person asked] sneezes on [if the noun is the player]you[otherwise][noun][end if]!"'
                        INVOCATION_LIST_SAY_NT'the person asked'
                            INVOCATION_NT'the person asked'
                                RVALUE_CONTEXT_NT'person asked'
                                    NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        INVOCATION_LIST_SAY_NT'" sneezes on "'
                            INVOCATION_NT'" sneezes on "'
                                RVALUE_CONTEXT_NT'" sneezes on "'
                                    CONSTANT_NT'" sneezes on "'-text
                        INVOCATION_LIST_SAY_NT'if the noun is the player'
                            INVOCATION_NT'if the noun is the player'
                                CONDITION_CONTEXT_NT'noun is the player'
                                    TEST_PROPOSITION_NT'noun is the player'(test: [ is('noun', 'the player') ])
                        INVOCATION_LIST_SAY_NT'"you"'
                            INVOCATION_NT'"you"'
                                RVALUE_CONTEXT_NT'"you"'
                                    CONSTANT_NT'"you"'-text
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise'
                        INVOCATION_LIST_SAY_NT'noun'
                            INVOCATION_NT'noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'"!"'
                            INVOCATION_NT'"!"'
                                RVALUE_CONTEXT_NT'"!"'
                                    CONSTANT_NT'"!"'-text
            SENTENCE_NT'understand "inject [someone] with [something]" as injecting it with'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"inject [someone] with [something]"'
                PROPER_NOUN_NT'injecting it with'
            SENTENCE_NT'understand "inject [someone] with [syringe]" as injecting it with'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"inject [someone] with [syringe]"'
                PROPER_NOUN_NT'injecting it with'
            SENTENCE_NT'understand "use [syringe] on [someone]" as injecting it with'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"use [syringe] on [someone]"'
                PROPER_NOUN_NT'injecting it with'
            SENTENCE_NT'understand the commands innoculate and vaccinate as inject'
                AVERB_NT'understand'
                PROPER_NOUN_NT'the commands innoculate and vaccinate'
                PROPER_NOUN_NT'inject'
            SENTENCE_NT'injecting it with is an action applying to two things'
                AVERB_NT'is'
                PROPER_NOUN_NT'injecting it with'
                PROPER_NOUN_NT'applying to two things'
            ROUTINE_NT'check injecting it with'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the second noun is not the syringe'
                            INVOCATION_NT'if the second noun is not the syringe'
                                CONDITION_CONTEXT_NT'second noun is not the syringe'
                                    TEST_PROPOSITION_NT'second noun is not the syringe'(test: [ NOT[ is('second noun', 'the syringe') NOT] ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The second noun] cannot inject anything."'
                                INVOCATION_LIST_SAY_NT'the second noun'
                                    INVOCATION_NT'the second noun'
                                        RVALUE_CONTEXT_NT'second noun'
                                            NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" cannot inject anything."'
                                    INVOCATION_NT'" cannot inject anything."'
                                        RVALUE_CONTEXT_NT'" cannot inject anything."'
                                            CONSTANT_NT'" cannot inject anything."'-text
                            CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the noun is clean'
                            INVOCATION_NT'if the noun is clean'
                                CONDITION_CONTEXT_NT'noun is clean'
                                    TEST_PROPOSITION_NT'noun is clean'(test: [ A126'clean'('noun') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the noun is the player'
                                    INVOCATION_NT'if the noun is the player'
                                        CONDITION_CONTEXT_NT'noun is the player'
                                            TEST_PROPOSITION_NT'noun is the player'(test: [ is('noun', 'the player') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You're not infected yet."'
                                        INVOCATION_LIST_SAY_NT'"You're not infected yet."'
                                            INVOCATION_NT'"You're not infected yet."'
                                                RVALUE_CONTEXT_NT'"You're not infected yet."'
                                                    CONSTANT_NT'"You're not infected yet."'-text
                                    CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The noun] is not infected, and the syringe contains a cure, not a vaccine."'
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" is not infected, and the syringe contains a cure, not a vaccine."'
                                    INVOCATION_NT'" is not infected, and the syringe contains a cure, not a vaccine."'
                                        RVALUE_CONTEXT_NT'" is not infected, and the syringe contains a cure, not a vaccine."'
                                            CONSTANT_NT'" is not infected, and the syringe contains a cure, not a vaccine."'-text
                            CODE_BLOCK_NT
            ROUTINE_NT'carry out injecting it with'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is clean'
                        CONDITION_CONTEXT_NT'the noun is clean'
            ROUTINE_NT'after injecting the player with something'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You inject yourself, wincing at the sting. But the itching fades almost at once."'
                        INVOCATION_LIST_SAY_NT'"You inject yourself, wincing at the sting. But the itching fades almost at once."'
                            INVOCATION_NT'"You inject yourself, wincing at the sting. But the itching fades almost at once."'
                                RVALUE_CONTEXT_NT'"You inject yourself, wincing at the sting. But the itching fades almost at once."'
                                    CONSTANT_NT'"You inject yourself, wincing at the sting. But the itching fades almost at once."'-text
            ROUTINE_NT'report injecting it with'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You inject [the noun], who is now cured (but could easily be reinfected)."'
                        INVOCATION_LIST_SAY_NT'"You inject "'
                            INVOCATION_NT'"You inject "'
                                RVALUE_CONTEXT_NT'"You inject "'
                                    CONSTANT_NT'"You inject "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'", who is now cured (but could easily be reinfected)."'
                            INVOCATION_NT'", who is now cured (but could easily be reinfected)."'
                                RVALUE_CONTEXT_NT'", who is now cured (but could easily be reinfected)."'
                                    CONSTANT_NT'", who is now cured (but could easily be reinfected)."'-text
        HEADING_NT'section 3 - geography' (level 5)
            INCLUSION_NT'include locksmith by emily short'
                HEADING_NT'version 12 of locksmith by emily short begins here' (level 0)
                    BEGINHERE_NT'version 12 of locksmith by emily short'
                    SENTENCE_NT'Implicit handling of doors and containers so that lock manipulation is automatic if the player has the necessary keys.'
                    SENTENCE_NT'use authorial modesty'
                        AVERB_NT'use'
                        PROPER_NOUN_NT'authorial modesty'
                    SENTENCE_NT'to open is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to open'
                    SENTENCE_NT'to lack is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to lack'
                    SENTENCE_NT'to fit is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to fit'
                    SENTENCE_NT'to lock is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to lock'
                    SENTENCE_NT'to unlock is a verb'
                        AVERB_NT'is'
                        PROPER_NOUN_NT'to unlock'
                    HEADING_NT'volume 1 - automatic locking and unlocking with necessary actions' (level 1)
                        SENTENCE_NT'use sequential action translates as (-  Constant SEQUENTIAL_ACTION; '
                            AVERB_NT'translates as'
                            PROPER_NOUN_NT'sequential action'
                            PROPER_NOUN_NT'(-  Constant SEQUENTIAL_ACTION; '
                        ROUTINE_NT'before going through a closed door ( called the blocking door ) ( this is the opening doors before entering rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try opening the blocking door'
                                            INVOCATION_NT'try opening the blocking door'
                                                RVALUE_CONTEXT_NT'opening the blocking door'
                                                    CONSTANT_NT'opening the blocking door'-action
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "(first opening [the blocking door])[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first opening [the blocking door])[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first opening [the blocking door])[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first opening [the blocking door])[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first opening [the blocking door])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try opening the blocking door'
                                            INVOCATION_NT'silently try opening the blocking door'
                                                RVALUE_CONTEXT_NT'opening the blocking door'
                                                    CONSTANT_NT'opening the blocking door'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the blocking door is closed'
                                        INVOCATION_NT'if the blocking door is closed'
                                            CONDITION_CONTEXT_NT'blocking door is closed'
                                                TEST_PROPOSITION_NT'blocking door is closed'(test: [ A81'closed'('blocking door') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before locking an open thing ( called the door ajar ) with something ( this is the closing doors before locking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try closing the door ajar'
                                            INVOCATION_NT'try closing the door ajar'
                                                RVALUE_CONTEXT_NT'closing the door ajar'
                                                    CONSTANT_NT'closing the door ajar'-action
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "(first closing [the door ajar])[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first closing [the door ajar])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try closing the door ajar'
                                            INVOCATION_NT'silently try closing the door ajar'
                                                RVALUE_CONTEXT_NT'closing the door ajar'
                                                    CONSTANT_NT'closing the door ajar'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door ajar is open'
                                        INVOCATION_NT'if the door ajar is open'
                                            CONDITION_CONTEXT_NT'door ajar is open'
                                                TEST_PROPOSITION_NT'door ajar is open'(test: [ A80'open'('door ajar') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before locking keylessly an open thing ( called the door ajar ) ( this is the closing doors before locking keylessly rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try closing the door ajar'
                                            INVOCATION_NT'try closing the door ajar'
                                                RVALUE_CONTEXT_NT'closing the door ajar'
                                                    CONSTANT_NT'closing the door ajar'-action
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "(first closing [the door ajar])[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first closing [the door ajar])[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first closing [the door ajar])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try closing the door ajar'
                                            INVOCATION_NT'silently try closing the door ajar'
                                                RVALUE_CONTEXT_NT'closing the door ajar'
                                                    CONSTANT_NT'closing the door ajar'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door ajar is open'
                                        INVOCATION_NT'if the door ajar is open'
                                            CONDITION_CONTEXT_NT'door ajar is open'
                                                TEST_PROPOSITION_NT'door ajar is open'(test: [ A80'open'('door ajar') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before opening a locked thing ( called the sealed chest ) ( this is the unlocking before opening rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'try unlocking keylessly the sealed chest'
                                            INVOCATION_NT'try unlocking keylessly the sealed chest'
                                                RVALUE_CONTEXT_NT'unlocking keylessly the sealed chest'
                                                    CONSTANT_NT'unlocking keylessly the sealed chest'-action
                                    CODE_BLOCK_NT'otherwise'
                                        CODE_BLOCK_NT'say "(first unlocking [the sealed chest])[command clarification break]" ( a )'
                                            INVOCATION_LIST_SAY_NT'"(first unlocking [the sealed chest])[command clarification break]" ( a )'
                                                INVOCATION_NT'"(first unlocking [the sealed chest])[command clarification break]" ( a )'
                                                    RVALUE_CONTEXT_NT'"(first unlocking [the sealed chest])[command clarification break]" ( a )'
                                                        CONSTANT_NT'"(first unlocking [the sealed chest])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'silently try unlocking keylessly the sealed chest'
                                            INVOCATION_NT'silently try unlocking keylessly the sealed chest'
                                                RVALUE_CONTEXT_NT'unlocking keylessly the sealed chest'
                                                    CONSTANT_NT'unlocking keylessly the sealed chest'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the sealed chest is locked'
                                        INVOCATION_NT'if the sealed chest is locked'
                                            CONDITION_CONTEXT_NT'sealed chest is locked'
                                                TEST_PROPOSITION_NT'sealed chest is locked'(test: [ A85'locked'('sealed chest') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before someone trying going through a closed door ( called the blocking door ) ( this is the intelligently opening doors rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying opening the blocking door'
                                    INVOCATION_NT'try the person asked trying opening the blocking door'
                                        RVALUE_CONTEXT_NT'person asked trying opening the blocking door'
                                            CONSTANT_NT'person asked trying opening the blocking door'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the blocking door is closed'
                                        INVOCATION_NT'if the blocking door is closed'
                                            CONDITION_CONTEXT_NT'blocking door is closed'
                                                TEST_PROPOSITION_NT'blocking door is closed'(test: [ A81'closed'('blocking door') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before someone trying locking an open thing ( called the door ajar ) with something ( this is the intelligently closing doors rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying closing the door ajar'
                                    INVOCATION_NT'try the person asked trying closing the door ajar'
                                        RVALUE_CONTEXT_NT'person asked trying closing the door ajar'
                                            CONSTANT_NT'person asked trying closing the door ajar'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door ajar is open'
                                        INVOCATION_NT'if the door ajar is open'
                                            CONDITION_CONTEXT_NT'door ajar is open'
                                                TEST_PROPOSITION_NT'door ajar is open'(test: [ A80'open'('door ajar') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before someone trying locking keylessly an open thing ( called the door ajar ) ( this is the intelligently closing keyless doors rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying closing the door ajar'
                                    INVOCATION_NT'try the person asked trying closing the door ajar'
                                        RVALUE_CONTEXT_NT'person asked trying closing the door ajar'
                                            CONSTANT_NT'person asked trying closing the door ajar'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the door ajar is open'
                                        INVOCATION_NT'if the door ajar is open'
                                            CONDITION_CONTEXT_NT'door ajar is open'
                                                TEST_PROPOSITION_NT'door ajar is open'(test: [ A80'open'('door ajar') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                        ROUTINE_NT'before someone trying opening a locked thing ( called the sealed chest ) ( this is the intelligently opening containers rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'try the person asked trying unlocking keylessly the sealed chest'
                                    INVOCATION_NT'try the person asked trying unlocking keylessly the sealed chest'
                                        RVALUE_CONTEXT_NT'person asked trying unlocking keylessly the sealed chest'
                                            CONSTANT_NT'person asked trying unlocking keylessly the sealed chest'-action
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the sealed chest is locked'
                                        INVOCATION_NT'if the sealed chest is locked'
                                            CONDITION_CONTEXT_NT'sealed chest is locked'
                                                TEST_PROPOSITION_NT'sealed chest is locked'(test: [ A85'locked'('sealed chest') ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                    HEADING_NT'volume 2 - default locking and unlocking' (level 1)
                        HEADING_NT'part 1 - the matching key rule' (level 3)
                            ROUTINE_NT'this is the need a matching key rule'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the person asked encloses something ( called item ) which unlocks the noun'
                                            INVOCATION_NT'if the person asked encloses something ( called item ) which unlocks the noun'
                                                CONDITION_CONTEXT_NT'person asked encloses something ( called item ) which unlocks the noun'
                                                    TEST_PROPOSITION_NT'person asked encloses something ( called item ) which unlocks the noun'(test: [ kind=thing_c({<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) ^ called='item'(thing)({<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) ^ encloses('person asked', {<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now the second noun is the item'
                                                CONDITION_CONTEXT_NT'the second noun is the item'
                                            INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                                INVOCATION_NT'abide by the must have accessible the second noun rule'
                                                    RVALUE_CONTEXT_NT'must have accessible the second noun rule'
                                                        CONSTANT_NT'must have accessible the second noun rule'-rule
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'if a visible passkey ( called item ) unbolts the noun'
                                                    INVOCATION_NT'if a visible passkey ( called item ) unbolts the noun'
                                                        CONDITION_CONTEXT_NT'a visible passkey ( called item ) unbolts the noun'
                                                            TEST_PROPOSITION_NT'a visible passkey ( called item ) unbolts the noun'(test: [ kind=passkey({<schema: (QUOTED_INAME_0_00000103(*1))>:'the noun'}) ^ A30'visible'({<schema: (QUOTED_INAME_0_00000103(*1))>:'the noun'}) ^ called='item'(passkey)({<schema: (QUOTED_INAME_0_00000103(*1))>:'the noun'}) ])
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now the second noun is the item'
                                                        CONDITION_CONTEXT_NT'the second noun is the item'
                                                    INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                                        INVOCATION_NT'abide by the must have accessible the second noun rule'
                                                            RVALUE_CONTEXT_NT'must have accessible the second noun rule'
                                                                CONSTANT_NT'must have accessible the second noun rule'-rule
                                                CODE_BLOCK_NT'otherwise'
                                                    CODE_BLOCK_NT
                                                        INVOCATION_LIST_NT'if the player is the person asked'
                                                            INVOCATION_NT'if the player is the person asked'
                                                                CONDITION_CONTEXT_NT'player is the person asked'
                                                                    TEST_PROPOSITION_NT'player is the person asked'(test: [ is('player', 'the person asked') ])
                                                        CODE_BLOCK_NT
                                                            CODE_BLOCK_NT'say "[key-refusal for noun]"'
                                                                INVOCATION_LIST_SAY_NT'key-refusal for noun'
                                                                    INVOCATION_NT'key-refusal for noun'
                                                                        RVALUE_CONTEXT_NT'noun'
                                                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                                    INVOCATION_LIST_NT'stop the action'
                                                        INVOCATION_NT'stop the action'
                            ROUTINE_NT'to say key-refusal for ( locked-thing - an object )'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'carry out the refusing keys activity with the locked-thing'
                                        INVOCATION_NT'carry out the refusing keys activity with the locked-thing'
                                            RVALUE_CONTEXT_NT'refusing keys'
                                                CONSTANT_NT'refusing keys'-activity on objects
                                            RVALUE_CONTEXT_NT'locked-thing'
                                                LOCAL_VARIABLE_NT'locked-thing'(t_0;object)
                            SENTENCE_NT'refusing keys of something is an activity'
                                AVERB_NT'is'
                                PROPER_NOUN_NT'refusing keys of something'
                                PROPER_NOUN_NT'an activity'
                            ROUTINE_NT'rule for refusing keys of something ( called locked-thing ) ( this is the standard printing key lack rule )'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[We] [lack] a key that fits [the locked-thing]." ( a )'
                                        INVOCATION_LIST_SAY_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )'
                                            INVOCATION_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )'
                                                RVALUE_CONTEXT_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )'
                                                    CONSTANT_NT'"[We] [lack] a key that fits [the locked-thing]." ( a )'-text
                            ROUTINE_NT'definition'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the person asked carries it'
                                            INVOCATION_NT'if the person asked carries it'
                                                CONDITION_CONTEXT_NT'person asked carries it'
                                                    TEST_PROPOSITION_NT'person asked carries it'(test: [ is('person asked', {<schema: CarrierOf(*1)>:'it'}) ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'yes'
                                                INVOCATION_NT'yes'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if it is on a keychain which is carried by the person asked'
                                            INVOCATION_NT'if it is on a keychain which is carried by the person asked'
                                                CONDITION_CONTEXT_NT'it is on a keychain which is carried by the person asked'
                                                    TEST_PROPOSITION_NT'it is on a keychain which is carried by the person asked'(test: [ kind=keychain({<schema: SupporterOf(*1)>:'it'}) ^ is('the person asked', {<schema: CarrierOf(*1)>:{<schema: SupporterOf(*1)>:'it'}}) ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'yes'
                                                INVOCATION_NT'yes'
                                    INVOCATION_LIST_NT'no'
                                        INVOCATION_NT'no'
                        HEADING_NT'part 2 - unlocking' (level 3)
                            HEADING_NT'section 1 - regular unlocking' (level 5)
                                SENTENCE_NT'understand the command unlock as something new'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'the command unlock'
                                    PROPER_NOUN_NT'something new'
                                SENTENCE_NT'understand "unlock
                                [something] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock
                                    [something] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "unlock [a
                                locked lockable thing] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock [a
                                    locked lockable thing] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "unlock [a lockable thing] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock [a lockable thing] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand the commands open and uncover and unwrap as something new'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'the commands open and uncover and unwrap'
                                    PROPER_NOUN_NT'something new'
                                SENTENCE_NT'understand "open [something]" or "uncover [something]" or "unwrap [something]" as opening'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"open [something]" or "uncover [something]" or "unwrap [something]"'
                                    PROPER_NOUN_NT'opening'
                                SENTENCE_NT'understand "open [something] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"open [something] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "open [a locked lockable thing] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"open [a locked lockable thing] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                SENTENCE_NT'understand "open [a lockable thing] with [something]" as unlocking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"open [a lockable thing] with [something]"'
                                    PROPER_NOUN_NT'unlocking it with'
                                ROUTINE_NT'check unlocking it with ( this is the must be able to reach the key rule )'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                            INVOCATION_NT'abide by the must have accessible the second noun rule'
                                                RVALUE_CONTEXT_NT'must have accessible the second noun rule'
                                                    CONSTANT_NT'must have accessible the second noun rule'-rule
                                SENTENCE_NT'the right second rule is listed instead of the can't unlock without the correct key rule in the check unlocking it with rulebook'
                                    AVERB_NT'is'
                                    PROPER_NOUN_NT'the right second rule'
                                    PROPER_NOUN_NT'instead of the can't unlock without the correct key rule in the check unlocking it with rulebook'
                                ROUTINE_NT'this is the right second rule'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the second noun does not unlock the noun'
                                                INVOCATION_NT'if the second noun does not unlock the noun'
                                                    CONDITION_CONTEXT_NT'second noun does not unlock the noun'
                                                        TEST_PROPOSITION_NT'second noun does not unlock the noun'(test: [ NOT[ is('second noun', {<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) NOT] ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "[The second noun] [do not fit] [the noun]." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"[The second noun] [do not fit] [the noun]." ( a )'
                                                        INVOCATION_NT'"[The second noun] [do not fit] [the noun]." ( a )'
                                                            RVALUE_CONTEXT_NT'"[The second noun] [do not fit] [the noun]." ( a )'
                                                                CONSTANT_NT'"[The second noun] [do not fit] [the noun]." ( a )'-text
                                                CODE_BLOCK_NT
                            HEADING_NT'section 2 - keylessly' (level 5)
                                SENTENCE_NT'understand "unlock [something]" as unlocking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock [something]"'
                                    PROPER_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'understand "unlock [a
                                locked lockable thing]" as unlocking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock [a
                                    locked lockable thing]"'
                                    PROPER_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'understand "unlock [a lockable
                                thing]" as unlocking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"unlock [a lockable
                                    thing]"'
                                    PROPER_NOUN_NT'unlocking keylessly'
                                SENTENCE_NT'unlocking keylessly is an action applying to one thing'
                                    AVERB_NT'is'
                                    PROPER_NOUN_NT'unlocking keylessly'
                                    PROPER_NOUN_NT'applying to one thing'
                                SENTENCE_NT'the unlocking keylessly action has an object called the key unlocked with'
                                    AVERB_NT'has'
                                    PROPER_NOUN_NT'unlocking keylessly action'
                                    ALLOWED_NT
                                        PROPERTYCALLED_NT'called'
                                            PROPER_NOUN_NT'object'
                                            PROPER_NOUN_NT'key unlocked with'
                                ROUTINE_NT'check an actor unlocking keylessly ( this is the check keylessly unlocking rule )'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the can't unlock without a lock rule'
                                            INVOCATION_NT'abide by the can't unlock without a lock rule'
                                                RVALUE_CONTEXT_NT'can't unlock without a lock rule'
                                                    CONSTANT_NT'can't unlock without a lock rule'-rule
                                        INVOCATION_LIST_NT'abide by the can't unlock what's already unlocked rule'
                                            INVOCATION_NT'abide by the can't unlock what's already unlocked rule'
                                                RVALUE_CONTEXT_NT'can't unlock what's already unlocked rule'
                                                    CONSTANT_NT'can't unlock what's already unlocked rule'-rule
                                        INVOCATION_LIST_NT'abide by the need a matching key rule'
                                            INVOCATION_NT'abide by the need a matching key rule'
                                                RVALUE_CONTEXT_NT'need a matching key rule'
                                                    CONSTANT_NT'need a matching key rule'-rule
                                        INVOCATION_LIST_NT'now the key unlocked with is the second noun'
                                            CONDITION_CONTEXT_NT'the key unlocked with is the second noun'
                                ROUTINE_NT'carry out an actor unlocking keylessly ( this is the standard keylessly unlocking rule )'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if sequential action option is active'
                                                INVOCATION_NT'if sequential action option is active'
                                                    CONDITION_CONTEXT_NT'sequential action option is active'
                                                        TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'do nothing'
                                                    INVOCATION_NT'do nothing'
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the person asked is the player'
                                                        INVOCATION_NT'if the person asked is the player'
                                                            CONDITION_CONTEXT_NT'person asked is the player'
                                                                TEST_PROPOSITION_NT'person asked is the player'(test: [ is('person asked', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(with [the key unlocked with])[command clarification break]" ( a )'
                                                            INVOCATION_LIST_SAY_NT'"(with [the key unlocked with])[command clarification break]" ( a )'
                                                                INVOCATION_NT'"(with [the key unlocked with])[command clarification break]" ( a )'
                                                                    RVALUE_CONTEXT_NT'"(with [the key unlocked with])[command clarification break]" ( a )'
                                                                        CONSTANT_NT'"(with [the key unlocked with])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'try the person asked unlocking the noun with the key unlocked with'
                                            INVOCATION_NT'try the person asked unlocking the noun with the key unlocked with'
                                                RVALUE_CONTEXT_NT'person asked unlocking the noun with the key unlocked with'
                                                    CONSTANT_NT'person asked unlocking the noun with the key unlocked with'-action
                        HEADING_NT'part 3 - locking' (level 3)
                            HEADING_NT'section 1 - regular locking' (level 5)
                                SENTENCE_NT'understand the command lock as something new'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'the command lock'
                                    PROPER_NOUN_NT'something new'
                                SENTENCE_NT'understand "lock [something]
                                with [something]" as locking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [something]
                                    with [something]"'
                                    PROPER_NOUN_NT'locking it with'
                                SENTENCE_NT'understand "lock [an unlocked lockable
                                thing] with [something]" as locking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [an unlocked lockable
                                    thing] with [something]"'
                                    PROPER_NOUN_NT'locking it with'
                                SENTENCE_NT'understand "lock [a lockable
                                thing] with [something]" as locking it with'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [a lockable
                                    thing] with [something]"'
                                    PROPER_NOUN_NT'locking it with'
                                ROUTINE_NT'check locking it with'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the must have accessible the second noun rule'
                                            INVOCATION_NT'abide by the must have accessible the second noun rule'
                                                RVALUE_CONTEXT_NT'must have accessible the second noun rule'
                                                    CONSTANT_NT'must have accessible the second noun rule'-rule
                                SENTENCE_NT'the right second rule is listed instead of the can't lock without the correct key rule in the check locking it with rulebook'
                                    AVERB_NT'is'
                                    PROPER_NOUN_NT'the right second rule'
                                    PROPER_NOUN_NT'instead of the can't lock without the correct key rule in the check locking it with rulebook'
                            HEADING_NT'section 2 - keylessly' (level 5)
                                SENTENCE_NT'understand "lock [something]" as locking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [something]"'
                                    PROPER_NOUN_NT'locking keylessly'
                                SENTENCE_NT'understand "lock [an
                                unlocked lockable thing]" as locking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [an
                                    unlocked lockable thing]"'
                                    PROPER_NOUN_NT'locking keylessly'
                                SENTENCE_NT'understand "lock [a lockable
                                thing]" as locking keylessly'
                                    AVERB_NT'understand'
                                    PROPER_NOUN_NT'"lock [a lockable
                                    thing]"'
                                    PROPER_NOUN_NT'locking keylessly'
                                SENTENCE_NT'locking keylessly is an action applying to one thing'
                                    AVERB_NT'is'
                                    PROPER_NOUN_NT'locking keylessly'
                                    PROPER_NOUN_NT'applying to one thing'
                                SENTENCE_NT'the locking keylessly action has an object called the key locked with'
                                    AVERB_NT'has'
                                    PROPER_NOUN_NT'locking keylessly action'
                                    ALLOWED_NT
                                        PROPERTYCALLED_NT'called'
                                            PROPER_NOUN_NT'object'
                                            PROPER_NOUN_NT'key locked with'
                                ROUTINE_NT'check an actor locking keylessly ( this is the check keylessly locking rule )'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'abide by the can't lock without a lock rule'
                                            INVOCATION_NT'abide by the can't lock without a lock rule'
                                                RVALUE_CONTEXT_NT'can't lock without a lock rule'
                                                    CONSTANT_NT'can't lock without a lock rule'-rule
                                        INVOCATION_LIST_NT'abide by the can't lock what's already locked rule'
                                            INVOCATION_NT'abide by the can't lock what's already locked rule'
                                                RVALUE_CONTEXT_NT'can't lock what's already locked rule'
                                                    CONSTANT_NT'can't lock what's already locked rule'-rule
                                        INVOCATION_LIST_NT'abide by the can't lock what's open rule'
                                            INVOCATION_NT'abide by the can't lock what's open rule'
                                                RVALUE_CONTEXT_NT'can't lock what's open rule'
                                                    CONSTANT_NT'can't lock what's open rule'-rule
                                        INVOCATION_LIST_NT'abide by the need a matching key rule'
                                            INVOCATION_NT'abide by the need a matching key rule'
                                                RVALUE_CONTEXT_NT'need a matching key rule'
                                                    CONSTANT_NT'need a matching key rule'-rule
                                        INVOCATION_LIST_NT'now the key locked with is the second noun'
                                            CONDITION_CONTEXT_NT'the key locked with is the second noun'
                                ROUTINE_NT'carry out an actor locking keylessly ( this is the standard keylessly locking rule )'
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if sequential action option is active'
                                                INVOCATION_NT'if sequential action option is active'
                                                    CONDITION_CONTEXT_NT'sequential action option is active'
                                                        TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'do nothing'
                                                    INVOCATION_NT'do nothing'
                                            CODE_BLOCK_NT'otherwise'
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'if the person asked is the player'
                                                        INVOCATION_NT'if the person asked is the player'
                                                            CONDITION_CONTEXT_NT'person asked is the player'
                                                                TEST_PROPOSITION_NT'person asked is the player'(test: [ is('person asked', 'the player') ])
                                                    CODE_BLOCK_NT
                                                        CODE_BLOCK_NT'say "(with [the key locked with])[command clarification break]" ( a )'
                                                            INVOCATION_LIST_SAY_NT'"(with [the key locked with])[command clarification break]" ( a )'
                                                                INVOCATION_NT'"(with [the key locked with])[command clarification break]" ( a )'
                                                                    RVALUE_CONTEXT_NT'"(with [the key locked with])[command clarification break]" ( a )'
                                                                        CONSTANT_NT'"(with [the key locked with])[command clarification break]" ( a )'-text
                                        INVOCATION_LIST_NT'try the person asked locking the noun with the key locked with'
                                            INVOCATION_NT'try the person asked locking the noun with the key locked with'
                                                RVALUE_CONTEXT_NT'person asked locking the noun with the key locked with'
                                                    CONSTANT_NT'person asked locking the noun with the key locked with'-action
                    HEADING_NT'volume 3 - the passkey kind , needed only if you want keys to name themselves' (level 1)
                        SENTENCE_NT'a passkey is a kind of thing'
                            AVERB_NT'is'
                            COMMON_NOUN_NT'passkey'
                            KIND_NT'kind of thing'
                                COMMON_NOUN_NT'thing'
                        SENTENCE_NT'the specification of a passkey is A kind of key
                        whose inventory listing changes to reflect the player's knowledge about what
                        it unlocks.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of a passkey'
                                COMMON_NOUN_NT'passkey'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'A kind of key
                            whose inventory listing changes to reflect the player's knowledge about what
                            it unlocks.'
                        ROUTINE_NT'definition'
                        SENTENCE_NT'unbolting relates one passkey to various things'
                            AVERB_NT'relates'
                            PROPER_NOUN_NT'unbolting'
                            PROPER_NOUN_NT'one passkey'
                            PROPER_NOUN_NT'various things'
                        SENTENCE_NT'the verb to unbolt means the unbolting relation'
                            AVERB_NT'means'
                            PROPER_NOUN_NT'to unbolt'
                            PROPER_NOUN_NT'unbolting relation'
                        ROUTINE_NT'after printing the name of an identified passkey ( called the item ) while taking inventory ( this is the identify passkeys in inventory rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the prior named object is the item'
                                    CONDITION_CONTEXT_NT'the prior named object is the item'
                                CODE_BLOCK_NT'say " (which [open] [the list of things unbolted by the item])" ( a )'
                                    INVOCATION_LIST_SAY_NT'" (which [open] [the list of things unbolted by the item])" ( a )'
                                        INVOCATION_NT'" (which [open] [the list of things unbolted by the item])" ( a )'
                                            RVALUE_CONTEXT_NT'" (which [open] [the list of things unbolted by the item])" ( a )'
                                                CONSTANT_NT'" (which [open] [the list of things unbolted by the item])" ( a )'-text
                        ROUTINE_NT'after examining an identified passkey ( this is the passkey description rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[The noun] [unlock] [the list of things unbolted by the noun]." ( a )'
                                    INVOCATION_LIST_SAY_NT'"[The noun] [unlock] [the list of things unbolted by the noun]." ( a )'
                                        INVOCATION_NT'"[The noun] [unlock] [the list of things unbolted by the noun]." ( a )'
                                            RVALUE_CONTEXT_NT'"[The noun] [unlock] [the list of things unbolted by the noun]." ( a )'
                                                CONSTANT_NT'"[The noun] [unlock] [the list of things unbolted by the noun]." ( a )'-text
                        ROUTINE_NT'carry out unlocking something with a passkey ( this is the standard passkey unlocking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun unlocks the noun'
                                        INVOCATION_NT'if the second noun unlocks the noun'
                                            CONDITION_CONTEXT_NT'second noun unlocks the noun'
                                                TEST_PROPOSITION_NT'second noun unlocks the noun'(test: [ is('second noun', {<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the second noun unbolts the noun'
                                            CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        ROUTINE_NT'report someone trying unlocking something with a passkey ( this is the observe someone unlocking rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the second noun unbolts the noun'
                                    CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        ROUTINE_NT'carry out locking something with a passkey ( this is the standard passkey locking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun unlocks the noun'
                                        INVOCATION_NT'if the second noun unlocks the noun'
                                            CONDITION_CONTEXT_NT'second noun unlocks the noun'
                                                TEST_PROPOSITION_NT'second noun unlocks the noun'(test: [ is('second noun', {<schema: (QUOTED_INAME_0_00000053(*1))>:'the noun'}) ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the second noun unbolts the noun'
                                            CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                        ROUTINE_NT'report someone trying locking something with a passkey ( this is the observe someone locking rule )'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'now the second noun unbolts the noun'
                                    CONDITION_CONTEXT_NT'the second noun unbolts the noun'
                    HEADING_NT'volume 4 - the keychain kind , needed only if you want a keychain' (level 1)
                        SENTENCE_NT'a keychain is a kind of supporter that is portable'
                            AVERB_NT'is'
                            COMMON_NOUN_NT'keychain'
                            KIND_NT'kind of supporter that is portable'
                                WITH_NT'supporter that is portable'
                                    COMMON_NOUN_NT'supporter that is portable'
                                    ADJECTIVE_NT
                        SENTENCE_NT'the specification of a keychain is A keychain which can hold the player's keys without forcing the
                        player to take them off the ring in order to unlock things.'
                            AVERB_NT'is'
                            X_OF_Y_NT'specification of a keychain'
                                COMMON_NOUN_NT'keychain'
                                PROPER_NOUN_NT'specification'
                            PROPER_NOUN_NT'A keychain which can hold the player's keys without forcing the
                            player to take them off the ring in order to unlock things.'
                        ROUTINE_NT'instead of putting something which is not a passkey on a keychain ( this is the limiting keychains rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "[The noun] [are] not a key." ( a )'
                                    INVOCATION_LIST_SAY_NT'"[The noun] [are] not a key." ( a )'
                                        INVOCATION_NT'"[The noun] [are] not a key." ( a )'
                                            RVALUE_CONTEXT_NT'"[The noun] [are] not a key." ( a )'
                                                CONSTANT_NT'"[The noun] [are] not a key." ( a )'-text
                        SENTENCE_NT'the keychain-aware carrying requirements rule is listed instead of the carrying requirements rule in the action-processing rules'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'the keychain-aware carrying requirements rule'
                            PROPER_NOUN_NT'instead of the carrying requirements rule in the action-processing rules'
                        ROUTINE_NT'this is the keychain-aware carrying requirements rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if locking or unlocking something with something which is on a keychain which is carried by the actor'
                                        INVOCATION_NT'if locking or unlocking something with something which is on a keychain which is carried by the actor'
                                            CONDITION_CONTEXT_NT'locking or unlocking something with something which is on a keychain which is carried by the actor'
                                                LOGICAL_OR_NT'locking or unlocking something with something which is on a keychain which is carried by the actor'
                                                    TEST_VALUE_NT'locking'
                                                        CONSTANT_NT'locking'-described action
                                                    TEST_VALUE_NT'unlocking something with something which is on a keychain which is carried by the actor'
                                                        CONSTANT_NT'unlocking something with something which is on a keychain which is carried by the actor'-described action
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'continue the action'
                                            INVOCATION_NT'continue the action'
                                INVOCATION_LIST_NT'abide by the carrying requirements rule'
                                    INVOCATION_NT'abide by the carrying requirements rule'
                                        RVALUE_CONTEXT_NT'carrying requirements rule'
                                            CONSTANT_NT'carrying requirements rule'-rule
                        SENTENCE_NT'understand "put [passkey] on [keychain]" as putting it on'
                            AVERB_NT'understand'
                            PROPER_NOUN_NT'"put [passkey] on [keychain]"'
                            PROPER_NOUN_NT'putting it on'
                        ROUTINE_NT'rule for deciding whether all includes passkeys which are on a keychain ( this is the don't strip keys rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not a keychain'
                                        INVOCATION_NT'if the second noun is not a keychain'
                                            CONDITION_CONTEXT_NT'second noun is not a keychain'
                                                TEST_PROPOSITION_NT'second noun is not a keychain'(test: [ NOT[ kind=keychain('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'it does not'
                    HEADING_NT'volume 5 - support materials' (level 1)
                        ROUTINE_NT'this is the noun autotaking rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the person asked'
                                                INVOCATION_NT'if the player is the person asked'
                                                    CONDITION_CONTEXT_NT'player is the person asked'
                                                        TEST_PROPOSITION_NT'player is the person asked'(test: [ is('player', 'the person asked') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'try taking the noun'
                                                    INVOCATION_NT'try taking the noun'
                                                        RVALUE_CONTEXT_NT'taking the noun'
                                                            CONSTANT_NT'taking the noun'-action
                                            CODE_BLOCK_NT'otherwise'
                                                INVOCATION_LIST_NT'try the person asked trying taking the noun'
                                                    INVOCATION_NT'try the person asked trying taking the noun'
                                                        RVALUE_CONTEXT_NT'person asked trying taking the noun'
                                                            CONSTANT_NT'person asked trying taking the noun'-action
                                    CODE_BLOCK_NT'otherwise'
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the noun'
                                            INVOCATION_NT'carry out the implicitly taking activity with the noun'
                                                RVALUE_CONTEXT_NT'implicitly taking'
                                                    CONSTANT_NT'implicitly taking'-activity on objects
                                                RVALUE_CONTEXT_NT'noun'
                                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        ROUTINE_NT'this is the second noun autotaking rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if sequential action option is active'
                                        INVOCATION_NT'if sequential action option is active'
                                            CONDITION_CONTEXT_NT'sequential action option is active'
                                                TEST_PROPOSITION_NT'sequential action option is active'(test: [ A11'active'('sequential action option') ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the person asked'
                                                INVOCATION_NT'if the player is the person asked'
                                                    CONDITION_CONTEXT_NT'player is the person asked'
                                                        TEST_PROPOSITION_NT'player is the person asked'(test: [ is('player', 'the person asked') ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'try taking the second noun'
                                                    INVOCATION_NT'try taking the second noun'
                                                        RVALUE_CONTEXT_NT'taking the second noun'
                                                            CONSTANT_NT'taking the second noun'-action
                                            CODE_BLOCK_NT'otherwise'
                                                INVOCATION_LIST_NT'try the person asked trying taking the second noun'
                                                    INVOCATION_NT'try the person asked trying taking the second noun'
                                                        RVALUE_CONTEXT_NT'person asked trying taking the second noun'
                                                            CONSTANT_NT'person asked trying taking the second noun'-action
                                    CODE_BLOCK_NT'otherwise'
                                        INVOCATION_LIST_NT'carry out the implicitly taking activity with the second noun'
                                            INVOCATION_NT'carry out the implicitly taking activity with the second noun'
                                                RVALUE_CONTEXT_NT'implicitly taking'
                                                    CONSTANT_NT'implicitly taking'-activity on objects
                                                RVALUE_CONTEXT_NT'second noun'
                                                    NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                        ROUTINE_NT'this is the must hold the noun rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the person asked does not have the noun'
                                        INVOCATION_NT'if the person asked does not have the noun'
                                            CONDITION_CONTEXT_NT'person asked does not have the noun'
                                                TEST_PROPOSITION_NT'person asked does not have the noun'(test: [ NOT[ is('person asked', {<schema: OwnerOf(*1)>:'the noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'follow the noun autotaking rule'
                                            INVOCATION_NT'follow the noun autotaking rule'
                                                RVALUE_CONTEXT_NT'noun autotaking rule'
                                                    CONSTANT_NT'noun autotaking rule'-rule
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the person asked does not have the noun'
                                        INVOCATION_NT'if the person asked does not have the noun'
                                            CONDITION_CONTEXT_NT'person asked does not have the noun'
                                                TEST_PROPOSITION_NT'person asked does not have the noun'(test: [ NOT[ is('person asked', {<schema: OwnerOf(*1)>:'the noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision'
                        ROUTINE_NT'this is the must hold the second noun rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the person asked does not have the second noun'
                                        INVOCATION_NT'if the person asked does not have the second noun'
                                            CONDITION_CONTEXT_NT'person asked does not have the second noun'
                                                TEST_PROPOSITION_NT'person asked does not have the second noun'(test: [ NOT[ is('person asked', {<schema: OwnerOf(*1)>:'the second noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'follow the second noun autotaking rule'
                                            INVOCATION_NT'follow the second noun autotaking rule'
                                                RVALUE_CONTEXT_NT'second noun autotaking rule'
                                                    CONSTANT_NT'second noun autotaking rule'-rule
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the person asked does not have the second noun'
                                        INVOCATION_NT'if the person asked does not have the second noun'
                                            CONDITION_CONTEXT_NT'person asked does not have the second noun'
                                                TEST_PROPOSITION_NT'person asked does not have the second noun'(test: [ NOT[ is('person asked', {<schema: OwnerOf(*1)>:'the second noun'}) NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision'
                        ROUTINE_NT'this is the must have accessible the noun rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not key-accessible'
                                        INVOCATION_NT'if the noun is not key-accessible'
                                            CONDITION_CONTEXT_NT'noun is not key-accessible'
                                                TEST_PROPOSITION_NT'noun is not key-accessible'(test: [ NOT[ A47'key-accessible'('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the noun is on a keychain ( called the containing keychain )'
                                                INVOCATION_NT'if the noun is on a keychain ( called the containing keychain )'
                                                    CONDITION_CONTEXT_NT'noun is on a keychain ( called the containing keychain )'
                                                        TEST_PROPOSITION_NT'noun is on a keychain ( called the containing keychain )'(test: [ kind=keychain({<schema: SupporterOf(*1)>:'noun'}) ^ called='containing keychain'(keychain)({<schema: SupporterOf(*1)>:'noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the noun is the containing keychain'
                                                    CONDITION_CONTEXT_NT'the noun is the containing keychain'
                                        INVOCATION_LIST_NT'follow the noun autotaking rule'
                                            INVOCATION_NT'follow the noun autotaking rule'
                                                RVALUE_CONTEXT_NT'noun autotaking rule'
                                                    CONSTANT_NT'noun autotaking rule'-rule
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the noun is not key-accessible'
                                        INVOCATION_NT'if the noun is not key-accessible'
                                            CONDITION_CONTEXT_NT'noun is not key-accessible'
                                                TEST_PROPOSITION_NT'noun is not key-accessible'(test: [ NOT[ A47'key-accessible'('noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the person asked'
                                                INVOCATION_NT'if the player is the person asked'
                                                    CONDITION_CONTEXT_NT'player is the person asked'
                                                        TEST_PROPOSITION_NT'player is the person asked'(test: [ is('player', 'the person asked') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Without holding [the noun], [we] [can] do nothing." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Without holding [the noun], [we] [can] do nothing." ( a )'
                                                        INVOCATION_NT'"Without holding [the noun], [we] [can] do nothing." ( a )'
                                                            RVALUE_CONTEXT_NT'"Without holding [the noun], [we] [can] do nothing." ( a )'
                                                                CONSTANT_NT'"Without holding [the noun], [we] [can] do nothing." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision'
                        ROUTINE_NT'this is the must have accessible the second noun rule'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not key-accessible'
                                        INVOCATION_NT'if the second noun is not key-accessible'
                                            CONDITION_CONTEXT_NT'second noun is not key-accessible'
                                                TEST_PROPOSITION_NT'second noun is not key-accessible'(test: [ NOT[ A47'key-accessible'('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'let the held second noun be the second noun'
                                            INVOCATION_NT'let the held second noun be the second noun'
                                                NEW_LOCAL_CONTEXT_NT'held second noun'
                                                    UNKNOWN_NT'held second noun'
                                                RVALUE_CONTEXT_NT'second noun'
                                                    NONLOCAL_VARIABLE_NT'second noun'('second noun'(var)[object])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the second noun is on a keychain ( called the containing keychain )'
                                                INVOCATION_NT'if the second noun is on a keychain ( called the containing keychain )'
                                                    CONDITION_CONTEXT_NT'second noun is on a keychain ( called the containing keychain )'
                                                        TEST_PROPOSITION_NT'second noun is on a keychain ( called the containing keychain )'(test: [ kind=keychain({<schema: SupporterOf(*1)>:'second noun'}) ^ called='containing keychain'(keychain)({<schema: SupporterOf(*1)>:'second noun'}) ])
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'now the second noun is the containing keychain'
                                                    CONDITION_CONTEXT_NT'the second noun is the containing keychain'
                                        INVOCATION_LIST_NT'follow the second noun autotaking rule'
                                            INVOCATION_NT'follow the second noun autotaking rule'
                                                RVALUE_CONTEXT_NT'second noun autotaking rule'
                                                    CONSTANT_NT'second noun autotaking rule'-rule
                                        INVOCATION_LIST_NT'now the second noun is the held second noun'
                                            CONDITION_CONTEXT_NT'the second noun is the held second noun'
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'if the second noun is not key-accessible'
                                        INVOCATION_NT'if the second noun is not key-accessible'
                                            CONDITION_CONTEXT_NT'second noun is not key-accessible'
                                                TEST_PROPOSITION_NT'second noun is not key-accessible'(test: [ NOT[ A47'key-accessible'('second noun') NOT] ])
                                    CODE_BLOCK_NT
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'if the player is the person asked'
                                                INVOCATION_NT'if the player is the person asked'
                                                    CONDITION_CONTEXT_NT'player is the person asked'
                                                        TEST_PROPOSITION_NT'player is the person asked'(test: [ is('player', 'the person asked') ])
                                            CODE_BLOCK_NT
                                                CODE_BLOCK_NT'say "Without holding [the second noun], [we] [can] do nothing." ( a )'
                                                    INVOCATION_LIST_SAY_NT'"Without holding [the second noun], [we] [can] do nothing." ( a )'
                                                        INVOCATION_NT'"Without holding [the second noun], [we] [can] do nothing." ( a )'
                                                            RVALUE_CONTEXT_NT'"Without holding [the second noun], [we] [can] do nothing." ( a )'
                                                                CONSTANT_NT'"Without holding [the second noun], [we] [can] do nothing." ( a )'-text
                                        INVOCATION_LIST_NT'stop the action'
                                            INVOCATION_NT'stop the action'
                                INVOCATION_LIST_NT'make no decision'
                                    INVOCATION_NT'make no decision'
                    HEADING_NT'volume 6 - unlocking all - not for release' (level 1)
                        SENTENCE_NT'understand "unlockall" as universal unlocking'
                            AVERB_NT'understand'
                            PROPER_NOUN_NT'"unlockall"'
                            PROPER_NOUN_NT'universal unlocking'
                        SENTENCE_NT'universal unlocking is an action applying to nothing'
                            AVERB_NT'is'
                            PROPER_NOUN_NT'universal unlocking'
                            PROPER_NOUN_NT'applying to nothing'
                        ROUTINE_NT'carry out universal unlocking ( this is the lock debugging rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'repeat with item running through locked things'
                                        INVOCATION_NT'repeat with item running through locked things'
                                            NEW_LOCAL_CONTEXT_NT'item'
                                                UNKNOWN_NT'item'
                                            RVALUE_CONTEXT_NT'locked things'
                                                CONSTANT_NT'locked things'-description of things
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'now the item is unlocked'
                                            CONDITION_CONTEXT_NT'the item is unlocked'
                                        CODE_BLOCK_NT'say "Unlocking [the item]." ( a )'
                                            INVOCATION_LIST_SAY_NT'"Unlocking [the item]." ( a )'
                                                INVOCATION_NT'"Unlocking [the item]." ( a )'
                                                    RVALUE_CONTEXT_NT'"Unlocking [the item]." ( a )'
                                                        CONSTANT_NT'"Unlocking [the item]." ( a )'-text
                        ROUTINE_NT'report universal unlocking ( this is the report universal unlocking rule )'
                            CODE_BLOCK_NT
                                CODE_BLOCK_NT'say "A loud stereophonic click assures you that everything in the game has been unlocked." ( a )'
                                    INVOCATION_LIST_SAY_NT'"A loud stereophonic click assures you that everything in the game has been unlocked." ( a )'
                                        INVOCATION_NT'"A loud stereophonic click assures you that everything in the game has been unlocked." ( a )'
                                            RVALUE_CONTEXT_NT'"A loud stereophonic click assures you that everything in the game has been unlocked." ( a )'
                                                CONSTANT_NT'"A loud stereophonic click assures you that everything in the game has been unlocked." ( a )'-text
                        ENDHERE_NT'locksmith'
            SENTENCE_NT'understand "go to/toward/into [any room]" as going toward'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"go to/toward/into [any room]"'
                PROPER_NOUN_NT'going toward'
            SENTENCE_NT'understand "enter [any room]" as going toward'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"enter [any room]"'
                PROPER_NOUN_NT'going toward'
            SENTENCE_NT'a person has a room called the destination'
                AVERB_NT'has'
                COMMON_NOUN_NT'person'
                ALLOWED_NT
                    PROPERTYCALLED_NT'called'
                        PROPER_NOUN_NT'room'
                        PROPER_NOUN_NT'destination'
            SENTENCE_NT'going toward is an action applying to one thing'
                AVERB_NT'is'
                PROPER_NOUN_NT'going toward'
                PROPER_NOUN_NT'applying to one thing'
            ROUTINE_NT'check going toward'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the noun is the location'
                            INVOCATION_NT'if the noun is the location'
                                CONDITION_CONTEXT_NT'noun is the location'
                                    TEST_PROPOSITION_NT'noun is the location'(test: [ is('noun', 'the location') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You're already in [the location]."'
                                INVOCATION_LIST_SAY_NT'"You're already in "'
                                    INVOCATION_NT'"You're already in "'
                                        RVALUE_CONTEXT_NT'"You're already in "'
                                            CONSTANT_NT'"You're already in "'-text
                                INVOCATION_LIST_SAY_NT'the location'
                                    INVOCATION_NT'the location'
                                        RVALUE_CONTEXT_NT'location'
                                            NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
                            CODE_BLOCK_NT
            ROUTINE_NT'carry out going toward'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the destination of the player is the noun'
                        CONDITION_CONTEXT_NT'the destination of the player is the noun'
                    INVOCATION_LIST_NT'let heading be the best route from the location to the noun , using even locked doors'
                        INVOCATION_NT'let heading be the best route from the location to the noun , using even locked doors'
                            NEW_LOCAL_CONTEXT_NT'heading'
                                UNKNOWN_NT'heading'
                            RVALUE_CONTEXT_NT'best route from the location to the noun , using even locked doors'
                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location to the noun , using even locked doors'
                                    INVOCATION_LIST_NT'best route from the location to the noun , using even locked doors'
                                        INVOCATION_NT'best route from the location to the noun'
                                            RVALUE_CONTEXT_NT'location'
                                                NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                                            RVALUE_CONTEXT_NT'noun'
                                                NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if heading is not a direction'
                            INVOCATION_NT'if heading is not a direction'
                                CONDITION_CONTEXT_NT'heading is not a direction'
                                    TEST_PROPOSITION_NT'heading is not a direction'(test: [ NOT[ kind=direction('heading') NOT] ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You can't think how to get there from here."'
                                INVOCATION_LIST_SAY_NT'"You can't think how to get there from here."'
                                    INVOCATION_NT'"You can't think how to get there from here."'
                                        RVALUE_CONTEXT_NT'"You can't think how to get there from here."'
                                            CONSTANT_NT'"You can't think how to get there from here."'-text
                            CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try going heading'
                        INVOCATION_NT'try going heading'
                            RVALUE_CONTEXT_NT'going heading'
                                CONSTANT_NT'going heading'-action
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the location is the destination of the player'
                            INVOCATION_NT'if the location is the destination of the player'
                                CONDITION_CONTEXT_NT'location is the destination of the player'
                                    TEST_PROPOSITION_NT'location is the destination of the player'(test: [ is('location', 'the destination of the player') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the destination of the player is blank'
                                CONDITION_CONTEXT_NT'the destination of the player is blank'
            ROUTINE_NT'instead of waiting when the destination of the player is not blank'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the destination of the player is the location'
                            INVOCATION_NT'if the destination of the player is the location'
                                CONDITION_CONTEXT_NT'destination of the player is the location'
                                    TEST_PROPOSITION_NT'destination of the player is the location'(test: [ is('destination of the player', 'the location') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the destination of the player is blank'
                                CONDITION_CONTEXT_NT'the destination of the player is blank'
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'try going toward destination of the player'
                                INVOCATION_NT'try going toward destination of the player'
                                    RVALUE_CONTEXT_NT'going toward destination of the player'
                                        CONSTANT_NT'going toward destination of the player'-action
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the location is the destination of the player'
                                    INVOCATION_NT'if the location is the destination of the player'
                                        CONDITION_CONTEXT_NT'location is the destination of the player'
                                            TEST_PROPOSITION_NT'location is the destination of the player'(test: [ is('location', 'the destination of the player') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now the destination of the player is blank'
                                        CONDITION_CONTEXT_NT'the destination of the player is blank'
            SENTENCE_NT'understand "stop" or "cease" as stopping'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"stop" or "cease"'
                PROPER_NOUN_NT'stopping'
            SENTENCE_NT'stopping is an action applying to nothing'
                AVERB_NT'is'
                PROPER_NOUN_NT'stopping'
                PROPER_NOUN_NT'applying to nothing'
            ROUTINE_NT'carry out stopping'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the destination of the player is blank'
                        CONDITION_CONTEXT_NT'the destination of the player is blank'
            ROUTINE_NT'report stopping'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You stop in your tracks."'
                        INVOCATION_LIST_SAY_NT'"You stop in your tracks."'
                            INVOCATION_NT'"You stop in your tracks."'
                                RVALUE_CONTEXT_NT'"You stop in your tracks."'
                                    CONSTANT_NT'"You stop in your tracks."'-text
            ROUTINE_NT'after going to an air-conditioned room'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You step into the mercifully air-conditioned surroundings of..."'
                        INVOCATION_LIST_SAY_NT'"You step into the mercifully air-conditioned surroundings of..."'
                            INVOCATION_NT'"You step into the mercifully air-conditioned surroundings of..."'
                                RVALUE_CONTEXT_NT'"You step into the mercifully air-conditioned surroundings of..."'
                                    CONSTANT_NT'"You step into the mercifully air-conditioned surroundings of..."'-text
                    INVOCATION_LIST_NT'continue the action'
                        INVOCATION_NT'continue the action'
            ROUTINE_NT'after going from an air-conditioned room'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You emerge from the air-conditioning into heat like a wall..."'
                        INVOCATION_LIST_SAY_NT'"You emerge from the air-conditioning into heat like a wall..."'
                            INVOCATION_NT'"You emerge from the air-conditioning into heat like a wall..."'
                                RVALUE_CONTEXT_NT'"You emerge from the air-conditioning into heat like a wall..."'
                                    CONSTANT_NT'"You emerge from the air-conditioning into heat like a wall..."'-text
                    INVOCATION_LIST_NT'continue the action'
                        INVOCATION_NT'continue the action'
            ROUTINE_NT'instead of listening to an air-conditioned room'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "The air-conditioning hums softly."'
                        INVOCATION_LIST_SAY_NT'"The air-conditioning hums softly."'
                            INVOCATION_NT'"The air-conditioning hums softly."'
                                RVALUE_CONTEXT_NT'"The air-conditioning hums softly."'
                                    CONSTANT_NT'"The air-conditioning hums softly."'-text
            SENTENCE_NT'the alfred cralle pool hall is a room'
                AVERB_NT'is'
                PROPER_NOUN_NT'alfred cralle pool hall'
                COMMON_NOUN_NT'room'
            SENTENCE_NT'"The town's most popular gathering-place, the pool hall is decorated in honor of the inventor of the ice cream scoop."'
            SENTENCE_NT'the air conditioner is a device in the pool hall'
                AVERB_NT'is'
                PROPER_NOUN_NT'air conditioner'
                COMMON_NOUN_NT'device in the pool hall'
            SENTENCE_NT'"[if switched off]An air conditioner sits in the corner, unhappily inert[otherwise]The air conditioner hums briskly[end if]."'
            SENTENCE_NT'the felt door is west of the pool hall'
                AVERB_NT'is west of'
                PROPER_NOUN_NT'felt door'
                RELATIONSHIP_NT'is west of'
                    PROPER_NOUN_NT'pool hall'
                    PROPER_NOUN_NT'west'
            SENTENCE_NT'the felt door is a door'
                AVERB_NT'is'
                PROPER_NOUN_NT'felt door'
                COMMON_NOUN_NT'door'
            SENTENCE_NT'the felt door is open'
                AVERB_NT'is'
                PROPER_NOUN_NT'felt door'
                ADJECTIVE_NT'open'
            SENTENCE_NT'the felt door is lockable and unlocked'
                AVERB_NT'is'
                PROPER_NOUN_NT'felt door'
                AND_NT'and'
                    ADJECTIVE_NT'lockable'
                    ADJECTIVE_NT'unlocked'
            SENTENCE_NT'the key to the city unlocks the felt door'
                AVERB_NT'unlocks'
                PROPER_NOUN_NT'key to the city'
                RELATIONSHIP_NT'unlocks'
                    PROPER_NOUN_NT'felt door'
            SENTENCE_NT'the description of the felt door is "It has a prominent lock, designed for an old-fashioned key."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the felt door'
                    PROPER_NOUN_NT'felt door'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"It has a prominent lock, designed for an old-fashioned key."'
            ROUTINE_NT'after locking a door with something in the presence of an other person ( called audience )'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The audience] looks a little non-plussed when you lock [the noun], but shrugs."'
                        INVOCATION_LIST_SAY_NT'the audience'
                            INVOCATION_NT'the audience'
                                RVALUE_CONTEXT_NT'audience'
                                    LOCAL_VARIABLE_NT'audience'(tmp_0;person)
                        INVOCATION_LIST_SAY_NT'" looks a little non-plussed when you lock "'
                            INVOCATION_NT'" looks a little non-plussed when you lock "'
                                RVALUE_CONTEXT_NT'" looks a little non-plussed when you lock "'
                                    CONSTANT_NT'" looks a little non-plussed when you lock "'-text
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'", but shrugs."'
                            INVOCATION_NT'", but shrugs."'
                                RVALUE_CONTEXT_NT'", but shrugs."'
                                    CONSTANT_NT'", but shrugs."'-text
            SENTENCE_NT'nancy johnson memorial square is west of the felt door'
                AVERB_NT'is west of'
                PROPER_NOUN_NT'nancy johnson memorial square'
                RELATIONSHIP_NT'is west of'
                    PROPER_NOUN_NT'felt door'
                    PROPER_NOUN_NT'west'
            SENTENCE_NT'the description of nancy johnson memorial square is "Waves of August heat rise from the pavement: more than once you've had the fancy that your shoes are simply going to stick. At the center of the square, rubbed to a brownish polish by many adoring hands, is the statue of Mrs. Nancy Johnson of New Jersey."'
                AVERB_NT'is'
                X_OF_Y_NT'description of nancy johnson memorial square'
                    PROPER_NOUN_NT'nancy johnson memorial square'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"Waves of August heat rise from the pavement: more than once you've had the fancy that your shoes are simply going to stick. At the center of the square, rubbed to a brownish polish by many adoring hands, is the statue of Mrs. Nancy Johnson of New Jersey."'
            SENTENCE_NT'the statue is scenery in memorial square'
                AVERB_NT'is'
                PROPER_NOUN_NT'statue'
                COMMON_NOUN_NT'scenery in memorial square'
            SENTENCE_NT'understand "nancy" or "johnson" or "mrs" as the statue'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"nancy" or "johnson" or "mrs"'
                PROPER_NOUN_NT'the statue'
            SENTENCE_NT'the description of the statue is "Mrs. Johnson is pictured with a hand-cranked ice cream freezer tucked under one arm. Her other hand grips an ice cream scoop, ready to serve frozen dessert to the huddled masses."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the statue'
                    PROPER_NOUN_NT'statue'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"Mrs. Johnson is pictured with a hand-cranked ice cream freezer tucked under one arm. Her other hand grips an ice cream scoop, ready to serve frozen dessert to the huddled masses."'
            SENTENCE_NT'a hand-cranked ice cream freezer is part of the statue'
                AVERB_NT'is part of'
                PROPER_NOUN_NT'hand-cranked ice cream freezer'
                RELATIONSHIP_NT'is part of'
                    PROPER_NOUN_NT'statue'
            SENTENCE_NT'the description is "The hand-cranked ice cream freezer was Mrs. Johnson's invention in 1846, though it was William Young who had the sense to patent the thing in 1848."'
                AVERB_NT'is'
                PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"The hand-cranked ice cream freezer was Mrs. Johnson's invention in 1846, though it was William Young who had the sense to patent the thing in 1848."'
            SENTENCE_NT'the scoop is part of the statue'
                AVERB_NT'is part of'
                PROPER_NOUN_NT'scoop'
                RELATIONSHIP_NT'is part of'
                    PROPER_NOUN_NT'statue'
            SENTENCE_NT'the description of the scoop is "An anachronism: Alfred Cralle would not invent the tool until 1897."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the scoop'
                    PROPER_NOUN_NT'scoop'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"An anachronism: Alfred Cralle would not invent the tool until 1897."'
            SENTENCE_NT'the post office is northwest of nancy johnson memorial square'
                AVERB_NT'is northwest of'
                PROPER_NOUN_NT'post office'
                RELATIONSHIP_NT'is northwest of'
                    PROPER_NOUN_NT'nancy johnson memorial square'
                    PROPER_NOUN_NT'northwest'
            SENTENCE_NT'"Service at the post office is on the slow side since everything went automated."'
            SENTENCE_NT'the slot is scenery in the post office'
                AVERB_NT'is'
                PROPER_NOUN_NT'slot'
                COMMON_NOUN_NT'scenery in the post office'
            SENTENCE_NT'the slot is a container'
                AVERB_NT'is'
                PROPER_NOUN_NT'slot'
                COMMON_NOUN_NT'container'
            ROUTINE_NT'carry out inserting something into the slot'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the noun is nowhere'
                        CONDITION_CONTEXT_NT'the noun is nowhere'
            ROUTINE_NT'report inserting something into the slot'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[The noun] falls out of sight, and you know you will never see it again."'
                        INVOCATION_LIST_SAY_NT'the noun'
                            INVOCATION_NT'the noun'
                                RVALUE_CONTEXT_NT'noun'
                                    NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                        INVOCATION_LIST_SAY_NT'" falls out of sight, and you know you will never see it again."'
                            INVOCATION_NT'" falls out of sight, and you know you will never see it again."'
                                RVALUE_CONTEXT_NT'" falls out of sight, and you know you will never see it again."'
                                    CONSTANT_NT'" falls out of sight, and you know you will never see it again."'-text
            SENTENCE_NT'hamwi street is northeast of an iron gate'
                AVERB_NT'is northeast of'
                PROPER_NOUN_NT'hamwi street'
                RELATIONSHIP_NT'is northeast of'
                    PROPER_NOUN_NT'iron gate'
                    PROPER_NOUN_NT'northeast'
            SENTENCE_NT'"A U-shaped street running from Main Street around to the Memorial Square, Hamwi Street was recently added by ambitious city planners. The small and straggly line of trees has yet to grow enough to provide perceptible shade, so the street is even hotter and more unforgiving than the other parts of town."'
            SENTENCE_NT'the iron gate is northeast of nancy johnson memorial square'
                AVERB_NT'is northeast of'
                PROPER_NOUN_NT'iron gate'
                RELATIONSHIP_NT'is northeast of'
                    PROPER_NOUN_NT'nancy johnson memorial square'
                    PROPER_NOUN_NT'northeast'
            SENTENCE_NT'the iron gate is a door'
                AVERB_NT'is'
                PROPER_NOUN_NT'iron gate'
                COMMON_NOUN_NT'door'
            SENTENCE_NT'it is lockable and unlocked'
                AVERB_NT'is'
                PROPER_NOUN_NT'it'
                AND_NT'and'
                    ADJECTIVE_NT'lockable'
                    ADJECTIVE_NT'unlocked'
            ROUTINE_NT'before printing the name of the iron gate while not opening or closing or locking or unlocking'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is the player'
                            INVOCATION_NT'if the person asked is the player'
                                CONDITION_CONTEXT_NT'person asked is the player'
                                    TEST_PROPOSITION_NT'person asked is the player'(test: [ is('person asked', 'the player') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the gate is open'
                                    INVOCATION_NT'if the gate is open'
                                        CONDITION_CONTEXT_NT'gate is open'
                                            TEST_PROPOSITION_NT'gate is open'(test: [ A80'open'('gate') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "open "'
                                        INVOCATION_LIST_SAY_NT'"open "'
                                            INVOCATION_NT'"open "'
                                                RVALUE_CONTEXT_NT'"open "'
                                                    CONSTANT_NT'"open "'-text
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the gate is locked'
                                    INVOCATION_NT'if the gate is locked'
                                        CONDITION_CONTEXT_NT'gate is locked'
                                            TEST_PROPOSITION_NT'gate is locked'(test: [ A85'locked'('gate') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "locked "'
                                        INVOCATION_LIST_SAY_NT'"locked "'
                                            INVOCATION_NT'"locked "'
                                                RVALUE_CONTEXT_NT'"locked "'
                                                    CONSTANT_NT'"locked "'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the gate is closed'
                                            INVOCATION_NT'if the gate is closed'
                                                CONDITION_CONTEXT_NT'gate is closed'
                                                    TEST_PROPOSITION_NT'gate is closed'(test: [ A81'closed'('gate') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "closed "'
                                                INVOCATION_LIST_SAY_NT'"closed "'
                                                    INVOCATION_NT'"closed "'
                                                        RVALUE_CONTEXT_NT'"closed "'
                                                            CONSTANT_NT'"closed "'-text
            SENTENCE_NT'cold comfort ice cream is north of a metal door'
                AVERB_NT'is north of'
                PROPER_NOUN_NT'cold comfort ice cream'
                RELATIONSHIP_NT'is north of'
                    PROPER_NOUN_NT'metal door'
                    PROPER_NOUN_NT'north'
            SENTENCE_NT'the metal door is north of hamwi street'
                AVERB_NT'is north of'
                PROPER_NOUN_NT'metal door'
                RELATIONSHIP_NT'is north of'
                    PROPER_NOUN_NT'hamwi street'
                    PROPER_NOUN_NT'north'
            SENTENCE_NT'a poster is fixed in place in cold comfort'
                AVERB_NT'is'
                PROPER_NOUN_NT'poster'
                COMMON_NOUN_NT'fixed in place in cold comfort'
            SENTENCE_NT'"A poster fills one wall with the blazing promise of treats to come."'
            SENTENCE_NT'the description of the poster is "Coming soon! Thai ice creams! Durian, jackfruit, taro, and coconut flavors!"'
                AVERB_NT'is'
                X_OF_Y_NT'description of the poster'
                    PROPER_NOUN_NT'poster'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"Coming soon! Thai ice creams! Durian, jackfruit, taro, and coconut flavors!"'
            SENTENCE_NT'the metal door is a door'
                AVERB_NT'is'
                PROPER_NOUN_NT'metal door'
                COMMON_NOUN_NT'door'
            SENTENCE_NT'"A frosty metallic door separates [the location] from [the other side of the metal door]."'
            SENTENCE_NT'the metal door is lockable and unlocked'
                AVERB_NT'is'
                PROPER_NOUN_NT'metal door'
                AND_NT'and'
                    ADJECTIVE_NT'lockable'
                    ADJECTIVE_NT'unlocked'
            SENTENCE_NT'the key to the city unlocks the metal door'
                AVERB_NT'unlocks'
                PROPER_NOUN_NT'key to the city'
                RELATIONSHIP_NT'unlocks'
                    PROPER_NOUN_NT'metal door'
            SENTENCE_NT'marciony street is southeast of nancy johnson memorial square'
                AVERB_NT'is southeast of'
                PROPER_NOUN_NT'marciony street'
                RELATIONSHIP_NT'is southeast of'
                    PROPER_NOUN_NT'nancy johnson memorial square'
                    PROPER_NOUN_NT'southeast'
            SENTENCE_NT'"A semi-circular terrace, named somewhat fancifully after one claimant to the invention of the ice cream cone -- though Hamwi Street competes for the same honor. There are wedges of cool shadow here and there thanks to the buildings, but for the most part the southern exposure keeps Marciony unpleasantly hot."'
            SENTENCE_NT'the movie rental store is west of a glass door'
                AVERB_NT'is west of'
                PROPER_NOUN_NT'movie rental store'
                RELATIONSHIP_NT'is west of'
                    PROPER_NOUN_NT'glass door'
                    PROPER_NOUN_NT'west'
            SENTENCE_NT'the glass door is a door'
                AVERB_NT'is'
                PROPER_NOUN_NT'glass door'
                COMMON_NOUN_NT'door'
            SENTENCE_NT'it is west of marciony street'
                AVERB_NT'is west of'
                PROPER_NOUN_NT'it'
                RELATIONSHIP_NT'is west of'
                    PROPER_NOUN_NT'marciony street'
                    PROPER_NOUN_NT'west'
            SENTENCE_NT'the glass door is lockable and unlocked'
                AVERB_NT'is'
                PROPER_NOUN_NT'glass door'
                AND_NT'and'
                    ADJECTIVE_NT'lockable'
                    ADJECTIVE_NT'unlocked'
            SENTENCE_NT'the key to the city unlocks the glass door'
                AVERB_NT'unlocks'
                PROPER_NOUN_NT'key to the city'
                RELATIONSHIP_NT'unlocks'
                    PROPER_NOUN_NT'glass door'
            SENTENCE_NT'main street is southeast of hamwi street'
                AVERB_NT'is southeast of'
                PROPER_NOUN_NT'main street'
                RELATIONSHIP_NT'is southeast of'
                    PROPER_NOUN_NT'hamwi street'
                    PROPER_NOUN_NT'southeast'
            SENTENCE_NT'main street is northeast of some bronze gates'
                AVERB_NT'is northeast of'
                PROPER_NOUN_NT'main street'
                RELATIONSHIP_NT'is northeast of'
                    PROPER_NOUN_NT'bronze gates'
                    PROPER_NOUN_NT'northeast'
            SENTENCE_NT'the emergency box is in main street'
                AVERB_NT'is in'
                PROPER_NOUN_NT'emergency box'
                RELATIONSHIP_NT'is in'
                    PROPER_NOUN_NT'main street'
            SENTENCE_NT'the emergency box is fixed in place'
                AVERB_NT'is'
                PROPER_NOUN_NT'emergency box'
                ADJECTIVE_NT'fixed in place'
            SENTENCE_NT'"A fire-red box with a glass front faces the sidewalk, with 'In case of emergency, BREAK GLASS' lettered on it."'
            SENTENCE_NT'the emergency box is closed and transparent'
                AVERB_NT'is'
                PROPER_NOUN_NT'emergency box'
                AND_NT'and'
                    ADJECTIVE_NT'closed'
                    ADJECTIVE_NT'transparent'
            SENTENCE_NT'understand "glass" as the box'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"glass"'
                PROPER_NOUN_NT'the box'
            ROUTINE_NT'instead of attacking the closed emergency box'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "You hit the emergency box, which shatters open."'
                        INVOCATION_LIST_SAY_NT'"You hit the emergency box, which shatters open."'
                            INVOCATION_NT'"You hit the emergency box, which shatters open."'
                                RVALUE_CONTEXT_NT'"You hit the emergency box, which shatters open."'
                                    CONSTANT_NT'"You hit the emergency box, which shatters open."'-text
                    INVOCATION_LIST_NT'now the emergency box is open'
                        CONDITION_CONTEXT_NT'the emergency box is open'
            ROUTINE_NT'instead of attacking the open emergency box'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "The glass has already been thoroughly broken."'
                        INVOCATION_LIST_SAY_NT'"The glass has already been thoroughly broken."'
                            INVOCATION_NT'"The glass has already been thoroughly broken."'
                                RVALUE_CONTEXT_NT'"The glass has already been thoroughly broken."'
                                    CONSTANT_NT'"The glass has already been thoroughly broken."'-text
            SENTENCE_NT'the syringe is in the emergency box'
                AVERB_NT'is in'
                PROPER_NOUN_NT'syringe'
                RELATIONSHIP_NT'is in'
                    PROPER_NOUN_NT'emergency box'
            SENTENCE_NT'the description of the syringe is "It contains the cure for Gelato's Syndrome. You can inject anyone you like with it."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the syringe'
                    PROPER_NOUN_NT'syringe'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"It contains the cure for Gelato's Syndrome. You can inject anyone you like with it."'
            SENTENCE_NT'the bronze gates are northeast of marciony street'
                AVERB_NT'are northeast of'
                PROPER_NOUN_NT'bronze gates'
                RELATIONSHIP_NT'are northeast of'
                    PROPER_NOUN_NT'marciony street'
                    PROPER_NOUN_NT'northeast'
            SENTENCE_NT'the bronze gates are a door'
                AVERB_NT'are'
                PROPER_NOUN_NT'bronze gates'
                COMMON_NOUN_NT'door'
            SENTENCE_NT'the bronze gates are lockable and unlocked'
                AVERB_NT'are'
                PROPER_NOUN_NT'bronze gates'
                AND_NT'and'
                    ADJECTIVE_NT'lockable'
                    ADJECTIVE_NT'unlocked'
            SENTENCE_NT'the description of the bronze gates is "Erected during the milk-taint revolution of 1937, they were designed to keep Main Street safe from the depredations of dairy-starved rioters."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the bronze gates'
                    PROPER_NOUN_NT'bronze gates'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"Erected during the milk-taint revolution of 1937, they were designed to keep Main Street safe from the depredations of dairy-starved rioters."'
            SENTENCE_NT'the public library is east of main street'
                AVERB_NT'is east of'
                PROPER_NOUN_NT'public library'
                RELATIONSHIP_NT'is east of'
                    PROPER_NOUN_NT'main street'
                    PROPER_NOUN_NT'east'
            SENTENCE_NT'"Built in the 1920s during the height of the dairy boom, the public library has lush pink velvet seats, marble walls the color of fresh cream, and a motif of cherries carved around every doorframe. An incongruous sign hangs from the ceiling."'
            SENTENCE_NT'the incongruous sign is scenery in the public library'
                AVERB_NT'is'
                PROPER_NOUN_NT'incongruous sign'
                COMMON_NOUN_NT'scenery in the public library'
            SENTENCE_NT'the description of the incongruous sign is "Eating and drinking in the library is STRICTLY PROHIBITED."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the incongruous sign'
                    PROPER_NOUN_NT'incongruous sign'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"Eating and drinking in the library is STRICTLY PROHIBITED."'
            SENTENCE_NT'town hall is southeast of main street'
                AVERB_NT'is southeast of'
                PROPER_NOUN_NT'town hall'
                RELATIONSHIP_NT'is southeast of'
                    PROPER_NOUN_NT'main street'
                    PROPER_NOUN_NT'southeast'
            SENTENCE_NT'"Town Hall was built during the slow days of the ice-cream bust, and therefore it is as joyless and utilitarian as the Public Library is ridiculous. Unwilling to be reminded of their pain, the inhabitants steered clear of any decoration that might remotely be construed to resemble a scoop of anything: so there are no curves, only disciplined right angles."'
            SENTENCE_NT'the key to the city is in town hall'
                AVERB_NT'is in'
                PROPER_NOUN_NT'key to the city'
                RELATIONSHIP_NT'is in'
                    PROPER_NOUN_NT'town hall'
            SENTENCE_NT'it unlocks the iron gate'
                AVERB_NT'unlocks'
                PROPER_NOUN_NT'it'
                RELATIONSHIP_NT'unlocks'
                    PROPER_NOUN_NT'iron gate'
            SENTENCE_NT'it unlocks the bronze gates'
                AVERB_NT'unlocks'
                PROPER_NOUN_NT'it'
                RELATIONSHIP_NT'unlocks'
                    PROPER_NOUN_NT'bronze gates'
            SENTENCE_NT'the description of the key to the city is "A skeleton key."'
                AVERB_NT'is'
                X_OF_Y_NT'description of the key to the city'
                    PROPER_NOUN_NT'key to the city'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"A skeleton key."'
            SENTENCE_NT'a room can be indoors or outdoors'
                AVERB_NT'can be'
                COMMON_NOUN_NT'a room'
                PROPER_NOUN_NT'indoors or outdoors'
                    AND_NT'or'
                        PROPER_NOUN_NT'indoors'
                        PROPER_NOUN_NT'outdoors'
            SENTENCE_NT'the post office , the alfred cralle pool hall , the store , cold comfort , town hall , and the library are indoors'
                AVERB_NT'are'
                AND_NT','
                    PROPER_NOUN_NT'post office'
                    AND_NT','
                        PROPER_NOUN_NT'alfred cralle pool hall'
                        AND_NT','
                            PROPER_NOUN_NT'store'
                            AND_NT','
                                PROPER_NOUN_NT'cold comfort'
                                AND_NT','
                                    PROPER_NOUN_NT'town hall'
                                    PROPER_NOUN_NT'library'
                ADJECTIVE_NT'indoors'
            SENTENCE_NT'use full-length room descriptions'
                AVERB_NT'use'
                PROPER_NOUN_NT'full-length room descriptions'
            ROUTINE_NT'after looking in an outdoors room'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let started printing be false'
                        INVOCATION_NT'let started printing be false'
                            NEW_LOCAL_CONTEXT_NT'started printing'
                                UNKNOWN_NT'started printing'
                            RVALUE_CONTEXT_NT'false'
                                CONSTANT_NT'false'-truth state
                    INVOCATION_LIST_NT'now every proximate door is not mentioned'
                        CONDITION_CONTEXT_NT'every proximate door is not mentioned'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if an indoors room is adjacent'
                            INVOCATION_NT'if an indoors room is adjacent'
                                CONDITION_CONTEXT_NT'an indoors room is adjacent'
                                    TEST_PROPOSITION_NT'an indoors room is adjacent'(test: [ Exists x : kind=room(x) ^ A127'indoors'(x) ^ A40'adjacent'(x) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let started printing be true'
                                INVOCATION_NT'let started printing be true'
                                    LVALUE_LOCAL_CONTEXT_NT'started printing'
                                        LOCAL_VARIABLE_NT'started printing'(tmp_0;truth state)
                                    RVALUE_CONTEXT_NT'true'
                                        CONSTANT_NT'true'-truth state
                            CODE_BLOCK_NT'say "From here you can head into [the list of adjacent indoors rooms][if a proximate door is not mentioned], or go through [the list of proximate doors which are not mentioned][end if]. [run paragraph on]"'
                                INVOCATION_LIST_SAY_NT'"From here you can head into "'
                                    INVOCATION_NT'"From here you can head into "'
                                        RVALUE_CONTEXT_NT'"From here you can head into "'
                                            CONSTANT_NT'"From here you can head into "'-text
                                INVOCATION_LIST_SAY_NT'the list of adjacent indoors rooms'
                                    INVOCATION_NT'the list of adjacent indoors rooms'
                                        RVALUE_CONTEXT_NT'adjacent indoors rooms'
                                            CONSTANT_NT'adjacent indoors rooms'-description of rooms
                                INVOCATION_LIST_SAY_NT'if a proximate door is not mentioned'
                                    INVOCATION_NT'if a proximate door is not mentioned'
                                        CONDITION_CONTEXT_NT'a proximate door is not mentioned'
                                            TEST_PROPOSITION_NT'a proximate door is not mentioned'(test: [ Exists x : kind=door(x) ^ A49'proximate'(x) ^ NOT[ A75'mentioned'(x) NOT] ])
                                INVOCATION_LIST_SAY_NT'", or go through "'
                                    INVOCATION_NT'", or go through "'
                                        RVALUE_CONTEXT_NT'", or go through "'
                                            CONSTANT_NT'", or go through "'-text
                                INVOCATION_LIST_SAY_NT'the list of proximate doors which are not mentioned'
                                    INVOCATION_NT'the list of proximate doors which are not mentioned'
                                        RVALUE_CONTEXT_NT'proximate doors which are not mentioned'
                                            CONSTANT_NT'proximate doors which are not mentioned'-description of doors
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if'
                                INVOCATION_LIST_SAY_NT'". "'
                                    INVOCATION_NT'". "'
                                        RVALUE_CONTEXT_NT'". "'
                                            CONSTANT_NT'". "'-text
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if an outdoors room is adjacent'
                            INVOCATION_NT'if an outdoors room is adjacent'
                                CONDITION_CONTEXT_NT'an outdoors room is adjacent'
                                    TEST_PROPOSITION_NT'an outdoors room is adjacent'(test: [ Exists x : kind=room(x) ^ A128'outdoors'(x) ^ A40'adjacent'(x) ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "You could[if started printing is true] also[end if] go "'
                                INVOCATION_LIST_SAY_NT'"You could"'
                                    INVOCATION_NT'"You could"'
                                        RVALUE_CONTEXT_NT'"You could"'
                                            CONSTANT_NT'"You could"'-text
                                INVOCATION_LIST_SAY_NT'if started printing is true'
                                    INVOCATION_NT'if started printing is true'
                                        CONDITION_CONTEXT_NT'started printing is true'
                                            TEST_PROPOSITION_NT'started printing is true'(test: [ is('started printing', 'true') ])
                                INVOCATION_LIST_SAY_NT'" also"'
                                    INVOCATION_NT'" also"'
                                        RVALUE_CONTEXT_NT'" also"'
                                            CONSTANT_NT'" also"'-text
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if'
                                INVOCATION_LIST_SAY_NT'" go "'
                                    INVOCATION_NT'" go "'
                                        RVALUE_CONTEXT_NT'" go "'
                                            CONSTANT_NT'" go "'-text
                            INVOCATION_LIST_NT'let count be the number of adjacent outdoors rooms'
                                INVOCATION_NT'let count be the number of adjacent outdoors rooms'
                                    NEW_LOCAL_CONTEXT_NT'count'
                                        UNKNOWN_NT'count'
                                    RVALUE_CONTEXT_NT'number of adjacent outdoors rooms'
                                        PHRASE_TO_DECIDE_VALUE_NT'number of adjacent outdoors rooms'
                                            INVOCATION_LIST_NT'number of adjacent outdoors rooms'
                                                INVOCATION_NT'number of adjacent outdoors rooms'
                                                    RVALUE_CONTEXT_NT'adjacent outdoors rooms'
                                                        CONSTANT_NT'adjacent outdoors rooms'-description of rooms
                            INVOCATION_LIST_NT'let index be count'
                                INVOCATION_NT'let index be count'
                                    NEW_LOCAL_CONTEXT_NT'index'
                                        UNKNOWN_NT'index'
                                    RVALUE_CONTEXT_NT'count'
                                        LOCAL_VARIABLE_NT'count'(tmp_1;object)
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'repeat with next room running through adjacent outdoors rooms'
                                    INVOCATION_NT'repeat with next room running through adjacent outdoors rooms'
                                        NEW_LOCAL_CONTEXT_NT'next room'
                                            UNKNOWN_NT'next room'
                                        RVALUE_CONTEXT_NT'adjacent outdoors rooms'
                                            CONSTANT_NT'adjacent outdoors rooms'-description of rooms
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let way be the best route from the location to the next room'
                                        INVOCATION_NT'let way be the best route from the location to the next room'
                                            NEW_LOCAL_CONTEXT_NT'way'
                                                UNKNOWN_NT'way'
                                            RVALUE_CONTEXT_NT'best route from the location to the next room'
                                                PHRASE_TO_DECIDE_VALUE_NT'best route from the location to the next room'
                                                    INVOCATION_LIST_NT'best route from the location to the next room'
                                                        INVOCATION_NT'best route from the location to the next room'
                                                            RVALUE_CONTEXT_NT'location'
                                                                NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                                                            RVALUE_CONTEXT_NT'next room'
                                                                LOCAL_VARIABLE_NT'next room'(tmp_3;room)
                                    CODE_BLOCK_NT'say "[way] to [the next room]"'
                                        INVOCATION_LIST_SAY_NT'way'
                                            INVOCATION_NT'way'
                                                RVALUE_CONTEXT_NT'way'
                                                    LOCAL_VARIABLE_NT'way'(tmp_5;object)
                                        INVOCATION_LIST_SAY_NT'" to "'
                                            INVOCATION_NT'" to "'
                                                RVALUE_CONTEXT_NT'" to "'
                                                    CONSTANT_NT'" to "'-text
                                        INVOCATION_LIST_SAY_NT'the next room'
                                            INVOCATION_NT'the next room'
                                                RVALUE_CONTEXT_NT'next room'
                                                    LOCAL_VARIABLE_NT'next room'(tmp_3;room)
                                    INVOCATION_LIST_NT'decrement index'
                                        INVOCATION_NT'decrement index'
                                            LVALUE_CONTEXT_NT'index'
                                                LOCAL_VARIABLE_NT'index'(tmp_2;number)
                            INVOCATION_LIST_NT'make delimiter index of count , continuing'
                                INVOCATION_NT'make delimiter index of count'
                                    RVALUE_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(tmp_2;number)
                                    RVALUE_CONTEXT_NT'count'
                                        LOCAL_VARIABLE_NT'count'(tmp_1;object)
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if a proximate door is not mentioned'
                            INVOCATION_NT'if a proximate door is not mentioned'
                                CONDITION_CONTEXT_NT'a proximate door is not mentioned'
                                    TEST_PROPOSITION_NT'a proximate door is not mentioned'(test: [ Exists x : kind=door(x) ^ A49'proximate'(x) ^ NOT[ A75'mentioned'(x) NOT] ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let started printing be true'
                                INVOCATION_NT'let started printing be true'
                                    LVALUE_LOCAL_CONTEXT_NT'started printing'
                                        LOCAL_VARIABLE_NT'started printing'(tmp_0;truth state)
                                    RVALUE_CONTEXT_NT'true'
                                        CONSTANT_NT'true'-truth state
                            CODE_BLOCK_NT'say "[if started printing is true]Also available[otherwise]Your available exits[end if] [is-are the list of proximate doors which are not mentioned]."'
                                INVOCATION_LIST_SAY_NT'if started printing is true'
                                    INVOCATION_NT'if started printing is true'
                                        CONDITION_CONTEXT_NT'started printing is true'
                                            TEST_PROPOSITION_NT'started printing is true'(test: [ is('started printing', 'true') ])
                                INVOCATION_LIST_SAY_NT'"Also available"'
                                    INVOCATION_NT'"Also available"'
                                        RVALUE_CONTEXT_NT'"Also available"'
                                            CONSTANT_NT'"Also available"'-text
                                INVOCATION_LIST_SAY_NT'otherwise'
                                    INVOCATION_NT'otherwise'
                                INVOCATION_LIST_SAY_NT'"Your available exits"'
                                    INVOCATION_NT'"Your available exits"'
                                        RVALUE_CONTEXT_NT'"Your available exits"'
                                            CONSTANT_NT'"Your available exits"'-text
                                INVOCATION_LIST_SAY_NT'end if'
                                    INVOCATION_NT'end if'
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "'
                                        RVALUE_CONTEXT_NT'" "'
                                            CONSTANT_NT'" "'-text
                                INVOCATION_LIST_SAY_NT'is-are the list of proximate doors which are not mentioned'
                                    INVOCATION_NT'is-are the list of proximate doors which are not mentioned'
                                        RVALUE_CONTEXT_NT'proximate doors which are not mentioned'
                                            CONSTANT_NT'proximate doors which are not mentioned'-description of doors
                                INVOCATION_LIST_SAY_NT'"."'
                                    INVOCATION_NT'"."'
                                        RVALUE_CONTEXT_NT'"."'
                                            CONSTANT_NT'"."'-text
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if started printing is true'
                                    INVOCATION_NT'if started printing is true'
                                        CONDITION_CONTEXT_NT'started printing is true'
                                            TEST_PROPOSITION_NT'started printing is true'(test: [ is('started printing', 'true') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say paragraph break'
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break'
            ROUTINE_NT'definition'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the front side of it is the location'
                            INVOCATION_NT'if the front side of it is the location'
                                CONDITION_CONTEXT_NT'front side of it is the location'
                                    TEST_PROPOSITION_NT'front side of it is the location'(test: [ is('front side of it', 'the location') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes'
                                INVOCATION_NT'yes'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the back side of it is the location'
                            INVOCATION_NT'if the back side of it is the location'
                                CONDITION_CONTEXT_NT'back side of it is the location'
                                    TEST_PROPOSITION_NT'back side of it is the location'(test: [ is('back side of it', 'the location') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'yes'
                                INVOCATION_NT'yes'
                    INVOCATION_LIST_NT'no'
                        INVOCATION_NT'no'
            ROUTINE_NT'before exiting when the player is in an indoors room'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the player can see a door ( called nearest exit )'
                            INVOCATION_NT'if the player can see a door ( called nearest exit )'
                                CONDITION_CONTEXT_NT'player can see a door ( called nearest exit )'
                                    TEST_PROPOSITION_NT'player can see a door ( called nearest exit )'(test: [ Exists x : kind=door(x) ^ called='nearest exit'(door)(x) ^ can-see('player', x) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'try entering the nearest exit'
                                INVOCATION_NT'try entering the nearest exit'
                                    RVALUE_CONTEXT_NT'entering the nearest exit'
                                        CONSTANT_NT'entering the nearest exit'-action
                            CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with way running through directions'
                            INVOCATION_NT'repeat with way running through directions'
                                NEW_LOCAL_CONTEXT_NT'way'
                                    UNKNOWN_NT'way'
                                RVALUE_CONTEXT_NT'directions'
                                    CONSTANT_NT'directions'-description of directions
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let next room be the room way from the location'
                                INVOCATION_NT'let next room be the room way from the location'
                                    NEW_LOCAL_CONTEXT_NT'next room'
                                        UNKNOWN_NT'next room'
                                    RVALUE_CONTEXT_NT'room way from the location'
                                        PHRASE_TO_DECIDE_VALUE_NT'room way from the location'
                                            INVOCATION_LIST_NT'room way from the location'
                                                INVOCATION_NT'room way from the location'
                                                    RVALUE_CONTEXT_NT'way'
                                                        LOCAL_VARIABLE_NT'way'(tmp_1;direction)
                                                    RVALUE_CONTEXT_NT'location'
                                                        NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the next room is a room'
                                    INVOCATION_NT'if the next room is a room'
                                        CONDITION_CONTEXT_NT'next room is a room'
                                            TEST_PROPOSITION_NT'next room is a room'(test: [ kind=room('next room') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'try going way'
                                        INVOCATION_NT'try going way'
                                            RVALUE_CONTEXT_NT'going way'
                                                CONSTANT_NT'going way'-action
                                    CODE_BLOCK_NT
            SENTENCE_NT'blank is a room'
                AVERB_NT'is'
                PROPER_NOUN_NT'blank'
                COMMON_NOUN_NT'room'
            SENTENCE_NT'the destination of the player is blank'
                AVERB_NT'is'
                X_OF_Y_NT'destination of the player'
                    PROPER_NOUN_NT'player'
                    PROPER_NOUN_NT'destination'
                PROPER_NOUN_NT'blank'
            SENTENCE_NT'blank contains 15 ice cream cones'
                AVERB_NT'contains'
                PROPER_NOUN_NT'blank'
                RELATIONSHIP_NT'contains'
                    AND_NT
                        PROPER_NOUN_NT
                        AND_NT
                            PROPER_NOUN_NT
                            AND_NT
                                PROPER_NOUN_NT
                                AND_NT
                                    PROPER_NOUN_NT
                                    AND_NT
                                        PROPER_NOUN_NT
                                        AND_NT
                                            PROPER_NOUN_NT
                                            AND_NT
                                                PROPER_NOUN_NT
                                                AND_NT
                                                    PROPER_NOUN_NT
                                                    AND_NT
                                                        PROPER_NOUN_NT
                                                        AND_NT
                                                            PROPER_NOUN_NT
                                                            AND_NT
                                                                PROPER_NOUN_NT
                                                                AND_NT
                                                                    PROPER_NOUN_NT
                                                                    AND_NT
                                                                        PROPER_NOUN_NT
                                                                        AND_NT
                                                                            PROPER_NOUN_NT
                                                                            PROPER_NOUN_NT
        HEADING_NT'section 4 - other players' (level 5)
            SENTENCE_NT'vanessa is a woman in cold comfort'
                AVERB_NT'is'
                PROPER_NOUN_NT'vanessa'
                COMMON_NOUN_NT'woman in cold comfort'
            SENTENCE_NT'vanessa owns cold comfort'
                AVERB_NT'owns'
                PROPER_NOUN_NT'vanessa'
                RELATIONSHIP_NT'owns'
                    PROPER_NOUN_NT'cold comfort'
            SENTENCE_NT'francine is a woman in the public library'
                AVERB_NT'is'
                PROPER_NOUN_NT'francine'
                COMMON_NOUN_NT'woman in the public library'
            SENTENCE_NT'francine carries a book called phlox for phyllis'
                AVERB_NT'carries'
                PROPER_NOUN_NT'francine'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'phlox for phyllis'
            SENTENCE_NT'francine carries a stamped envelope called a pink stamped envelope'
                AVERB_NT'carries'
                PROPER_NOUN_NT'francine'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'pink stamped envelope'
            SENTENCE_NT'lewis is a man in the alfred cralle pool hall'
                AVERB_NT'is'
                PROPER_NOUN_NT'lewis'
                COMMON_NOUN_NT'man in the alfred cralle pool hall'
            SENTENCE_NT'lewis carries 3 stamped envelopes'
                AVERB_NT'carries'
                PROPER_NOUN_NT'lewis'
                RELATIONSHIP_NT'carries'
                    AND_NT
                        PROPER_NOUN_NT
                        AND_NT
                            PROPER_NOUN_NT
                            PROPER_NOUN_NT
            SENTENCE_NT'lewis carries a book called idiot's guide to dating'
                AVERB_NT'carries'
                PROPER_NOUN_NT'lewis'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'idiot's guide to dating'
            SENTENCE_NT'lewis carries a book called how to meet women'
                AVERB_NT'carries'
                PROPER_NOUN_NT'lewis'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'how to meet women'
            SENTENCE_NT'lewis carries a book called seduction in three easy steps'
                AVERB_NT'carries'
                PROPER_NOUN_NT'lewis'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'seduction in three easy steps'
            SENTENCE_NT'lewis carries a dvd called sleepless in seattle'
                AVERB_NT'carries'
                PROPER_NOUN_NT'lewis'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'sleepless in seattle'
            SENTENCE_NT'gene is a man in nancy johnson memorial square'
                AVERB_NT'is'
                PROPER_NOUN_NT'gene'
                COMMON_NOUN_NT'man in nancy johnson memorial square'
            SENTENCE_NT'gene carries a stamped envelope'
                AVERB_NT'carries'
                PROPER_NOUN_NT'gene'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'gene carries a dvd called casablanca'
                AVERB_NT'carries'
                PROPER_NOUN_NT'gene'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'casablanca'
            SENTENCE_NT'gene carries a coupon'
                AVERB_NT'carries'
                PROPER_NOUN_NT'gene'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'rhoda is a woman in marciony street'
                AVERB_NT'is'
                PROPER_NOUN_NT'rhoda'
                COMMON_NOUN_NT'woman in marciony street'
            SENTENCE_NT'rhoda carries a book called the marciony street murders'
                AVERB_NT'carries'
                PROPER_NOUN_NT'rhoda'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'the marciony street murders'
            SENTENCE_NT'rhoda carries a dvd called unsolved serial killings xviii'
                AVERB_NT'carries'
                PROPER_NOUN_NT'rhoda'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'unsolved serial killings xviii'
            SENTENCE_NT'rhoda carries a stamped envelope called a squashy package'
                AVERB_NT'carries'
                PROPER_NOUN_NT'rhoda'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'squashy package'
            SENTENCE_NT'martin is a man in main street'
                AVERB_NT'is'
                PROPER_NOUN_NT'martin'
                COMMON_NOUN_NT'man in main street'
            SENTENCE_NT'martin carries a dvd called the lifecycle of the south sea tortoise'
                AVERB_NT'carries'
                PROPER_NOUN_NT'martin'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'the lifecycle of the south sea tortoise'
            SENTENCE_NT'martin carries a coupon'
                AVERB_NT'carries'
                PROPER_NOUN_NT'martin'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'antony is a man in movie rental'
                AVERB_NT'is'
                PROPER_NOUN_NT'antony'
                COMMON_NOUN_NT'man in movie rental'
            SENTENCE_NT'antony carries a coupon'
                AVERB_NT'carries'
                PROPER_NOUN_NT'antony'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'antony carries a stamped envelope called a postcard'
                AVERB_NT'carries'
                PROPER_NOUN_NT'antony'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'postcard'
            SENTENCE_NT'shelby is a man in the town hall'
                AVERB_NT'is'
                PROPER_NOUN_NT'shelby'
                COMMON_NOUN_NT'man in the town hall'
            SENTENCE_NT'shelby carries a dvd called conducting an orderly meeting'
                AVERB_NT'carries'
                PROPER_NOUN_NT'shelby'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT'conducting an orderly meeting'
            SENTENCE_NT'shelby carries 5 stamped envelopes'
                AVERB_NT'carries'
                PROPER_NOUN_NT'shelby'
                RELATIONSHIP_NT'carries'
                    AND_NT
                        PROPER_NOUN_NT
                        AND_NT
                            PROPER_NOUN_NT
                            AND_NT
                                PROPER_NOUN_NT
                                AND_NT
                                    PROPER_NOUN_NT
                                    PROPER_NOUN_NT
            SENTENCE_NT'shelby carries an ice cream cone'
                AVERB_NT'carries'
                PROPER_NOUN_NT'shelby'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'shelby carries a coupon'
                AVERB_NT'carries'
                PROPER_NOUN_NT'shelby'
                RELATIONSHIP_NT'carries'
                    PROPER_NOUN_NT
            SENTENCE_NT'christopher is a man in the library'
                AVERB_NT'is'
                PROPER_NOUN_NT'christopher'
                COMMON_NOUN_NT'man in the library'
            SENTENCE_NT'christopher owns the library'
                AVERB_NT'owns'
                PROPER_NOUN_NT'christopher'
                RELATIONSHIP_NT'owns'
                    PROPER_NOUN_NT'library'
            SENTENCE_NT'linnea is a woman in the alfred cralle pool hall'
                AVERB_NT'is'
                PROPER_NOUN_NT'linnea'
                COMMON_NOUN_NT'woman in the alfred cralle pool hall'
            SENTENCE_NT'linnea owns the alfred cralle pool hall'
                AVERB_NT'owns'
                PROPER_NOUN_NT'linnea'
                RELATIONSHIP_NT'owns'
                    PROPER_NOUN_NT'alfred cralle pool hall'
            SENTENCE_NT'ned is a man in the movie rental store'
                AVERB_NT'is'
                PROPER_NOUN_NT'ned'
                COMMON_NOUN_NT'man in the movie rental store'
            SENTENCE_NT'ned owns the movie rental'
                AVERB_NT'owns'
                PROPER_NOUN_NT'ned'
                RELATIONSHIP_NT'owns'
                    PROPER_NOUN_NT'movie rental'
            ROUTINE_NT'after printing the name of someone ( called target ) while listing contents'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the target owns the location of the target'
                            INVOCATION_NT'if the target owns the location of the target'
                                CONDITION_CONTEXT_NT'target owns the location of the target'
                                    TEST_PROPOSITION_NT'target owns the location of the target'(test: [ is('target', {<schema: (QUOTED_INAME_0_0000005d(*1))>:'the location of the target'}) ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say " (the owner)"'
                                INVOCATION_LIST_SAY_NT'" (the owner)"'
                                    INVOCATION_NT'" (the owner)"'
                                        RVALUE_CONTEXT_NT'" (the owner)"'
                                            CONSTANT_NT'" (the owner)"'-text
            SENTENCE_NT'the description of a person is usually "[The noun] [if the noun is clean]looks healthy[otherwise]is the color of [infection color of the noun][end if]."'
                AVERB_NT'is usually'
                X_OF_Y_NT'description of a person'
                    COMMON_NOUN_NT'person'
                    PROPER_NOUN_NT'description'
                PROPER_NOUN_NT'"[The noun] [if the noun is clean]looks healthy[otherwise]is the color of [infection color of the noun][end if]."'
            ROUTINE_NT'after examining another person who is carrying something'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT'say "[if the noun is female]She[otherwise]He[end if] is carrying [a list of things carried by the noun]."'
                        INVOCATION_LIST_SAY_NT'if the noun is female'
                            INVOCATION_NT'if the noun is female'
                                CONDITION_CONTEXT_NT'noun is female'
                                    TEST_PROPOSITION_NT'noun is female'(test: [ A87'female'('noun') ])
                        INVOCATION_LIST_SAY_NT'"She"'
                            INVOCATION_NT'"She"'
                                RVALUE_CONTEXT_NT'"She"'
                                    CONSTANT_NT'"She"'-text
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise'
                        INVOCATION_LIST_SAY_NT'"He"'
                            INVOCATION_NT'"He"'
                                RVALUE_CONTEXT_NT'"He"'
                                    CONSTANT_NT'"He"'-text
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'" is carrying "'
                            INVOCATION_NT'" is carrying "'
                                RVALUE_CONTEXT_NT'" is carrying "'
                                    CONSTANT_NT'" is carrying "'-text
                        INVOCATION_LIST_SAY_NT'a list of things carried by the noun'
                            INVOCATION_NT'a list of things carried by the noun'
                                RVALUE_CONTEXT_NT'things carried by the noun'
                                    CONSTANT_NT'things carried by the noun'-description of things
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
            ROUTINE_NT'when play begins'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let patient zero be a random other person'
                        INVOCATION_NT'let patient zero be a random other person'
                            NEW_LOCAL_CONTEXT_NT'patient zero'
                                UNKNOWN_NT'patient zero'
                            RVALUE_CONTEXT_NT'a random other person'
                                PHRASE_TO_DECIDE_VALUE_NT'a random other person'
                                    INVOCATION_LIST_NT'a random other person'
                                        INVOCATION_NT'a random other person'
                                            RVALUE_CONTEXT_NT'other person'
                                                CONSTANT_NT'other person'-description of people
                    INVOCATION_LIST_NT'now patient zero is infected'
                        CONDITION_CONTEXT_NT'patient zero is infected'
        HEADING_NT'section 5 - conversation' (level 5)
            SENTENCE_NT'a person has a table name called conversation'
                AVERB_NT'has'
                COMMON_NOUN_NT'person'
                ALLOWED_NT
                    PROPERTYCALLED_NT'called'
                        PROPER_NOUN_NT'table name'
                        PROPER_NOUN_NT'conversation'
            ROUTINE_NT'instead of asking someone about something'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let the source be the conversation of the noun'
                        INVOCATION_NT'let the source be the conversation of the noun'
                            NEW_LOCAL_CONTEXT_NT'source'
                                UNKNOWN_NT'source'
                            RVALUE_CONTEXT_NT'conversation of the noun'
                                PROPERTY_VALUE_NT'conversation of the noun'
                                    CONSTANT_NT-nothing valued property
                                    NONLOCAL_VARIABLE_NT'the noun'('noun'(var)[object])
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if topic understood is a topic listed in source'
                            INVOCATION_NT'if topic understood is a topic listed in source'
                                CONDITION_CONTEXT_NT'topic understood is a topic listed in source'
                                    TEST_PROPOSITION_NT'topic understood is a topic listed in source'(test: [ kind=snippet('topic understood') ^ listed_in('topic understood', 'source') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if there is a turn stamp entry'
                                    INVOCATION_NT'if there is a turn stamp entry'
                                        CONDITION_CONTEXT_NT'there is a turn stamp entry'
                                            TEST_VALUE_NT'there is a turn stamp entry'
                                                PHRASE_TO_DECIDE_VALUE_NT'there is a turn stamp entry'
                                                    INVOCATION_LIST_NT'there is a turn stamp entry'
                                                        INVOCATION_NT'there is a turn stamp entry'
                                                            LVALUE_TR_CONTEXT_NT'a turn stamp entry'
                                                                TABLE_ENTRY_NT'a turn stamp entry'
                                                                    CONSTANT_NT-nothing valued table column
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "You have already heard that [summary entry]."'
                                        INVOCATION_LIST_SAY_NT'"You have already heard that "'
                                            INVOCATION_NT'"You have already heard that "'
                                                RVALUE_CONTEXT_NT'"You have already heard that "'
                                                    CONSTANT_NT'"You have already heard that "'-text
                                        INVOCATION_LIST_SAY_NT'summary entry'
                                            INVOCATION_NT'summary entry'
                                                RVALUE_CONTEXT_NT'summary entry'
                                                    TABLE_ENTRY_NT'summary entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'"."'
                                            INVOCATION_NT'"."'
                                                RVALUE_CONTEXT_NT'"."'
                                                    CONSTANT_NT'"."'-text
                                CODE_BLOCK_NT'otherwise'
                                    INVOCATION_LIST_NT'now turn stamp entry is the turn count'
                                        CONDITION_CONTEXT_NT'turn stamp entry is the turn count'
                                    INVOCATION_LIST_NT'now the character entry is the noun'
                                        CONDITION_CONTEXT_NT'the character entry is the noun'
                                    CODE_BLOCK_NT'say "[reply entry][paragraph break]"'
                                        INVOCATION_LIST_SAY_NT'reply entry'
                                            INVOCATION_NT'reply entry'
                                                RVALUE_CONTEXT_NT'reply entry'
                                                    TABLE_ENTRY_NT'reply entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break'
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT'say "[The noun] stares at you blankly."'
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" stares at you blankly."'
                                    INVOCATION_NT'" stares at you blankly."'
                                        RVALUE_CONTEXT_NT'" stares at you blankly."'
                                            CONSTANT_NT'" stares at you blankly."'-text
            ROUTINE_NT'instead of telling someone about something'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'try asking the noun about it'
                        INVOCATION_NT'try asking the noun about it'
                            RVALUE_CONTEXT_NT'asking the noun about it'
                                CONSTANT_NT'asking the noun about it'-action
            SENTENCE_NT'understand "recap" or "recall" or "review" as recalling conversations'
                AVERB_NT'understand'
                PROPER_NOUN_NT'"recap" or "recall" or "review"'
                PROPER_NOUN_NT'recalling conversations'
            SENTENCE_NT'recalling conversations is an action applying to nothing'
                AVERB_NT'is'
                PROPER_NOUN_NT'recalling conversations'
                PROPER_NOUN_NT'applying to nothing'
            ROUTINE_NT'carry out recalling conversations'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with speaker running through other people'
                            INVOCATION_NT'repeat with speaker running through other people'
                                NEW_LOCAL_CONTEXT_NT'speaker'
                                    UNKNOWN_NT'speaker'
                                RVALUE_CONTEXT_NT'other people'
                                    CONSTANT_NT'other people'-description of people
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let source be the conversation of the speaker'
                                INVOCATION_NT'let source be the conversation of the speaker'
                                    NEW_LOCAL_CONTEXT_NT'source'
                                        UNKNOWN_NT'source'
                                    RVALUE_CONTEXT_NT'conversation of the speaker'
                                        PROPERTY_VALUE_NT'conversation of the speaker'
                                            CONSTANT_NT-nothing valued property
                                            LOCAL_VARIABLE_NT'the speaker'(tmp_0;person)
                            INVOCATION_LIST_NT'sort source in turn stamp order'
                                INVOCATION_NT'sort source in turn stamp order'
                                    RVALUE_CONTEXT_NT'source'
                                        LOCAL_VARIABLE_NT'source'(tmp_2;table name)
                                    RVALUE_CONTEXT_NT'turn stamp'
                                        CONSTANT_NT'turn stamp'-nothing valued table column
                            CODE_BLOCK_NT'say "[The speaker] has so far told you: [line break]"'
                                INVOCATION_LIST_SAY_NT'the speaker'
                                    INVOCATION_NT'the speaker'
                                        RVALUE_CONTEXT_NT'speaker'
                                            LOCAL_VARIABLE_NT'speaker'(tmp_0;person)
                                INVOCATION_LIST_SAY_NT'" has so far told you: "'
                                    INVOCATION_NT'" has so far told you: "'
                                        RVALUE_CONTEXT_NT'" has so far told you: "'
                                            CONSTANT_NT'" has so far told you: "'-text
                                INVOCATION_LIST_SAY_NT'line break'
                                    INVOCATION_NT'line break'
                            INVOCATION_LIST_NT'let index be 0'
                                INVOCATION_NT'let index be 0'
                                    NEW_LOCAL_CONTEXT_NT'index'
                                        UNKNOWN_NT'index'
                                    RVALUE_CONTEXT_NT'0'
                                        CONSTANT_NT'0'-number
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'repeat through source'
                                    INVOCATION_NT'repeat through source'
                                        RVALUE_CONTEXT_NT'source'
                                            LOCAL_VARIABLE_NT'source'(tmp_2;table name)
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if there is a turn stamp entry and the speaker is character entry'
                                            INVOCATION_NT'if there is a turn stamp entry and the speaker is character entry'
                                                CONDITION_CONTEXT_NT'there is a turn stamp entry and the speaker is character entry'
                                                    LOGICAL_AND_NT'there is a turn stamp entry and the speaker is character entry'
                                                        TEST_VALUE_NT'there is a turn stamp entry'
                                                            PHRASE_TO_DECIDE_VALUE_NT'there is a turn stamp entry'
                                                                INVOCATION_LIST_NT'there is a turn stamp entry'
                                                                    INVOCATION_NT'there is a turn stamp entry'
                                                                        LVALUE_TR_CONTEXT_NT'a turn stamp entry'
                                                                            TABLE_ENTRY_NT'a turn stamp entry'
                                                                                CONSTANT_NT-nothing valued table column
                                                        TEST_PROPOSITION_NT'the speaker is character entry'(test: [ is('the speaker', 'character entry') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'let index be 1'
                                                INVOCATION_NT'let index be 1'
                                                    LVALUE_LOCAL_CONTEXT_NT'index'
                                                        LOCAL_VARIABLE_NT'index'(tmp_3;number)
                                                    RVALUE_CONTEXT_NT'1'
                                                        CONSTANT_NT'1'-number
                                            CODE_BLOCK_NT'say "  [summary entry][line break]"'
                                                INVOCATION_LIST_SAY_NT'"  "'
                                                    INVOCATION_NT'"  "'
                                                        RVALUE_CONTEXT_NT'"  "'
                                                            CONSTANT_NT'"  "'-text
                                                INVOCATION_LIST_SAY_NT'summary entry'
                                                    INVOCATION_NT'summary entry'
                                                        RVALUE_CONTEXT_NT'summary entry'
                                                            TABLE_ENTRY_NT'summary entry'
                                                                CONSTANT_NT-nothing valued table column
                                                INVOCATION_LIST_SAY_NT'line break'
                                                    INVOCATION_NT'line break'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if index is 0'
                                    INVOCATION_NT'if index is 0'
                                        CONDITION_CONTEXT_NT'index is 0'
                                            TEST_PROPOSITION_NT'index is 0'(test: [ is('index', '0') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "  absolutely nothing[line break]"'
                                        INVOCATION_LIST_SAY_NT'"  absolutely nothing"'
                                            INVOCATION_NT'"  absolutely nothing"'
                                                RVALUE_CONTEXT_NT'"  absolutely nothing"'
                                                    CONSTANT_NT'"  absolutely nothing"'-text
                                        INVOCATION_LIST_SAY_NT'line break'
                                            INVOCATION_NT'line break'
                            CODE_BLOCK_NT'say line break'
                                INVOCATION_LIST_SAY_NT'line break'
                                    INVOCATION_NT'line break'
            SENTENCE_NT'the conversation of a person is usually table of general chitchat'
                AVERB_NT'is usually'
                X_OF_Y_NT'conversation of a person'
                    COMMON_NOUN_NT'person'
                    PROPER_NOUN_NT'conversation'
                PROPER_NOUN_NT'table of general chitchat'
            TABLE_NT'table of general chitchat topic reply summary turn stamp character "weather/heat/warmth" "'It's appalling, isn't it? You'd think we didn't pay our taxes.'" "that the weather is appalling" a number a person "sun/sunlight" "'Good thing the town mostly switched to solar power, har, har.'" "that the town is mostly relying on solar power" "rain" "'Nope, there isn't going to be rain for 132 days,' replies [the noun]." "that rain is not expected for another 132 days" "snow/hail/ice" "This hilarious sally is greeted with hoots of laughter only." "that the concept of snow is downright laughable" "disease/sickness/illness/syndrome" "You get a cold, fixed stare in response. 'That's not funny,' [the noun] replies finally." "that discussing the disease is more or less taboo" "cold comfort" "'If you haven't tried it, you should,' says [the noun]. 'Best ice cream in town, and that's saying something, you bet.'" "that Cold Comfort has the best ice cream in town" "town/city/village" "'Yeah, it's a mite odd,' allows [the noun]. 'Not to everyone's taste, like...' [the noun as pronoun] considers for a moment. 'Like ginger ice cream. Big pieces of crystallized ginger... not everyone likes that.'" "that the town is a mite odd" "forecast/weatherman" or "weather forecast/man" "'Oh, the weather man's gotten a lot more reliable since the gummint started making it for us,' says [the noun]. 'Now he just reads off the schedule on the air every morning. Pretty much takes the fun right out of the news, if you ask me.'" "that the weather is all generated by schedule" "taxes/tax" or "weather tax" "A snort. 'You'd think for the rates we pay we'd get something a little pleasanter, don't you?'" "that the weather tax really ought to be paying for something nicer than what you get" "job/employment/work" "'[if the noun owns a room (called the shop)]I own [the shop],' replies [the noun][otherwise]Work at the creamery, like most folk around here,' answers [the noun]." "this and that about employment in town" "book/books/reading" "'The Public Library has a good selection, excepting only the cookbook section,' says [the noun]. 'That got censored way back when-- well, way back.'" "that the Public Library has a good collection, except for the cookbook section"'
            SENTENCE_NT'the conversation of vanessa is the table of vanessa chatter'
                AVERB_NT'is'
                X_OF_Y_NT'conversation of vanessa'
                    PROPER_NOUN_NT'vanessa'
                    PROPER_NOUN_NT'conversation'
                PROPER_NOUN_NT'table of vanessa chatter'
            TABLE_NT'table of vanessa chatter topic reply summary turn stamp character "ice cream" or "sorbet/sherbet/flavor/flavors/flavour/flavours/ice/ices" "'The flavors are [list of flavors],' she responds promptly, without needing to draw breath." "that the flavors are [list of flavors]" a number a person'
            ROUTINE_NT'after reading a command'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'while player's command includes "the"'
                            INVOCATION_NT'while player's command includes "the"'
                                CONDITION_CONTEXT_NT'player's command includes "the"'
                                    TEST_VALUE_NT'player's command includes "the"'
                                        PHRASE_TO_DECIDE_VALUE_NT'player's command includes "the"'
                                            INVOCATION_LIST_NT'player's command includes "the"'
                                                INVOCATION_NT'player's command includes "the"'
                                                    RVALUE_CONTEXT_NT'player's command'
                                                        NONLOCAL_VARIABLE_NT'player's command'('player's command'(var)[snippet])
                                                    RVALUE_CONTEXT_NT'"the"'
                                                        CONSTANT_NT'"the"'-topic
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'cut the matched text'
                                INVOCATION_NT'cut the matched text'
                                    RVALUE_CONTEXT_NT'matched text'
                                        NONLOCAL_VARIABLE_NT'matched text'('matched text'(var)[snippet])
        HEADING_NT'section 6 - movement description' (level 5)
            SENTENCE_NT'a person has some text called walk style'
                AVERB_NT'has'
                COMMON_NOUN_NT'person'
                ALLOWED_NT
                    PROPERTYCALLED_NT'called'
                        PROPER_NOUN_NT'text'
                        PROPER_NOUN_NT'walk style'
            SENTENCE_NT'the walk style of a man is usually "stride"'
                AVERB_NT'is usually'
                X_OF_Y_NT'walk style of a man'
                    COMMON_NOUN_NT'man'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"stride"'
            SENTENCE_NT'the walk style of a woman is usually "strut"'
                AVERB_NT'is usually'
                X_OF_Y_NT'walk style of a woman'
                    COMMON_NOUN_NT'woman'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"strut"'
            SENTENCE_NT'the walk style of gene is "[one of]wander[or]stroll[purely at random]"'
                AVERB_NT'is'
                X_OF_Y_NT'walk style of gene'
                    PROPER_NOUN_NT'gene'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"[one of]wander[or]stroll[purely at random]"'
            SENTENCE_NT'the walk style of francine is "waddle"'
                AVERB_NT'is'
                X_OF_Y_NT'walk style of francine'
                    PROPER_NOUN_NT'francine'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"waddle"'
            SENTENCE_NT'the walk style of antony is "scamper"'
                AVERB_NT'is'
                X_OF_Y_NT'walk style of antony'
                    PROPER_NOUN_NT'antony'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"scamper"'
            SENTENCE_NT'the walk style of rhoda is "sashay"'
                AVERB_NT'is'
                X_OF_Y_NT'walk style of rhoda'
                    PROPER_NOUN_NT'rhoda'
                    PROPER_NOUN_NT'walk style'
                PROPER_NOUN_NT'"sashay"'
            TABLE_NT'table of visible exits character second third heading chosen total a person a person a person a direction a number with 10 blank rows'
            TABLE_NT'table of visible entrances character second third heading chosen total a person a person a person a direction a number with 10 blank rows'
            ROUTINE_NT'to clear ( current table - a table name )'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat through current table'
                            INVOCATION_NT'repeat through current table'
                                RVALUE_CONTEXT_NT'current table'
                                    LOCAL_VARIABLE_NT'current table'(t_0;table name)
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'blank out the whole row'
                                INVOCATION_NT'blank out the whole row'
            ROUTINE_NT'to tidy departures of ( current table - a table name )'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let next direction be up'
                        INVOCATION_NT'let next direction be up'
                            NEW_LOCAL_CONTEXT_NT'next direction'
                                UNKNOWN_NT'next direction'
                            RVALUE_CONTEXT_NT'up'
                                CONSTANT_NT'up'-direction(I_up)(I30'up')
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat through current table'
                            INVOCATION_NT'repeat through current table'
                                RVALUE_CONTEXT_NT'current table'
                                    LOCAL_VARIABLE_NT'current table'(t_0;table name)
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if heading chosen entry is next direction'
                                    INVOCATION_NT'if heading chosen entry is next direction'
                                        CONDITION_CONTEXT_NT'heading chosen entry is next direction'
                                            TEST_PROPOSITION_NT'heading chosen entry is next direction'(test: [ is('heading chosen entry', 'next direction') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'let accomplice be character entry'
                                        INVOCATION_NT'let accomplice be character entry'
                                            NEW_LOCAL_CONTEXT_NT'accomplice'
                                                UNKNOWN_NT'accomplice'
                                            RVALUE_CONTEXT_NT'character entry'
                                                TABLE_ENTRY_NT'character entry'
                                                    CONSTANT_NT-nothing valued table column
                                    INVOCATION_LIST_NT'choose row with heading chosen of next direction in the current table'
                                        INVOCATION_NT'choose row with heading chosen of next direction in the current table'
                                            RVALUE_CONTEXT_NT'heading chosen'
                                                CONSTANT_NT'heading chosen'-nothing valued table column
                                            RVALUE_CONTEXT_NT'next direction'
                                                LOCAL_VARIABLE_NT'next direction'(tmp_0;direction)
                                            RVALUE_CONTEXT_NT'current table'
                                                LOCAL_VARIABLE_NT'current table'(t_0;table name)
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if total entry is 1'
                                            INVOCATION_NT'if total entry is 1'
                                                CONDITION_CONTEXT_NT'total entry is 1'
                                                    TEST_PROPOSITION_NT'total entry is 1'(test: [ is('total entry', '1') ])
                                        CODE_BLOCK_NT
                                            INVOCATION_LIST_NT'now second entry is accomplice'
                                                CONDITION_CONTEXT_NT'second entry is accomplice'
                                            INVOCATION_LIST_NT'now total entry is 2'
                                                CONDITION_CONTEXT_NT'total entry is 2'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if total entry is 2'
                                            INVOCATION_NT'if total entry is 2'
                                                CONDITION_CONTEXT_NT'total entry is 2'
                                                    TEST_PROPOSITION_NT'total entry is 2'(test: [ is('total entry', '2') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT
                                                INVOCATION_LIST_NT'unless the second entry is accomplice'
                                                    INVOCATION_NT'unless the second entry is accomplice'
                                                        CONDITION_CONTEXT_NT'second entry is accomplice'
                                                            TEST_PROPOSITION_NT'second entry is accomplice'(test: [ is('second entry', 'accomplice') ])
                                                CODE_BLOCK_NT
                                                    INVOCATION_LIST_NT'now third entry is accomplice'
                                                        CONDITION_CONTEXT_NT'third entry is accomplice'
                                                    INVOCATION_LIST_NT'now total entry is 3'
                                                        CONDITION_CONTEXT_NT'total entry is 3'
                                    INVOCATION_LIST_NT'choose row with character of accomplice in the current table'
                                        INVOCATION_NT'choose row with character of accomplice in the current table'
                                            RVALUE_CONTEXT_NT'character'
                                                CONSTANT_NT'character'-nothing valued table column
                                            RVALUE_CONTEXT_NT'accomplice'
                                                LOCAL_VARIABLE_NT'accomplice'(tmp_3;thing)
                                            RVALUE_CONTEXT_NT'current table'
                                                LOCAL_VARIABLE_NT'current table'(t_0;table name)
                                    INVOCATION_LIST_NT'blank out the whole row'
                                        INVOCATION_NT'blank out the whole row'
                                CODE_BLOCK_NT'otherwise'
                                    INVOCATION_LIST_NT'let next direction be heading chosen entry'
                                        INVOCATION_NT'let next direction be heading chosen entry'
                                            LVALUE_LOCAL_CONTEXT_NT'next direction'
                                                LOCAL_VARIABLE_NT'next direction'(tmp_0;direction)
                                            RVALUE_CONTEXT_NT'heading chosen entry'
                                                TABLE_ENTRY_NT'heading chosen entry'
                                                    CONSTANT_NT-nothing valued table column
            SENTENCE_NT'a door has a person called last opener'
                AVERB_NT'has'
                COMMON_NOUN_NT'door'
                ALLOWED_NT
                    PROPERTYCALLED_NT'called'
                        PROPER_NOUN_NT'person'
                        PROPER_NOUN_NT'last opener'
            ROUTINE_NT'report someone opening a door'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now group size is 1'
                        CONDITION_CONTEXT_NT'group size is 1'
                    INVOCATION_LIST_NT'now the last opener of the noun is the person asked'
                        CONDITION_CONTEXT_NT'the last opener of the noun is the person asked'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is visible'
                            INVOCATION_NT'if the person asked is visible'
                                CONDITION_CONTEXT_NT'person asked is visible'
                                    TEST_PROPOSITION_NT'person asked is visible'(test: [ A30'visible'('person asked') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked] opens [the noun]. [run paragraph on]"'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                INVOCATION_LIST_SAY_NT'" opens "'
                                    INVOCATION_NT'" opens "'
                                        RVALUE_CONTEXT_NT'" opens "'
                                            CONSTANT_NT'" opens "'-text
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'". "'
                                    INVOCATION_NT'". "'
                                        RVALUE_CONTEXT_NT'". "'
                                            CONSTANT_NT'". "'-text
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on'
                            CODE_BLOCK_NT
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT'say "[The noun] opens from the other side. [run paragraph on]"'
                                INVOCATION_LIST_SAY_NT'the noun'
                                    INVOCATION_NT'the noun'
                                        RVALUE_CONTEXT_NT'noun'
                                            NONLOCAL_VARIABLE_NT'noun'('noun'(var)[object])
                                INVOCATION_LIST_SAY_NT'" opens from the other side. "'
                                    INVOCATION_NT'" opens from the other side. "'
                                        RVALUE_CONTEXT_NT'" opens from the other side. "'
                                            CONSTANT_NT'" opens from the other side. "'-text
                                INVOCATION_LIST_SAY_NT'run paragraph on'
                                    INVOCATION_NT'run paragraph on'
                            CODE_BLOCK_NT
            ROUTINE_NT'report someone going through a door ( called route )'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is not the last opener of the route'
                            INVOCATION_NT'if the person asked is not the last opener of the route'
                                CONDITION_CONTEXT_NT'person asked is not the last opener of the route'
                                    TEST_PROPOSITION_NT'person asked is not the last opener of the route'(test: [ NOT[ is('person asked', 'the last opener of the route') NOT] ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'continue the action'
                                INVOCATION_NT'continue the action'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is the last person named'
                            INVOCATION_NT'if the person asked is the last person named'
                                CONDITION_CONTEXT_NT'person asked is the last person named'
                                    TEST_PROPOSITION_NT'person asked is the last person named'(test: [ is('person asked', 'the last person named') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "[The person asked as pronoun]"'
                                INVOCATION_LIST_SAY_NT'the person asked as pronoun'
                                    [1/2] INVOCATION_NT'the person asked as pronoun'/1
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                                    [2/2] INVOCATION_NT'the person asked as pronoun'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT'say "[The person asked]"'
                                INVOCATION_LIST_SAY_NT'the person asked'
                                    INVOCATION_NT'the person asked'
                                        RVALUE_CONTEXT_NT'person asked'
                                            NONLOCAL_VARIABLE_NT'person asked'('person asked'(var)[object])
                    CODE_BLOCK_NT'say " [if the person asked is in the location]comes[otherwise]goes[end if] through[if the last thing named is not the route] [the route][end if]."'
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "'
                                RVALUE_CONTEXT_NT'" "'
                                    CONSTANT_NT'" "'-text
                        INVOCATION_LIST_SAY_NT'if the person asked is in the location'
                            INVOCATION_NT'if the person asked is in the location'
                                CONDITION_CONTEXT_NT'person asked is in the location'
                                    TEST_PROPOSITION_NT'person asked is in the location'(test: [ is('the location', {<schema: ContainerOf(*1)>:'person asked'}) ])
                        INVOCATION_LIST_SAY_NT'"comes"'
                            INVOCATION_NT'"comes"'
                                RVALUE_CONTEXT_NT'"comes"'
                                    CONSTANT_NT'"comes"'-text
                        INVOCATION_LIST_SAY_NT'otherwise'
                            INVOCATION_NT'otherwise'
                        INVOCATION_LIST_SAY_NT'"goes"'
                            INVOCATION_NT'"goes"'
                                RVALUE_CONTEXT_NT'"goes"'
                                    CONSTANT_NT'"goes"'-text
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'" through"'
                            INVOCATION_NT'" through"'
                                RVALUE_CONTEXT_NT'" through"'
                                    CONSTANT_NT'" through"'-text
                        INVOCATION_LIST_SAY_NT'if the last thing named is not the route'
                            INVOCATION_NT'if the last thing named is not the route'
                                CONDITION_CONTEXT_NT'last thing named is not the route'
                                    TEST_PROPOSITION_NT'last thing named is not the route'(test: [ NOT[ is('last thing named', 'the route') NOT] ])
                        INVOCATION_LIST_SAY_NT'" "'
                            INVOCATION_NT'" "'
                                RVALUE_CONTEXT_NT'" "'
                                    CONSTANT_NT'" "'-text
                        INVOCATION_LIST_SAY_NT'the route'
                            INVOCATION_NT'the route'
                                RVALUE_CONTEXT_NT'route'
                                    LOCAL_VARIABLE_NT'route'(tmp_0;door)
                        INVOCATION_LIST_SAY_NT'end if'
                            INVOCATION_NT'end if'
                        INVOCATION_LIST_SAY_NT'"."'
                            INVOCATION_NT'"."'
                                RVALUE_CONTEXT_NT'"."'
                                    CONSTANT_NT'"."'-text
                    CODE_BLOCK_NT
            SENTENCE_NT'the last thing named is a thing that varies'
                AVERB_NT'is'
                PROPER_NOUN_NT'last thing named'
                COMMON_NOUN_NT'thing that varies'
            ROUTINE_NT'before printing the name of something ( called target ) which is not a person'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last thing named is the target'
                        CONDITION_CONTEXT_NT'the last thing named is the target'
            ROUTINE_NT'report someone going a direction'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is in the location'
                            INVOCATION_NT'if the person asked is in the location'
                                CONDITION_CONTEXT_NT'person asked is in the location'
                                    TEST_PROPOSITION_NT'person asked is in the location'(test: [ is('the location', {<schema: ContainerOf(*1)>:'person asked'}) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'choose a blank row in the table of visible entrances'
                                INVOCATION_NT'choose a blank row in the table of visible entrances'
                                    RVALUE_CONTEXT_NT'table of visible entrances'
                                        CONSTANT_NT'table of visible entrances'-table name
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'choose a blank row in the table of visible exits'
                                INVOCATION_NT'choose a blank row in the table of visible exits'
                                    RVALUE_CONTEXT_NT'table of visible exits'
                                        CONSTANT_NT'table of visible exits'-table name
                    INVOCATION_LIST_NT'now character entry is the person asked'
                        CONDITION_CONTEXT_NT'character entry is the person asked'
                    INVOCATION_LIST_NT'now total entry is 1'
                        CONDITION_CONTEXT_NT'total entry is 1'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the person asked is in the location'
                            INVOCATION_NT'if the person asked is in the location'
                                CONDITION_CONTEXT_NT'person asked is in the location'
                                    TEST_PROPOSITION_NT'person asked is in the location'(test: [ is('the location', {<schema: ContainerOf(*1)>:'person asked'}) ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now heading chosen entry is the opposite of the noun'
                                CONDITION_CONTEXT_NT'heading chosen entry is the opposite of the noun'
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'now heading chosen entry is the noun'
                                CONDITION_CONTEXT_NT'heading chosen entry is the noun'
                    INVOCATION_LIST_NT'stop the action'
                        INVOCATION_NT'stop the action'
            ROUTINE_NT'this is the movement reporting rule'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'sort the table of visible entrances in heading chosen order'
                        INVOCATION_NT'sort the table of visible entrances in heading chosen order'
                            RVALUE_CONTEXT_NT'table of visible entrances'
                                CONSTANT_NT'table of visible entrances'-table name
                            RVALUE_CONTEXT_NT'heading chosen'
                                CONSTANT_NT'heading chosen'-nothing valued table column
                    INVOCATION_LIST_NT'tidy departures of the table of visible entrances'
                        INVOCATION_NT'tidy departures of the table of visible entrances'
                            RVALUE_CONTEXT_NT'table of visible entrances'
                                CONSTANT_NT'table of visible entrances'-table name
                    INVOCATION_LIST_NT'sort the table of visible exits in heading chosen order'
                        INVOCATION_NT'sort the table of visible exits in heading chosen order'
                            RVALUE_CONTEXT_NT'table of visible exits'
                                CONSTANT_NT'table of visible exits'-table name
                            RVALUE_CONTEXT_NT'heading chosen'
                                CONSTANT_NT'heading chosen'-nothing valued table column
                    INVOCATION_LIST_NT'tidy departures of the table of visible exits'
                        INVOCATION_NT'tidy departures of the table of visible exits'
                            RVALUE_CONTEXT_NT'table of visible exits'
                                CONSTANT_NT'table of visible exits'-table name
                    INVOCATION_LIST_NT'let total row count be the number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                        INVOCATION_NT'let total row count be the number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                            NEW_LOCAL_CONTEXT_NT'total row count'
                                UNKNOWN_NT'total row count'
                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                                    INVOCATION_LIST_NT'number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                                        INVOCATION_NT'number of filled rows in the table of visible entrances plus the number of filled rows in the table of visible exits'
                                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible entrances'
                                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible entrances'
                                                    INVOCATION_LIST_NT'number of filled rows in the table of visible entrances'
                                                        INVOCATION_NT'number of filled rows in the table of visible entrances'
                                                            RVALUE_CONTEXT_NT'table of visible entrances'
                                                                CONSTANT_NT'table of visible entrances'-table name
                                            RVALUE_CONTEXT_NT'number of filled rows in the table of visible exits'
                                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of visible exits'
                                                    INVOCATION_LIST_NT'number of filled rows in the table of visible exits'
                                                        INVOCATION_NT'number of filled rows in the table of visible exits'
                                                            RVALUE_CONTEXT_NT'table of visible exits'
                                                                CONSTANT_NT'table of visible exits'-table name
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if total row count is 0'
                            INVOCATION_NT'if total row count is 0'
                                CONDITION_CONTEXT_NT'total row count is 0'
                                    TEST_PROPOSITION_NT'total row count is 0'(test: [ is('total row count', '0') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'rule succeeds'
                                INVOCATION_NT'rule succeeds'
                    INVOCATION_LIST_NT'generate descriptions from the table of visible entrances'
                        INVOCATION_NT'generate descriptions from the table of visible entrances'
                            RVALUE_CONTEXT_NT'table of visible entrances'
                                CONSTANT_NT'table of visible entrances'-table name
                    INVOCATION_LIST_NT'generate descriptions from the table of visible exits'
                        INVOCATION_NT'generate descriptions from the table of visible exits'
                            RVALUE_CONTEXT_NT'table of visible exits'
                                CONSTANT_NT'table of visible exits'-table name
                    INVOCATION_LIST_NT'clear the table of visible entrances'
                        INVOCATION_NT'clear the table of visible entrances'
                            RVALUE_CONTEXT_NT'table of visible entrances'
                                CONSTANT_NT'table of visible entrances'-table name
                    INVOCATION_LIST_NT'clear the table of visible exits'
                        INVOCATION_NT'clear the table of visible exits'
                            RVALUE_CONTEXT_NT'table of visible exits'
                                CONSTANT_NT'table of visible exits'-table name
            ROUTINE_NT'to generate descriptions from ( current table - a table name )'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let count be the number of filled rows in the current table'
                        INVOCATION_NT'let count be the number of filled rows in the current table'
                            NEW_LOCAL_CONTEXT_NT'count'
                                UNKNOWN_NT'count'
                            RVALUE_CONTEXT_NT'number of filled rows in the current table'
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the current table'
                                    INVOCATION_LIST_NT'number of filled rows in the current table'
                                        INVOCATION_NT'number of filled rows in the current table'
                                            RVALUE_CONTEXT_NT'current table'
                                                LOCAL_VARIABLE_NT'current table'(t_0;table name)
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if count is 0'
                            INVOCATION_NT'if count is 0'
                                CONDITION_CONTEXT_NT'count is 0'
                                    TEST_PROPOSITION_NT'count is 0'(test: [ is('count', '0') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'rule succeeds'
                                INVOCATION_NT'rule succeeds'
                    INVOCATION_LIST_NT'let index be count'
                        INVOCATION_NT'let index be count'
                            NEW_LOCAL_CONTEXT_NT'index'
                                UNKNOWN_NT'index'
                            RVALUE_CONTEXT_NT'count'
                                LOCAL_VARIABLE_NT'count'(tmp_0;number)
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat through the current table'
                            INVOCATION_NT'repeat through the current table'
                                RVALUE_CONTEXT_NT'current table'
                                    LOCAL_VARIABLE_NT'current table'(t_0;table name)
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let accomplice be character entry'
                                INVOCATION_NT'let accomplice be character entry'
                                    NEW_LOCAL_CONTEXT_NT'accomplice'
                                        UNKNOWN_NT'accomplice'
                                    RVALUE_CONTEXT_NT'character entry'
                                        TABLE_ENTRY_NT'character entry'
                                            CONSTANT_NT-nothing valued table column
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if character entry is a person'
                                    INVOCATION_NT'if character entry is a person'
                                        CONDITION_CONTEXT_NT'character entry is a person'
                                            TEST_PROPOSITION_NT'character entry is a person'(test: [ kind=person('character entry') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now character entry is marked for listing'
                                        CONDITION_CONTEXT_NT'character entry is marked for listing'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if there is a second entry and second entry is a person'
                                    INVOCATION_NT'if there is a second entry and second entry is a person'
                                        CONDITION_CONTEXT_NT'there is a second entry and second entry is a person'
                                            LOGICAL_AND_NT'there is a second entry and second entry is a person'
                                                TEST_VALUE_NT'there is a second entry'
                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a second entry'
                                                        INVOCATION_LIST_NT'there is a second entry'
                                                            INVOCATION_NT'there is a second entry'
                                                                LVALUE_TR_CONTEXT_NT'a second entry'
                                                                    TABLE_ENTRY_NT'a second entry'
                                                                        CONSTANT_NT-nothing valued table column
                                                TEST_PROPOSITION_NT'second entry is a person'(test: [ kind=person('second entry') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now second entry is marked for listing'
                                        CONDITION_CONTEXT_NT'second entry is marked for listing'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if there is a third entry and third entry is a person'
                                    INVOCATION_NT'if there is a third entry and third entry is a person'
                                        CONDITION_CONTEXT_NT'there is a third entry and third entry is a person'
                                            LOGICAL_AND_NT'there is a third entry and third entry is a person'
                                                TEST_VALUE_NT'there is a third entry'
                                                    PHRASE_TO_DECIDE_VALUE_NT'there is a third entry'
                                                        INVOCATION_LIST_NT'there is a third entry'
                                                            INVOCATION_NT'there is a third entry'
                                                                LVALUE_TR_CONTEXT_NT'a third entry'
                                                                    TABLE_ENTRY_NT'a third entry'
                                                                        CONSTANT_NT-nothing valued table column
                                                TEST_PROPOSITION_NT'third entry is a person'(test: [ kind=person('third entry') ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'now third entry is marked for listing'
                                        CONDITION_CONTEXT_NT'third entry is marked for listing'
                            INVOCATION_LIST_NT'let target be the room the heading chosen entry from the location'
                                INVOCATION_NT'let target be the room the heading chosen entry from the location'
                                    NEW_LOCAL_CONTEXT_NT'target'
                                        UNKNOWN_NT'target'
                                    RVALUE_CONTEXT_NT'room the heading chosen entry from the location'
                                        PHRASE_TO_DECIDE_VALUE_NT'room the heading chosen entry from the location'
                                            INVOCATION_LIST_NT'room the heading chosen entry from the location'
                                                INVOCATION_NT'room the heading chosen entry from the location'
                                                    RVALUE_CONTEXT_NT'heading chosen entry'
                                                        TABLE_ENTRY_NT'heading chosen entry'
                                                            CONSTANT_NT-nothing valued table column
                                                    RVALUE_CONTEXT_NT'location'
                                                        NONLOCAL_VARIABLE_NT'location'('location'(var)[object])
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if total entry is 3'
                                    INVOCATION_NT'if total entry is 3'
                                        CONDITION_CONTEXT_NT'total entry is 3'
                                            TEST_PROPOSITION_NT'total entry is 3'(test: [ is('total entry', '3') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[The character entry], [the second entry][optional comma] and [the third entry] "'
                                        INVOCATION_LIST_SAY_NT'the character entry'
                                            INVOCATION_NT'the character entry'
                                                RVALUE_CONTEXT_NT'character entry'
                                                    TABLE_ENTRY_NT'character entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'", "'
                                            INVOCATION_NT'", "'
                                                RVALUE_CONTEXT_NT'", "'
                                                    CONSTANT_NT'", "'-text
                                        INVOCATION_LIST_SAY_NT'the second entry'
                                            INVOCATION_NT'the second entry'
                                                RVALUE_CONTEXT_NT'second entry'
                                                    TABLE_ENTRY_NT'second entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'optional comma'
                                            INVOCATION_NT'optional comma'
                                        INVOCATION_LIST_SAY_NT'" and "'
                                            INVOCATION_NT'" and "'
                                                RVALUE_CONTEXT_NT'" and "'
                                                    CONSTANT_NT'" and "'-text
                                        INVOCATION_LIST_SAY_NT'the third entry'
                                            INVOCATION_NT'the third entry'
                                                RVALUE_CONTEXT_NT'third entry'
                                                    TABLE_ENTRY_NT'third entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "'
                                                RVALUE_CONTEXT_NT'" "'
                                                    CONSTANT_NT'" "'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if total entry is 2'
                                    INVOCATION_NT'if total entry is 2'
                                        CONDITION_CONTEXT_NT'total entry is 2'
                                            TEST_PROPOSITION_NT'total entry is 2'(test: [ is('total entry', '2') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[The character entry] and [the second entry] "'
                                        INVOCATION_LIST_SAY_NT'the character entry'
                                            INVOCATION_NT'the character entry'
                                                RVALUE_CONTEXT_NT'character entry'
                                                    TABLE_ENTRY_NT'character entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'" and "'
                                            INVOCATION_NT'" and "'
                                                RVALUE_CONTEXT_NT'" and "'
                                                    CONSTANT_NT'" and "'-text
                                        INVOCATION_LIST_SAY_NT'the second entry'
                                            INVOCATION_NT'the second entry'
                                                RVALUE_CONTEXT_NT'second entry'
                                                    TABLE_ENTRY_NT'second entry'
                                                        CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "'
                                                RVALUE_CONTEXT_NT'" "'
                                                    CONSTANT_NT'" "'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if total entry is 1'
                                    INVOCATION_NT'if total entry is 1'
                                        CONDITION_CONTEXT_NT'total entry is 1'
                                            TEST_PROPOSITION_NT'total entry is 1'(test: [ is('total entry', '1') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if the character entry is the last person named'
                                            INVOCATION_NT'if the character entry is the last person named'
                                                CONDITION_CONTEXT_NT'character entry is the last person named'
                                                    TEST_PROPOSITION_NT'character entry is the last person named'(test: [ is('character entry', 'the last person named') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The character entry as pronoun] "'
                                                INVOCATION_LIST_SAY_NT'the character entry as pronoun'
                                                    [1/2] INVOCATION_NT'the character entry as pronoun'/1
                                                        RVALUE_CONTEXT_NT'character entry'
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT-nothing valued table column
                                                    [2/2] INVOCATION_NT'the character entry as pronoun'
                                                        RVALUE_CONTEXT_NT'character entry'
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT-nothing valued table column
                                                INVOCATION_LIST_SAY_NT'" "'
                                                    INVOCATION_NT'" "'
                                                        RVALUE_CONTEXT_NT'" "'
                                                            CONSTANT_NT'" "'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "[The character entry] "'
                                                INVOCATION_LIST_SAY_NT'the character entry'
                                                    INVOCATION_NT'the character entry'
                                                        RVALUE_CONTEXT_NT'character entry'
                                                            TABLE_ENTRY_NT'character entry'
                                                                CONSTANT_NT-nothing valued table column
                                                INVOCATION_LIST_SAY_NT'" "'
                                                    INVOCATION_NT'" "'
                                                        RVALUE_CONTEXT_NT'" "'
                                                            CONSTANT_NT'" "'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if total entry is 1'
                                    INVOCATION_NT'if total entry is 1'
                                        CONDITION_CONTEXT_NT'total entry is 1'
                                            TEST_PROPOSITION_NT'total entry is 1'(test: [ is('total entry', '1') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[walk style of the character entry]s "'
                                        INVOCATION_LIST_SAY_NT'walk style of the character entry'
                                            INVOCATION_NT'walk style of the character entry'
                                                RVALUE_CONTEXT_NT'walk style of the character entry'
                                                    PROPERTY_VALUE_NT'walk style of the character entry'
                                                        CONSTANT_NT-nothing valued property
                                                        TABLE_ENTRY_NT'the character entry'
                                                            CONSTANT_NT-nothing valued table column
                                        INVOCATION_LIST_SAY_NT'"s "'
                                            INVOCATION_NT'"s "'
                                                RVALUE_CONTEXT_NT'"s "'
                                                    CONSTANT_NT'"s "'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT'say "walk[if total entry is 1]s[end if] "'
                                        INVOCATION_LIST_SAY_NT'"walk"'
                                            INVOCATION_NT'"walk"'
                                                RVALUE_CONTEXT_NT'"walk"'
                                                    CONSTANT_NT'"walk"'-text
                                        INVOCATION_LIST_SAY_NT'if total entry is 1'
                                            INVOCATION_NT'if total entry is 1'
                                                CONDITION_CONTEXT_NT'total entry is 1'
                                                    TEST_PROPOSITION_NT'total entry is 1'(test: [ is('total entry', '1') ])
                                        INVOCATION_LIST_SAY_NT'"s"'
                                            INVOCATION_NT'"s"'
                                                RVALUE_CONTEXT_NT'"s"'
                                                    CONSTANT_NT'"s"'-text
                                        INVOCATION_LIST_SAY_NT'end if'
                                            INVOCATION_NT'end if'
                                        INVOCATION_LIST_SAY_NT'" "'
                                            INVOCATION_NT'" "'
                                                RVALUE_CONTEXT_NT'" "'
                                                    CONSTANT_NT'" "'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the character entry is in the location'
                                    INVOCATION_NT'if the character entry is in the location'
                                        CONDITION_CONTEXT_NT'character entry is in the location'
                                            TEST_PROPOSITION_NT'character entry is in the location'(test: [ is('the location', {<schema: ContainerOf(*1)>:'character entry'}) ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is indoors and target is indoors'
                                            INVOCATION_NT'if location is indoors and target is indoors'
                                                CONDITION_CONTEXT_NT'location is indoors and target is indoors'
                                                    LOGICAL_AND_NT'location is indoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is indoors'(test: [ A127'indoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is indoors'(test: [ A127'indoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over from "'
                                                INVOCATION_LIST_SAY_NT'"over from "'
                                                    INVOCATION_NT'"over from "'
                                                        RVALUE_CONTEXT_NT'"over from "'
                                                            CONSTANT_NT'"over from "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is outdoors and target is indoors'
                                            INVOCATION_NT'if location is outdoors and target is indoors'
                                                CONDITION_CONTEXT_NT'location is outdoors and target is indoors'
                                                    LOGICAL_AND_NT'location is outdoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is outdoors'(test: [ A128'outdoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is indoors'(test: [ A127'indoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "out of "'
                                                INVOCATION_LIST_SAY_NT'"out of "'
                                                    INVOCATION_NT'"out of "'
                                                        RVALUE_CONTEXT_NT'"out of "'
                                                            CONSTANT_NT'"out of "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is indoors and target is outdoors'
                                            INVOCATION_NT'if location is indoors and target is outdoors'
                                                CONDITION_CONTEXT_NT'location is indoors and target is outdoors'
                                                    LOGICAL_AND_NT'location is indoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is indoors'(test: [ A127'indoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is outdoors'(test: [ A128'outdoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "in from "'
                                                INVOCATION_LIST_SAY_NT'"in from "'
                                                    INVOCATION_NT'"in from "'
                                                        RVALUE_CONTEXT_NT'"in from "'
                                                            CONSTANT_NT'"in from "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is outdoors and target is outdoors'
                                            INVOCATION_NT'if location is outdoors and target is outdoors'
                                                CONDITION_CONTEXT_NT'location is outdoors and target is outdoors'
                                                    LOGICAL_AND_NT'location is outdoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is outdoors'(test: [ A128'outdoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is outdoors'(test: [ A128'outdoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over from "'
                                                INVOCATION_LIST_SAY_NT'"over from "'
                                                    INVOCATION_NT'"over from "'
                                                        RVALUE_CONTEXT_NT'"over from "'
                                                            CONSTANT_NT'"over from "'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is indoors and target is indoors'
                                            INVOCATION_NT'if location is indoors and target is indoors'
                                                CONDITION_CONTEXT_NT'location is indoors and target is indoors'
                                                    LOGICAL_AND_NT'location is indoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is indoors'(test: [ A127'indoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is indoors'(test: [ A127'indoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over to "'
                                                INVOCATION_LIST_SAY_NT'"over to "'
                                                    INVOCATION_NT'"over to "'
                                                        RVALUE_CONTEXT_NT'"over to "'
                                                            CONSTANT_NT'"over to "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is outdoors and target is indoors'
                                            INVOCATION_NT'if location is outdoors and target is indoors'
                                                CONDITION_CONTEXT_NT'location is outdoors and target is indoors'
                                                    LOGICAL_AND_NT'location is outdoors and target is indoors'
                                                        TEST_PROPOSITION_NT'location is outdoors'(test: [ A128'outdoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is indoors'(test: [ A127'indoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "into "'
                                                INVOCATION_LIST_SAY_NT'"into "'
                                                    INVOCATION_NT'"into "'
                                                        RVALUE_CONTEXT_NT'"into "'
                                                            CONSTANT_NT'"into "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is indoors and target is outdoors'
                                            INVOCATION_NT'if location is indoors and target is outdoors'
                                                CONDITION_CONTEXT_NT'location is indoors and target is outdoors'
                                                    LOGICAL_AND_NT'location is indoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is indoors'(test: [ A127'indoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is outdoors'(test: [ A128'outdoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "out [if a door is visible][the random visible door][end if] to "'
                                                INVOCATION_LIST_SAY_NT'"out "'
                                                    INVOCATION_NT'"out "'
                                                        RVALUE_CONTEXT_NT'"out "'
                                                            CONSTANT_NT'"out "'-text
                                                INVOCATION_LIST_SAY_NT'if a door is visible'
                                                    INVOCATION_NT'if a door is visible'
                                                        CONDITION_CONTEXT_NT'a door is visible'
                                                            TEST_PROPOSITION_NT'a door is visible'(test: [ Exists x : kind=door(x) ^ A30'visible'(x) ])
                                                INVOCATION_LIST_SAY_NT'the random visible door'
                                                    INVOCATION_NT'the random visible door'
                                                        RVALUE_CONTEXT_NT'random visible door'
                                                            PHRASE_TO_DECIDE_VALUE_NT'random visible door'
                                                                INVOCATION_LIST_NT'random visible door'
                                                                    INVOCATION_NT'random visible door'
                                                                        RVALUE_CONTEXT_NT'visible door'
                                                                            CONSTANT_NT'visible door'-description of doors
                                                INVOCATION_LIST_SAY_NT'end if'
                                                    INVOCATION_NT'end if'
                                                INVOCATION_LIST_SAY_NT'" to "'
                                                    INVOCATION_NT'" to "'
                                                        RVALUE_CONTEXT_NT'" to "'
                                                            CONSTANT_NT'" to "'-text
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if location is outdoors and target is outdoors'
                                            INVOCATION_NT'if location is outdoors and target is outdoors'
                                                CONDITION_CONTEXT_NT'location is outdoors and target is outdoors'
                                                    LOGICAL_AND_NT'location is outdoors and target is outdoors'
                                                        TEST_PROPOSITION_NT'location is outdoors'(test: [ A128'outdoors'('location') ])
                                                        TEST_PROPOSITION_NT'target is outdoors'(test: [ A128'outdoors'('target') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "over to "'
                                                INVOCATION_LIST_SAY_NT'"over to "'
                                                    INVOCATION_NT'"over to "'
                                                        RVALUE_CONTEXT_NT'"over to "'
                                                            CONSTANT_NT'"over to "'-text
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if target is outdoors'
                                    INVOCATION_NT'if target is outdoors'
                                        CONDITION_CONTEXT_NT'target is outdoors'
                                            TEST_PROPOSITION_NT'target is outdoors'(test: [ A128'outdoors'('target') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "[the heading chosen entry]"'
                                        INVOCATION_LIST_SAY_NT'the heading chosen entry'
                                            INVOCATION_NT'the heading chosen entry'
                                                RVALUE_CONTEXT_NT'heading chosen entry'
                                                    TABLE_ENTRY_NT'heading chosen entry'
                                                        CONSTANT_NT-nothing valued table column
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT'say "[the target]"'
                                        INVOCATION_LIST_SAY_NT'the target'
                                            INVOCATION_NT'the target'
                                                RVALUE_CONTEXT_NT'target'
                                                    LOCAL_VARIABLE_NT'target'(tmp_5;room)
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the total entry is 1 and count is 1 and accomplice carries something'
                                    INVOCATION_NT'if the total entry is 1 and count is 1 and accomplice carries something'
                                        CONDITION_CONTEXT_NT'total entry is 1 and count is 1 and accomplice carries something'
                                            LOGICAL_AND_NT'total entry is 1 and count is 1 and accomplice carries something'
                                                TEST_PROPOSITION_NT'total entry is 1'(test: [ is('total entry', '1') ])
                                                LOGICAL_AND_NT
                                                    TEST_PROPOSITION_NT'count is 1'(test: [ is('count', '1') ])
                                                    TEST_PROPOSITION_NT'accomplice carries something'(test: [ Exists x : kind=thing_c(x) ^ is('accomplice', {<schema: CarrierOf(*1)>:x}) ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say ", carrying [a list of things carried by the accomplice]"'
                                        INVOCATION_LIST_SAY_NT'", carrying "'
                                            INVOCATION_NT'", carrying "'
                                                RVALUE_CONTEXT_NT'", carrying "'
                                                    CONSTANT_NT'", carrying "'-text
                                        INVOCATION_LIST_SAY_NT'a list of things carried by the accomplice'
                                            INVOCATION_NT'a list of things carried by the accomplice'
                                                RVALUE_CONTEXT_NT'things carried by the accomplice'
                                                    CONSTANT_NT'things carried by the accomplice'-description of things
                            INVOCATION_LIST_NT'decrement index'
                                INVOCATION_NT'decrement index'
                                    LVALUE_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(tmp_1;number)
                            INVOCATION_LIST_NT'make delimiter index of count , continuing'
                                INVOCATION_NT'make delimiter index of count'
                                    RVALUE_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(tmp_1;number)
                                    RVALUE_CONTEXT_NT'count'
                                        LOCAL_VARIABLE_NT'count'(tmp_0;number)
                            INVOCATION_LIST_NT'now group size is total entry'
                                CONDITION_CONTEXT_NT'group size is total entry'
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if a marked for listing person is infected'
                            INVOCATION_NT'if a marked for listing person is infected'
                                CONDITION_CONTEXT_NT'a marked for listing person is infected'
                                    TEST_PROPOSITION_NT'a marked for listing person is infected'(test: [ Exists x : kind=person(x) ^ A73'marked for listing'(x) ^ A125'infected'(x) ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if looking and a marked for listing person is not in the location'
                                    INVOCATION_NT'if looking and a marked for listing person is not in the location'
                                        CONDITION_CONTEXT_NT'looking and a marked for listing person is not in the location'
                                            LOGICAL_AND_NT'looking and a marked for listing person is not in the location'
                                                TEST_VALUE_NT'looking'
                                                    CONSTANT_NT'looking'-action
                                                TEST_PROPOSITION_NT'a marked for listing person is not in the location'(test: [ Exists x : kind=person(x) ^ A73'marked for listing'(x) ^ NOT[ is('the location', {<schema: ContainerOf(*1)>:x}) NOT] ])
                                CODE_BLOCK_NT
                                    INVOCATION_LIST_NT'clear marked people'
                                        INVOCATION_NT'clear marked people'
                                    CODE_BLOCK_NT'say paragraph break'
                                        INVOCATION_LIST_SAY_NT'paragraph break'
                                            INVOCATION_NT'paragraph break'
                                CODE_BLOCK_NT'otherwise'
                                    INVOCATION_LIST_NT'describe patients'
                                        INVOCATION_NT'describe patients'
                        CODE_BLOCK_NT'otherwise'
                            INVOCATION_LIST_NT'clear marked people'
                                INVOCATION_NT'clear marked people'
                            CODE_BLOCK_NT'say paragraph break'
                                INVOCATION_LIST_SAY_NT'paragraph break'
                                    INVOCATION_NT'paragraph break'
            SENTENCE_NT'the last person named is a person that varies'
                AVERB_NT'is'
                PROPER_NOUN_NT'last person named'
                COMMON_NOUN_NT'person that varies'
            ROUTINE_NT'before printing the name of a person ( called target )'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'now the last person named is the target'
                        CONDITION_CONTEXT_NT'the last person named is the target'
            SENTENCE_NT'group size is a number that varies'
                AVERB_NT'is'
                PROPER_NOUN_NT'group size'
                COMMON_NOUN_NT'number that varies'
            SENTENCE_NT'group size is 1'
                AVERB_NT'is'
                PROPER_NOUN_NT'group size'
                PROPER_NOUN_NT'1'
            ROUTINE_NT'to clear marked people'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with named party running through people'
                            INVOCATION_NT'repeat with named party running through people'
                                NEW_LOCAL_CONTEXT_NT'named party'
                                    UNKNOWN_NT'named party'
                                RVALUE_CONTEXT_NT'people'
                                    CONSTANT_NT'people'-description of people
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'now the named party is not marked for listing'
                                CONDITION_CONTEXT_NT'the named party is not marked for listing'
            ROUTINE_NT'before listing nondescript items'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the number of people who are marked for listing is 0'
                            INVOCATION_NT'if the number of people who are marked for listing is 0'
                                CONDITION_CONTEXT_NT'number of people who are marked for listing is 0'
                                    TEST_PROPOSITION_NT'number of people who are marked for listing is 0'(test: [ is('number of people who are marked for listing', '0') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'make no decision'
                                INVOCATION_NT'make no decision'
                    CODE_BLOCK_NT'say "You can see [a list of people who are marked for listing] here. "'
                        INVOCATION_LIST_SAY_NT'"You can see "'
                            INVOCATION_NT'"You can see "'
                                RVALUE_CONTEXT_NT'"You can see "'
                                    CONSTANT_NT'"You can see "'-text
                        INVOCATION_LIST_SAY_NT'a list of people who are marked for listing'
                            INVOCATION_NT'a list of people who are marked for listing'
                                RVALUE_CONTEXT_NT'people who are marked for listing'
                                    CONSTANT_NT'people who are marked for listing'-description of people
                        INVOCATION_LIST_SAY_NT'" here. "'
                            INVOCATION_NT'" here. "'
                                RVALUE_CONTEXT_NT'" here. "'
                                    CONSTANT_NT'" here. "'-text
                    INVOCATION_LIST_NT'now group size is the number of people who are marked for listing'
                        CONDITION_CONTEXT_NT'group size is the number of people who are marked for listing'
                    INVOCATION_LIST_NT'describe patients'
                        INVOCATION_NT'describe patients'
                    INVOCATION_LIST_NT'now every marked for listing person is not marked for listing'
                        CONDITION_CONTEXT_NT'every marked for listing person is not marked for listing'
            ROUTINE_NT'to describe patients'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if every marked for listing person is infected and at least three people are marked for listing'
                            INVOCATION_NT'if every marked for listing person is infected and at least three people are marked for listing'
                                CONDITION_CONTEXT_NT'every marked for listing person is infected and at least three people are marked for listing'
                                    LOGICAL_AND_NT'every marked for listing person is infected and at least three people are marked for listing'
                                        TEST_PROPOSITION_NT'every marked for listing person is infected'(test: [ ForAll x IN[ kind=person(x) ^ A73'marked for listing'(x) IN] : A125'infected'(x) ])
                                        TEST_PROPOSITION_NT'at least three people are marked for listing'(test: [ Card>=3 x IN[ kind=person(x) IN] : A73'marked for listing'(x) ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "They are all sick as dogs, every one."'
                                INVOCATION_LIST_SAY_NT'"They are all sick as dogs, every one."'
                                    INVOCATION_NT'"They are all sick as dogs, every one."'
                                        RVALUE_CONTEXT_NT'"They are all sick as dogs, every one."'
                                            CONSTANT_NT'"They are all sick as dogs, every one."'-text
                            INVOCATION_LIST_NT'clear marked people'
                                INVOCATION_NT'clear marked people'
                            INVOCATION_LIST_NT'rule succeeds'
                                INVOCATION_NT'rule succeeds'
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing'
                                    INVOCATION_NT'if the number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing'
                                        CONDITION_CONTEXT_NT'number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing'
                                            LOGICAL_AND_NT'number of people who are marked for listing is greater than two and the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing'
                                                TEST_PROPOSITION_NT'number of people who are marked for listing is greater than two'(test: [ greater-than('number of people who are marked for listing', 'two') ])
                                                TEST_PROPOSITION_NT'the number of infected people who are marked for listing is greater than the number of clean people who are marked for listing'(test: [ greater-than('the number of infected people who are marked for listing', 'the number of clean people who are marked for listing') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say "Only [the list of clean people who are marked for listing] currently remain[if the number of clean people who are marked for listing is 1]s[end if] untainted."'
                                        INVOCATION_LIST_SAY_NT'"Only "'
                                            INVOCATION_NT'"Only "'
                                                RVALUE_CONTEXT_NT'"Only "'
                                                    CONSTANT_NT'"Only "'-text
                                        INVOCATION_LIST_SAY_NT'the list of clean people who are marked for listing'
                                            INVOCATION_NT'the list of clean people who are marked for listing'
                                                RVALUE_CONTEXT_NT'clean people who are marked for listing'
                                                    CONSTANT_NT'clean people who are marked for listing'-description of people
                                        INVOCATION_LIST_SAY_NT'" currently remain"'
                                            INVOCATION_NT'" currently remain"'
                                                RVALUE_CONTEXT_NT'" currently remain"'
                                                    CONSTANT_NT'" currently remain"'-text
                                        INVOCATION_LIST_SAY_NT'if the number of clean people who are marked for listing is 1'
                                            INVOCATION_NT'if the number of clean people who are marked for listing is 1'
                                                CONDITION_CONTEXT_NT'number of clean people who are marked for listing is 1'
                                                    TEST_PROPOSITION_NT'number of clean people who are marked for listing is 1'(test: [ is('number of clean people who are marked for listing', '1') ])
                                        INVOCATION_LIST_SAY_NT'"s"'
                                            INVOCATION_NT'"s"'
                                                RVALUE_CONTEXT_NT'"s"'
                                                    CONSTANT_NT'"s"'-text
                                        INVOCATION_LIST_SAY_NT'end if'
                                            INVOCATION_NT'end if'
                                        INVOCATION_LIST_SAY_NT'" untainted."'
                                            INVOCATION_NT'" untainted."'
                                                RVALUE_CONTEXT_NT'" untainted."'
                                                    CONSTANT_NT'" untainted."'-text
                                    INVOCATION_LIST_NT'clear marked people'
                                        INVOCATION_NT'clear marked people'
                                    INVOCATION_LIST_NT'rule succeeds'
                                        INVOCATION_NT'rule succeeds'
                    INVOCATION_LIST_NT'let count be the number of marked for listing other people who are infected'
                        INVOCATION_NT'let count be the number of marked for listing other people who are infected'
                            NEW_LOCAL_CONTEXT_NT'count'
                                UNKNOWN_NT'count'
                            RVALUE_CONTEXT_NT'number of marked for listing other people who are infected'
                                PHRASE_TO_DECIDE_VALUE_NT'number of marked for listing other people who are infected'
                                    INVOCATION_LIST_NT'number of marked for listing other people who are infected'
                                        INVOCATION_NT'number of marked for listing other people who are infected'
                                            RVALUE_CONTEXT_NT'marked for listing other people who are infected'
                                                CONSTANT_NT'marked for listing other people who are infected'-description of people
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if count is 0'
                            INVOCATION_NT'if count is 0'
                                CONDITION_CONTEXT_NT'count is 0'
                                    TEST_PROPOSITION_NT'count is 0'(test: [ is('count', '0') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say paragraph break'
                                INVOCATION_LIST_SAY_NT'paragraph break'
                                    INVOCATION_NT'paragraph break'
                            INVOCATION_LIST_NT'make no decision'
                                INVOCATION_NT'make no decision'
                    INVOCATION_LIST_NT'let index be count'
                        INVOCATION_NT'let index be count'
                            NEW_LOCAL_CONTEXT_NT'index'
                                UNKNOWN_NT'index'
                            RVALUE_CONTEXT_NT'count'
                                LOCAL_VARIABLE_NT'count'(tmp_0;number)
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'repeat with patient running through marked for listing other people who are infected'
                            INVOCATION_NT'repeat with patient running through marked for listing other people who are infected'
                                NEW_LOCAL_CONTEXT_NT'patient'
                                    UNKNOWN_NT'patient'
                                RVALUE_CONTEXT_NT'marked for listing other people who are infected'
                                    CONSTANT_NT'marked for listing other people who are infected'-description of people
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if index is count'
                                    INVOCATION_NT'if index is count'
                                        CONDITION_CONTEXT_NT'index is count'
                                            TEST_PROPOSITION_NT'index is count'(test: [ is('index', 'count') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if count is 1 and the patient is the last person named'
                                            INVOCATION_NT'if count is 1 and the patient is the last person named'
                                                CONDITION_CONTEXT_NT'count is 1 and the patient is the last person named'
                                                    LOGICAL_AND_NT'count is 1 and the patient is the last person named'
                                                        TEST_PROPOSITION_NT'count is 1'(test: [ is('count', '1') ])
                                                        TEST_PROPOSITION_NT'the patient is the last person named'(test: [ is('the patient', 'the last person named') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say "[The patient as pronoun]"'
                                                INVOCATION_LIST_SAY_NT'the patient as pronoun'
                                                    [1/2] INVOCATION_NT'the patient as pronoun'/1
                                                        RVALUE_CONTEXT_NT'patient'
                                                            LOCAL_VARIABLE_NT'patient'(tmp_2;person)
                                                    [2/2] INVOCATION_NT'the patient as pronoun'
                                                        RVALUE_CONTEXT_NT'patient'
                                                            LOCAL_VARIABLE_NT'patient'(tmp_2;person)
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "[The patient]"'
                                                INVOCATION_LIST_SAY_NT'the patient'
                                                    INVOCATION_NT'the patient'
                                                        RVALUE_CONTEXT_NT'patient'
                                                            LOCAL_VARIABLE_NT'patient'(tmp_2;person)
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT'say "[the patient]"'
                                        INVOCATION_LIST_SAY_NT'the patient'
                                            INVOCATION_NT'the patient'
                                                RVALUE_CONTEXT_NT'patient'
                                                    LOCAL_VARIABLE_NT'patient'(tmp_2;person)
                            CODE_BLOCK_NT'say " [looks as though dipped in for index] [infection color of the patient]"'
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "'
                                        RVALUE_CONTEXT_NT'" "'
                                            CONSTANT_NT'" "'-text
                                INVOCATION_LIST_SAY_NT'looks as though dipped in for index'
                                    INVOCATION_NT'looks as though dipped in for index'
                                        RVALUE_CONTEXT_NT'index'
                                            LOCAL_VARIABLE_NT'index'(tmp_1;number)
                                INVOCATION_LIST_SAY_NT'" "'
                                    INVOCATION_NT'" "'
                                        RVALUE_CONTEXT_NT'" "'
                                            CONSTANT_NT'" "'-text
                                INVOCATION_LIST_SAY_NT'infection color of the patient'
                                    INVOCATION_NT'infection color of the patient'
                                        RVALUE_CONTEXT_NT'infection color of the patient'
                                            PROPERTY_VALUE_NT'infection color of the patient'
                                                CONSTANT_NT-infection colors valued property
                                                LOCAL_VARIABLE_NT'the patient'(tmp_2;person)
                            INVOCATION_LIST_NT'decrement index'
                                INVOCATION_NT'decrement index'
                                    LVALUE_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(tmp_1;number)
                            INVOCATION_LIST_NT'make delimiter index of count'
                                INVOCATION_NT'make delimiter index of count'
                                    RVALUE_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(tmp_1;number)
                                    RVALUE_CONTEXT_NT'count'
                                        LOCAL_VARIABLE_NT'count'(tmp_0;number)
                    INVOCATION_LIST_NT'clear marked people'
                        INVOCATION_NT'clear marked people'
            ROUTINE_NT'to say ( named character - a man ) as pronoun'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is 1'
                            INVOCATION_NT'if group size is 1'
                                CONDITION_CONTEXT_NT'group size is 1'
                                    TEST_PROPOSITION_NT'group size is 1'(test: [ is('group size', '1') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "He"'
                                INVOCATION_LIST_SAY_NT'"He"'
                                    INVOCATION_NT'"He"'
                                        RVALUE_CONTEXT_NT'"He"'
                                            CONSTANT_NT'"He"'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is 2'
                            INVOCATION_NT'if group size is 2'
                                CONDITION_CONTEXT_NT'group size is 2'
                                    TEST_PROPOSITION_NT'group size is 2'(test: [ is('group size', '2') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The latter"'
                                INVOCATION_LIST_SAY_NT'"The latter"'
                                    INVOCATION_NT'"The latter"'
                                        RVALUE_CONTEXT_NT'"The latter"'
                                            CONSTANT_NT'"The latter"'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is greater than 2'
                            INVOCATION_NT'if group size is greater than 2'
                                CONDITION_CONTEXT_NT'group size is greater than 2'
                                    TEST_PROPOSITION_NT'group size is greater than 2'(test: [ greater-than('group size', '2') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The last"'
                                INVOCATION_LIST_SAY_NT'"The last"'
                                    INVOCATION_NT'"The last"'
                                        RVALUE_CONTEXT_NT'"The last"'
                                            CONSTANT_NT'"The last"'-text
            ROUTINE_NT'to say ( named character - a woman ) as pronoun'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is 1'
                            INVOCATION_NT'if group size is 1'
                                CONDITION_CONTEXT_NT'group size is 1'
                                    TEST_PROPOSITION_NT'group size is 1'(test: [ is('group size', '1') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "She"'
                                INVOCATION_LIST_SAY_NT'"She"'
                                    INVOCATION_NT'"She"'
                                        RVALUE_CONTEXT_NT'"She"'
                                            CONSTANT_NT'"She"'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is 2'
                            INVOCATION_NT'if group size is 2'
                                CONDITION_CONTEXT_NT'group size is 2'
                                    TEST_PROPOSITION_NT'group size is 2'(test: [ is('group size', '2') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The latter"'
                                INVOCATION_LIST_SAY_NT'"The latter"'
                                    INVOCATION_NT'"The latter"'
                                        RVALUE_CONTEXT_NT'"The latter"'
                                            CONSTANT_NT'"The latter"'-text
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if group size is greater than 2'
                            INVOCATION_NT'if group size is greater than 2'
                                CONDITION_CONTEXT_NT'group size is greater than 2'
                                    TEST_PROPOSITION_NT'group size is greater than 2'(test: [ greater-than('group size', '2') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say "The last"'
                                INVOCATION_LIST_SAY_NT'"The last"'
                                    INVOCATION_NT'"The last"'
                                        RVALUE_CONTEXT_NT'"The last"'
                                            CONSTANT_NT'"The last"'-text
            ROUTINE_NT'to say looks as though dipped in for ( index - a number )'
                CODE_BLOCK_NT
                    INVOCATION_LIST_NT'let divider be the number of filled rows in the table of dipping phrases'
                        INVOCATION_NT'let divider be the number of filled rows in the table of dipping phrases'
                            NEW_LOCAL_CONTEXT_NT'divider'
                                UNKNOWN_NT'divider'
                            RVALUE_CONTEXT_NT'number of filled rows in the table of dipping phrases'
                                PHRASE_TO_DECIDE_VALUE_NT'number of filled rows in the table of dipping phrases'
                                    INVOCATION_LIST_NT'number of filled rows in the table of dipping phrases'
                                        INVOCATION_NT'number of filled rows in the table of dipping phrases'
                                            RVALUE_CONTEXT_NT'table of dipping phrases'
                                                CONSTANT_NT'table of dipping phrases'-table name
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if index is greater than 4'
                            INVOCATION_NT'if index is greater than 4'
                                CONDITION_CONTEXT_NT'index is greater than 4'
                                    TEST_PROPOSITION_NT'index is greater than 4'(test: [ greater-than('index', '4') ])
                        CODE_BLOCK_NT
                            INVOCATION_LIST_NT'let index be the remainder after dividing index by divider'
                                INVOCATION_NT'let index be the remainder after dividing index by divider'
                                    LVALUE_LOCAL_CONTEXT_NT'index'
                                        LOCAL_VARIABLE_NT'index'(t_0;number)
                                    RVALUE_CONTEXT_NT'remainder after dividing index by divider'
                                        PHRASE_TO_DECIDE_VALUE_NT'remainder after dividing index by divider'
                                            INVOCATION_LIST_NT'remainder after dividing index by divider'
                                                INVOCATION_NT'remainder after dividing index by divider'
                                                    RVALUE_CONTEXT_NT'index'
                                                        LOCAL_VARIABLE_NT'index'(t_0;number)
                                                    RVALUE_CONTEXT_NT'divider'
                                                        LOCAL_VARIABLE_NT'divider'(tmp_0;number)
                    INVOCATION_LIST_NT'choose row index in the table of dipping phrases'
                        INVOCATION_NT'choose row index in the table of dipping phrases'
                            RVALUE_CONTEXT_NT'index'
                                LOCAL_VARIABLE_NT'index'(t_0;number)
                            RVALUE_CONTEXT_NT'table of dipping phrases'
                                CONSTANT_NT'table of dipping phrases'-table name
                    CODE_BLOCK_NT'say dipping entry'
                        INVOCATION_LIST_SAY_NT'dipping entry'
                            INVOCATION_NT'dipping entry'
                                RVALUE_CONTEXT_NT'dipping entry'
                                    TABLE_ENTRY_NT'dipping entry'
                                        CONSTANT_NT-nothing valued table column
            TABLE_NT'table of dipping phrases dipping "looks as though dipped in" "could have been rolling in" "has a bad case of" "suffers from" "contracted a virulent"'
            SENTENCE_NT'a door is usually scenery'
                AVERB_NT'is usually'
                COMMON_NOUN_NT'door'
                ADJECTIVE_NT'scenery'
            ROUTINE_NT'to make delimiter ( index - a number ) of ( count - a number ) , continuing or halting'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if index is 0'
                            INVOCATION_NT'if index is 0'
                                CONDITION_CONTEXT_NT'index is 0'
                                    TEST_PROPOSITION_NT'index is 0'(test: [ is('index', '0') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if continuing'
                                    INVOCATION_NT'if continuing'
                                        CONDITION_CONTEXT_NT'continuing'
                                            TEST_PHRASE_OPTION_NT'continuing'
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT'say ". [run paragraph on]"'
                                        INVOCATION_LIST_SAY_NT'". "'
                                            INVOCATION_NT'". "'
                                                RVALUE_CONTEXT_NT'". "'
                                                    CONSTANT_NT'". "'-text
                                        INVOCATION_LIST_SAY_NT'run paragraph on'
                                            INVOCATION_NT'run paragraph on'
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT'say "."'
                                        INVOCATION_LIST_SAY_NT'"."'
                                            INVOCATION_NT'"."'
                                                RVALUE_CONTEXT_NT'"."'
                                                    CONSTANT_NT'"."'-text
                        CODE_BLOCK_NT'otherwise'
                            CODE_BLOCK_NT
                                INVOCATION_LIST_NT'if index is 1'
                                    INVOCATION_NT'if index is 1'
                                        CONDITION_CONTEXT_NT'index is 1'
                                            TEST_PROPOSITION_NT'index is 1'(test: [ is('index', '1') ])
                                CODE_BLOCK_NT
                                    CODE_BLOCK_NT
                                        INVOCATION_LIST_NT'if count is 2'
                                            INVOCATION_NT'if count is 2'
                                                CONDITION_CONTEXT_NT'count is 2'
                                                    TEST_PROPOSITION_NT'count is 2'(test: [ is('count', '2') ])
                                        CODE_BLOCK_NT
                                            CODE_BLOCK_NT'say " and "'
                                                INVOCATION_LIST_SAY_NT'" and "'
                                                    INVOCATION_NT'" and "'
                                                        RVALUE_CONTEXT_NT'" and "'
                                                            CONSTANT_NT'" and "'-text
                                        CODE_BLOCK_NT'otherwise'
                                            CODE_BLOCK_NT'say "[optional comma] and "'
                                                INVOCATION_LIST_SAY_NT'optional comma'
                                                    INVOCATION_NT'optional comma'
                                                INVOCATION_LIST_SAY_NT'" and "'
                                                    INVOCATION_NT'" and "'
                                                        RVALUE_CONTEXT_NT'" and "'
                                                            CONSTANT_NT'" and "'-text
                                CODE_BLOCK_NT'otherwise'
                                    CODE_BLOCK_NT'say ", "'
                                        INVOCATION_LIST_SAY_NT'", "'
                                            INVOCATION_NT'", "'
                                                RVALUE_CONTEXT_NT'", "'
                                                    CONSTANT_NT'", "'-text
            ROUTINE_NT'to say optional comma'
                CODE_BLOCK_NT
                    CODE_BLOCK_NT
                        INVOCATION_LIST_NT'if the serial comma option is active'
                            INVOCATION_NT'if the serial comma option is active'
                                CONDITION_CONTEXT_NT'serial comma option is active'
                                    TEST_PROPOSITION_NT'serial comma option is active'(test: [ A11'active'('serial comma option') ])
                        CODE_BLOCK_NT
                            CODE_BLOCK_NT'say ","'
                                INVOCATION_LIST_SAY_NT'","'
                                    INVOCATION_NT'","'
                                        RVALUE_CONTEXT_NT'","'
                                            CONSTANT_NT'","'-text
            SENTENCE_NT'test me with go to cold comfort / z / z / z / z / ask vanessa for french vanilla / ask vanessa for chocolate / ask vanessa about flavors / ask vanessa for chocolate chocolate chip'
                AVERB_NT'test'
                PROPER_NOUN_NT'me'
                PROPER_NOUN_NT'go to cold comfort / z / z / z / z / ask vanessa for french vanilla / ask vanessa for chocolate / ask vanessa about flavors / ask vanessa for chocolate chocolate chip'
            SENTENCE_NT'use fast route-finding'
                AVERB_NT'use'
                PROPER_NOUN_NT'fast route-finding'
    HEADING_NT'invented sentences' (level 0)
        SENTENCE_NT'external file understood is a external file which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'external file understood'
            COMMON_NOUN_NT'external file which varies'
        SENTENCE_NT'scene understood is a scene which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'scene understood'
            COMMON_NOUN_NT'scene which varies'
        SENTENCE_NT'figure name understood is a figure name which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'figure name understood'
            COMMON_NOUN_NT'figure name which varies'
        SENTENCE_NT'sound name understood is a sound name which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'sound name understood'
            COMMON_NOUN_NT'sound name which varies'
        SENTENCE_NT'natural language understood is a natural language which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'natural language understood'
            COMMON_NOUN_NT'natural language which varies'
        SENTENCE_NT'grammatical tense understood is a grammatical tense which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'grammatical tense understood'
            COMMON_NOUN_NT'grammatical tense which varies'
        SENTENCE_NT'narrative viewpoint understood is a narrative viewpoint which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'narrative viewpoint understood'
            COMMON_NOUN_NT'narrative viewpoint which varies'
        SENTENCE_NT'grammatical case understood is a grammatical case which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'grammatical case understood'
            COMMON_NOUN_NT'grammatical case which varies'
        SENTENCE_NT'grammatical gender understood is a grammatical gender which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'grammatical gender understood'
            COMMON_NOUN_NT'grammatical gender which varies'
        SENTENCE_NT'command parser error understood is a command parser error which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'command parser error understood'
            COMMON_NOUN_NT'command parser error which varies'
        SENTENCE_NT'infection color understood is a infection color which varies'
            AVERB_NT'is'
            PROPER_NOUN_NT'infection color understood'
            COMMON_NOUN_NT'infection color which varies'
